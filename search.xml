<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>计算机组成原理-读书笔记</title>
    <url>/2020/05/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>读书笔记</category>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络原理-读书笔记</title>
    <url>/2020/05/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="先学习计算机组成原理和操作系统…">先学习计算机组成原理和操作系统…</h2>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>network</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>openwrt的编译及其使用</title>
    <url>/2020/05/02/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/openwrt%E7%9A%84%E7%BC%96%E8%AF%91%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>基于coolsnowwolf大神源码编译,<a href="https://github.com/coolsnowwolf/lede" target="_blank" rel="noopener">源码地址</a></p>
</blockquote>
<h2 id="一、-前言">一、 前言</h2>
<p>自己编译需要linux知识、装系统的知识和能够全局的访问外网，而折腾openwrt需要部分计算机网络原理的知识。</p>
<p>如果不能自己编译，可以下载<a href="https://github.com/coolsnowwolf/lede/releases" target="_blank" rel="noopener">Lean大编译好的固件</a></p>
<p>也可以下载<a href="https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh" target="_blank" rel="noopener">eSir大佬基于L大源码编译的固件。</a></p>
<h2 id="二、-编译">二、 编译</h2>
<h3 id="2-1-搭建编译环境">2.1 搭建编译环境</h3>
<p>首先打开Lean大的GitHub项目地址，仔细阅读说明，其实很简单，直接复制黏贴命令行就行。</p>
<p>然后虚拟机安装<a href="http://releases.ubuntu.com/18.04/ubuntu-18.04.4-live-server-amd64.iso.torrent?_ga=2.101048392.870121867.1588423003-365844835.1588423003" target="_blank" rel="noopener">Ubuntu 18 LTS x64 Server版本</a></p>
<p>然后ssh登录Ubuntu，后面命令需要全局外网来进行编译了。</p>
<p>输入如下命令行</p>
<div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 命令行输入</span>
sudo apt-get update

<span class="hljs-comment"># 然后输入</span>
sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf

<span class="hljs-comment"># 下载好源代码</span>
git <span class="hljs-built_in">clone</span> https://github.com/coolsnowwolf/lede
<span class="hljs-comment"># 进入目录</span>
<span class="hljs-built_in">cd</span> lede

./scripts/feeds update -a

./scripts/feeds install -a

make menuconfig</code></pre></div>
<h3 id="2-2-定制配置">2.2 定制配置</h3>
<p><code>make menuconfig</code>后，会有一个编译管理器，在里面可以选择型号、OP功能组件，需要用到方向键、回车键、空格键。方向键是移动光标，回车键是确认，空格键是选择（在选项框按下空格键，*号是编译进固件，M是编译但是不编译进固件）</p>
<p>下面的假如没有说明，就是默认选项。</p>
<p>①. Target System（Atheros AR7xxx…）<br>
选择CPU型号,看你的CPU架构，软路由或虚拟机一般是是X86<br>
②. Subtarget(x86_64)<br>
选择多少位系统，默认64即可<br>
③. Target Profile<br>
选择路由型号，默认即可<br>
④. Target Images<br>
勾选上squashfs（new）即可，然后其他默认<br>
⑤. Base system<br>
选择默认的dnsmasq-full即可,另外2个dnsmasq切记不要选。<br>
⑥. Administration<br>
根据你的需求选择。<br>
⑦. LuCI-&gt;Applications<br>
整个系统精华所在，非常重要，<a id="常用配置">常用配置如下</a></p>
<div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 选择LuCI常用配置 添加常用插件应用：</span>
<span class="hljs-comment">#-----------------------------------------------------------------------------------------</span>
LuCI ---&gt; Applications ---&gt; luci-app-accesscontrol  <span class="hljs-comment">#访问时间控制</span>
LuCI ---&gt; Applications ---&gt; luci-app-adbyby-plus   <span class="hljs-comment">#广告屏蔽大师Plus +</span>
LuCI ---&gt; Applications ---&gt; luci-app-aria2 <span class="hljs-comment"># Aria2下载工具</span>
LuCI ---&gt; Applications ---&gt; luci-app-arpbind  <span class="hljs-comment">#IP/MAC绑定</span>
LuCI ---&gt; Applications ---&gt; luci-app-autoreboot  <span class="hljs-comment">#支持计划重启</span>
LuCI ---&gt; Applications ---&gt; luci-app-ddns   <span class="hljs-comment">#动态域名 DNS（集成阿里DDNS客户端）</span>
LuCI ---&gt; Applications ---&gt; luci-app-filetransfer  <span class="hljs-comment">#文件传输（可web安装ipk包）</span>
LuCI ---&gt; Applications ---&gt; luci-app-firewall   <span class="hljs-comment">#添加防火墙</span>
LuCI ---&gt; Applications ---&gt; luci-app-hd-idle  <span class="hljs-comment">#硬盘休眠</span>
LuCI ---&gt; Applications ---&gt; luci-app-flowoffload  <span class="hljs-comment">#Turbo ACC网络加速（集成FLOW,BBR,NAT,DNS...</span>
LuCI ---&gt; Applications ---&gt; luci-app-sfe  <span class="hljs-comment">#Turbo ACC网络加速（flowoffload二选一）</span>
LuCI ---&gt; Applications ---&gt; luci-app-frpc   <span class="hljs-comment">#内网穿透 Frp</span>
LuCI ---&gt; Applications ---&gt; luci-app-ipsec-virtual**d  <span class="hljs-comment">#virtual**服务器 IPSec</span>
LuCI ---&gt; Applications ---&gt; luci-app-mwan3   <span class="hljs-comment">#MWAN3负载均衡</span>
LuCI ---&gt; Applications ---&gt; luci-app-mwan3helper   <span class="hljs-comment">#MWAN3分流助手</span>
LuCI ---&gt; Applications ---&gt; luci-app-nlbwmon   <span class="hljs-comment">#网络带宽监视器</span>
LuCI ---&gt; Applications ---&gt; luci-app-ramfree  <span class="hljs-comment">#释放内存</span>
LuCI ---&gt; Applications ---&gt; luci-app-samba   <span class="hljs-comment">#网络共享（Samba）</span>
LuCI ---&gt; Applications ---&gt; luci-app-sqm  <span class="hljs-comment">#流量智能队列管理（QOS）</span>
<span class="hljs-comment">#-------------------------------------------------------------------------------------------</span>
LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料-plus   <span class="hljs-comment">#乳酸菌饮料低调上网Plus+</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include s<span class="hljs-_">-s</span> v贰瑞 Plugin  <span class="hljs-comment">#SS v贰瑞插件   *</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include v贰瑞  <span class="hljs-comment">#v贰瑞代理</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include Trojan  <span class="hljs-comment">#Trojan代理</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include red---socks2  <span class="hljs-comment">#red---socks2代理   *</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include Kcptun  <span class="hljs-comment">#Kcptun加速</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include 违禁软件 Server  <span class="hljs-comment">#乳酸菌饮料服务器</span>
<span class="hljs-comment">#-------------------------------------------------------------------------------------------</span>
LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料server-python  <span class="hljs-comment">#软件的Python服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-syncdial  <span class="hljs-comment">#多拨虚拟网卡（原macvlan）</span>
LuCI ---&gt; Applications ---&gt; luci-app-unblockmusic  <span class="hljs-comment">#解锁网易云灰色歌曲3合1新版本</span>
    UnblockNeteaseMusic Golang Version  <span class="hljs-comment">#Golang版本   *</span>
    UnblockNeteaseMusic NodeJS Version  <span class="hljs-comment">#NodeJS版本   *</span>
LuCI ---&gt; Applications ---&gt; luci-app-upnp   <span class="hljs-comment">#通用即插即用UPnP（端口自动转发）</span>
LuCI ---&gt; Applications ---&gt; luci-app-vlmcsd  <span class="hljs-comment">#KMS服务器激活win和office</span>
LuCI ---&gt; Applications ---&gt; luci-app-vsftpd  <span class="hljs-comment">#FTP服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-wifischedule  <span class="hljs-comment">#WiFi 计划</span>
LuCI ---&gt; Applications ---&gt; luci-app-wirele违禁软件egdb  <span class="hljs-comment">#WiFi无线</span>
LuCI ---&gt; Applications ---&gt; luci-app-wol   <span class="hljs-comment">#WOL网络唤醒</span>
LuCI ---&gt; Applications ---&gt; luci-app-wrtbwmon  <span class="hljs-comment">#实时流量监测</span>
LuCI ---&gt; Applications ---&gt; luci-app-xlnetacc  <span class="hljs-comment">#迅雷快鸟</span>
LuCI ---&gt; Applications ---&gt; luci-app-zerotier  <span class="hljs-comment">#ZeroTier内网穿透</span>
Extra packages  ---&gt;  ipv6helper  <span class="hljs-comment">#支持 ipv6</span>
Utilities  ---&gt;  open-vm-tools  <span class="hljs-comment">#打开适用于VMware的VM Tools</span></code></pre></div>
<p><a href="#2-4-全部LuCI-gt-Applications配置">查看详细LuCI配置</a></p>
<p>⑧. Network-&gt;Download Manager<br>
选择ariaNG<br>
⑨. Utilities-&gt;Editors<br>
1. 选择默认编辑器-&gt;nano，习惯vim的选择vim<br>
2. 打开适用于VMware的VM Tools<br>
Utilities  —&gt;  open-vm-tools<br>
⑩. 如果要支持 iPv6，勾选下面的选项：<br>
Extra packages  —&gt;  ipv6helper  （选定这个后下面几项自动选择了）<br>
Network  —&gt;  odhcp6c<br>
Network  —&gt;  odhcpd-ipv6only<br>
LuCI  —&gt;  Protocols  —&gt;  luci-proto-ipv6<br>
LuCI  —&gt;  Protocols  —&gt;  luci-proto-ppp</p>
<p>离开选择功能界面，EXIT-&gt;YES</p>
<div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment">#  下载dl库</span>
make -j8 download V=s

<span class="hljs-comment"># 进行编译，初次编译看配置，可能会4小时以上，以后会快一点</span>
<span class="hljs-comment"># （-j1 后面是线程数。第一次编译推荐用单线程）即可开始编译你要的固件了。</span>
make -j1 V=s</code></pre></div>
<h3 id="2-3-功能不满意？二次编译">2.3 功能不满意？二次编译</h3>
<div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 编译完成后清除之前的编译作业（使用这个命令前，记得把编译好的固件备份出来，不然会被删除掉，切记）</span>
make clean

<span class="hljs-comment"># 进入LEDE目录</span>
<span class="hljs-built_in">cd</span> lede

<span class="hljs-comment"># 同步更新大雕源码</span>
git pull

<span class="hljs-comment"># 更新Feeds</span>
./scripts/feeds update -a &amp;&amp; ./scripts/feeds install -a

<span class="hljs-comment"># 清除编译配置和缓存</span>
rm -rf ./tmp &amp;&amp; rm -rf .config

<span class="hljs-comment"># 进入编译配置菜单</span>
make menuconfig

<span class="hljs-comment"># 开始编译 n=线程数+1，例如4线程的I5填-j5</span>
make -jn V=99</code></pre></div>
<h3 id="2-4-全部LuCI-Applications配置">2.4 全部LuCI-&gt;Applications配置</h3>
<p><a href="#常用配置">返回常用LuCI配置</a></p>
<div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 以下是详细配置：               注：应用后面标记 “ * ” 为最近新添加</span>
<span class="hljs-comment"># -----------------------------------------------------------------------------------------</span>
LuCI ---&gt; Applications ---&gt; luci-app-accesscontrol  <span class="hljs-comment">#访问时间控制</span>
LuCI ---&gt; Applications ---&gt; luci-app-acme  <span class="hljs-comment">#ACME自动化证书管理环境</span>
LuCI ---&gt; Applications ---&gt; luci-app-adblock   <span class="hljs-comment">#ADB广告过滤</span>
LuCI ---&gt; Applications ---&gt; luci-app-adbyby-plus  <span class="hljs-comment">#广告屏蔽大师Plus +</span>
LuCI ---&gt; Applications ---&gt; luci-app-adbyby   <span class="hljs-comment">#广告过滤大师（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-adkill   <span class="hljs-comment">#广告过滤（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-advanced-reboot  <span class="hljs-comment">#Linksys高级重启</span>
LuCI ---&gt; Applications ---&gt; luci-app-ahcp  <span class="hljs-comment">#支持AHCPd</span>
LuCI ---&gt; Applications ---&gt; luci-app-airplay2   <span class="hljs-comment">#AirPlay音乐推流(安卓+IOS)   *</span>
LuCI ---&gt; Applications ---&gt; luci-app-aliddns   <span class="hljs-comment">#阿里DDNS客户端（已弃，集成至ddns）</span>
LuCI ---&gt; Applications ---&gt; luci-app-amule  <span class="hljs-comment">#aMule下载工具</span>
LuCI ---&gt; Applications ---&gt; luci-app-aria2 <span class="hljs-comment"># Aria2下载工具</span>
LuCI ---&gt; Applications ---&gt; luci-app-arpbind  <span class="hljs-comment">#IP/MAC绑定</span>
LuCI ---&gt; Applications ---&gt; luci-app-asterisk  <span class="hljs-comment">#支持Asterisk电话服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-attendedsysupgrade  <span class="hljs-comment">#固件更新升级相关</span>
LuCI ---&gt; Applications ---&gt; luci-app-autoreboot  <span class="hljs-comment">#支持计划重启</span>
LuCI ---&gt; Applications ---&gt; luci-app-baidupcs-web  <span class="hljs-comment">#百度网盘管理</span>
LuCI ---&gt; Applications ---&gt; luci-app-bcp38  <span class="hljs-comment">#BCP38网络入口过滤（不确定）</span>
LuCI ---&gt; Applications ---&gt; luci-app-bird1-ipv4  <span class="hljs-comment">#对Bird1-ipv4的支持</span>
LuCI ---&gt; Applications ---&gt; luci-app-bird1-ipv6  <span class="hljs-comment">#对Bird1-ipv6的支持</span>
LuCI ---&gt; Applications ---&gt; luci-app-bird4   <span class="hljs-comment">#Bird 4（未知）（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-bird6   <span class="hljs-comment">#Bird 6（未知）（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-bmx6  <span class="hljs-comment">#BMX6路由协议</span>
LuCI ---&gt; Applications ---&gt; luci-app-bmx7  <span class="hljs-comment">#BMX7路由协议</span>
LuCI ---&gt; Applications ---&gt; luci-app-caldav  <span class="hljs-comment">#联系人（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-cifs-mount   <span class="hljs-comment">#CIFS/SMB挂载设置   *</span>
LuCI ---&gt; Applications ---&gt; luci-app-cifsd  <span class="hljs-comment">#CIFS/SMB网络共享   *</span>
LuCI ---&gt; Applications ---&gt; luci-app-cjdns  <span class="hljs-comment">#加密IPV6网络相关</span>
LuCI ---&gt; Applications ---&gt; luci-app-clamav  <span class="hljs-comment">#ClamAV杀毒软件</span>
LuCI ---&gt; Applications ---&gt; luci-app-commands   <span class="hljs-comment">#Shell命令模块</span>
LuCI ---&gt; Applications ---&gt; luci-app-cshark   <span class="hljs-comment">#CloudShark捕获工具</span>
LuCI ---&gt; Applications ---&gt; luci-app-ddns   <span class="hljs-comment">#动态域名 DNS（集成阿里DDNS客户端）</span>
LuCI ---&gt; Applications ---&gt; luci-app-diag-core   <span class="hljs-comment">#core诊断工具</span>
LuCI ---&gt; Applications ---&gt; luci-app-diskman   <span class="hljs-comment">#磁盘管理工具   *</span>
    luci-app-diskman ---&gt; Include btrfs-progs   <span class="hljs-comment">#新型的写时复制 (COW)</span>
    luci-app-diskman ---&gt; Include lsblk   <span class="hljs-comment">#lsblk命令 用于列出所有可用块设备的信息</span>
    luci-app-diskman ---&gt; Include mdadm   <span class="hljs-comment">#mdadm命令 用于创建、管理、监控RAID设备的工具</span>
    luci-app-diskman ---&gt; Include kmod-md-raid456   <span class="hljs-comment">#RAID 4,5,6 驱动程序模块</span>
    luci-app-diskman ---&gt; Include kmod-md-linear   <span class="hljs-comment">#RAID 驱动程序模块</span>
LuCI ---&gt; Applications ---&gt; luci-app-dnscrypt-proxy  <span class="hljs-comment">#DNSCrypt解决DNS污染</span>
LuCI ---&gt; Applications ---&gt; luci-app-dnsforwarder  <span class="hljs-comment">#DNSForwarder防DNS污染</span>
LuCI ---&gt; Applications ---&gt; luci-app-dnspod  <span class="hljs-comment">#DNSPod动态域名解析（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-dockerman  <span class="hljs-comment">#Docker容器</span>
LuCI ---&gt; Applications ---&gt; luci-app-dump1090  <span class="hljs-comment">#民航无线频率（不确定）</span>
LuCI ---&gt; Applications ---&gt; luci-app-dynapoint  <span class="hljs-comment">#DynaPoint（未知）</span>
LuCI ---&gt; Applications ---&gt; luci-app-e2guardian   <span class="hljs-comment">#Web内容过滤器</span>
LuCI ---&gt; Applications ---&gt; luci-app-familycloud   <span class="hljs-comment">#家庭云盘</span>
LuCI ---&gt; Applications ---&gt; luci-app-filetransfer  <span class="hljs-comment">#文件传输（可web安装ipk包）</span>
LuCI ---&gt; Applications ---&gt; luci-app-firewall   <span class="hljs-comment">#添加防火墙</span>
LuCI ---&gt; Applications ---&gt; luci-app-flowoffload  <span class="hljs-comment">#Turbo ACC网络加速（集成FLOW,BBR,NAT,DNS...</span>
LuCI ---&gt; Applications ---&gt; luci-app-freifunk-diagnostics   <span class="hljs-comment">#freifunk组件 诊断（未知）</span>
LuCI ---&gt; Applications ---&gt; luci-app-freifunk-policyrouting  <span class="hljs-comment">#freifunk组件 策略路由（未知）</span>
LuCI ---&gt; Applications ---&gt; luci-app-freifunk-widgets  <span class="hljs-comment">#freifunk组件 索引（未知）</span>
LuCI ---&gt; Applications ---&gt; luci-app-frpc   <span class="hljs-comment">#内网穿透Frp客户端</span>
LuCI ---&gt; Applications ---&gt; luci-app-frps   <span class="hljs-comment">#内网穿透Frp服务端   *</span>
LuCI ---&gt; Applications ---&gt; luci-app-fwknopd  <span class="hljs-comment">#Firewall Knock Operator服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-guest-wifi   <span class="hljs-comment">#WiFi访客网络</span>
LuCI ---&gt; Applications ---&gt; luci-app-gfwlist   <span class="hljs-comment">#GFW域名列表（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-haproxy-tcp   <span class="hljs-comment">#HAProxy负载均衡-TCP</span>
LuCI ---&gt; Applications ---&gt; luci-app-hd-idle  <span class="hljs-comment">#硬盘休眠</span>
LuCI ---&gt; Applications ---&gt; luci-app-hnet  <span class="hljs-comment">#Homenet Status家庭网络控制协议</span>
LuCI ---&gt; Applications ---&gt; luci-app-ipsec-virtual**d  <span class="hljs-comment">#virtual**服务器 IPSec</span>
LuCI ---&gt; Applications ---&gt; luci-app-kodexplorer  <span class="hljs-comment">#KOD可道云私人网盘</span>
LuCI ---&gt; Applications ---&gt; luci-app-kooldns  <span class="hljs-comment">#virtual**服务器 ddns替代方案（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-koolproxy  <span class="hljs-comment">#KP去广告（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-lxc   <span class="hljs-comment">#LXC容器管理</span>
LuCI ---&gt; Applications ---&gt; luci-app-meshwizard <span class="hljs-comment">#网络设置向导</span>
LuCI ---&gt; Applications ---&gt; luci-app-minidlna   <span class="hljs-comment">#完全兼容DLNA / UPnP-AV客户端的服务器软件</span>
LuCI ---&gt; Applications ---&gt; luci-app-mjpg-streamer   <span class="hljs-comment">#兼容Linux-UVC的摄像头程序</span>
LuCI ---&gt; Applications ---&gt; luci-app-mtwifi  <span class="hljs-comment">#MTWiFi驱动的支持</span>
LuCI ---&gt; Applications ---&gt; luci-app-mmc-over-gpio   <span class="hljs-comment">#添加SD卡操作界面（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-multiwan   <span class="hljs-comment">#多拨虚拟网卡（已弃，移至syncdial）</span>
LuCI ---&gt; Applications ---&gt; luci-app-mwan   <span class="hljs-comment">#MWAN负载均衡（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-music-remote-center   <span class="hljs-comment">#DAAP遥控音乐服务器   *</span>
LuCI ---&gt; Applications ---&gt; luci-app-mwan3   <span class="hljs-comment">#MWAN3负载均衡</span>
LuCI ---&gt; Applications ---&gt; luci-app-mwan3helper   <span class="hljs-comment">#MWAN3分流助手</span>
LuCI ---&gt; Applications ---&gt; luci-app-n2n_v2   <span class="hljs-comment">#N2N内网穿透 N2N v2 virtual**服务</span>
LuCI ---&gt; Applications ---&gt; luci-app-netdata  <span class="hljs-comment">#Netdata实时监控（图表）</span>
LuCI ---&gt; Applications ---&gt; luci-app-nfs   <span class="hljs-comment">#NFS网络共享   *</span>
LuCI ---&gt; Applications ---&gt; luci-app-nft-qos  <span class="hljs-comment">#QOS流控 Nftables版</span>
LuCI ---&gt; Applications ---&gt; luci-app-ngrokc  <span class="hljs-comment">#Ngrok 内网穿透（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-nlbwmon   <span class="hljs-comment">#网络带宽监视器</span>
LuCI ---&gt; Applications ---&gt; luci-app-noddos  <span class="hljs-comment">#NodDOS Clients 阻止DDoS攻击</span>
LuCI ---&gt; Applications ---&gt; luci-app-ntpc   <span class="hljs-comment">#NTP时间同步服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-ocserv  <span class="hljs-comment">#OpenConnect virtual**服务</span>
LuCI ---&gt; Applications ---&gt; luci-app-olsr  <span class="hljs-comment">#OLSR配置和状态模块</span>
LuCI ---&gt; Applications ---&gt; luci-app-olsr-services  <span class="hljs-comment">#OLSR服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-olsr-viz   <span class="hljs-comment">#OLSR可视化</span>
LuCI ---&gt; Applications ---&gt; luci-app-openvirtual**  <span class="hljs-comment">#Openvirtual**客户端</span>
LuCI ---&gt; Applications ---&gt; luci-app-openvirtual**-server  <span class="hljs-comment">#易于使用的Openvirtual**服务器 Web-UI</span>
LuCI ---&gt; Applications ---&gt; luci-app-oscam   <span class="hljs-comment">#OSCAM服务器（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-p910nd   <span class="hljs-comment">#打印服务器模块</span>
LuCI ---&gt; Applications ---&gt; luci-app-pagekitec   <span class="hljs-comment">#Pagekite内网穿透客户端</span>
LuCI ---&gt; Applications ---&gt; luci-app-polipo  <span class="hljs-comment">#Polipo代理(是一个小型且快速的网页缓存代理)</span>
LuCI ---&gt; Applications ---&gt; luci-app-pppoe-relay  <span class="hljs-comment">#PPPoE NAT穿透 点对点协议（PPP）</span>
LuCI ---&gt; Applications ---&gt; luci-app-p p t p-server  <span class="hljs-comment">#virtual**服务器 p p t p（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-privoxy  <span class="hljs-comment">#Privoxy网络代理(带过滤无缓存)</span>
LuCI ---&gt; Applications ---&gt; luci-app-qbittorrent  <span class="hljs-comment">#BT下载工具（qBittorrent）</span>
LuCI ---&gt; Applications ---&gt; luci-app-qos   <span class="hljs-comment">#流量服务质量(QoS)流控</span>
LuCI ---&gt; Applications ---&gt; luci-app-radicale   <span class="hljs-comment">#CalDAV/CardDAV同步工具</span>
LuCI ---&gt; Applications ---&gt; luci-app-ramfree  <span class="hljs-comment">#释放内存</span>
LuCI ---&gt; Applications ---&gt; luci-app-rp-pppoe-server  <span class="hljs-comment">#Roaring Penguin PPPoE Server 服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-samba   <span class="hljs-comment">#网络共享（Samba）</span>
LuCI ---&gt; Applications ---&gt; luci-app-samba4   <span class="hljs-comment">#网络共享（Samba4）</span>
LuCI ---&gt; Applications ---&gt; luci-app-sfe  <span class="hljs-comment">#Turbo ACC网络加速（flowoffload二选一）</span>
LuCI ---&gt; Applications ---&gt; luci-app<span class="hljs-_">-s</span><span class="hljs-_">-s</span>   <span class="hljs-comment">#SS低调上网（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app<span class="hljs-_">-s</span><span class="hljs-_">-s</span>-libes  <span class="hljs-comment">#SS-libev服务端</span>
LuCI ---&gt; Applications ---&gt; luci-app-shairplay  <span class="hljs-comment">#支持AirPlay功能</span>
LuCI ---&gt; Applications ---&gt; luci-app-siitwizard  <span class="hljs-comment">#SIIT配置向导  SIIT-Wizzard</span>
LuCI ---&gt; Applications ---&gt; luci-app-simple-adblock  <span class="hljs-comment">#简单的广告拦截</span>
LuCI ---&gt; Applications ---&gt; luci-app-smartdns  <span class="hljs-comment">#SmartDNS本地服务器（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-softethervirtual**  <span class="hljs-comment">#SoftEther virtual**服务器  NAT穿透</span>
LuCI ---&gt; Applications ---&gt; luci-app-splash  <span class="hljs-comment">#Client-Splash是无线MESH网络的一个热点认证系统</span>
LuCI ---&gt; Applications ---&gt; luci-app-sqm  <span class="hljs-comment">#流量智能队列管理（QOS）</span>
LuCI ---&gt; Applications ---&gt; luci-app-squid   <span class="hljs-comment">#Squid代理服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料-plus   <span class="hljs-comment">#乳酸菌饮料低调上网Plus+</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include s<span class="hljs-_">-s</span> New Version  <span class="hljs-comment">#新SS代理（已弃）</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include s<span class="hljs-_">-s</span> Simple-obfs Plugin  <span class="hljs-comment">#simple-obfs简单混淆工具（已弃）</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include s<span class="hljs-_">-s</span> v贰瑞 Plugin  <span class="hljs-comment">#SS v贰瑞插件   *</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include v贰瑞  <span class="hljs-comment">#v贰瑞代理</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include Trojan  <span class="hljs-comment">#Trojan代理</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include red---socks2  <span class="hljs-comment">#red---socks2代理   *</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include Kcptun  <span class="hljs-comment">#Kcptun加速</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include 违禁软件 Server  <span class="hljs-comment">#乳酸菌饮料服务器</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include DNS2SOCKS  <span class="hljs-comment">#DNS服务器（已弃）</span>
    luci-app-乳酸菌饮料-plus ---&gt; Include 违禁软件 Socks and Tunnel（已弃）
    luci-app-乳酸菌饮料-plus ---&gt; Include Socks Server  <span class="hljs-comment">#socks代理服务器（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料-pro  <span class="hljs-comment">#乳酸菌饮料-Pro（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料server-python  <span class="hljs-comment">#违禁软件 Python服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-statistics  <span class="hljs-comment">#流量监控工具</span>
LuCI ---&gt; Applications ---&gt; luci-app-syncdial  <span class="hljs-comment">#多拨虚拟网卡（原macvlan）</span>
LuCI ---&gt; Applications ---&gt; luci-app-tinyproxy  <span class="hljs-comment">#Tinyproxy是 HTTP(S)代理服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-transmission   <span class="hljs-comment">#BT下载工具</span>
LuCI ---&gt; Applications ---&gt; luci-app-travelmate  <span class="hljs-comment">#旅行路由器</span>
LuCI ---&gt; Applications ---&gt; luci-app-ttyd   <span class="hljs-comment">#网页终端命令行</span>
LuCI ---&gt; Applications ---&gt; luci-app-udpxy  <span class="hljs-comment">#udpxy做组播服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-uhttpd  <span class="hljs-comment">#uHTTPd Web服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-unblockmusic  <span class="hljs-comment">#解锁网易云灰色歌曲3合1新版本</span>
    UnblockNeteaseMusic Golang Version  <span class="hljs-comment">#Golang版本   *</span>
    UnblockNeteaseMusic NodeJS Version  <span class="hljs-comment">#NodeJS版本   *</span>
LuCI ---&gt; Applications ---&gt; luci-app-unblockneteasemusic-go  <span class="hljs-comment">#解除网易云音乐（合并）</span>
LuCI ---&gt; Applications ---&gt; luci-app-unblockneteasemusic-mini  <span class="hljs-comment">#解除网易云音乐（合并）</span>
LuCI ---&gt; Applications ---&gt; luci-app-unbound  <span class="hljs-comment">#Unbound DNS解析器</span>
LuCI ---&gt; Applications ---&gt; luci-app-upnp   <span class="hljs-comment">#通用即插即用UPnP（端口自动转发）</span>
LuCI ---&gt; Applications ---&gt; luci-app-usb-printer   <span class="hljs-comment">#USB 打印服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-v贰瑞-server   <span class="hljs-comment">#v贰瑞 服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-v贰瑞-pro  <span class="hljs-comment">#v贰瑞透明代理（已弃，集成乳酸菌饮料）</span>
LuCI ---&gt; Applications ---&gt; luci-app-verysync  <span class="hljs-comment">#微力同步</span>
LuCI ---&gt; Applications ---&gt; luci-app-vlmcsd  <span class="hljs-comment">#KMS服务器设置</span>
LuCI ---&gt; Applications ---&gt; luci-app-vnstat   <span class="hljs-comment">#vnStat网络监控（图表）</span>
LuCI ---&gt; Applications ---&gt; luci-app-virtual**bypass  <span class="hljs-comment">#virtual** BypassWebUI  绕过virtual**设置</span>
LuCI ---&gt; Applications ---&gt; luci-app-vsftpd  <span class="hljs-comment">#FTP服务器</span>
LuCI ---&gt; Applications ---&gt; luci-app-watchcat  <span class="hljs-comment">#断网检测功能与定时重启</span>
LuCI ---&gt; Applications ---&gt; luci-app-webadmin  <span class="hljs-comment">#Web管理页面设置</span>
LuCI ---&gt; Applications ---&gt; luci-app-webshell  <span class="hljs-comment">#网页命令行终端（已弃）</span>
LuCI ---&gt; Applications ---&gt; luci-app-wifischedule  <span class="hljs-comment">#WiFi 计划</span>
LuCI ---&gt; Applications ---&gt; luci-app-wireguard  <span class="hljs-comment">#virtual**服务器 WireGuard状态</span>
LuCI ---&gt; Applications ---&gt; luci-app-wirele违禁软件egdb  <span class="hljs-comment">#WiFi无线</span>
LuCI ---&gt; Applications ---&gt; luci-app-wol   <span class="hljs-comment">#WOL网络唤醒</span>
LuCI ---&gt; Applications ---&gt; luci-app-wrtbwmon  <span class="hljs-comment">#实时流量监测</span>
LuCI ---&gt; Applications ---&gt; luci-app-xlnetacc  <span class="hljs-comment">#迅雷快鸟</span>
LuCI ---&gt; Applications ---&gt; luci-app-zerotier  <span class="hljs-comment">#ZeroTier内网穿透</span></code></pre></div>
<h3 id="2-5-自动编译">2.5 自动编译</h3>
<p><a href="https://github.com/esirplayground/AutoBuild-OpenWrt" target="_blank" rel="noopener">项目地址</a></p>
<p>自定义编译前需要在编译环境中运行<code>./scripts/diffconfig.sh &gt; diffconfig</code></p>
<p>然后把<code>/lede/diffconfig</code>里内容替换项目里面相应的.config文件内容。</p>
<p><a href="https://www.youtube.com/watch?v=9YO7nxNry-4" target="_blank" rel="noopener">自动编译视频教程</a></p>
<h2 id="三、-使用">三、 使用</h2>
<h3 id="3-1-初始设置">3.1 初始设置</h3>
<p>winscp登录Ubuntu系统，在<code>/home/you_name/lede/bin/targets/x86/64/</code>下面</p>
<p><code>openwrt-x86-x64-combined-squashfs.img</code>就是我们需要的镜像文件了</p>
<p>把镜像文件下载下来，通过<code>winPE</code>的U盘安装烧录到路由器硬盘里，也可以烧写到U盘里，通过U盘启动</p>
<p>网线连接到路由器的Lan口，默认登陆IP <code>192.168.1.1</code>, 密码 <code>password</code>，进行配置(也可以通过PUTTY连接，端口22)</p>
<div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 修改LAN口固定IP</span>
vi /etc/config/network
<span class="hljs-comment"># option ipaddr可以改为你想要管理路由的IP地址，比如'192.168.10.1'</span>

<span class="hljs-comment"># 重启网络</span>
/etc/init.d/network restart</code></pre></div>
<p>网页地址栏输入<code>192.168.10.1</code>，进行配置。</p>
<p>接线配置可参考如下2张图片</p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E5%9B%BE.png" srcset="/img/loading.gif" alt="家庭网络结构图"></p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%9B%BE.png" srcset="/img/loading.gif" alt="家庭网络配置图"></p>
<h3 id="3-2-openwrt内部配置">3.2 openwrt内部配置</h3>
<ol>
<li>
<p>网络 -&gt; 接口 -&gt; LAN口修改 -&gt; IPv4地址 修改为访问路由的地址 -&gt; 网关为路由ip地址 -&gt;<strong>DNS</strong>填写114.114.114.114,119.29.29.29,223.5.5.5和<strong>你的网络运营商提供的DNS</strong>(可以在命令行中用ping ip来查看哪个DNS访问的最快) -&gt; IPv6分配长度停用 -&gt; 旁路由关闭DHCP，主路由开启动态DHCP</p>
</li>
<li>
<p>Turbo ACC 网络加速设置 -&gt; 除了HWNAT硬件加速全选 -&gt; 上游 DNS 服务器(国内) -&gt; 查询填入你所在的网络运营商所提供的DNS<a href="https://ip.cn/dns.html" target="_blank" rel="noopener">查询地址1</a>、<a href="https://cloud.tencent.com/developer/article/1352604" target="_blank" rel="noopener">查询地址2</a></p>
</li>
<li>
<p>旁路由不用设置wan口，主路由自行设置wan口，不用ipv6，最好关闭ipv6.</p>
</li>
</ol>
<h2 id="参考">参考</h2>
<p><a href="https://github.com/coolsnowwolf/lede" target="_blank" rel="noopener">Lean大源码地址</a></p>
<p><a href="https://www.right.com.cn/forum/thread-3682029-1-1.html" target="_blank" rel="noopener">OpenWrt 编译 LuCI -&gt; Applications 添加插件应用说明</a></p>
<p><a href="https://www.youtube.com/watch?v=ZMh-AvQV8n0&amp;t=57s" target="_blank" rel="noopener">How to build your own Openwrt firmware</a></p>
<p><a href="https://www.youtube.com/watch?v=zy16nR8MlX0" target="_blank" rel="noopener">openwrt基础设置</a></p>
]]></content>
      <categories>
        <category>linux</category>
        <category>openwrt</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>docker学习笔记</title>
    <url>/2020/04/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://docs.docker.com/" target="_blank" rel="noopener">docker官方文档</a></p>
</blockquote>
<h2 id="一、-安装及加速">一、 安装及加速</h2>
<p>安装适用于ubuntu,其他系统请参考官方文档。基础配置及加速通用。</p>
<div class="hljs"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装（根据系统自行选择方式）</span>
sudo apt install docker.io
<span class="hljs-meta">
#</span><span class="bash"> 查看版本</span>
docker -v
<span class="hljs-meta">
#</span><span class="bash"> 配置docker镜像加速</span>
<span class="hljs-meta">#</span><span class="bash"> 阿里云镜像获取地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，登陆后，左侧菜单选中镜像加速器就可以看到你的专属地址了</span>
<span class="hljs-meta">#</span><span class="bash"> 按照页面的操作文档配置加速</span>
sudo mkdir -p /etc/docker

sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'
&#123;
  "registry-mirrors": ["https://改为你的加速器地址.mirror.aliyuncs.com"]
&#125;
EOF

sudo systemctl daemon-reload

sudo systemctl restart docker
<span class="hljs-meta">
#</span><span class="bash"> 下载 Docker 图形化界面 portainer</span>
sudo docker pull portainer/portainer
<span class="hljs-meta">
#</span><span class="bash"> 创建 portainer 容器</span>
sudo docker volume create portainer_data
<span class="hljs-meta">
#</span><span class="bash"> 运行 portainer(需要9000端口没有被占用，如被占用，自行更换第一个宿主机端口)</span>
sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
<span class="hljs-meta">
#</span><span class="bash"> 浏览器输入ip:9000登录图形管理界面</span></code></pre></div>
<h2 id="二、-基础命令">二、 基础命令</h2>
<h3 id="2-1-安装、启动及停止">2.1 安装、启动及停止</h3>
<div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 安装命令：</span>
apt-get install docker.io

<span class="hljs-comment"># 关闭docker服务，命令：</span>
service docker stop

<span class="hljs-comment"># 启动docker 服务，命令：</span>
service docker start</code></pre></div>
<h3 id="2-2-常用命令">2.2 常用命令</h3>
<div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 查看docker版本，命令：</span>
docker version

<span class="hljs-comment"># 搜索可用docker镜像，命令：如搜索mysql</span>
docker search mysql

<span class="hljs-comment"># 下载容器镜像，命令：如拉取mysql镜像</span>
docker pull mysql

<span class="hljs-comment"># 查看docker镜像及镜像id，命令：</span>
docker images

<span class="hljs-comment"># 运行一个容器，命令：基于mysql镜像运行一个容器(需要3310端口没有被占用，如被占用，自行更换第一个宿主机端口)</span>
docker run --name firstMysql -p 3310:3306 -e MYSQL\_ROOT\_PASSWORD=123456 -d mysql</code></pre></div>
<p><a href="#3-1-docker-run命令参数">跳转到docker run的命令参数详解</a></p>
<div class="hljs"><pre><code class="hljs SHELL"><span class="hljs-meta">#</span><span class="bash"> 查看在运行的容器，及容器id，命令：</span>
docker ps
<span class="hljs-meta">
#</span><span class="bash"> 查看所有容器（包括未运行的容器）及容器id，命令:</span>
docker ps -a
<span class="hljs-meta">
#</span><span class="bash"> 停止一个容器，命令：</span>
docker stop 容器id
<span class="hljs-meta">
#</span><span class="bash"> 删除一个容器（正在运行的容器，必须先停止才能删除），命令：</span>
docker rm 容器id
<span class="hljs-meta">
#</span><span class="bash"> 删除一个镜像（镜像下有容器，必须先删除容器，才能删除镜像），命令：</span>
docker rmi 镜像id
<span class="hljs-meta">
#</span><span class="bash"> 启动所有容器，命令：</span>
docker start $(docker ps -a | awk '&#123; print $1&#125;' | tail -n +2)
<span class="hljs-meta">
#</span><span class="bash"> 关闭所有容器，命令：</span>
docker stop $(docker ps -a | awk '&#123; print $1&#125;' | tail -n +2)
<span class="hljs-meta">
#</span><span class="bash"> 删除所有容器，命令：</span>
docker rm $(docker ps -a | awk '&#123; print $1&#125;' | tail -n +2)
<span class="hljs-meta">
#</span><span class="bash"> 删除所有镜像（先关闭所有的容器，再删除所有容器，才能删除所有镜像），命令：</span>
docker rmi $(docker images | awk '&#123;print $3&#125;' |tail -n +2)
<span class="hljs-meta">
#</span><span class="bash"> 查看镜像详细信息，命令：</span>
docker inspect 镜像id
<span class="hljs-meta">
#</span><span class="bash"> 进入运行的容器修改相关参数</span>
docker exec -it 容器名称 bash
<span class="hljs-meta">#</span><span class="bash"> 其中bash为进入容器后执行的命令。</span>
<span class="hljs-meta">#</span><span class="bash"> 其中  -d :分离模式: 在后台运行</span>
<span class="hljs-meta">#</span><span class="bash">       -i :即使没有附加也保持STDIN 打开</span>
<span class="hljs-meta">#</span><span class="bash">       -t :分配一个伪终端</span></code></pre></div>
<h2 id="三、-进阶命令">三、 进阶命令</h2>
<h3 id="3-1-docker-run命令参数">3.1 docker run命令参数</h3>
<div class="hljs"><pre><code class="hljs SH">Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

-d, --detach=<span class="hljs-literal">false</span>     指定容器运行于前台还是后台，默认为<span class="hljs-literal">false</span>
-i, --interactive=<span class="hljs-literal">false</span>    打开STDIN，用于控制台交互
-t, --tty=<span class="hljs-literal">false</span>            分配tty设备，该可以支持终端登录，默认为<span class="hljs-literal">false</span>
-u, --user=<span class="hljs-string">""</span>              指定容器的用户
-a, --attach=[]            登录容器（必须是以docker run -d启动的容器）  
-w, --workdir=<span class="hljs-string">""</span>           指定容器的工作目录
-c, --cpu-shares=0         设置容器CPU权重，在CPU共享场景使用
-e, --env=[]               指定环境变量，容器中可以使用该环境变量
-m, --memory=<span class="hljs-string">""</span>            指定容器的内存上限
-P, --publish-all=<span class="hljs-literal">false</span>    指定容器暴露的端口
-p, --publish=[]           指定容器暴露的端口
-h, --hostname=<span class="hljs-string">""</span>          指定容器的主机名
-v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录
--volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录  
--<span class="hljs-built_in">cap</span>-add=[]               添加权限，权限清单详见：http://linux.die.net/man/7/capabilities
--<span class="hljs-built_in">cap</span>-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/7/capabilities
--cidfile=<span class="hljs-string">""</span>               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法
--cpuset=<span class="hljs-string">""</span>                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU
--device=[]                添加主机设备给容器，相当于设备直通
--dns=[]                   指定容器的dns服务器
--dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件
--entrypoint=<span class="hljs-string">""</span>            覆盖image的入口点
--env-file=[]              指定环境变量文件，文件格式为每行一个环境变量
--expose=[]                指定容器暴露的端口，即修改镜像的暴露端口
--link=[]                  指定容器间的关联，使用其他容器的IP、env等信息
--lxc-conf=[]              指定容器的配置文件，只有在指定--<span class="hljs-built_in">exec</span>-driver=lxc时使用
--name=<span class="hljs-string">""</span>                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字
--net=<span class="hljs-string">"bridge"</span>             容器网络设置:  
                              bridge 使用docker daemon指定的网桥
                              host    //容器使用主机的网络
                              container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源
                              none 容器使用自己的网络（类似--net=bridge），但是不进行配置
--privileged=<span class="hljs-literal">false</span>         指定容器是否为特权容器，特权容器拥有所有的capabilities
--restart=<span class="hljs-string">"no"</span>             指定容器停止后的重启策略:  
                              no：容器退出时不重启
                              on-failure：容器故障退出（返回值非零）时重启
                              always：容器退出时总是重启
--rm=<span class="hljs-literal">false</span>                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)
--sig-proxy=<span class="hljs-literal">true</span>           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</code></pre></div>
<p>未完待续。。。</p>
<h2 id="参考">参考</h2>
<p><a href="https://odcn.top/2019/02/13/2529/" target="_blank" rel="noopener">Docker run命令参数中文介绍</a></p>
<p><a href="https://www.youtube.com/watch?v=lb5wFaquqas" target="_blank" rel="noopener">Play with Docker，second round，hands on</a></p>
<p><a href="https://www.youtube.com/redirect?event=video_description&amp;v=lb5wFaquqas&amp;redir_token=-EHPdTiyLT7PYyQ3D_AubsTWnFd8MTU4ODUwMTg2OUAxNTg4NDE1NDY5&amp;q=https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh" target="_blank" rel="noopener">eSirPG on googleDrive with play openwrt</a></p>
]]></content>
      <categories>
        <category>linux</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>DNF搭建说明</title>
    <url>/2020/04/21/games/DNF/DNF%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="cf4d79f8080e00e62a1f5d9204241abd1780aef513f86e6b7d66c3eceff11478"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>DNF</category>
      </categories>
      <tags>
        <tag>DNF</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>按键精灵语法</title>
    <url>/2020/04/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5/%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>windows或者Android(需要root权限)下按键精灵有时候写一些简单的脚本还是挺好用的。没有最好的语言，只有最适合的工具。在此记录下常用的基本语法。</p>
<h2 id="句柄及后台运行">句柄及后台运行</h2>
<p>句柄可以获取后台窗口的类名或者标题，以达到获取坐标或后台运行脚本的目的。<br>
<strong>后台只支持部分窗口，以实际测试为准。</strong></p>
<p>句柄的类名或者标题，可以用按键精灵自带的抓抓工具抓取。</p>
<div class="hljs"><pre><code class="hljs vb">//声明窗口句柄变量，窗口大小变量
Dim Hwnd, sRect
//声明数组
Dim Array

//Plugin.Window.Find()--命令功能-查找窗口类名或者标题
//下面这句是查找窗口类名("Notepad")或者标题(0),返回找到的句柄Hwnd
Hwnd = Plugin.Window.Find("Notepad","0")

//调试输出句柄-功能-在调试窗口打印文字
TracePrint Hwnd

//该函数返回窗口大小
sRect = Plugin.Window.GetWindowRect(Hwnd)

//窗口大小转为数组，可以获得窗口左上角的坐标
//语法 Split(expression[, delimiter[, count[, start]]])
//字符串为sRect，分割方式‘|’
Array = Split(sRect, "|")

//左上角坐标的X,Y轴坐标
TracePrint Array(0)
TracePrint Array(1)

//下拉型自定义变量
//格式: UserVar 变量名=DropList&#123;选项0:值0|选项1:值1|选项2:值2&#125;=默认显示的选项编号 &#123;注释&#125;
//解释:这个命令预先设定多个变量值，用户可在基面通过下拉方式进行选择
//示例
UserVar Var1=DropList&#123;"低于10%时补血":0.1|"低于20%时补血":0.2|"低于30%时补血":0.3&#125;=2 "自动补血设置"

//左键点击5次
LeftClick 5

//Function函数
Function increase(x,y)
    If v = 1 Then
        //键盘输入enter
        KeyPress "Enter", 1
    Else
        //鼠标移动到指定坐标
        MoveTo Array(0)+406, Array(1)+342
    End If
End Function

//调用函数或子程序
call Function_name

//LeftClick 左键单击
//命令功能 向后台窗口句柄送一个鼠标左键单击 (注意：只支持部分窗口，以实际测试为准。)
Call Plugin.Bkgnd.LeftClick(Hwnd, 550, 262)
//后台输入按键enter，13是按键码，可以在按键精灵中与实际按键互相转换
Call Plugin.Bkgnd.KeyPress(Hwnd, 13)

//添加延迟，单位毫秒ms
Delay 500

//For循环
For i=0 To 5
    For j=0 TO 7
        Call increase(x, y)
        x = x + 30
    Next
    x = 488
    y = y + 30
Next</code></pre></div>
<h2 id="带GUI的脚本">带GUI的脚本</h2>
<p>先要在界面画出窗体（form）及各种输入框，下拉框，标签，按钮等。。。</p>
<p>下面是QQ后台刷屏脚本，先画4个标签，4个输入框，1个下拉框，1个按钮</p>
<div class="hljs"><pre><code class="hljs VB">//事件：form是窗体，load是加载，定义下拉框属性
Event Form1.Load
    //窗体1中的ComboBox1下拉框1有是和否2个选择
    Form1.ComboBox1.List = "是|否"
    //窗体下拉框初始选项
    Form1.ComboBox1.ListIndex = 0
End Event

//定义窗体1的按钮1的点击触发事件
Event Form1.Button1.Click
    //窗体1的输入框1的文本赋予变量title
    title = Form1.InputBox1.Text
    //找到QQ窗口句柄
    Hwnd=Plugin.Window.Find("TXGuiFoundation",title)
    t = 1
    //窗体1的输入框4的文本转化为int赋予变量times
    times = Int(Form1.InputBox4.Text)
    //数组真假赋予subfix
    subfix=Array(true,false)
    text = Form1.InputBox2.Text
    rate = Form1.InputBox3.Text
    //while循环
    While t &lt;= times OR times = 0
        If subfix(Form1.ComboBox1.ListIndex) Then
            //后台发送文本加自增计数变量
            Call Plugin.Bkgnd.SendString(Hwnd,text &amp; t)
        Else
            //后台发送文本text
            Call Plugin.Bkgnd.SendString(Hwnd,text)
        End If
        //输入enter
        Call Plugin.Bkgnd.KeyPress(Hwnd, 13)
        t = t + 1
        //发送事件间隔为变量rate
        Delay rate
    Wend
End Event</code></pre></div>
<h2 id="多线程">多线程</h2>
<div class="hljs"><pre><code class="hljs VB">DimEnv T1
DimEnv T2
Call start_1
Sub start_1
    //线程1
    T1 = BeginThread(thread1)
    T2 = BeginThread(thread2)
    BeginThread Stop
End Sub
Sub thread1
    name_1 = "测试1"
    t_1 = 0
    rate_1 = 1000
    times_1 = 100
    subfix_1=true
    test_1 = "测试"
    //while循环
    Hwnd_1 = Plugin.Window.Find(0, name_1)
    //当输入t=-1时则循环发送消息至按终止键为止
    While t_1 &lt;= times_1 OR times_1 = 0
        If subfix_1 Then
            //后台发送文本加自增计数变量
            Call Plugin.Bkgnd.SendString(Hwnd_1,test_1 &amp; t_1)
        Else
            //后台发送文本test_1
            Call Plugin.Bkgnd.SendString(Hwnd_1,test_1)
        End If
        Call Plugin.Bkgnd.KeyPress(Hwnd_1, 13)
        t_1 = t_1 + 1
        //发送事件间隔为变量rate_1
        Delay rate_1
    Wend
End Sub
Sub thread2
    name_2 = "测试2"
    t_2 = 0
    rate_2 = 1000
    times_2 = 100
    subfix_2=true
    test_2 = "测试"
    //while循环
    Hwnd_2 = Plugin.Window.Find(0,name_2)
    While t_2 &lt;= times_2 OR times_2 = 0
        If subfix_2 Then
            //后台发送文本加自增计数变量
            Call Plugin.Bkgnd.SendString(Hwnd_2,test_2 &amp; t_2)
        Else
            //后台发送文本test_2
            Call Plugin.Bkgnd.SendString(Hwnd_2,test_2)
        End If
        Call Plugin.Bkgnd.KeyPress(Hwnd_2, 13)
        t_2 = t_2 + 1
        //发送事件间隔为变量rate_2
        Delay rate_2
    Wend
End Sub
Sub stop
    s_1 = "A"
    s_2 = "Z"
    running = True
    While True
        //监听按键
        s = Waitkey
        If s = Asc(s_1) and running  Then
            PauseThread T1
            running = False
        ElseIf s = Asc(s_1) and not running Then
            PauseThread T1
            running = True
        ElseIf s = Asc(s_2) Then
            StopThread T2
        End If
    Wend
End Sub</code></pre></div>
<h2 id="一个简单的脚本示例">一个简单的脚本示例</h2>
<div class="hljs"><pre><code class="hljs VB">//声明窗口句柄变量
Dim Hwnd, sRect
Dim Array
//下面这句是查找窗口类名("Notepad")或者标题(0),返回找到的句柄Hwnd
Hwnd = Plugin.Window.Find("DNF Taiwan","DNF Taiwan")
//调试输出
TracePrint Hwnd
//返回窗口大小
sRect = Plugin.Window.GetWindowRect(Hwnd)
//窗口大小转为数组
Array = Split(sRect, "|")
TracePrint Array(0)
TracePrint Array(1)

//功能选择
UserVar Var0 = DropList&#123;"自动增幅":"1"|"娃娃机":"2"|"先娃娃机再增幅":"3"|"鼠标左键连点":"4"|"自动锻造":"5"&#125;=3 "功能选择"

//选择窗口，选择力量还是智力
UserVar Var1 = DropList&#123;"增幅力量":"1"|"增幅智力":"2"&#125;=0 "选择增幅力量还是智力"
//选择窗口，选择15还是13增幅券
UserVar Var2 = DropList&#123;"13":13|"15":15&#125;=1 "选择13还是15增幅券"
//设置鼠标点击延迟
UserVar Yanshi=50 "两次点击的时间间隔（毫秒）"

//强打增幅1件装备
Function increase(x,y)
    //使用强打书
    KeyPress "1", 1
    //延迟
    Delay 200
    //点击力量增幅
    If var1 = 1 Then
        MoveTo Array(0)+406, Array(1)+300
        LeftClick 1
        //点击智力增幅
    Else
        MoveTo Array(0)+406, Array(1)+342
        LeftClick 1
    End If
    Delay 200
    //点击使用
    MoveTo Array(0)+374, Array(1)+391
    LeftClick 1
    Delay 200
    //点击第一格装备
    MoveTo Array(0)+x, Array(1)+y
    LeftClick 1
    Delay 200
    //确定
    KeyPress "Enter", 1
    Delay 200
    KeyPress "Enter", 1
    Delay 200
    //使用增幅书
    KeyPress "2", 1
    Delay 200
    //点击第一格装备
    MoveTo Array(0)+x, Array(1)+y
    LeftClick 1
    Delay 200
    //确定
    KeyPress "Enter", 1
    Delay 200
    If var2 = 13 Then
        KeyPress "Enter", 1
        Delay 200
    End If
    //一格装备完成
End Function

//增幅装备栏
Function zengfu()
    //主程序
    x = 488
    y = 288
    For i=0 To 5
        For j=0 TO 7
            Call increase(x, y)
            x = x + 30
        Next
        x = 488
        y = y + 30
    Next
End Function

//抽娃娃机
Function wawaji()
    For temp=0 TO 46
        //投币
        MoveTo Array(0)+152, Array(1)+402
        LeftClick 1
        Delay 200
        //确认
        MoveTo Array(0)+358, Array(1)+345
        LeftClick 1
        Delay 200
        //停止
        MoveTo Array(0)+200, Array(1)+402
        LeftClick 1
        Delay 5500
        //确定
        KeyPress "Enter", 1
        Delay 200
    Next
End Function

//抽娃娃机和增幅装备栏
Function wawajiandzengfu()
    Call wawaji()
    KeyPress "Esc", 1
    Delay 200
    KeyPress "i", 1
    Delay 200
    Call zengfu()
End Function

//鼠标左击
Function autoLeftClick()
    While True
        //说明：按照一定频率反复点击鼠标左键
        //1秒 = 1000毫秒
        LeftClick 1
        Delay Yanshi
    Wend
End Function


//自动锻造
Function autoDuanZao()
    SetSimMode 0
    While True
        //拖拽第一格装备到锻造炉
        MoveTo Array(0) + 488, Array(1) + 288
        LeftDownS 1
        Delay 200
        MoveTo Array(0) + 331, Array(1) + 295
        Delay 200
        LeftUpS 1
        //确定
        MoveTo Array(0) + 336, Array(1) + 375
        Delay 200
        LeftClick 1
        //延迟
        Delay 6500
        //确定
        KeyPress "Enter", 1
        Delay 200
    Wend
End Function

//主程序
If Var0 = 1 Then
    Call zengfu()
ElseIf Var0 = 2 Then
    Call wawaji()
ElseIf Var0 = 3 Then
    Call wawajiandzengfu()
ElseIf Var0 = 4 Then
    Call autoLeftClick()
ElseIf  Var0 = 5 Then
    Call autoDuanZao()
End If</code></pre></div>
<h2 id="参考视频">参考视频</h2>
<p><a href="https://space.bilibili.com/3196036/channel/detail?cid=100704" target="_blank" rel="noopener">https://space.bilibili.com/3196036/channel/detail?cid=100704</a></p>
]]></content>
      <tags>
        <tag>按键精灵</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL语言学习笔记</title>
    <url>/2020/04/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/SQL%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一、SQL简介">一、SQL简介</h2>
<h3 id="1-1-SQL是什么">1.1 SQL是什么</h3>
<blockquote>
<p>SQL是结构化查询语言，它是一种用于存储，操作和检索存储在关系数据库中的数据的计算机语言</p>
</blockquote>
<p>关系型数据库可以通过E-R图转换而来，E-R图中矩形是实体集，菱形是关系，椭圆是属性。</p>
<h3 id="1-2-SQL命令">1.2 SQL命令</h3>
<h4 id="1）-DDL——数据定义语言">1） DDL——数据定义语言</h4>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>CREATE</td>
<td>用于在数据库中创建新表，表视图或其他对象</td>
</tr>
<tr>
<td>2</td>
<td>ALTER</td>
<td>用于修改现有数据库对象，例如：表</td>
</tr>
<tr>
<td>3</td>
<td>DROP</td>
<td>用于删除整个表，数据库中的表或其他对象的视图</td>
</tr>
</tbody>
</table>
<h4 id="2）-DML——数据操纵语言">2） DML——数据操纵语言</h4>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>SELECT</td>
<td>从一个或多个表中检索某些记录</td>
</tr>
<tr>
<td>2</td>
<td>INSERT</td>
<td>创建一条记录</td>
</tr>
<tr>
<td>3</td>
<td>UPDATE</td>
<td>用于修改(更新)记录</td>
</tr>
<tr>
<td>4</td>
<td>DELETE</td>
<td>删除记录</td>
</tr>
</tbody>
</table>
<h4 id="3）-DCL——数据控制语言">3） DCL——数据控制语言</h4>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>GRANT</td>
<td>为用户提供权限</td>
</tr>
<tr>
<td>2</td>
<td>REVOKE</td>
<td>撤销用户授予的权限</td>
</tr>
</tbody>
</table>
<h3 id="1-3-数据的完整性">1.3 数据的完整性</h3>
<p>每个RDBMS(关系型数据库)都存在以下类别的数据完整性</p>
<ul>
<li>
<p>实体完整性 - 表中没有重复的行。</p>
</li>
<li>
<p>域完整性 - 通过限制值的类型，格式或范围，为给定列强制执行有效条目。</p>
</li>
<li>
<p>参照完整性 - 其他记录使用(引用)导致这些行无法删除。</p>
</li>
<li>
<p>用户定义的完整性 - 实施一些不属于实体，域或参照完整性的特定业务规则</p>
</li>
</ul>
<h3 id="1-4-SQL约束">1.4 SQL约束</h3>
<ul>
<li>
<p><a href="https://www.yiibai.com/sql/sql-not-null.html" target="_blank" rel="noopener">NOT NULL约束</a> - 确保列不能具有NULL值。</p>
</li>
<li>
<p><a href="https://www.yiibai.com/sql/sql-default.html" target="_blank" rel="noopener">默认值约束</a> - 在未指定列时为列提供默认值。</p>
</li>
<li>
<p><a href="https://www.yiibai.com/sql/sql-unique.html" target="_blank" rel="noopener">唯一约束</a> - 确保列中的所有值都不同。</p>
</li>
<li>
<p><a href="https://www.yiibai.com/sql/sql-primary-key.html" target="_blank" rel="noopener">主键</a> - 唯一标识数据库表中的每一行/记录。</p>
</li>
<li>
<p><a href="https://www.yiibai.com/sql/sql-foreign-key.html" target="_blank" rel="noopener">外键</a> - 唯一标识任何其他数据库表中的行/记录。</p>
</li>
<li>
<p><a href="https://www.yiibai.com/sql/sql-check.html" target="_blank" rel="noopener">检查约束</a> - CHECK约束确保列中的所有值都满足特定条件。</p>
</li>
<li>
<p><a href="https://www.yiibai.com/sql/sql-index.html" target="_blank" rel="noopener">索引</a> - 用于非常快速地从数据库创建和检索数据。</p>
</li>
</ul>
<h3 id="1-5-数据库范式">1.5 数据库范式</h3>
<h4 id="1）-第一范式（1NF）">1） 第一范式（1NF）</h4>
<ol>
<li>在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。</li>
<li>所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式（1NF）中表的每一行只包含一个实例的信息。</li>
<li>简而言之，第一范式就是无重复的列。</li>
</ol>
<h4 id="2）-第二范式（2NF）">2） 第二范式（2NF）</h4>
<ol>
<li>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被唯一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。这个唯一属性列被称为主关键字或主键、主码。</li>
<li>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。</li>
<li>简而言之，第二范式就是非主属性<strong>部分依赖于主关键字</strong>。</li>
</ol>
<h4 id="3）-第三范式（3NF）">3） 第三范式（3NF）</h4>
<ol>
<li>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</li>
<li>例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。</li>
<li>简而言之，第三范式就是属性<strong>不依赖于其它非主属性</strong>。</li>
</ol>
<h3 id="1-6-运算符">1.6 运算符</h3>
<p>假设变量a的值是：10，变量b的值是：20</p>
<h4 id="1）-SQL算术运算符">1） SQL算术运算符</h4>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>加法，执行加法运算。</td>
<td>a + b = 30</td>
</tr>
<tr>
<td>-</td>
<td>减法，执行减法运算。</td>
<td>a + b = -10</td>
</tr>
<tr>
<td>*</td>
<td>除法，执行除法运算</td>
<td>a * b = 200</td>
</tr>
<tr>
<td>/</td>
<td>用左操作数除右手操作数</td>
<td>b / a = 2</td>
</tr>
<tr>
<td>%</td>
<td>用左手操作数除左手操作数并返回余数</td>
<td>b % a = 0</td>
</tr>
</tbody>
</table>
<h3 id="1-7-在MySQL中创建表的示例">1.7 在MySQL中创建表的示例</h3>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">default</span> <span class="hljs-built_in">character</span> <span class="hljs-keyword">set</span> utf8 <span class="hljs-keyword">collate</span> utf8_general_ci;

<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> regions (
    region_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,
    region_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">25</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>
);

<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> countries (
    country_id <span class="hljs-built_in">CHAR</span> (<span class="hljs-number">2</span>) PRIMARY <span class="hljs-keyword">KEY</span>,
    country_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,
    region_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (region_id) <span class="hljs-keyword">REFERENCES</span> regions (region_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span>
);

<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> locations (
    location_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,
    street_address <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,
    postal_code <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">12</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,
    city <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    state_province <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">25</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,
    country_id <span class="hljs-built_in">CHAR</span> (<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (country_id) <span class="hljs-keyword">REFERENCES</span> countries (country_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span>
);

<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> jobs (
    job_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,
    job_title <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">35</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    min_salary <span class="hljs-built_in">DECIMAL</span> (<span class="hljs-number">8</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,
    max_salary <span class="hljs-built_in">DECIMAL</span> (<span class="hljs-number">8</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>
);

<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> departments (
    department_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,
    department_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    location_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (location_id) <span class="hljs-keyword">REFERENCES</span> locations (location_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span>
);

<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employees (
    employee_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,
    first_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,
    last_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">25</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    email <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    phone_number <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,
    hire_date <span class="hljs-built_in">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    job_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    salary <span class="hljs-built_in">DECIMAL</span> (<span class="hljs-number">8</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    manager_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,
    department_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (job_id) <span class="hljs-keyword">REFERENCES</span> jobs (job_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span>,
    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (department_id) <span class="hljs-keyword">REFERENCES</span> departments (department_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span>,
    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (manager_id) <span class="hljs-keyword">REFERENCES</span> employees (employee_id)
);

<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> dependents (
    dependent_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,
    first_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    last_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    relationship <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">25</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    employee_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (employee_id) <span class="hljs-keyword">REFERENCES</span> employees (employee_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span>
);</code></pre></div>
<h2 id="二、SQL数据库操作">二、SQL数据库操作</h2>
<p>语句<code>SHOW DATABASES;</code>用于查看可用数据库列表。</p>
<h3 id="2-0-帮助命令-help">2.0 帮助命令 help</h3>
<p>如果不知道命令或者函数怎么用，可以使用help命令，mariaDB里面都会罗列出语法。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--示例1</span>
<span class="hljs-keyword">help</span>

<span class="hljs-comment">/*示例2*/</span>
<span class="hljs-keyword">help</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span>
<span class="hljs-keyword">help</span> <span class="hljs-keyword">join</span>
<span class="hljs-keyword">help</span> <span class="hljs-keyword">trigger</span>
<span class="hljs-keyword">help</span> <span class="hljs-keyword">grant</span></code></pre></div>
<h3 id="2-1-Create-Database-语句">2.1 Create Database 语句</h3>
<p>SQL中<code>CREATE DATABASE</code>语句用于创建新的SQL数据库：</p>
<div class="hljs"><pre><code class="hljs SQL">--语法格式
CREATE &#123;DATABASE|SCHEMA&#125; [IF NOT EXISTS] database_name
[DEFAULT] CHARACTER SET [=]charset_name|[DEFAULT] COLLATE [=]collation_name;
/*[]标记其内容为可选，|用于分隔跨括号中的选择项，DEFAULT用于指定默认值，关键字CHARACTER SET用于指定数据库字符集，关键字COLLATE用于指定字符集的校对规则*/

/*示例*/
CREATE DATABASE testdb;

/*查看*/
mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| testdb             |
+--------------------+
3 rows in set</code></pre></div>
<p><strong>数据库名称(<code>database_name</code>)在<code>RDBMS(关系数据库管理系统)</code>中必须是唯一的</strong></p>
<h3 id="2-2-Drop-Database-语句">2.2 Drop Database 语句</h3>
<p>SQL中<code>DROP DATABASE</code>语句用于删除SQL模式中已存在的数据库。</p>
<div class="hljs"><pre><code class="hljs SQL">--语法格式
DROP DATABASE database_name;

/*示例*/
DROP DATABASE testdb;

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
+--------------------+
2 rows in set</code></pre></div>
<h3 id="2-3-Rename-Database-语句">2.3 Rename Database 语句</h3>
<p>当需要更改数据库的名称时，将使用SQL <code>RENAME DATABASE</code></p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">DATABASE</span> old_db_name <span class="hljs-keyword">TO</span> new_db_name;

<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">DATABASE</span> old_name <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">NAME</span> = new_name;</code></pre></div>
<h3 id="2-4-Use-语句">2.4 Use 语句</h3>
<p>如果SQL模式中有多个数据库，那么在开始操作之前，需要选择一个将执行操作的数据库。</p>
<p>SQL中的<code>USE</code>语句用于选择SQL模式中的任何现有数据库。</p>
<div class="hljs"><pre><code class="hljs SQL">--语法格式
USE database_name;

/*示例*/
mysql&gt; SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| test               |
+--------------------+
3 rows in set

USE test;</code></pre></div>
<h2 id="三、表操作">三、表操作</h2>
<h3 id="3-1-创建表-Create-Table">3.1 创建表 Create Table</h3>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">TEMPORARY</span>] <span class="hljs-keyword">TABLE</span> table_name(
     column_name_1 data_type <span class="hljs-keyword">default</span> <span class="hljs-keyword">value</span> column_constraint,
     column_name_2 data_type <span class="hljs-keyword">default</span> <span class="hljs-keyword">value</span> column_constraint,
     ...,
     table_constraint
);</code></pre></div>
<ul>
<li>由table_name指定的表名在数据库中必须是唯一的</li>
<li>每个列定义由列名，列的<a href="https://www.yiibai.com/sql/sql-data-types.html" target="_blank" rel="noopener">数据类型</a>，默认值和一个或多个列约束组成</li>
<li>列的数据类型指定列可以存储的数据类型。 列的数据类型可以是数字，字符，日期等</li>
<li>列约束控制可以存储在列中的值的类型。 例如，<code>NOT NULL</code>约束确保列不包含<code>NULL</code>值。列可能有多个列约束。 例如，<code>users</code>表的<code>username</code>列可以同时具有<code>NOT NULL</code>和<a href="https://www.yiibai.com/sql/sql-unique-constraint.html" target="_blank" rel="noopener"><code>UNIQUE</code>约束</a>。</li>
<li>如果约束包含多个列，则使用表约束。 例如，如果表的主键包含两列，则在这种情况下，必须使用<code>PRIMARY KEY</code><a href="https://www.yiibai.com/sql/sql-primary-key.html" target="_blank" rel="noopener">主键约束</a>。</li>
<li><code>TEMPORARY</code>关键字用于创建临时表，当断开与数据库连接时，mysql会自动删除它们。</li>
</ul>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> courses (
    course_id <span class="hljs-built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,
    course_name <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>
);

<span class="hljs-comment">/*
courses课程表有两列：course_id和course_name;

course_id是课程表的主键列。 每个表都有一个且只有一个主键，用于唯一标识表中的每一行

course_id的数据类型是整数，由INT关键字表示。 此外，course_id列的值为AUTO_INCREMENT(自动递增)。表示表中数据类为整型的列设置自增属性，自动设置为“此前表中该列的最大值加1”，同时每个表智能有一个AUTO_INCREMENT列，并且它必须被索引。

course_name存储课程名称。 其数据类型是最大长度为50的可变长度的字符串(VARCHAR)。NOT NULL约束确保course_name列中不存储NULL值。
*/</span></code></pre></div>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--示例</span>
<span class="hljs-comment">/*有了课程表。 要存储训练数据，请按如下方式创建名为training的新表。*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> trainings (
    employee_id <span class="hljs-built_in">INT</span>,
    course_id <span class="hljs-built_in">INT</span>,
    taken_date <span class="hljs-built_in">DATE</span>,
    PRIMARY <span class="hljs-keyword">KEY</span> (employee_id , course_id)
);
<span class="hljs-comment">/*trainings表包含三列：

employee_id列存储参加课程的员工的ID。
course_id列存储员工所采用的课程。
taken_date列存储员工参加课程的日期。

因为trainings表的主键由两列组成：employee_id和course_id，所以必须使用PRIMARY KEY表约束。*/</span></code></pre></div>
<h3 id="3-2-更新表-Alter-Table">3.2 更新表 Alter Table</h3>
<p>使用SQL <code>ALTER TABLE</code>更改数据库中现有表的结构</p>
<p><code>ALTER TABLE</code>语句用于对现有表执行以下操作：</p>
<ul>
<li>使用<code>ADD</code>子句添加新列。</li>
<li>使用<code>CHANGE</code>子句用于修改表中的列名称和数据类型。</li>
<li>使用<code>ALTER SET DEFAULT</code>子句修改或删除表中指定列的默认值。</li>
<li>使用<code>MODIFY</code>子句修改列的属性，例如：约束，默认值等。</li>
<li>使用<code>DROP</code>子句删除列。</li>
</ul>
<h4 id="3-2-1-ALTER-TABLE-ADD列">3.2.1 ALTER TABLE ADD列</h4>
<p>该子句的作用是向表中添加一个或多个新列</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name
<span class="hljs-keyword">ADD</span> [<span class="hljs-keyword">COLUMN</span>] column_name data_type column_constraint [<span class="hljs-keyword">AFTER</span> existing_column];
<span class="hljs-comment">/*要向表中添加一个或多个列，需要执行以下步骤：

首先，在ALTER TABLE子句之后指定要添加table_name，表示列所在的表。
其次，将新列定义放在ADD子句之后。 如果要在表中指定新列的顺序，可以使用可选子句AFTER existing_column。
*/</span>

<span class="hljs-comment">/* 以下语句将一个名称为credit_hours的新列添加到courses表中。*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> courses <span class="hljs-keyword">ADD</span> credit_hours <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> courses
<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> fee <span class="hljs-built_in">NUMERIC</span> (<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">AFTER</span> course_name,
<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> max_limit <span class="hljs-built_in">INT</span> <span class="hljs-keyword">AFTER</span> course_name;</code></pre></div>
<h4 id="3-2-2-ALTER-TABLE-CHANGE列名称和属性">3.2.2 ALTER TABLE CHANGE列名称和属性</h4>
<p><code>CHANGE</code>子句用于修改表中的列名称和数据类型。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name
<span class="hljs-keyword">CHANGE</span> [<span class="hljs-keyword">COLUMN</span>] column_name new_column_name column_properties;

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students
<span class="hljs-keyword">CHANGE</span> students_name <span class="hljs-keyword">names</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;</code></pre></div>
<h4 id="3-2-3-ALTER-TABLE-ALTER-SET-DEFAULT列">3.2.3 ALTER TABLE ALTER SET DEFAULT列</h4>
<p><code>ALTER [COLUMN] SET</code>子句修改或删除表中指定列的默认值。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name
<span class="hljs-keyword">ALTER</span> [<span class="hljs-keyword">COLUMN</span>] column_name <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'xxx'</span>;

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> customers
<span class="hljs-keyword">ALTER</span> city <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'beijing'</span>;</code></pre></div>
<h4 id="3-2-4-ALTERE-TABLE-MODIFY列">3.2.4 ALTERE TABLE MODIFY列</h4>
<p>MODIFY子句用于更改现有列的数据类型。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name
<span class="hljs-keyword">MODIFY</span> [<span class="hljs-keyword">COLUMN</span>] column_name column_properties;

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">name</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;</code></pre></div>
<h4 id="3-2-5-ALTER-TABLE-DROP列">3.2.5 ALTER TABLE DROP列</h4>
<p>当表的列已过时且未被任何其他数据库对象(如触发器，视图，存储过程和存储过程)使用时，将其从表中删除，请使用以下语法：</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name
<span class="hljs-keyword">DROP</span> [<span class="hljs-keyword">COLUMN</span>] column_name,
<span class="hljs-keyword">DROP</span> [<span class="hljs-keyword">COLUMN</span>] column_name,
...

<span class="hljs-comment">/*示例1-删除一列*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> courses <span class="hljs-keyword">DROP</span> fee;

<span class="hljs-comment">/*示例2-删除多列*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> courses
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> max_limit,
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> credit_hours;</code></pre></div>
<h4 id="3-2-6-ALTER-TABLE-RENAME-TO">3.2.6 ALTER TABLE RENAME TO</h4>
<p><code>RENAME TO</code>子句为表重新赋予一个表名。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name
<span class="hljs-keyword">RENAME</span> [<span class="hljs-keyword">TO</span>] new_table_name;

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> classes
<span class="hljs-keyword">RENAME</span> new_classes;</code></pre></div>
<h3 id="3-3-删除表-DROP-TABLE">3.3 删除表 DROP TABLE</h3>
<p>使用SQL <code>DROP TABLE</code>语句删除数据库中的一个或多个表</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">DROP</span> [<span class="hljs-keyword">TEMPORARY</span>] <span class="hljs-keyword">TABLE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>] table_name [ RESTRICT | <span class="hljs-keyword">CASCADE</span> ];
<span class="hljs-comment">--为了防止删除不存在的表的错误，使用可选子句IF EXISTS。</span>

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> students;

<span class="hljs-comment">/*删除多个表*/</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> table_name1,table_name2,...;</code></pre></div>
<ul>
<li>
<p>DROP TABLE语句永久删除表的数据和结构，某些数据库系统要求表中的记录必须为空时才能从数据库中删除。这有助于防止意外删除仍在使用的表。</p>
</li>
<li>
<p>要删除表中的所有数据，可以使用<a href="https://www.yiibai.com/sql/sql-delete.html" target="_blank" rel="noopener">DELETE</a>或<a href="https://www.yiibai.com/sql/sql-truncate-table.html" target="_blank" rel="noopener">TRUNCATE TABLE</a>语句。</p>
</li>
<li>
<p>要删除由另一个表的外键约束引用的表，必须在删除表之前禁用或删除外部约束。</p>
</li>
</ul>
<h3 id="3-4-快速删除表-TURNCATE-TABLE">3.4 快速删除表 TURNCATE TABLE</h3>
<p>使用SQL <code>TRUNCATE TABLE</code>语句高效，快速地删除表中的所有数据</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> table_name;     <span class="hljs-comment">/*快速删除大表中的所有行*/</span>

<span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> table_name1, table_name2, ...;

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> students, teachers;</code></pre></div>
<h3 id="3-5-重命名表-RENAME-TABLE">3.5 重命名表 RENAME TABLE</h3>
<p>SQL RENAME TABLE用于更改表的名称。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式1</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name
<span class="hljs-keyword">RENAME</span> [<span class="hljs-keyword">TO</span>] new_table_name;
<span class="hljs-comment">--语法格式2</span>
<span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TABLE</span> old_table_name <span class="hljs-keyword">To</span> new_table_name;

<span class="hljs-comment">/*示例1*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Students
<span class="hljs-keyword">RENAME</span> Student_bank;
<span class="hljs-comment">/*示例2*/</span>
<span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TABLE</span> Student_bank <span class="hljs-keyword">TO</span> Students;</code></pre></div>
<h3 id="3-6-复制表-临时表">3.6 复制表&amp;临时表</h3>
<h4 id="1）-复制表">1） 复制表</h4>
<p>如果要将SQL表复制到同一数据库中的另一个表中，可以使用<code>select</code>语句。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式1</span>
<span class="hljs-comment">--从一个表复制到另一个表的语法如下：</span>
<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">INTO</span> &lt;destination_table&gt; <span class="hljs-keyword">FROM</span> &lt;source_table&gt;

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">INTO</span> my_table_2 <span class="hljs-keyword">FROM</span> my_table_1;</code></pre></div>
<blockquote>
<p>注意：<code>SELECT INTO</code>与<code>INSERT INTO</code>语句完全不同。</p>
</blockquote>
<h4 id="2）-临时表">2） 临时表</h4>
<p>临时表可以在运行时创建，并且可以像普通表一样执行各种操作，这些临时表是在<code>tempdb</code>数据库中创建的。</p>
<p>根据行为和范围，有如下两种类型的临时表。1. 局部临时变量。 2. 全局临时变量。</p>
<p>① 局部临时变量</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例*/</span>
<span class="hljs-comment">/*局部临时变量表仅在当前连接时可用。 当用户与实例断开连接时，它会自动删除。 它以哈希(#)符号开头*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-comment">#local temp table (  </span>
    User_id <span class="hljs-built_in">int</span>,  
    User_name <span class="hljs-built_in">varchar</span> (<span class="hljs-number">50</span>),  
    User_address <span class="hljs-built_in">varchar</span> (<span class="hljs-number">150</span>)  
)</code></pre></div>
<p>② 全局临时变量</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*全局临时表名称以双哈希(##)开头。 创建此表后，它就像一个永久表。 它始终为所有用户准备好，并且在撤消总连接之前不会被删除。*/</span>
<span class="hljs-keyword">cREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-comment">##new global temp table (  </span>
    User_id <span class="hljs-built_in">int</span>,  
    User_name <span class="hljs-built_in">varchar</span> (<span class="hljs-number">50</span>),  
    User_address <span class="hljs-built_in">varchar</span> (<span class="hljs-number">150</span>)</code></pre></div>
<h3 id="3-7-查看表">3.7 查看表</h3>
<h4 id="3-7-1-查看表的名称">3.7.1 查看表的名称</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SHOW</span> [<span class="hljs-keyword">FULL</span>] <span class="hljs-keyword">TABLES</span> [&#123; <span class="hljs-keyword">FROM</span> | <span class="hljs-keyword">IN</span> &#125; table_name]
[ <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'pattern'</span> | <span class="hljs-keyword">WHERE</span> expr];

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLES</span>;</code></pre></div>
<h4 id="3-7-2-显示表的结构">3.7.2 显示表的结构</h4>
<div class="hljs"><pre><code class="hljs SQL">--语法格式
SHOW [FULL] COLUMNS &#123;FROM|IN&#125; table_name [&#123; FROM | IN &#125; table_name]
[ LIKE 'pattern' | WHERE expr];
--或者使用DESCRIBE语句
&#123;DESCRIBE | DESC&#125; table_name [ col_name | wild ];

/*示例*/
DESC test.classes;</code></pre></div>
<h2 id="四、数据操作语句">四、数据操作语句</h2>
<h3 id="4-1-INSERT语句">4.1 INSERT语句</h3>
<p>SQL提供了<code>INSERT</code>语句，用于将一行或多行插入表中。 <code>INSERT</code>语句用于：</p>
<ul>
<li>向表中插入一行</li>
<li>向表中插入多行</li>
<li>将行从一个表复制到另一个表中。</li>
</ul>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式1</span>
<span class="hljs-comment">--插入一行,不建议省略column_name。</span>
<span class="hljs-keyword">INSERT</span> [<span class="hljs-keyword">INTO</span>] table_name [(col_name,...)]
&#123;<span class="hljs-keyword">VALUES</span> | <span class="hljs-keyword">VALUE</span>&#125;
    (&#123;expr | <span class="hljs-keyword">DEFAULT</span>&#125;,...),(...),...;
<span class="hljs-comment">--语法格式2</span>
<span class="hljs-keyword">INSERT</span> [<span class="hljs-keyword">INTO</span>] table_name
    <span class="hljs-keyword">SET</span> col_name=&#123;expr | <span class="hljs-keyword">DEFAULT</span>&#125;,...
<span class="hljs-comment">/*"expr"，表示一个常量、变量或一个表达式，也可以是空值NULL
“DEFAULT”关键字，用于指定此列值为该列的默认值，前提是该列已经有默认值。*/</span>

<span class="hljs-comment">--从其他表复制行记录</span>
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table1 (column1, column2,...)
<span class="hljs-keyword">SELECT</span>
    column1,
    column2
<span class="hljs-keyword">FROM</span>
    table2
<span class="hljs-keyword">WHERE</span>
    condition1;

<span class="hljs-comment">/*示例1*/</span>
<span class="hljs-keyword">INSERT</span> students(class_id,<span class="hljs-keyword">name</span>,gender,score)
<span class="hljs-keyword">VALUE</span>
    (<span class="hljs-string">'3'</span>,<span class="hljs-string">'小绿'</span>,<span class="hljs-string">'M'</span>,<span class="hljs-string">'95'</span>);

<span class="hljs-comment">/*示例2*/</span>
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> temp(<span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span>)
<span class="hljs-keyword">VALUES</span>
    (<span class="hljs-number">2</span>,<span class="hljs-string">'xiaoli'</span>),
    (<span class="hljs-number">3</span>,<span class="hljs-string">'xiaowang'</span>),
    (<span class="hljs-number">4</span>,<span class="hljs-string">'xiaojun'</span>);

<span class="hljs-comment">/*示例3*/</span>
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers
    <span class="hljs-keyword">SET</span> cust_name=<span class="hljs-string">'李四'</span>,cust_address=<span class="hljs-string">'武汉市'</span>,cust_sex=<span class="hljs-keyword">DEFAULT</span>;</code></pre></div>
<h3 id="4-2-Insert-Into-Select">4.2 Insert Into Select</h3>
<p>在表中插入多行，可以将<code>Insert</code>与<code>select</code>语句结合使用。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">"table 1"</span> (<span class="hljs-string">"column1"</span>, <span class="hljs-string">"column2"</span>,....)  
<span class="hljs-keyword">SELECT</span> <span class="hljs-string">"column3"</span>, <span class="hljs-string">"column4"</span>,....  
<span class="hljs-keyword">FROM</span> <span class="hljs-string">"table2"</span>;</code></pre></div>
<p><code>INSERT INTO</code>语句还可以包含许多子句，如：<code>SELECT</code>，<code>GROUP BY</code>，<code>HAVING</code>以及<code>JOIN</code>和<code>ALIAS</code>。 因此，<code>insert into select</code>语句可能会有些复杂。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">store</span> (store_name, sales, transaction_date)  
<span class="hljs-keyword">SELECT</span> store_name, <span class="hljs-keyword">sum</span> (sales), transaction_date  
<span class="hljs-keyword">FROM</span> sales_information  
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> store_name, transaction_date;</code></pre></div>
<h3 id="4-3-Update语句">4.3 Update语句</h3>
<p>使用SQL <code>UPDATE</code>语句来修改表中现有行的数据</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">UPDATE</span> table_name
    <span class="hljs-keyword">SET</span> col_name1=&#123;expr1 | <span class="hljs-keyword">DEFAULT</span>&#125;
        [,col_name2 = &#123;expr2 | <span class="hljs-keyword">DEFAULT</span>&#125;] ...
    [<span class="hljs-keyword">WHERE</span> condition]
    [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ...]
    [<span class="hljs-keyword">LIMIT</span> <span class="hljs-keyword">row_count</span>];
<span class="hljs-comment">/*在上面的语法中
首先，在SET子句中指定要修改的列。 SET子句中未列出的列的值不会被修改。
其次，指定WHERE子句中要更新的行。
第三，WHERE子句是可选的，如果省略它，表中的所有行都将受到影响。*/</span>

<span class="hljs-comment">/*示例1--小于3000的工资改为3000*/</span>
<span class="hljs-keyword">UPDATE</span>
    workers
<span class="hljs-keyword">SET</span>
    salary=<span class="hljs-number">3000</span>
<span class="hljs-keyword">WHERE</span>
    salary&lt;<span class="hljs-number">3000</span>;

<span class="hljs-comment">/*示例2--确保子项dependents的last_name始终与employees表中的last_name匹配*/</span>
<span class="hljs-keyword">UPDATE</span> dependents
<span class="hljs-keyword">SET</span> last_name = (
    <span class="hljs-keyword">SELECT</span>
        last_name
    <span class="hljs-keyword">FROM</span>
        employees
    <span class="hljs-keyword">WHERE</span>
        employee_id = dependents.employee_id
);

<span class="hljs-comment">/*示例3--给工资超过100000美元的教师涨3%的工资，其余教师涨5%*/</span>
<span class="hljs-keyword">UPDATE</span> instructor
<span class="hljs-keyword">SET</span> salary=<span class="hljs-keyword">case</span>
        <span class="hljs-keyword">when</span> salary&lt;=<span class="hljs-number">100000</span> <span class="hljs-keyword">then</span> salary * <span class="hljs-number">1.05</span>
        <span class="hljs-keyword">else</span> salary * <span class="hljs-number">1.03</span>
<span class="hljs-keyword">end</span></code></pre></div>
<h3 id="4-4-UPDATE-JOIN语句">4.4 UPDATE &amp; JOIN语句</h3>
<p><code>UPDATE JOIN</code>可使用一个表和连接条件来更新另一个表。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*假设有一个客户表，要用最新数据来更新客户表。可使用客户ID来连接在目标表和源表之间执行连接*/</span>

<span class="hljs-comment">/*语法格式*/</span>
<span class="hljs-keyword">UPDATE</span> customer_table  
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>  
Customer_table  
<span class="hljs-keyword">ON</span> customer_table.rel_cust_name = customer_table.cust_id  
<span class="hljs-keyword">SET</span> customer_table.rel_cust_name = customer_table.cust_name

<span class="hljs-comment">--示例</span>
<span class="hljs-comment">/*在table2中共有3行，假设想要将table1中的值更新为table2中column1为21和31行的值。
仅更新column2和column3的值。
最简单和最常用的方法是在update语句中使用join子句并在update语句中使用多个表。*/</span>
<span class="hljs-keyword">UPDATE</span> table1 t1
<span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span>  table2 t2
<span class="hljs-keyword">ON</span> t1.column1 = t2.column1
<span class="hljs-keyword">SET</span> t1.column2 = t2.column2,  
t1.column3 = t2.column3
<span class="hljs-keyword">where</span> t1.column1 <span class="hljs-keyword">in</span>(<span class="hljs-number">21</span>,<span class="hljs-number">31</span>);</code></pre></div>
<h3 id="4-5-更新日期数据">4.5 更新日期数据</h3>
<p>要在SQL中更新日期和时间字段，则应使用以下查询。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">table</span>
<span class="hljs-keyword">SET</span> Column_Name = <span class="hljs-string">'YYYY-MM-DD HH:MM:SS'</span>  
<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Id</span> = <span class="hljs-keyword">value</span>

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">UPDATE</span> table1
<span class="hljs-keyword">SET</span> EndDate = <span class="hljs-string">'2019-03-16 00:00:00.000'</span>
<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">in</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);</code></pre></div>
<h3 id="4-6-DELETE语句">4.6 DELETE语句</h3>
<p>使用SQL <code>DELETE</code>语句删除表中的一行或多行。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">DELETE</span>
<span class="hljs-keyword">FROM</span>
    table_name
<span class="hljs-keyword">WHERE</span>
    condition;
<span class="hljs-comment">/*1. 提供要删除行的表名称(table_name)。
2. 在WHERE子句中指定条件以标识需要删除的行记录。 如果省略WHERE子句，则将删除表中的所有行记录。 因此，应始终谨慎使用DELETE语句。*/</span>

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> dependents
<span class="hljs-keyword">WHERE</span>
    employee_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">100</span> , <span class="hljs-number">101</span>, <span class="hljs-number">102</span>);</code></pre></div>
<h2 id="五、SQL查询语句">五、SQL查询语句</h2>
<p>SQL查询语句的通用形式：</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> &lt;[<span class="hljs-keyword">distinct</span>] c1，c2…&gt;
<span class="hljs-keyword">from</span> &lt;r1,……&gt;
[<span class="hljs-keyword">where</span> &lt;condition&gt;]
[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> &lt;c1，c2.…&gt; [<span class="hljs-keyword">having</span> &lt;cond2&gt;]]
[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>&lt;c1[<span class="hljs-keyword">desc</span>] ,[c2[<span class="hljs-keyword">desc</span>|<span class="hljs-keyword">asc</span>],…]&gt;</code></pre></div>
<p>SQL查询语句执行顺序：<br>
<code>from→where→group（aggregate）→having→select→order by</code></p>
<h3 id="5-1-SELECT语句">5.1 SELECT语句</h3>
<p>除了<code>SELECT</code>和<code>FROM</code>子句之外，<code>SELECT</code>语句还可以包含许多其他子句，例如 -</p>
<ul>
<li><a href="https://www.yiibai.com/sql/sql-where.html" target="_blank" rel="noopener">WHERE</a> - 用于根据指定条件过滤数据</li>
<li><a href="https://www.yiibai.com/sql/sql-inner-join.html" target="_blank" rel="noopener">JOIN</a> - 用于查询来自多个相关表的数据</li>
<li><a href="https://www.yiibai.com/sql/sql-group-by.html" target="_blank" rel="noopener">GROUP BY</a> - 用于根据一列或多列对数据进行分组</li>
<li><a href="https://www.yiibai.com/sql/sql-having.html" target="_blank" rel="noopener">HAVING</a> - 用于过滤分组</li>
<li><a href="https://www.yiibai.com/sql/sql-order-by.html" target="_blank" rel="noopener">ORDER BY</a> - 用于对结果集进行排序</li>
<li><a href="https://www.yiibai.com/sql/sql-limit.html" target="_blank" rel="noopener">LIMIT</a> - 用于限制返回的行</li>
</ul>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span>
    [<span class="hljs-keyword">ALL</span> | <span class="hljs-keyword">DISTINCT</span> | <span class="hljs-keyword">DISTINCTROW</span> ]
    select_expr [, select_expr ...]
    [<span class="hljs-keyword">FROM</span> table_references
    [<span class="hljs-keyword">WHERE</span> where_condition]
    [<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> &#123;col_name | expr | <span class="hljs-keyword">position</span>&#125;
      [<span class="hljs-keyword">ASC</span> | <span class="hljs-keyword">DESC</span>], ... [<span class="hljs-keyword">WITH</span> <span class="hljs-keyword">ROLLUP</span>]]
    [<span class="hljs-keyword">HAVING</span> where_condition]
    [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> &#123;col_name | expr | <span class="hljs-keyword">position</span>&#125;
      [<span class="hljs-keyword">ASC</span> | <span class="hljs-keyword">DESC</span>], ...]
    [<span class="hljs-keyword">LIMIT</span> &#123;[<span class="hljs-keyword">offset</span>,] <span class="hljs-keyword">row_count</span> | <span class="hljs-keyword">row_count</span> <span class="hljs-keyword">OFFSET</span> <span class="hljs-keyword">offset</span>&#125;]
<span class="hljs-comment">/*select子句的使用顺序需要按照上述语法格式依次输入执行。
[ALL | DISTINCT | DISTINCTROW ]指定是否返回结果集中的重复行，默认ALL。
SELECT * FROM table_name查询tbl_name中所有行列。*/</span>

<span class="hljs-comment">--语法格式附加</span>
<span class="hljs-comment">--替换查询结果集中的数据</span>
<span class="hljs-keyword">CASE</span>
<span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 表达式<span class="hljs-number">1</span>
    <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 表达式<span class="hljs-number">2</span>
    ...
    <span class="hljs-keyword">WHEN</span> 条件n <span class="hljs-keyword">THEN</span> 表达式n
<span class="hljs-keyword">ELSE</span> 表达式n
<span class="hljs-keyword">END</span>

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-comment">/*查询特定的列*/</span>
<span class="hljs-keyword">SELECT</span>
    employee_id,
    first_name,
    last_name,
    hire_date
<span class="hljs-keyword">FROM</span>
    employees;

<span class="hljs-comment">/*示例2*/</span>
<span class="hljs-comment">/*以下查询使用FLOOR()，DATEDIFF()和CURRENT_DATE函数计算员工的服务年份。要计算服务年份，将DATEDIFF()函数的结果除以365。FLOOR()函数返回小于或等于数值表达式结果的最大整数。YoS是下面表达式的列别名。*/</span>
<span class="hljs-keyword">SELECT</span>
    employee_id,
    first_name,
    last_name,
    <span class="hljs-keyword">FLOOR</span>(<span class="hljs-keyword">DATEDIFF</span>(<span class="hljs-keyword">NOW</span>(), hire_date) / <span class="hljs-number">365</span>) <span class="hljs-keyword">AS</span> YoS
<span class="hljs-keyword">FROM</span>
    employees;

<span class="hljs-comment">/*示例3--判断结果集中的值，如果值为M，输出男，否则为女，同时列名为性别*/</span>
<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">name</span>,
    <span class="hljs-keyword">CASE</span>
    <span class="hljs-keyword">WHEN</span> gender=<span class="hljs-string">'M'</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">'男'</span>
    <span class="hljs-keyword">ELSE</span> <span class="hljs-string">'女'</span>
    <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> 性别
<span class="hljs-keyword">FROM</span> students;</code></pre></div>
<h3 id="5-2-ORDER-BY排序">5.2 ORDER BY排序</h3>
<p>SQL <code>ORDER BY</code>子句根据指定的标准按升序或降序对结果集进行排序。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span>
    column1, column2
<span class="hljs-keyword">FROM</span>
    table_name
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column1 <span class="hljs-keyword">ASC</span> ,  <span class="hljs-comment">--默认升序</span>
         column2 <span class="hljs-keyword">DESC</span>;  <span class="hljs-comment">--降序</span>
<span class="hljs-comment">/*在此语法中，ORDER BY子句放在FROM子句之后。 如果SELECT语句包含WHERE子句，则ORDER BY子句必须放在WHERE子句之后。
要指定要排序的列以及排序顺序的类型：
1. 升序(使用：ASC表示，默认是升序)
2. 降序(使用：DESC表示)*/</span>

<span class="hljs-comment">/*示例--班级id按人数多少升序排列*/</span>
<span class="hljs-keyword">select</span> class_id,<span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">AS</span> <span class="hljs-string">"人数"</span>
    <span class="hljs-keyword">FROM</span> students
    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> class_id
    <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">count</span>(*)&gt;=<span class="hljs-number">1</span>
    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">count</span>(*);</code></pre></div>
<h3 id="5-3-DISTINCT运算符">5.3 DISTINCT运算符</h3>
<p>使用SQL <code>DISTINCT</code>运算符从结果集中删除重复数据项。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span>
    column1,column2......
<span class="hljs-keyword">FROM</span>
    table1;
<span class="hljs-comment">/*DISTINCT运算符将所有NULL值视为相同的值。因此在结果集中，DISTINCT运算符只保留一个NULL值，并从结果集中删除其它的NULL值。*/</span>

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span>
    job_id,
    salary
<span class="hljs-keyword">FROM</span>
    employees
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
    job_id,
    salary <span class="hljs-keyword">DESC</span>;</code></pre></div>
<h3 id="5-4-LIMIT子句">5.4 LIMIT子句</h3>
<p>使用SQL <code>LIMIT</code>子句来限制<code>SELECT</code>语句返回的行数。</p>
<div class="hljs"><pre><code class="hljs SQL">--语法格式
--使用LIMIT和OFFSET子句。
LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;
/*1. row_count用于返回数据的行数。
2. OFFSET可选项，默认为0。用于指定返回数据的第一行在SELECT语句结果集中的偏移量，其必须是非负的整数常量。
3.row_count OFFSET offset:从第offset+1行开始，取row_count行。*/

/*示例--跳过三行并获取接下来的五行,即显示4-8行*/
SELECT
    employee_id, first_name, last_name
FROM
    employees
ORDER BY first_name
LIMIT 5 OFFSET 3;
/*LIMIT 5 OFFSET 3等同于LIMIT 3,5*/

/*示例2-获取薪水最高的前5名*/
SELECT
    employee_id, first_name, last_name, salary
FROM
    employees
ORDER BY salary DESC
LIMIT 5;

/*示例3-获取薪水排名第三高的人名*/
/*通过嵌套子查询，先查出第三高的是多少salary，然后查name*/
SELECT
    employee_id, first_name, last_name, salary
FROM
    employees
WHERE
    salary = (SELECT DISTINCT
            salary
        FROM
            employees
        ORDER BY salary DESC
        LIMIT 2 , 1);</code></pre></div>
<h3 id="5-5-ALL-ANY-SOME语句">5.5 ALL,ANY,SOME语句</h3>
<p>SQL <code>ALL</code>与集合中所有元素比较；<code>ANY</code>和<code>SOME</code>与集合中的某些元素比较。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--找出所有 工资至少比生物系一个教师的工资要高 的教师*/</span>
<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">name</span>
<span class="hljs-keyword">FROM</span> instructor
<span class="hljs-keyword">WHERE</span> salary &gt; <span class="hljs-keyword">SOME</span>(<span class="hljs-keyword">SELECT</span> salary
                    <span class="hljs-keyword">FROM</span> instructor
                    <span class="hljs-keyword">WHERE</span> dept_name=<span class="hljs-string">'Biology'</span>);

<span class="hljs-comment">/*示例2--找出平均工资最高的系*/</span>
<span class="hljs-keyword">SELECT</span> dept_name
<span class="hljs-keyword">FROM</span> instructor
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_name
<span class="hljs-keyword">having</span> <span class="hljs-keyword">avg</span>(salary) &gt;= <span class="hljs-keyword">ALL</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">avg</span>(salary)
                          <span class="hljs-keyword">FROM</span> instructor
                          <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_name);</code></pre></div>
<h3 id="5-6-BETWEEN-IN-LIKE-NULL">5.6 BETWEEN | IN | LIKE | NULL</h3>
<h4 id="5-6-1-BETWEEN">5.6.1 BETWEEN</h4>
<p>SQL <code>BETWEEN</code>运算符选择指定范围内的值。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
expression BETWEEN low AND high;
expression NOT BETWEEN low AND high;

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">SELECT</span>
    employee_id, first_name, last_name, hire_date
<span class="hljs-keyword">FROM</span>
    employees
<span class="hljs-keyword">WHERE</span>
    hire_date <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">'1999-01-01'</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">'2000-12-31'</span>
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> hire_date;

<span class="hljs-comment">/*1. BETWEEN运算符需要低值和高值。如果低值大于高值，将得到一个空的结果集。
2. 2000-12-31默认为2000-12-31  00:00:00.000000*/</span></code></pre></div>
<h4 id="5-6-2-IN">5.6.2 IN</h4>
<p>SQL <code>IN</code>运算符将列中的值与括号内的一组值进行比较。<br>
要比较连续的值可用<code>LIMIT</code>，比如5-100。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
expression IN (value1,value2,...)
expression NOT IN (value1, value2,...)

<span class="hljs-comment">/*示例--查找工作ID不是8,9或10的所有员工*/</span>
<span class="hljs-keyword">SELECT</span>
    employee_id, first_name, last_name, job_id
<span class="hljs-keyword">FROM</span>
    employees
<span class="hljs-keyword">WHERE</span>
    job_id <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>)
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
    job_id;</code></pre></div>
<h4 id="5-6-3-LIKE">5.6.3 LIKE</h4>
<p>SQL <code>LIKE</code>运算符来测试表达式是否与模式匹配。</p>
<p>要构造模式，请使用两个SQL通配符：</p>
<ul>
<li><code>%</code> 百分号匹配零个，一个或多个字符。</li>
<li><code>_</code> 下划线符号匹配单个字符</li>
</ul>
<p>下表说明了一些模式及其含义：</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>LIKE ‘Yii%’</td>
<td>匹配以Yii开始的字符串</td>
</tr>
<tr>
<td>LIKE ‘%su’</td>
<td>匹配以su结尾的字符串</td>
</tr>
<tr>
<td>LIKE '%ch%</td>
<td>匹配包含ch的字符串</td>
</tr>
<tr>
<td>LIKE ‘Luc_’</td>
<td>以Luc开始，后面只有一个字符，例如：Lucy，LucC等</td>
</tr>
<tr>
<td>LIKE ‘_cy’</td>
<td>以cy结尾，前面只有一个字符，例如：Lcy，ucy等</td>
</tr>
<tr>
<td>LIKE ‘%yiiBai_’</td>
<td>包含yiiBai，以任意数量的字符开头，最多以一个字符结尾。</td>
</tr>
<tr>
<td>LIKE ‘_yiiBai%’</td>
<td>包含yiiBai，最多以一个字符开头，以任意数量的字符结尾。</td>
</tr>
</tbody>
</table>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
expression LIKE pattern

<span class="hljs-comment">/*如果要匹配通配符%或_，则必须使用反斜杠字符\来对其进行转义。 如果要使用其它的转义字符而不是反斜杠，可以在LIKE表达式中使用ESCAPE子句，如下所示：*/</span>
expression LIKE pattern ESCAPE escape_character

<span class="hljs-comment">/*示例--要查找名字以M开头但不以Ma开头的所有员工，请使用以下语句：*/</span>
<span class="hljs-keyword">SELECT</span>
    employee_id, first_name, last_name
<span class="hljs-keyword">FROM</span>
    employees
<span class="hljs-keyword">WHERE</span>
    first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'M%'</span>
<span class="hljs-keyword">AND</span> first_name <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'Ma%'</span>
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
    first_name;</code></pre></div>
<h4 id="5-6-4-NULL">5.6.4 NULL</h4>
<p>使用SQL <code>IS NULL</code>和<code>IS NOT NULL</code>运算符来测试表达式是否为<code>NULL</code>。</p>
<p><code>NULL</code>表示数据未知的值，在数据库中缺少数据。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
expression IS NULL;

<span class="hljs-comment">/*示例--查找具有电话号码的所有员工，请使用IS NOT NULL，如以下语句所示：*/</span>
<span class="hljs-keyword">SELECT</span>
    employee_id,
    first_name,
    last_name,
    phone_number
<span class="hljs-keyword">FROM</span>
    employees
<span class="hljs-keyword">WHERE</span>
    phone_number <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;</code></pre></div>
<p>注意：</p>
<ol>
<li>不能使用比较运算符的等于(=)将值与<code>NULL</code>值进行比较</li>
<li><code>NULL</code>值是特殊的，任何与<code>NULL</code>值的比较都不会返回<code>true</code>或<code>false</code>，而是返回未知</li>
</ol>
<h3 id="5-7-SQL别名">5.7 SQL别名</h3>
<p>SQL别名，包括表和列别名，使查询更短，更易理解。</p>
<p>使用关键词<code>AS</code>，可省略。</p>
<h4 id="5-7-1-列别名">5.7.1 列别名</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">SELECT</span>
    inv_no <span class="hljs-keyword">AS</span> invoice_no,
    amount,
    due_date <span class="hljs-keyword">AS</span> <span class="hljs-string">'截止日期'</span>,
    cust_no <span class="hljs-string">'客户编号'</span>
<span class="hljs-keyword">FROM</span>
    invoices;
<span class="hljs-comment">/*别名包含空格，必须使用单引号(')或双引号(")来包围别名。*/</span></code></pre></div>
<h4 id="5-7-2-表别名">5.7.2 表别名</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span>
    d.department_name
<span class="hljs-keyword">FROM</span>
    departments <span class="hljs-keyword">AS</span> d

<span class="hljs-comment">/*示例一--以下查询使用inner join子句从employees和departments表中选择数据。*/</span>
<span class="hljs-keyword">SELECT</span>
    employee_id,
    first_name,
    last_name,
    e.department_id,
    department_name
<span class="hljs-keyword">FROM</span>
    employees e
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
    first_name;

<span class="hljs-comment">/*示例二--以下查询使用self-join将employee表自联接。*/</span>
<span class="hljs-keyword">SELECT</span>
    e.first_name <span class="hljs-keyword">AS</span> employee,
    m.first_name <span class="hljs-keyword">AS</span> manager
<span class="hljs-keyword">FROM</span>
    employees e
<span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> employees m <span class="hljs-keyword">ON</span> m.employee_id = e.manager_id
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
    manager;</code></pre></div>
<h3 id="5-8-JOIN操作">5.8 JOIN操作</h3>
<p><code>SELECT</code>语句不仅能从单个表中查询数据，而且可以将多个表链接在一起。连接表的过程称为<code>Join</code>。</p>
<p>SQL提供了多种连接，如内连接，左连接，右连接，全外连接等。</p>
<h4 id="5-8-1-INNER-JOIN">5.8.1 INNER JOIN</h4>
<p>SQL <code>INNER JOIN</code>内连接子句来查询来自两个或多个表的数据。</p>
<p>内连接子句消除了与另一个表的行不匹配的行，相当于交集。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span>
  A.n
<span class="hljs-keyword">FROM</span> A
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> B.n = A.n

<span class="hljs-comment">/*示例--employees表中的department_id列是将员工链接到departments表的外键列。*/</span>
<span class="hljs-keyword">SELECT</span>
    first_name,
    last_name,
    employees.department_id,
    departments.department_id,
    department_name
<span class="hljs-keyword">FROM</span>
    employees
        <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>
    departments <span class="hljs-keyword">ON</span> departments.department_id = employees.department_id
<span class="hljs-keyword">WHERE</span>
    employees.department_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);

<span class="hljs-comment">--语法格式</span>
<span class="hljs-comment">/*INNER JOIN子句可以连接三个或更多表，只要它们具有关系，通常是外键关系。*/</span>
<span class="hljs-keyword">SELECT</span>
  A.n
<span class="hljs-keyword">FROM</span> A
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> B.n = A.n
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> C <span class="hljs-keyword">ON</span> C.n = A.n;

<span class="hljs-comment">/*示例--使用内部联接子句连接3个表：员工，部门和工作岗位，以获取在部门ID为：1,2和3中工作的员工的信息。*/</span>
<span class="hljs-keyword">SELECT</span>
    first_name, last_name, job_title, department_name
<span class="hljs-keyword">FROM</span>
    employees e
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> jobs j <span class="hljs-keyword">ON</span> j.job_id = e.job_id
<span class="hljs-keyword">WHERE</span>
    e.department_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);</code></pre></div>
<h4 id="5-8-2-LEFT-JOIN">5.8.2 LEFT JOIN</h4>
<p>左连接将返回左表中的所有行，而不管右表中是否存在匹配的行，相当于AB交集后显示A。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span>
    A.n
<span class="hljs-keyword">FROM</span>
    A
<span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> B.n = A.n;

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">SELECT</span>
    c.country_name, c.country_id, l.country_id, l.street_address, l.city
<span class="hljs-keyword">FROM</span>
    countries c
<span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> locations l <span class="hljs-keyword">ON</span> l.country_id = c.country_id
<span class="hljs-keyword">WHERE</span>
    c.country_id <span class="hljs-keyword">IN</span> (<span class="hljs-string">'US'</span>, <span class="hljs-string">'UK'</span>, <span class="hljs-string">'CN'</span>)
<span class="hljs-comment">/*右表中的非匹配行使用NULL值填充*/</span></code></pre></div>
<h4 id="5-8-3-FULL-OUTER-JOIN">5.8.3 FULL OUTER JOIN</h4>
<p>完全外连接是左连接和右连接的组合。完整外连接包括连接表中的所有行，相当于并集。</p>
<p>如果连接表中的行不匹配，则使用NULL值填充。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span> column_list
<span class="hljs-keyword">FROM</span> A
<span class="hljs-keyword">FULL</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> B.n = A.n;

<span class="hljs-comment">/*示例--查找不存储任何水果的空篮子*/</span>
<span class="hljs-keyword">SELECT</span>
    basket_name,
    fruit_name
<span class="hljs-keyword">FROM</span>
    fruits
<span class="hljs-keyword">FULL</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> baskets <span class="hljs-keyword">ON</span> baskets.basket_id = fruits.basket_id
<span class="hljs-keyword">WHERE</span>
    fruit_name <span class="hljs-keyword">IS</span> <span class="hljs-literal">NULL</span>;</code></pre></div>
<h4 id="5-8-4-Cross-Join">5.8.4 Cross Join</h4>
<p>SQL <code>Cross Join</code>交叉连接是一种连接操作，它生成两个或多个表的笛卡尔积。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span> column_list
<span class="hljs-keyword">FROM</span> table_A
<span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> table_B;
<span class="hljs-comment">/*在SQL中，假设A表有n行，而B表有m行，那么A和B表的交叉连接结果有n x m行*/</span>

<span class="hljs-comment">/*以下语句等同于使用上面的CROSS JOIN子句的语句*/</span>
<span class="hljs-keyword">SELECT</span>
    column_list
<span class="hljs-keyword">FROM</span>
    table_A,table_B;</code></pre></div>
<h4 id="5-8-5-自连接">5.8.5 自连接</h4>
<p>SQL自连接技术将表连接到自身。</p>
<p>我们将一张表连接到自身来评估同一个表中其他行的行。 要执行自联接，我们使用内连接或左连接子句。</p>
<p>因为同一张表在单个查询中出现两次，所以必须使用表别名。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span>
    column1,
    column2,
    column3,
        ...
<span class="hljs-keyword">FROM</span>
    table1 A
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> table1 B <span class="hljs-keyword">ON</span> B.column1 = A.column2;
<span class="hljs-comment">/*在此语句中，使用INNER JOIN子句将table1连接到自身。 A和B是table1的表别名。 B.column1 = A.column2是连接条件。*/</span>

<span class="hljs-comment">/*示例一--查询每位员工的上级经理信息。*/</span>
<span class="hljs-keyword">SELECT</span>
    <span class="hljs-keyword">CONCAT</span>(e.first_name, <span class="hljs-string">' '</span>, e.last_name) <span class="hljs-keyword">as</span> employee,
    <span class="hljs-keyword">CONCAT</span>(m.first_name, <span class="hljs-string">' '</span>, m.last_name) <span class="hljs-keyword">as</span> manager
<span class="hljs-keyword">FROM</span>
    employees e
        <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>
    employees m <span class="hljs-keyword">ON</span> m.employee_id = e.manager_id
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> manager;

<span class="hljs-comment">/*示例二--查询每位员工的上级经理信息。包含最高领导。*/</span>
<span class="hljs-keyword">SELECT</span>
    <span class="hljs-keyword">CONCAT</span>(e.first_name, <span class="hljs-string">' '</span>, e.last_name) <span class="hljs-keyword">as</span> employee,
    <span class="hljs-keyword">CONCAT</span>(m.first_name, <span class="hljs-string">' '</span>, m.last_name) <span class="hljs-keyword">as</span> manager
<span class="hljs-keyword">FROM</span>
    employees e
        <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span>
    employees m <span class="hljs-keyword">ON</span> m.employee_id = e.manager_id
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> manager;</code></pre></div>
<h2 id="六、聚合函数">六、聚合函数</h2>
<p>SQL聚合函数计算一组值并返回单个值。</p>
<p>因为聚合函数对一组值进行操作，所以它通常与<code>SELECT</code>语句的<code>GROUP BY</code>子句一起使用。<code>GROUP BY</code>子句将结果集划分为值分组，聚合函数为每个分组返回单个值。</p>
<p>以下是常用的SQL聚合函数：</p>
<ul>
<li>AVG() - 返回集合的平均值。</li>
<li>COUNT() - 返回集合中的项目数。</li>
<li>MAX() - 返回集合中的最大值。</li>
<li>MIN() - 返回集合中的最小值</li>
<li>SUM() - 返回集合中所有或不同值的总和。</li>
</ul>
<h3 id="6-1-AVG-（平均）">6.1  AVG （平均）</h3>
<p><code>AVG()</code>函数返回集合中的平均值</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
AVG([ALL|DISTINCT] expression)
<span class="hljs-comment">/*ALL关键字计算所有值的平均值，而DISTINCT关键字强制函数仅对不同的值进行操作。默认情况下，使用ALL选项*/</span>

<span class="hljs-comment">/*示例1*/</span>
<span class="hljs-keyword">SELECT</span>
    <span class="hljs-keyword">AVG</span>(salary)
<span class="hljs-keyword">FROM</span>
    employees;
<span class="hljs-keyword">SELECT</span>
    <span class="hljs-keyword">ROUND</span>(<span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">DISTINCT</span> salary), <span class="hljs-number">2</span>)
<span class="hljs-keyword">FROM</span>
    employees;
<span class="hljs-comment">--使用ROUND函数，结果舍入为2位小数</span>

<span class="hljs-comment">/*示例2 ： 与分组一起使用*/</span>
<span class="hljs-keyword">SELECT</span>
    department_id,
    <span class="hljs-keyword">AVG</span>(salary)
<span class="hljs-keyword">FROM</span>
    employees
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>
    department_id;

<span class="hljs-comment">/*示例3：与JOIN一起使用*/</span>
<span class="hljs-keyword">SELECT</span>
    e.department_id,
    department_name,
    <span class="hljs-keyword">AVG</span>(salary)
<span class="hljs-keyword">FROM</span>
    employees e
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>
    e.department_id;

<span class="hljs-comment">/*示例4 ： 与HAVING一起使用*/</span>
<span class="hljs-keyword">SELECT</span>
    e.department_id,
    department_name,
    <span class="hljs-keyword">AVG</span>(salary) <span class="hljs-keyword">AS</span> avgsalary
<span class="hljs-keyword">FROM</span>
    employees e
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>
    e.department_id
<span class="hljs-keyword">HAVING</span> avgsalary&lt;<span class="hljs-number">5000</span>
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
    <span class="hljs-keyword">AVG</span>(salary) <span class="hljs-keyword">DESC</span>;

<span class="hljs-comment">/*示例5： 子查询*/</span>
<span class="hljs-keyword">SELECT</span>
    <span class="hljs-keyword">AVG</span>(employee_sal_avg)
<span class="hljs-keyword">FROM</span>
    (
        <span class="hljs-keyword">SELECT</span>
            <span class="hljs-keyword">AVG</span>(salary) employee_sal_avg
        <span class="hljs-keyword">FROM</span>
            employees
        <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>
            department_id
    ) t;</code></pre></div>
<h3 id="6-2-COUNT（统计）">6.2 COUNT（统计）</h3>
<p>SQL <code>COUNT</code>函数来获取组中的项目数。它返回符合条件行数。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
COUNT ([ALL | DISTINCT] expression);
<span class="hljs-comment">/*COUNT(*)函数返回表中的行数，包括包含NULL值的行。*/</span>

<span class="hljs-comment">/*示例1 ： 与GROUP BY一起使用*/</span>
<span class="hljs-keyword">SELECT</span>
    e.department_id,
    department_name,
    <span class="hljs-keyword">COUNT</span>(*)
<span class="hljs-keyword">FROM</span>
    employees e
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>
    e.department_id;

<span class="hljs-comment">/*示例2 ：与HAVING一起使用 */</span>
<span class="hljs-comment">/*要按COUNT(*)函数的结果过滤分组，需要在COUNT(*)函数使用HAVING子句*/</span>
<span class="hljs-keyword">SELECT</span>
    e.department_id,
    department_name,
    <span class="hljs-keyword">COUNT</span>(*)
<span class="hljs-keyword">FROM</span>
    employees e
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>
    e.department_id
<span class="hljs-keyword">HAVING</span>
    <span class="hljs-keyword">COUNT</span>(*) &gt; <span class="hljs-number">5</span>
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
    <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">DESC</span>;</code></pre></div>
<h3 id="6-3-SUM（求和）">6.3 SUM（求和）</h3>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
SUM([ALL|DISTINCT] expression)
<span class="hljs-comment">/*只能将SUM函数应用于数字列，SUM函数忽略NULL值。*/</span>

<span class="hljs-comment">/*示例1 ：与HAVING 以及 GROUP BY一起使用*/</span>
<span class="hljs-keyword">SELECT</span>
    e.department_id,
    department_name,
    <span class="hljs-keyword">SUM</span>(salary)
<span class="hljs-keyword">FROM</span>
    employees e
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>
    e.department_id
<span class="hljs-keyword">HAVING</span>
    <span class="hljs-keyword">SUM</span>(salary) &gt; <span class="hljs-number">30000</span>
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
    <span class="hljs-keyword">SUM</span>(salary) <span class="hljs-keyword">DESC</span>;</code></pre></div>
<h3 id="6-4-MAX-MIN">6.4 MAX &amp; MIN</h3>
<p>SQL <code>Max</code>函数查找组中的最大值，<code>Min</code>函数查找组中的最小值。。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
MAX(expression)
MIN(expression)

<span class="hljs-comment">/*示例1 ： 用于子查询中*/</span>
<span class="hljs-keyword">SELECT</span>
    employee_id,
    first_name,
    last_name,
    salary
<span class="hljs-keyword">FROM</span>
    employees
<span class="hljs-keyword">WHERE</span>
    salary = (
        <span class="hljs-keyword">SELECT</span>
            <span class="hljs-keyword">MAX</span>(salary)
        <span class="hljs-keyword">FROM</span>
            employees
    );

<span class="hljs-comment">/*示例2 ： 返回每个部门中员工的最高工资，并根据最高工资对结果集进行排序。*/</span>
<span class="hljs-keyword">SELECT</span>
    d.department_id,
    department_name,
    <span class="hljs-keyword">MAX</span>(salary)
<span class="hljs-keyword">FROM</span>
    employees e
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>
    e.department_id
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>
    <span class="hljs-keyword">MAX</span>(salary) <span class="hljs-keyword">DESC</span>;

<span class="hljs-comment">/*示例3 ： 获得具有最高薪水大于12000的员工的部门*/</span>
<span class="hljs-keyword">SELECT</span>
    d.department_id,
    department_name,
    <span class="hljs-keyword">MAX</span>(salary)
<span class="hljs-keyword">FROM</span>
    employees e
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>
    e.department_id
<span class="hljs-keyword">HAVING</span>
    <span class="hljs-keyword">MAX</span>(salary) &gt; <span class="hljs-number">12000</span>;</code></pre></div>
<h3 id="6-6-Group-By子句">6.6 Group By子句</h3>
<p><code>GROUP BY</code>子句是<code>SELECT</code>语句的可选子句，它根据指定列中的匹配值将行组合成组，每组返回一行。</p>
<div class="hljs"><pre><code class="hljs SQL">--语法格式
[GROUP BY &#123;col_name | expr | position&#125;
      [ASC | DESC], ... [WITH ROLLUP]]
/*1. col_name:指定用于分组的选择列，可指定多列，彼此间用逗号分隔。
2.expr:指定用于分组的表达式
3.position:指定用于分组的选择列在SELECT语句结果集中的位置，通常是一个正整数。
4.ASC | DESC:升降序排列，默认ASC升序。
5.WITH ROLLUP:用于指定在结果集中不仅包含由GROUP BY子句分组后的数据行，还包括各分组的汇总行，以及所有分组的整体汇总行。*/

/*示例--结果集包含相同地址的男性客户人数、女性客户人数、总人数以及客户的总人数*/
SELECT cust_address,cust_sex,COUNT(*) AS "人数"
    FROM customers
    GROUP BY cust_address,cust_sex
    WITH ROLLUP;</code></pre></div>
<h3 id="6-6-HAVING">6.6 HAVING</h3>
<p>SQL <code>HAVING</code>子句，该子句用于为<code>GROUP BY</code>子句汇总的组指定条件，一般搭配<code>GROUP BY</code>子句使用。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span>
    column1,
    column2,
    AGGREGATE_FUNCTION (column3)
<span class="hljs-keyword">FROM</span>
    table1
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>
    column1,
    column2
<span class="hljs-keyword">HAVING</span>
    group_condition;
<span class="hljs-comment">/*注：需要注意的是，在GROUP BY子句之前应用WHERE子句之后应用HAVING子句之前*/</span>

<span class="hljs-comment">/*示例--统计人数大于1的班级*/</span>
<span class="hljs-keyword">SELECT</span> class_id,<span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">AS</span> <span class="hljs-string">"人数"</span>
    <span class="hljs-keyword">FROM</span> students
    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> class_id
    <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">count</span>(*)&gt;<span class="hljs-number">1</span>;</code></pre></div>
<h2 id="七、高级查询">七、高级查询</h2>
<h3 id="7-1-GROUPING-SETS运算符">7.1 GROUPING SETS运算符</h3>
<p>使用SQL <code>GROUPING SETS</code>运算符生成多个分组集</p>
<p>分组集是一组使用<code>GROUP BY</code>子句进行分组的列。 通常，单个聚合查询定义单个分组集</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span>
    c1,
    c2,
    <span class="hljs-keyword">aggregate</span> (c3)
<span class="hljs-keyword">FROM</span>
    <span class="hljs-keyword">table</span>
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>
    <span class="hljs-keyword">GROUPING</span> <span class="hljs-keyword">SETS</span> (
        (c1, c2),
        (c1),
        (c2),
        ()
);</code></pre></div>
<h3 id="7-2-ROLLUP运算符">7.2 ROLLUP运算符</h3>
<p><code>ROLLUP</code>是<code>GROUP BY</code>子句的扩展。<code>ROLLUP</code>选项允许包含表示小计的额外行，通常称为超级聚合行，以及总计行。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span>
    c1, c2, aggregate_function(c3)
<span class="hljs-keyword">FROM</span>
    <span class="hljs-keyword">table</span>
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">ROLLUP</span> (c1, c2);
<span class="hljs-comment">/*ROLLUP假定输入列之间存在层次结构。 例如，如果输入列是(c1，c2)，则层次结构c1&gt; c2。
ROLLUP生成考虑此层次结构有意义的所有分组集。 这就是为什么我们经常使用ROLLUP来生成小计和总计以用于报告目的*/</span>

<span class="hljs-comment">/*示例1*/</span>
<span class="hljs-keyword">SELECT</span>
    <span class="hljs-keyword">COALESCE</span>(warehouse, <span class="hljs-string">'All warehouses'</span>) <span class="hljs-keyword">AS</span> warehouse,
    <span class="hljs-keyword">SUM</span>(quantity)
<span class="hljs-keyword">FROM</span>
    inventory
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">ROLLUP</span> (warehouse);

<span class="hljs-comment">/*示例2*/</span>
<span class="hljs-keyword">SELECT</span>
    warehouse, product, <span class="hljs-keyword">SUM</span>(quantity)
<span class="hljs-keyword">FROM</span>
    inventory
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> warehouse, <span class="hljs-keyword">ROLLUP</span> (product);</code></pre></div>
<h3 id="7-3-UNION运算符-并集">7.3 UNION运算符 (并集)</h3>
<p>使用SQL <code>UNION</code>组合来自多个查询的两个或多个结果集，<code>UNION</code>运算符将两个或多个<code>SELECT</code>语句的结果集合并到一个结果集中,相当于并集。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span>
    column1, column2
<span class="hljs-keyword">FROM</span>
    table1
<span class="hljs-keyword">UNION</span> [<span class="hljs-keyword">ALL</span>]
<span class="hljs-keyword">SELECT</span>
    column3, column4
<span class="hljs-keyword">FROM</span>
    table2;
<span class="hljs-comment">/*带ALL参数不去重，不带ALL则去重*/</span></code></pre></div>
<h3 id="7-4-INTERSECT-交">7.4 INTERSECT(交)</h3>
<p>SQL <code>INTERSECT</code>运算符，来获取两个或多个查询的交集。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span>
    <span class="hljs-keyword">id</span>
<span class="hljs-keyword">FROM</span>
    a
<span class="hljs-keyword">INTERSECT</span>
<span class="hljs-keyword">SELECT</span>
    <span class="hljs-keyword">id</span>
<span class="hljs-keyword">FROM</span>
    b;</code></pre></div>
<p>要使用<code>INTERSECT</code>运算符，<code>SELECT</code>语句的列需要遵循以下规则：</p>
<ul>
<li>列的数据类型必须兼容。</li>
<li><code>SELECT</code>语句中的列数及其顺序必须相同</li>
</ul>
<h3 id="7-5-MINUS（差）">7.5 MINUS（差）</h3>
<p>SQL <code>MINUS</code>运算符从另一个结果集中减去一个结果集。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span>
    <span class="hljs-keyword">id</span>
<span class="hljs-keyword">FROM</span>
    A
<span class="hljs-keyword">MINUS</span>
<span class="hljs-keyword">SELECT</span>
    <span class="hljs-keyword">id</span>
<span class="hljs-keyword">FROM</span>
    B;

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">SELECT</span>
    employee_id
<span class="hljs-keyword">FROM</span>
    employees
<span class="hljs-keyword">MINUS</span>
<span class="hljs-keyword">SELECT</span>
    employee_id
<span class="hljs-keyword">FROM</span>
    dependents
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> employee_id;</code></pre></div>
<h3 id="7-6-子查询">7.6 子查询</h3>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1*/</span>
<span class="hljs-keyword">SELECT</span>
    employee_id, first_name, last_name
<span class="hljs-keyword">FROM</span>
    employees
<span class="hljs-keyword">WHERE</span>
    department_id <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span>
            department_id
        <span class="hljs-keyword">FROM</span>
            departments
        <span class="hljs-keyword">WHERE</span>
            location_id = <span class="hljs-number">1700</span>)
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> first_name , last_name;

<span class="hljs-comment">/*示例2*/</span>
<span class="hljs-keyword">SELECT</span>
    employee_id, first_name, last_name, salary
<span class="hljs-keyword">FROM</span>
    employees
<span class="hljs-keyword">WHERE</span>
    salary &gt; (<span class="hljs-keyword">SELECT</span>
            <span class="hljs-keyword">AVG</span>(salary)
        <span class="hljs-keyword">FROM</span>
            employees);</code></pre></div>
<h3 id="7-7-EXISTS运算符">7.7 EXISTS运算符</h3>
<p><code>EXISTS</code>运算符用于指定子查询以测试行的存在。如果子查询包含任何行，则返回<code>true</code>。否则，它返回<code>false</code>。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
EXISTS (subquery)
NOT EXISTS (subquery)

<span class="hljs-comment">/*示例--查找没有任何家属的员工*/</span>
<span class="hljs-keyword">SELECT</span>
    department_name
<span class="hljs-keyword">FROM</span>
    departments d
<span class="hljs-keyword">WHERE</span>
    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>( <span class="hljs-keyword">SELECT</span>
            <span class="hljs-number">1</span>
        <span class="hljs-keyword">FROM</span>
            employees e
        <span class="hljs-keyword">WHERE</span>
            salary &gt; <span class="hljs-number">10000</span>
                <span class="hljs-keyword">AND</span> e.department_id = d.department_id)
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> department_name;</code></pre></div>
<h2 id="八、约束">八、约束</h2>
<p>完整性约束保证授权用户对数据库所做的修改不会破坏数据的一致性。</p>
<h3 id="8-1-实体完整性-主键约束">8.1 实体完整性-主键约束</h3>
<ul>
<li>每个表都有一个且只有一个主键。 主键不接受<code>NULL</code>或重复值。</li>
<li>如果主键由两列或更多列组成，则值可能在一列中重复，但主键中所有列的值组合必须是唯一的。</li>
<li>复合主键不能包含不必要的多余列。</li>
</ul>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1 ： 主键由多列组成，用PRIMARY KEY定义主键*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> project_assignments (
    project_id <span class="hljs-built_in">INT</span>,
    employee_id <span class="hljs-built_in">INT</span>,
    join_date DATETIME <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-keyword">CONSTRAINT</span> pk_assgn PRIMARY <span class="hljs-keyword">KEY</span> (project_id , employee_id)
);

<span class="hljs-comment">/*示例2-- 使用ALTER TABLE语句添加主键，将milestone_id列设置为主键。*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> project_milestones
<span class="hljs-keyword">ADD</span> PRIMARY <span class="hljs-keyword">KEY</span> (milestone_id);

<span class="hljs-comment">/*示例3-- 删除project_milestones表的主键约束*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> project_milestones
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> pk_milestone_id;</code></pre></div>
<h3 id="8-2-实体完整性-唯一约束">8.2 实体完整性-唯一约束</h3>
<p>使用SQL <code>UNIQUE</code>约束强制列或一组列中值的唯一性</p>
<p><code>UNIQUE</code>约束定义了一个规则，该规则可防止存储在不参与主键的特定列中有重复值</p>
<p><code>UNIQUE</code>约束和<code>PRIMARY KEY</code>约束之间的区别：</p>
<table>
<thead>
<tr>
<th>比较项</th>
<th><code>PRIMARY KEY</code>约束</th>
<th><code>UNIQUE</code>约束</th>
</tr>
</thead>
<tbody>
<tr>
<td>约束的数量</td>
<td>一个</td>
<td>多个</td>
</tr>
<tr>
<td>NULL值</td>
<td>不允许</td>
<td>允许</td>
</tr>
</tbody>
</table>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--创建了UNIQUE约束作为列约束。*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">users</span> (
    user_id <span class="hljs-built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,
    username <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">UNIQUE</span>,
    <span class="hljs-keyword">password</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>
);

<span class="hljs-comment">/*示例2--表约束语法创建的UNIQUE约束*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">users</span> (
    user_id <span class="hljs-built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,
    username <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-keyword">password</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-keyword">CONSTRAINT</span> uc_username <span class="hljs-keyword">UNIQUE</span> (username)
);

<span class="hljs-comment">/*示例3： 将UNIQUE约束添加到现有表*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">users</span>
<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> uc_username <span class="hljs-keyword">UNIQUE</span>(username);

<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">users</span>
<span class="hljs-keyword">ADD</span> new_column data_type <span class="hljs-keyword">UNIQUE</span>;

<span class="hljs-comment">/*示例4： 删除UNIQUE约束*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> unique_constraint_name;</code></pre></div>
<h3 id="8-3-参照完整性-外键约束">8.3 参照完整性-外键约束</h3>
<p>SQL外键<code>FOREIGN KEY</code>约束以强制表之间的关系。</p>
<p>定义外码的主要目的是：让系统做参照完整性约束的检查。</p>
<p><strong>参照关系中外码的值必须在被参照关系中实际存在或为null</strong>。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-comment">--默认地，外码参照被参照关系中的主码，即下面FOREIGN KEY后面是外键，REFERENCES后面列是主键</span>
[CONSTRAINT [symbol]] FOREIGN KEY
    [index_name] (index_col_name, ...)
    REFERENCES tbl_name (index_col_name,...)
    [ON <span class="hljs-keyword">DELETE</span> reference_option]
    [<span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> reference_option]
<span class="hljs-comment">--其中reference_option的语法格式如下:</span>
RESTRICT | <span class="hljs-keyword">CASCADE</span> | <span class="hljs-keyword">SET</span> <span class="hljs-literal">NULL</span> | <span class="hljs-keyword">NO</span> <span class="hljs-keyword">ACTION</span>

<span class="hljs-comment">/*
相关语法说明如下：

1. CONSTRAINT [symbol]：可以为外键约束指定名称。
2. tbl_name：指定外键所参照的表名，这个表称为被参照表，而外键所在表称为参照表。
3. index_col_name：指定被参照的列名。
4. ON DELETE/UPDATE：指定参照动作所对应的DELETE/UPDATE语句
5. reference_option：指定参照完整性约束的实现策略。RESTRICT是限制策略，同时也是默认策略，CASCADE是级联策略，SET NULL是置空策略，NO ACTION表示不采取实施策略。
6. RESTRICT限制策略：当要删除或更新被参照表中被参照列上在外键中出现的值时，拒绝对被参照表的删除或更新操作。默认策略。
7. CASCADE级联策略：即从被参照表中删除或更新记录行时，自动删除或更新参照表中匹配的记录行。
8. SET NULL置空策略：即在被参照表中操作时，设置参照表中与之对应的外键列值为NULL。
9. NO ACTION不采取实施策略：语义动作同RESTRICT限制策略。
*/</span></code></pre></div>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--创建表时创建FOREIGN KEY约束*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> project_milestones (
    milestone_id <span class="hljs-built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,
    project_id <span class="hljs-built_in">INT</span>,
    milestone_name <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">100</span>),
    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (project_id)
        <span class="hljs-keyword">REFERENCES</span> projects (project_id)
);
<span class="hljs-comment">--FOREIGN KEY子句将project_milestones表的project_id设置为引用project表的project_id列的外键。</span>

<span class="hljs-comment">/*示例2--可以为FOREIGN KEY约束指定名称*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> project_milestones (
    milestone_id <span class="hljs-built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,
    project_id <span class="hljs-built_in">INT</span>,
    milestone_name <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">100</span>),
    <span class="hljs-keyword">CONSTRAINT</span> fk_project <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (project_id)
        <span class="hljs-keyword">REFERENCES</span> projects (project_id)
);
<span class="hljs-comment">--fk_project是FOREIGN KEY约束的名称。</span>

<span class="hljs-comment">/*示例3*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> orders
(
    order_id <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,
    order_product <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    order_product_type <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    cust_id <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    order_date DATETIME <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    order_price <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    order_amount <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    PRIMARY <span class="hljs-keyword">KEY</span>(order_id),
    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span>(cust_id)
        <span class="hljs-keyword">REFERENCES</span> customers(cust_id)
            <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> RESTRICT
            <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> RESTRICT
);
<span class="hljs-comment">/*该外键参照完整性约束确保：插入表orders中的每一个订购客户id号都执行一次检测，查看这个订购客户id号是否已经出现在表customers的客户id号（主键）中，若没有，数据无法正常插入。*/</span>

<span class="hljs-comment">/*示例4--使用ALTER来向现有表中添加FOREIGN KEY约束*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_1
<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> fk_name <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (fk_key_column)
   <span class="hljs-keyword">REFERENCES</span> table_2(pk_key_column)

<span class="hljs-comment">/*示例5--删除外键约束*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> fk_name;</code></pre></div>
<h3 id="8-4-用户定义完整性-NOT-NULL">8.4 用户定义完整性-NOT NULL</h3>
<p><code>NOT NULL</code>约束是一个列约束，它定义将列限制为仅具有非<code>NULL</code>值的规则。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name(
   ...
   column_name data_type <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
   ...
);

<span class="hljs-comment">/*示例1*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> training (
    employee_id <span class="hljs-built_in">INT</span>,
    course_id <span class="hljs-built_in">INT</span>,
    taken_date <span class="hljs-built_in">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    PRIMARY <span class="hljs-keyword">KEY</span> (employee_id , course_id)
);

<span class="hljs-comment">/*示例2--ALTER TABLE NOT NULL语句*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> training
<span class="hljs-keyword">MODIFY</span> taken_date <span class="hljs-built_in">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;</code></pre></div>
<h3 id="8-5-用户定义完整性-CHECK约束">8.5 用户定义完整性-CHECK约束</h3>
<p><code>CHECK</code>约束是SQL中的完整性约束，它允许指定列或列集中的值必须满足布尔表达式</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-comment">--CHECK约束由关键字CHECK后跟括号中的布尔表达式组成：</span>
<span class="hljs-keyword">CHECK</span>(Boolean_expression)
<span class="hljs-comment">--如果要为CHECK约束指定名称，请使用以下语法：</span>
<span class="hljs-keyword">CONSTRAINT</span> constraint_name <span class="hljs-keyword">CHECK</span>(Boolean_expression)

<span class="hljs-comment">/*示例1--其products_price列中的值必须为正数*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products (
    product_id <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span>,
    product_name <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    selling_price <span class="hljs-built_in">NUMERIC</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">CHECK</span> (selling_price &gt; <span class="hljs-number">0</span>)
);

<span class="hljs-comment">/*示例2--分配CHECK约束名称*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products (
    product_id <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span>,
    product_name <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    selling_price <span class="hljs-built_in">NUMERIC</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">CONSTRAINT</span> positive_selling_price <span class="hljs-keyword">CHECK</span> (selling_price &gt; <span class="hljs-number">0</span>)
);

<span class="hljs-comment">/*示例3： 涉及多个列 （表约束）*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products (
    product_id <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span>,
    product_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    selling_price <span class="hljs-built_in">NUMERIC</span> (<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">CHECK</span> (selling_price &gt; <span class="hljs-number">0</span>),
    <span class="hljs-keyword">cost</span> <span class="hljs-built_in">NUMERIC</span> (<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">CHECK</span> (<span class="hljs-keyword">cost</span> &gt; <span class="hljs-number">0</span>),
    <span class="hljs-keyword">CONSTRAINT</span> valid_selling_price  <span class="hljs-keyword">CHECK</span> (selling_price &gt; <span class="hljs-keyword">cost</span>)
);</code></pre></div>
<h3 id="8-6-域约束">8.6 域约束</h3>
<p><code>create domain</code>域约束是完整性约束的最基本形式，可用于检测插入到数据库中的数据的合法性</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--从现有数据类型可以创建新的域</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">domain</span> Dollars <span class="hljs-keyword">as</span> <span class="hljs-built_in">numeric</span>(<span class="hljs-number">12</span>，<span class="hljs-number">2</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">domain</span> Pounds <span class="hljs-keyword">as</span> <span class="hljs-built_in">numeric</span>(<span class="hljs-number">12</span>，<span class="hljs-number">2</span>);
<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> instructor
    (<span class="hljs-keyword">ID</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">5</span>) primary <span class="hljs-keyword">key</span>,
    <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>),
    dept <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>),
    salary Dollars,
    comm Pounds
    );</code></pre></div>
<h2 id="九、视图与索引">九、视图与索引</h2>
<h3 id="9-1-视图">9.1 视图</h3>
<p>在某些情况下，让所有用户看到整个逻辑模型是不合适的，视图就提供了这种机制：向用户隐藏特定的数据。</p>
<p>SQL允许通过查询来定义“虚关系”，它在概念上包含查询的结果，但并不预先计算并存储。像这种作为虚关系对用户可见的关系称为视图（view）。</p>
<h4 id="9-1-1-创建视图">9.1.1 创建视图</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">OR</span> <span class="hljs-keyword">REPLACE</span>] <span class="hljs-keyword">VIEW</span> view_name [(column_list)]
    <span class="hljs-keyword">AS</span> select_statement
    [<span class="hljs-keyword">WITH</span> [<span class="hljs-keyword">CASCADED</span> | <span class="hljs-keyword">LOCAL</span>] <span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">OPTION</span>]
<span class="hljs-comment">/*1. view_name:指定视图的名称，且必须唯一。不能重名。
2. column_list:可选项，用于为视图中每个列指定明确的名称，必须与select的列数相同，逗号分隔。
3.select_statement:指定创建视图的SELECT语句。
4.WITH CHECK OPTION:可选项，用于指定在可更新视图上所进行的修改都需要符合select_statement中所指定的限制条件，这样可以确保数据修改后，仍可以通过视图看到修改后的数据。
5.CASCADED | LOCAL:决定检查测试的范围。默认CASCADED，它会对所有视图进行检查。而LOCAL只对定义的视图进行检查。*/</span>

<span class="hljs-comment">/*示例--视图physics_fall_2009_Watson，列出于2009年秋季学期在Watson大楼开设的所有Physics课程的标识和教室号*/</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> physics_fall_2009_watson <span class="hljs-keyword">as</span>
<span class="hljs-keyword">select</span> course_id, room_number
<span class="hljs-keyword">from</span> physics_fall_2009
<span class="hljs-keyword">where</span> building=<span class="hljs-string">'Watson'</span>;

<span class="hljs-comment">/*示例2--创建视图customers_view,要求包含客户信息表中所有男性客户，并要求保证今后对该视图数据的修改都必须符和客户性别为男性这个条件。*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">REPLACE</span> <span class="hljs-keyword">VIEW</span> mysql_test.customers_view
    <span class="hljs-keyword">AS</span>
    <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mysql_test.customers
        <span class="hljs-keyword">WHERE</span> cust_sex=<span class="hljs-string">'M'</span>
    <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">OPTION</span>;</code></pre></div>
<h4 id="9-1-2-删除视图">9.1.2 删除视图</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>]
    view_name [, view_name] ...
    [RESTRICT | <span class="hljs-keyword">CASCADE</span>]</code></pre></div>
<h4 id="9-1-3-更新视图">9.1.3 更新视图</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">VIEW</span> view_name [(column_list)]
    <span class="hljs-keyword">AS</span> select_statement
    [<span class="hljs-keyword">WITH</span> [<span class="hljs-keyword">CASCADED</span> | <span class="hljs-keyword">LOCAL</span>] <span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">OPTION</span>]
<span class="hljs-comment">/*语法与创建视图语法相似，也可以通过先删除再创建来实现修改视图*/</span></code></pre></div>
<h4 id="9-1-4-查看视图定义">9.1.4 查看视图定义</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_name</code></pre></div>
<h4 id="9-1-5-更新视图数据">9.1.5 更新视图数据</h4>
<p>一般地，如果定义视图的查询能满足下列条件，我们称SQL视图是可更新的（updatable），即视图上可以执行插入、更新或删除</p>
<ul>
<li><code>from</code>子句中只有一个数据库关系</li>
<li><code>select</code>子句中只包含关系的属性名，不包含任何表达式、聚集或<code>distinct</code>声明</li>
<li>任何没有出现在<code>select</code>子句中的属性可以取空值；即这些属性上没有<code>not null</code>约束，也不构成主码的一部分</li>
<li>查询中不含有<code>group by</code>或<code>having</code>子句</li>
</ul>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--通过INSERT语句通过视图向基本表插入数据*/</span>
<span class="hljs-comment">--假设我们向视图faculty插入一条新元组，可写为：</span>
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> faculty <span class="hljs-keyword">values</span>(‘<span class="hljs-number">30765</span><span class="hljs-string">'，‘Green'</span>，‘Music<span class="hljs-string">');
/*该语句能够成功执行，是因为创建视图时添加了WITH CHECK OPTION*/

/*示例2--使用UPDATE语句通过视图修改基本表的数据*/
UPDATE mysql_test.customers_view
    SET cust_address='</span>上海市<span class="hljs-string">';

/*示例3--使用DELETE语句通过视图删除基本表的数据*/
DELETE FROM mysql_test.customers_view
    WHERE cust_name='</span>周明<span class="hljs-string">';</span></code></pre></div>
<h3 id="9-2-索引">9.2 索引</h3>
<h4 id="9-2-1-索引的创建">9.2.1 索引的创建</h4>
<p>我们用<code>create index</code>命令，为关系中的某些属性创建索引。索引，就是DBMS根据表中的一列或若干列按照一定顺序建立的列值与记录行之间的对应关系表，因而索引实质上是一张描述索引列的列值与原表中的记录行之间一对应关系的有序表。</p>
<p>更新表的时候索引会被自动更新，因此索引提高查询速度，降低更新速度。</p>
<h5 id="9-2-1-1-使用CREATE-INDEX语句">9.2.1.1 使用CREATE INDEX语句</h5>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式全面</span>
<span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">ONLINE</span>|<span class="hljs-keyword">OFFLINE</span>] [<span class="hljs-keyword">UNIQUE</span>|FULLTEXT|SPATIAL] <span class="hljs-keyword">INDEX</span> index_name
    [index_type]
    <span class="hljs-keyword">ON</span> tbl_name (index_col_name,...)
    [index_option] ...

<span class="hljs-comment">--语法格式常用</span>
<span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">UNIQUE</span>] <span class="hljs-keyword">INDEX</span> index_name <span class="hljs-keyword">ON</span> table_name (index_col_name,...);
<span class="hljs-comment">/*其中index_col_name的格式为:
    col_name [(length)] [ASC | DESC]
可选项length指定前length个字符创建索引，可减少索引文件大小。
关键字[ASC | DESC]指定索引升序还是降序排列，默认ASC*/</span>

<span class="hljs-comment">/*示例--在students表上用学生name前三个字符创建名为index_students的索引*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> index_students <span class="hljs-keyword">ON</span> students(<span class="hljs-keyword">name</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">ASC</span>);

<span class="hljs-comment">--我们用`create unique index`命令，为关系中的某些属性创建唯一索引</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">INDEX</span> uni_stu_index <span class="hljs-keyword">ON</span> student(<span class="hljs-keyword">ID</span>,<span class="hljs-keyword">name</span>);</code></pre></div>
<h5 id="9-2-1-2-使用CREATE-TABLE语句">9.2.1.2 使用CREATE TABLE语句</h5>
<div class="hljs"><pre><code class="hljs SQL">--语法格式
--在create table后面添加以下语法成分
&#123;INDEX | KEY&#125; [index_name] (index_col_name,...)
/*关键字KEY是关键字INDEX的同义词*/

/*示例*/
CREATE TABLE seller
    (
    seller_id INT NOT NULL AUTO_INCREMENT,
    seller_name char(50) NOT NULL,
    product_type int(5) NULL,
    sales INT NULL,
    PRIMARY KEY(seller_id,product_type),
    KEY index_seller(sales)
    );</code></pre></div>
<h5 id="9-2-1-3-使用ALTER-TABLE语句">9.2.1.3 使用ALTER TABLE语句</h5>
<div class="hljs"><pre><code class="hljs SQL">--语法格式
--在alter table后面添加以下语法成分
ADD &#123;INDEX | KEY&#125; [index_name] (index_col_name,...)

/*示例*/
ALTER TABLE seller
    ADD INDEX index_seller_name (seller_name);</code></pre></div>
<h4 id="9-2-2-索引的查看">9.2.2 索引的查看</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SHOW</span> &#123;<span class="hljs-keyword">INDEX</span> | <span class="hljs-keyword">INDEXES</span> | <span class="hljs-keyword">KEYS</span>&#125;
    &#123;<span class="hljs-keyword">FROM</span> | <span class="hljs-keyword">IN</span>&#125; tbl_name
    [&#123;<span class="hljs-keyword">FROM</span> | <span class="hljs-keyword">IN</span>&#125; db_name]
    [<span class="hljs-keyword">WHERE</span> expr]

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">KEYS</span> <span class="hljs-keyword">IN</span> seller;</code></pre></div>
<h4 id="9-2-3-索引的删除">9.2.3 索引的删除</h4>
<h5 id="9-2-3-1-使用DROP-INDEX语句">9.2.3.1 使用DROP INDEX语句</h5>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">DROP</span> [<span class="hljs-keyword">ONLINE</span>|<span class="hljs-keyword">OFFLINE</span>] <span class="hljs-keyword">INDEX</span> index_name <span class="hljs-keyword">ON</span> tbl_name

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> index_seller_name <span class="hljs-keyword">ON</span> seller;</code></pre></div>
<h5 id="9-2-3-2-使用ALTER-TABLE语句">9.2.3.2 使用ALTER TABLE语句</h5>
<p>在ALTER TABLE语句下面添加以下一项。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">DROP</span> PRIMARY <span class="hljs-keyword">KEY</span>;
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> index_name;
<span class="hljs-comment">/*删除主键也就是删除索引，主键也是一个索引*/</span>

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> seller
    <span class="hljs-keyword">DROP</span> PRIMARY <span class="hljs-keyword">KEY</span>,
    <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> index_seller;</code></pre></div>
<h2 id="十、断言及触发器">十、断言及触发器</h2>
<h3 id="10-1-断言">10.1 断言</h3>
<p>断言（assertion）是表达要求数据库永远满足的条件的谓词（复杂check条件）</p>
<p>SQL中的断言形式如下：</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">assertion</span> &lt;assertion_name&gt; <span class="hljs-keyword">check</span> &lt;predicate&gt;</code></pre></div>
<p>创建了某断言之后，系统将检查它的合法性，并对每一个可能破坏该断言的数据库更新进行检测<br>
<strong>这种检测会产生大量的开销，因此断言的使用应非常谨慎</strong></p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--例2，每位教师不能在同一个学期的同一个时间段在两个不同的教室授</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">assertion</span> ins_teaches_constraint <span class="hljs-keyword">check</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>
(<span class="hljs-keyword">select</span> <span class="hljs-keyword">ID</span>，<span class="hljs-keyword">name</span>,section_id,semester,<span class="hljs-keyword">year</span>,time_slot_id,
    <span class="hljs-keyword">count</span>(<span class="hljs-keyword">distinct</span> building,room,<span class="hljs-built_in">number</span>)
<span class="hljs-keyword">from</span> instructor <span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> teaches <span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">section</span>
<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> (<span class="hljs-keyword">ID</span>,<span class="hljs-keyword">name</span>,section_id,semester,<span class="hljs-keyword">year</span>,time_slot_id)
<span class="hljs-keyword">having</span> <span class="hljs-keyword">count</span>(building,room_number)&gt;<span class="hljs-number">1</span>)</code></pre></div>
<h3 id="10-2-触发器trigger">10.2 触发器trigger</h3>
<p>触发器（trigger）是由数据库更新操作引起的被系统自动执行的语句。</p>
<p>设计触发器必须：</p>
<ul>
<li>指明触发器被执行的条件</li>
<li>指明触发器执行时所做的具体操作</li>
</ul>
<p>1） 创建触发器</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> trigger_name trigger_time trigger_event
    <span class="hljs-keyword">ON</span> tbl_name <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-keyword">ROW</span> trigger_body
<span class="hljs-comment">/*1. trigger_name：指定触发器名称，名称唯一。
2. trigger_time：指定触发器被触发的时刻。有2个选项，BEFORE和AFTER。
3. trigger_event：指定触发事件。可以是关键字INSERT,UPDATE,DELETE。
4. FOR EACH ROW：指定对于受触发事件影响的每一行都要激活触发器的动作。
5. trigger_body：指定触发器动作主体，即MYSQL语句块。
6. 每个表每个事件只允许一个触发器，即INSERT,UPDATE,DELETE的“之前”、“之后”，共最多支持6个触发器。
7. INSERT触发器代码内，可引用一个名为NEW的虚拟表，来访问被插入的行。
8. DELETE触发器代码内，可引用一个名为OLD的虚拟表，来访问被删除的行。
9. UPDATE触发器代码内，可引用名为NEW的虚拟表，来访问新更新的值，OLD访问以前的值。
*/</span>

<span class="hljs-comment">/*例1--INSERT触发器--每次插入数据时，设置用户变量str的值为新插入客户的id*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> mysql_test.customers_insert_trigger <span class="hljs-keyword">AFTER</span> <span class="hljs-keyword">INSERT</span>
    <span class="hljs-keyword">ON</span> mysql_test.customers <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-keyword">ROW</span> <span class="hljs-keyword">SET</span> @<span class="hljs-keyword">str</span>=NEW.cust_id;

<span class="hljs-comment">/*例2--UPDATE触发器--每次更新表时，将表中cust_address列的值设置为cust_contact列的值*/</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> mysql_test.customers_update_trigger <span class="hljs-keyword">BEFORE</span> <span class="hljs-keyword">UPDATE</span>
    <span class="hljs-keyword">ON</span> mysql_test.customers <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-keyword">ROW</span>
    <span class="hljs-keyword">SET</span> NEW.cust_address=OLD.cust_contact;

<span class="hljs-comment">/*例3--使用触发器来确保关系section中属性time_slot_id的参照完整性*/</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> timeslot_check1 <span class="hljs-keyword">after</span> <span class="hljs-keyword">insert</span>
        <span class="hljs-keyword">ON</span> <span class="hljs-keyword">section</span>
        <span class="hljs-keyword">referencing</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">as</span> nrow
        <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span>
        <span class="hljs-keyword">when</span> (nrow.time_slot_id <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>
            (<span class="hljs-keyword">select</span> time_slot_id <span class="hljs-keyword">from</span>
                time_slot))<span class="hljs-comment">/*time_slot中不存在该time_slot_id*/</span>
<span class="hljs-keyword">begin</span> <span class="hljs-keyword">rollback</span> <span class="hljs-keyword">end</span>;

<span class="hljs-comment">/*例4--某种物品库存量小到一定程度就发订货单或打开报警灯*/</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> reorder_trigger <span class="hljs-keyword">after</span> <span class="hljs-keyword">update</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">level</span> <span class="hljs-keyword">on</span> inventory
    <span class="hljs-keyword">referencing</span> <span class="hljs-keyword">old</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">as</span> orow, <span class="hljs-keyword">new</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">as</span> nrow
    <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span>
    <span class="hljs-keyword">when</span> nrow.level&lt;=<span class="hljs-comment">/*保证修改后库存量低于最小库存量,更新前库存大于最小库存*/</span>
            (<span class="hljs-keyword">select</span> <span class="hljs-keyword">level</span><span class="hljs-comment">/*目的是只更新一次*/</span>
            <span class="hljs-keyword">from</span> minlevel
            <span class="hljs-keyword">where</span> minlevel.item=nrow.item) <span class="hljs-keyword">and</span> orow.level&gt;
                    (<span class="hljs-keyword">select</span> <span class="hljs-keyword">level</span>
                    <span class="hljs-keyword">from</span> minlevel
                    <span class="hljs-keyword">where</span> minlevel.item= orow.item)
<span class="hljs-keyword">begin</span>
    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> ordersbegin
    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> orders
            (<span class="hljs-keyword">select</span> item, amount
             <span class="hljs-keyword">from</span> reorder
             <span class="hljs-keyword">where</span> reorder.item= orow.item)
<span class="hljs-keyword">end</span></code></pre></div>
<p>2） 删除触发器</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TRIGGER</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>] [schema_name.]trigger_name
<span class="hljs-comment">/*1. schema_name.：用于指定触发器所在数据库名称
2. 当删除一个表时，自动删除该表上的触发器。且触发器无法修改，只能删除再创建的方式来修改。*/</span>

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TRIGGER</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> mysql_test.customers_insert_trigger;</code></pre></div>
<h2 id="十一、-安全性">十一、 安全性</h2>
<h3 id="11-1-用户账号管理">11.1 用户账号管理</h3>
<h4 id="11-1-1-创建账户">11.1.1 创建账户</h4>
<div class="hljs"><pre><code class="hljs SQL">--语法格式
CREATE USER user [IDENTIFIED BY [PASSWORD] 'password']
/*1. user：指定创建用户账号，格式为'user_name'@'host_name'。其中host_name表示主机名,主机名默认为'%'。
1. IDENTIFIED BY:可选项，指定用户账号对应口令。
2. PASSWORD:可选项，用于指定散列口令，若需要使用明文设置口令，需忽略PASSWORD关键字。
3. 'password'：指定用户账号的口令。
4. 创建的账户权限很少，只允许进行不需要权限的操作。*/

/*示例--添加2个新用户，用户名为zhangsan和lisi，主机名localhost，张三明文口令123，李四口令为456对应PASSWORD()函数返回的散列值*/
SELECT PASSWORD(456);
&gt;&gt;*531E182E2F72080AB0740FE2F2D689DBE0146E04
CREATE USER 'zhangsan'@'localhost' IDENTIFIED BY '123',
            'lisi'@'localhost' IDENTIFIED BY PASSWORD '*531E182E2F72080AB0740FE2F2D689DBE0146E04';</code></pre></div>
<h4 id="11-1-2-删除账户">11.1.2 删除账户</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>] <span class="hljs-keyword">user</span> [, <span class="hljs-keyword">user</span>] ...

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> lisi@localhost;
<span class="hljs-comment">/*用户删除不会影响他们创建的数据库对象，MYSQL并不记录是谁创建的。*/</span></code></pre></div>
<h4 id="11-1-3-修改用户账号">11.1.3 修改用户账号</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">USER</span> old_user <span class="hljs-keyword">TO</span> new_user
    [, old_user <span class="hljs-keyword">TO</span> new_user] ...

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">'zhangsan'</span>@<span class="hljs-string">'localhost'</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">'wangwu'</span>@<span class="hljs-string">'127.0.0.1'</span>;</code></pre></div>
<h4 id="11-1-4-修改用户口令">11.1.4 修改用户口令</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span> [<span class="hljs-keyword">FOR</span> <span class="hljs-keyword">user</span>] =
    &#123;
        <span class="hljs-keyword">PASSWORD</span>(<span class="hljs-string">'cleartext password'</span>)
      | <span class="hljs-string">'encrypted password'</span>
    &#125;
<span class="hljs-comment">/*1. FOR user：格式为'user_name'@'host_name'，不加上的话默认当前账户。
2. 只能用PASSWORD('cleartext password')或'encrypted password'中一项，且必须一项。
3. cleartext password是明文，encrypted password是加密密码*/</span>

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-keyword">FOR</span> <span class="hljs-string">'bob'</span>@<span class="hljs-string">'%.example.org'</span> = <span class="hljs-keyword">PASSWORD</span>(<span class="hljs-string">'cleartext password'</span>);</code></pre></div>
<h3 id="11-2-用户权限管理">11.2 用户权限管理</h3>
<p>新创建的账户没有访问权限，不能执行任何数据库操作。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--查看用户权限</span>
<span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GRANTS</span> <span class="hljs-keyword">FOR</span> <span class="hljs-string">'user_name'</span>@<span class="hljs-string">'host_name'</span>;</code></pre></div>
<h4 id="11-2-1-权限的授予">11.2.1 权限的授予</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">GRANT</span>
    priv_type [(column_list)]
      [, priv_type [(column_list)]] ...
    <span class="hljs-keyword">ON</span> [object_type] priv_level
    <span class="hljs-keyword">TO</span> user_specification [, user_specification] ...
    [<span class="hljs-keyword">WITH</span> with_option ...]
<span class="hljs-comment">/*1. priv_type：用于指定权限的名称；
2. column_list：用于指定权限要授予给表中哪些具体的列；
3. ON: 用于指定权限授予的对象和级别；
4. object_type：可选项，指定权限授予的对象类型；
5. priv_level：指定权限的级别，可以授予的权限有：列权限、表权限、数据库权限和用户权限；'*'表示当前数据库中所有表，'*.*'表示所有数据库中所有表，'db_name.routine_name'表示某个数据库中某个存储程序或函数；
6. TO：用来设定用户口令，以及指定被授予权限的用户user。GRANT 语句也可以用来创建用户账户；
7. user_specification：语法格式为`user [IDENTIFIED BY [PASSWORD] 'password']`;
8. WITH with_option:用于权限转移；
*/</span></code></pre></div>
<p>其中<code>priv_type</code>可有以下选择:</p>
<ol>
<li><code>select</code>、<code>insert</code>、<code>update</code>、<code>delete</code>：允许读关系，或查询视图、插入元组、修改元组、删除元组</li>
<li><code>references</code>：创建关系时允许声明外键</li>
<li><code>CREATE</code>、<code>ALTER</code>、<code>DROP</code>: 允许创建表、修改表、删除表权限</li>
<li><code>INDEX</code>：允许定义索引权限</li>
<li><code>CREATE ROUTINE</code>、<code>ALTER ROUTINE</code>、<code>EXECUTE ROUTINE</code>：允许创建、更新/删除、调用特定数据库的存储过程和存储函数的权限</li>
<li><code>CREATE USER</code>、<code>SHOW DATABASES</code>:允许创建或删除新用户、查看已有数据库的定义的权限</li>
<li><code>all privileges</code>：所有权限</li>
<li><code>with grant option</code>：允许用户把被授予的权限再转授给其他用户</li>
</ol>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--授予张三再customers上拥有列cust_id和name的select权限*/</span>
<span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> (cust_id,cust_name)
    <span class="hljs-keyword">ON</span> mysql_test.customers
    <span class="hljs-keyword">TO</span> <span class="hljs-string">'zhangsan'</span>@<span class="hljs-string">'localhost'</span>;

<span class="hljs-comment">/*示例2--创建李明和黄两个用户，并赋予表customers上SELECT和UPDATE权限*/</span>
<span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>,<span class="hljs-keyword">UPDATE</span>
    <span class="hljs-keyword">ON</span> mysql_test.customers
    <span class="hljs-keyword">TO</span> <span class="hljs-string">'liming'</span>@<span class="hljs-string">'127.0.0.1'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'123'</span>
        <span class="hljs-string">'huang'</span>@<span class="hljs-string">'127.0.0.1'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'789'</span>;

<span class="hljs-comment">/*示例3--授予王五mysql_test的所有表所有操作权限*/</span>
<span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span>
    <span class="hljs-keyword">ON</span> mysql_test.*
    <span class="hljs-keyword">TO</span> <span class="hljs-string">'wangwu'</span>@<span class="hljs-string">'localhost'</span>;

<span class="hljs-comment">/*示例4--授予王五拥有创建用户权限*/</span>
<span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span>
    <span class="hljs-keyword">ON</span> *.*
    <span class="hljs-keyword">TO</span> <span class="hljs-string">'wangwu'</span>@<span class="hljs-string">'localhost'</span>;

<span class="hljs-comment">/*示例5--授予用户可以SSH远程登录权限*/</span>
<span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'登录密码'</span>;
<span class="hljs-comment">--刷新权限</span>
<span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;</code></pre></div>
<h4 id="11-2-2-权限的转移">11.2.2 权限的转移</h4>
<p><code>with grant option</code>使用这条语句，可把自身拥有的权限赋予其他人</p>
<h4 id="11-2-3-权限的撤销">11.2.3 权限的撤销</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">REVOKE</span>
    priv_type [(column_list)]
      [, priv_type [(column_list)]] ...
    <span class="hljs-keyword">ON</span> [object_type] priv_level
    <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> [, <span class="hljs-keyword">user</span>] ...

<span class="hljs-comment">/*语法格式--收回所有权限*/</span>
<span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span>, <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> [,<span class="hljs-keyword">user</span>] ...

<span class="hljs-comment">/*示例1*/</span>
<span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span>
    <span class="hljs-keyword">on</span> mysql_test.customers <span class="hljs-keyword">from</span> <span class="hljs-string">'tom'</span>@<span class="hljs-string">'localhost'</span>;
<span class="hljs-comment">/*从一用户收回权限可能导致其他用户也失去该权限，称为级联回收*/</span>

<span class="hljs-comment">/*示例2--指定restrict可以阻止级联回收*/</span>
<span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span>
    <span class="hljs-keyword">on</span> instructor <span class="hljs-keyword">from</span> U1,U2,U3 restrict;
<span class="hljs-comment">/*如果要求级联回收，则带有restrict的revoke命令将会失败*/</span></code></pre></div>
<h3 id="11-3-审计跟踪">11.3 审计跟踪</h3>
<p>分为语句审计和对象审计</p>
<div class="hljs"><pre><code class="hljs SQL">--语法格式-语句审计
AUDIT &lt;st-opt&gt; [BY &lt;users&gt;]
[BY SESSION | ACCESS]
[WHENEVER SUCCESSFUL | WHENEVER NOT SUCCESSFUL]
--当BY &lt;users&gt;缺省，对所有用户审计
--BY SESSION每次会话期间，相同类型的需审计的SQL语句仅记录一次
--常用的&lt;st-opt&gt;:table，view，role，index，……
--取消审计：NOAUDIT…（其余同audit语句）

/*示例--审计用户scott每次成功执行有关table的语句。*/
audit table by scott by access whenever successful;</code></pre></div>
<div class="hljs"><pre><code class="hljs SQL">--语法格式-对象审计
AUDIT &lt;obj-opt&gt; ON &lt;obj&gt;|DEFAULT
[BY SESSION | BY ACCESS]
[WHENEVER SUCCESSFUL | WHENEVER NOT SUCCESSFUL]
--obj-opt:insert，delete，update，select，grant，…
--实体审计对所有的用户起作用
--ON&lt;obj&gt;指出审计对象表、视图名
--ONDEFAULT 对其后创建的所有对象起作用
--取消审计：NOAUDIT…

/*示例--审计所有用户对student表的delete和update操作*/
audit delete,update on student;</code></pre></div>
<h3 id="11-4-事务">11.4 事务</h3>
<h4 id="11-4-1-事务的概念">11.4.1 事务的概念</h4>
<p>当多个用户同时更新时，为了保证数据库的正确性，避免数据库的不一致性，控制这种并发操作的机制称为“并发控制”。而事务就是为保证数据的一致性而产生的一个概念和基本手段。</p>
<p><strong>事务（transaction）用户定义的一个数据操作序列，是一个完整的工作单元，要么全部执行，要么全部不执行。</strong></p>
<p>事务以<code>BEGIN TRANSACTION</code>语句开始。</p>
<p>下列SQL语句之一会结束一个事务：</p>
<ul>
<li><code>Commit</code>：提交当前事务，也就是将该事务所做的更新在数据库中持久保存。在事务被提交后，一个新的事务自动开始</li>
<li><code>Rollback</code>：回滚当前事务，即撤销该事务中所有SQL语句对数据库的更新。这样，数据库就恢复到执行该事务第一条语句之前的状态</li>
</ul>
<h4 id="11-4-2-事务的特征">11.4.2 事务的特征</h4>
<p>为保证数据一致性和正确性，数据库确保事务具有如下4个特征，简称事务的ACID特征：</p>
<ol>
<li>原子性(Atomicity)：一组更新操作是原子不可分。</li>
<li>一致性(Consistency)：满足数据库完整性约束。</li>
<li>隔离性(Isolation)：事务彼此独立，隔离，不被其他事务干扰。一个执行完，另一个才能存取。</li>
<li>持续性(Durability)：一旦提交，对数据的改变是永久的。</li>
</ol>
<h4 id="11-4-3-并发操作问题">11.4.3 并发操作问题</h4>
<p>事务的ACID特征可能遭到破坏的原因之一是多个事务对数据库的并发操作造成的。</p>
<p>典型的并发操作问题有如下三个：</p>
<ol>
<li>丢失更新：读入同一数据并修改，导致之前修改丢失。</li>
<li>不可重复读：读第一次和读第二次的结果不一样，因为别人在中间修改插入删除了某些数据
<ol>
<li>事务T1读取某一数据后，T2对其修改，T1再次读到与之前不一样的值。</li>
<li>T1读取某一数据后，T2删除部分记录，T1再次读发现某些记录丢失了。</li>
<li>T1读取某一数据后，T2插入一些记录，T1再次读发现多了一些记录。</li>
</ol>
</li>
<li>读‘脏’数据：T1修改某一数据并写回，T2读取，T1撤销操作，T2的数据便是脏数据</li>
</ol>
<h4 id="11-4-4-封锁">11.4.4 封锁</h4>
<p>封锁是最常用的并发控制技术。原理是：需要时，事务通过向系统请求对它所希望的数据对象加锁，确保它不被非预期改变。</p>
<h5 id="11-4-4-1-封锁类型">11.4.4.1 封锁类型</h5>
<p>基本的封锁类型有两种：排他锁（X锁）、共享锁（S锁）。</p>
<ul>
<li>
<p><strong>排他锁：写锁</strong>。若事务T对数据对象A加上X锁，则只允许T读取和修改A，其他任何事务都不能再对A加任何类型的锁，直到T释放A上的锁为止。这就保证了其他事务在T释放A上的锁之前不能再读取和修改A。</p>
</li>
<li>
<p><strong>共享锁：读锁</strong>，若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁为止，这就保证了其他事务可以读A，但在T上释放A的S锁之前不能对A做任何修改。</p>
</li>
</ul>
<h5 id="11-4-4-2-封锁协议">11.4.4.2 封锁协议</h5>
<ol>
<li>
<p>一级封锁协议：事务T在修改数据R前必须先对其加X锁，直到事务结束才释放。只能保证不发生丢失修改。</p>
</li>
<li>
<p>二级封锁协议：在一级封锁协议基础上，增加事务T在读取数据R前必须先对其加S锁，读完后即可释放S锁。增加保证了不发生读“脏”数据</p>
</li>
<li>
<p>三级封锁协议：在一级封锁协议的基础上，增加事务T在读取数据R前必须先对其加S锁，直到事务结束才释放进一步防止了不可重复读</p>
</li>
</ol>
<p>封锁协议级别越高，一致性程度越高</p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/%E4%B8%8D%E5%90%8C%E7%BA%A7%E5%88%AB%E7%9A%84%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7%E4%BF%9D%E8%AF%81.png" srcset="/img/loading.gif" alt="不同级别的封锁协议和一致性保证"></p>
<h5 id="11-4-4-3-活锁与死锁">11.4.4.3 活锁与死锁</h5>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/%E6%B4%BB%E9%94%81.png" srcset="/img/loading.gif" alt="活锁"></p>
<p>避免活锁最简单的方法是“先来先服务”。</p>
<p><strong>两个以上事务循环等待被同组中另一事务锁住的数据单元的情形，称为“死锁”。</strong></p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/%E6%AD%BB%E9%94%81.png" srcset="/img/loading.gif" alt="死锁"></p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/%E6%AD%BB%E9%94%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.png" srcset="/img/loading.gif" alt="死锁解决办法"></p>
<p>预防死锁的办法：</p>
<ol>
<li>一次封锁法：每个事务必须一次将所有要使用的数据全部加锁。<br>
缺点：降低了系统的并发度。而且数据是不断变化的，很难事先精确确定每个事务所要封锁的数据对象。</li>
<li>顺序封锁法：预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实现封锁。<br>
缺点：封锁的数据对象极多且在不断变化。事务的封锁请求随着事务的执行而动态地决定，很难事先确定。</li>
<li>序列化处理：通过应用设计为每一数据单元建立“主人程序”，所有请求发给“主人”，而“主人”以单道运行。<br>
缺点：系统性能、数据完整性可能受到影响。</li>
<li>资源剥夺：每当事务因锁请求不能满足而受阻，强行令冲突中的一方回滚，释放所有锁，然后重新运行。<br>
缺点：需要预防活锁发生。</li>
</ol>
<p>死锁的诊断与解除</p>
<ol>
<li>超时法：实现简单，用得最多<br>
缺点：可能误判。若时限太长不能及时发现</li>
<li>等待图法：精确判断死锁</li>
</ol>
<h5 id="11-4-4-4-可串行性">11.4.4.4 可串行性</h5>
<p>定义：若一个调度等价于某一串行高度，即它所产生的结果与某一串行调度的结果一样，称这种调度是可串行化的。</p>
<p>两段封锁法是一种简单有效的保障封锁其调度是可串行性的方法。</p>
<p>两段封锁法：所有事务必须分两个阶段对数据项进行加锁和解锁</p>
<ul>
<li>在对任何数据进行读写操作之前，首先要申请并获得对该数据的封锁</li>
<li>在释放一个封锁之后，事务不再申请和获得任何其他封锁</li>
</ul>
<p>事务分为两个阶段：</p>
<ol>
<li>获得封锁，也称为扩展阶段，可以申请获得任何数据项上的任何类型的锁，不能释放任何锁</li>
<li>释放封锁，也称为收缩阶段，可以释放任何锁，但是不能申请任何锁</li>
</ol>
<p>可以证明，若并发执行的所有事务均遵守两段锁协议，则对这些事务的任何并发调度策略都是可串行化的（充分不必要条件），但是可能导致死锁。</p>
<h3 id="11-5-备份与恢复表">11.5 备份与恢复表</h3>
<ol>
<li>用SELECT INTO … OUTFILE备份数据</li>
<li>用LOAD DATA…INFILE恢复数据</li>
</ol>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--备份语法格式</span>
<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">OUTFILE</span> <span class="hljs-string">'file_name'</span> export_options
      | <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">DUMPFILE</span> <span class="hljs-string">'file_name'</span>
<span class="hljs-comment">/*其中export_options格式为*/</span>
[&#123;<span class="hljs-keyword">FIELDS</span> | <span class="hljs-keyword">COLUMNS</span>&#125;
    [<span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'string'</span>]
    [[<span class="hljs-keyword">OPTIONALLY</span>] <span class="hljs-keyword">ENCLOSED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'char'</span>]
    [<span class="hljs-keyword">ESCAPED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'char'</span>]
]
[<span class="hljs-keyword">LINES</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'string'</span>]
<span class="hljs-comment">/*1. FIELDS和LINES子句指定数据行在备份文件中存储的格式。
2. TERMINATED BY：指定字段值之间的符号；
3. ENCLOSED BY：指定包裹文件中字符值的符号；[OPTIONALLY]可选项，所有值都放在符号中。
4. ESCAPED BY：指定转义字符。
5. TERMINATED BY：指定数据行结束标志。
6. DUMPFILE：导出的所有数据行彼此紧挨，值与行之间没有标记。*/</span>

<span class="hljs-comment">--恢复语法格式</span>
<span class="hljs-keyword">LOAD</span> <span class="hljs-keyword">DATA</span> <span class="hljs-keyword">INFILE</span> <span class="hljs-string">'file_name'</span>
    <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> tbl_name
    [&#123;<span class="hljs-keyword">FIELDS</span> | <span class="hljs-keyword">COLUMNS</span>&#125;
        [<span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'string'</span>]
        [[<span class="hljs-keyword">OPTIONALLY</span>] <span class="hljs-keyword">ENCLOSED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'char'</span>]
        [<span class="hljs-keyword">ESCAPED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'char'</span>]
    ]
    [<span class="hljs-keyword">LINES</span>
        [<span class="hljs-keyword">STARTING</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'string'</span>]
        [<span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'string'</span>]
    ]
<span class="hljs-comment">/*STARTING BY：指定一个前缀，导入数据行时，忽略数据行中该前缀和前缀之间的内容。若某行不包括该前缀，则整个数据行被跳过。*/</span>

<span class="hljs-comment">/*示例--备份*/</span>
<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mysql_test.customers
    <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">OUTFILE</span> <span class="hljs-string">'C:/BACKUP/backupfile.txt'</span>
    <span class="hljs-keyword">FIELDS</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">','</span>
    <span class="hljs-keyword">OPTIONALLY</span> <span class="hljs-keyword">ENCLOSED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">""</span>
    <span class="hljs-keyword">LINES</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'?'</span>;

<span class="hljs-comment">/*示例--恢复*/</span>
<span class="hljs-keyword">LOAD</span> <span class="hljs-keyword">DATA</span> <span class="hljs-keyword">INFILE</span> <span class="hljs-string">'C:/BACKUP/backupfile.txt'</span>
    <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> mysql_test.customers_copy
    <span class="hljs-keyword">FIELDS</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">','</span>
    <span class="hljs-keyword">OPTIONALLY</span> <span class="hljs-keyword">ENCLOSED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">""</span>
    <span class="hljs-keyword">LINES</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'?'</span>;</code></pre></div>
<p><strong>注意：多个用户使用MYSQL时，备份时在指定表上使用<code>LOCK TABLES table_name READ</code>语句做个读锁定，防止备份中被其他用户更新；恢复时使用<code>LOCK TABLES table_name WRITE</code>语句做个写锁定，防止数据冲突。备份恢复完成后，用<code>UNLOCK TABLES</code>语句对该表进行解锁。</strong></p>
<h2 id="十二、-数据库编程">十二、 数据库编程</h2>
<h3 id="12-1-存储过程">12.1 存储过程</h3>
<h4 id="12-1-1-存储过程的基本概念">12.1.1 存储过程的基本概念</h4>
<p>存储过程是一组SQL语句编译成一个SQL。类似于批量处理的SQL脚本。</p>
<p>存储过程的好处：</p>
<ul>
<li>可增强SQL语言的功能和灵活性</li>
<li>良好的封装性</li>
<li>高性能</li>
<li>可减少网络流量</li>
<li>存储过程可作为一种安全机制来确保数据库的安全性和数据的完整性</li>
</ul>
<h4 id="12-1-2-创建存储过程">12.1.2 创建存储过程</h4>
<p><code>delimiter</code>是<code>MySQL</code>中的命令，这个命令与存储过程没什么关系。</p>
<p>其实就是告诉<code>mysql</code>解释器，该段命令是否已经结束了，mysql是否可以执行了。即改变输入结束符。</p>
<p>默认情况下，<code>delimiter</code>是分号“;”。</p>
<p>但有时候，不希望<code>MySQL</code>这么做。因为可能输入较多的语句，且语句中包含有分号。</p>
<p>默认情况下，<code>mysql</code>一遇到分号，它就要自动执行。</p>
<p>这种情况下，就可以使用<code>delimiter</code>，把<code>delimiter</code>后面换成其它符号，如<code>//</code>或<code>$$</code>。</p>
<p>此时，<code>delimiter</code>作用就是对整个小段语句做一个简单的封装。</p>
<div class="hljs"><pre><code class="hljs SQL">delimiter //
delimiter ;</code></pre></div>
<p>每次使用完要记得换回原来的分号<code>;</code></p>
<p>使用<code>CREATE PROCEDURE</code>来创建存储过程：</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> sp_name ([proc_parameter[,...]])
    routine_body
<span class="hljs-comment">/*其中“proc_parameter”语法格式是[IN | OUT |INOUT]param_name type,
1.在此语法格式中，“sp_name”用于指定存储过程的名称，且默认在当前数据库中创建。
2.“proc_parameter”用于指定存储过程中的参数列表，“type”为SQL的数据类型。
3.IN | OUT |INOUT：表示输入、输出和输入/输出参数。输入参数传递参数给存储过程；输出参数用于存储过程返回一个操作结果；而输出/输出参数则两者皆可。
4.参数的取名不能和表中列名相同，会引发不可预知结果。
5.routine_body：表示存储过程的主体部分。以BEGIN开始，END结束。*/</span>

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">use</span> <span class="hljs-keyword">test</span>;
delimiter $$
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> sp_update_sex (<span class="hljs-keyword">IN</span> cid <span class="hljs-built_in">INT</span>,<span class="hljs-keyword">IN</span> csex <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">1</span>))
<span class="hljs-keyword">BEGIN</span>
    <span class="hljs-keyword">UPDATE</span> customers <span class="hljs-keyword">SET</span> cust_sex=csex <span class="hljs-keyword">WHERE</span> cust_id=cid;
<span class="hljs-keyword">END</span>$$
delimiter ;</code></pre></div>
<h4 id="12-1-3-存储过程体">12.1.3 存储过程体</h4>
<h5 id="12-1-3-1-局部变量">12.1.3.1 局部变量</h5>
<p>使用<code>DECLARE</code>语句来声明局部变量。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">DECLARE</span> var_name [, var_name] ... <span class="hljs-keyword">type</span> [<span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">value</span>]
<span class="hljs-comment">/*var_name:用于指定局部变量的名称。
type:用于声明局部变量的数据类型。
DEFAULT:用于为局部变量指定一个默认值，若没有指定，默认为NULL。*/</span>

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">DECLARE</span> cid <span class="hljs-built_in">INT</span>(<span class="hljs-number">10</span>);
<span class="hljs-comment">--局部变量智能在存储过程体的BEGIN...END语句块中声明使用。</span></code></pre></div>
<h5 id="12-1-3-2-SET语句">12.1.3.2 SET语句</h5>
<p><code>SET</code>为局部变量赋值。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SET</span> var_name=expr [, var_name=expr] ...

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">SET</span> cid=<span class="hljs-number">910</span>;</code></pre></div>
<h5 id="12-1-3-3-SELECT…INTO语句">12.1.3.3 SELECT…INTO语句</h5>
<p><code>SELECT...INTO</code>语句把选定列的值直接存储到局部变量中。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span> col_name [,...] <span class="hljs-keyword">INTO</span> var_name [,...] table_expr
<span class="hljs-comment">/*col_name用于指定列名。
var_name用于指定要赋值的变量名。
table_expr表示SELECT语句中FROM子句及其后面的语法部分。
SELECT...INTO语句返回的结果集只能有一行数据。*/</span></code></pre></div>
<h5 id="12-1-3-4-游标">12.1.3.4 游标</h5>
<p>游标是一个被<code>SELECT</code>语句检索出来的结果集。在存储了游标后，应用程序或用户就可以根据需要滚动或浏览其中的数据。使用游标的步骤如下：</p>
<p>1） 声明游标</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">DECLARE</span> cursor_name <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> select_statement
<span class="hljs-comment">/*1. cursor_name：用于指定要创建的游标的名称
2. select_statement:用于指定一个SELECT语句，返回一到多行数据。*/</span></code></pre></div>
<p>2） 打开游标</p>
<p>必须打开游标才能使用。</p>
<div class="hljs"><pre><code class="hljs SQL">OPEN cursor_name;
<span class="hljs-comment">/*游标可被打开多次，若其他用户或程序更新数据表，每次打开游标结果集可能不同*/</span></code></pre></div>
<p>3） 读取数据</p>
<div class="hljs"><pre><code class="hljs SQL">FETCH cursor_name INTO var_name [,var_name] ...
<span class="hljs-comment">/*cursor_name:用于指定已经打开的游标
var_name:指定存放数据的变量名*/</span></code></pre></div>
<p>4） 关闭游标</p>
<div class="hljs"><pre><code class="hljs SQL">CLOSE cursor_name;</code></pre></div>
<p>5） 示例</p>
<p>创建一个存储过程，用于计算表customers中数据行的行数。</p>
<div class="hljs"><pre><code class="hljs SQL">delimiter $$
<span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> sp_sumofrow(<span class="hljs-keyword">out</span> <span class="hljs-keyword">rows</span> <span class="hljs-built_in">int</span>)
<span class="hljs-keyword">begin</span>
    <span class="hljs-keyword">declare</span> cid <span class="hljs-built_in">int</span>;
    <span class="hljs-keyword">declare</span> <span class="hljs-keyword">found</span> <span class="hljs-built_in">boolean</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">declare</span> cur_cid <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span>
        <span class="hljs-keyword">select</span> cust_id <span class="hljs-keyword">from</span> customers;
    <span class="hljs-keyword">declare</span> continue <span class="hljs-keyword">handler</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">found</span>
        <span class="hljs-keyword">set</span> <span class="hljs-keyword">found</span>=<span class="hljs-literal">false</span>;
    <span class="hljs-keyword">set</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">0</span>;
    open cur_cid;
    fetch cur_cid into cid;
    while found <span class="hljs-keyword">do</span>
        <span class="hljs-keyword">set</span> <span class="hljs-keyword">rows</span>=<span class="hljs-keyword">rows</span>+<span class="hljs-number">1</span>;
        fetch cur_cid into cid;
    <span class="hljs-keyword">end</span> <span class="hljs-keyword">while</span>;
    close cur_cid;
<span class="hljs-keyword">end</span>$$
delimiter ;
<span class="hljs-comment">/*定义一个CONTINUE HANDLER句柄，它是在条件出现时被执行的代码，用于控制循环语句，实现游标的下移。
定义局部变量必须在定义任意游标和句柄之前。*/</span>

<span class="hljs-comment">/*游标只能用于存储过程或存储函数中，不能单独在查询操作中使用。*/</span></code></pre></div>
<h4 id="12-1-4-调用存储过程">12.1.4 调用存储过程</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">CALL</span> sp_name([parameter[,...]]);
<span class="hljs-keyword">CALL</span> sp_name[()];
<span class="hljs-comment">/*sp_name:指定被调用的存储过程的名称。
parameter：指定调用存储过程所使用的参数*/</span>

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">CALL</span> sp_update_sex(<span class="hljs-number">909</span>,<span class="hljs-string">'M'</span>);</code></pre></div>
<h4 id="12-1-5-删除存储过程">12.1.5 删除存储过程</h4>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>] sp_name;

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> sp_update_sex;</code></pre></div>
<h3 id="12-2-存储函数">12.2 存储函数</h3>
<p>存储过程和存储函数的区别：</p>
<ul>
<li>存储函数不能拥有输出参数，自身即是输出参数；存储过程可以拥有输出参数</li>
<li>存储函数可以被直接调用，而存储过程必须通过CALL语句调用</li>
<li>存储函数中必须包含一条RETURN语句，而这条特殊的SQL语句不允许包含于存储过程中</li>
</ul>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--1.创建函数</span>
<span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> sp_name ([func_parameter[,...]])
    <span class="hljs-keyword">RETURNS</span> <span class="hljs-keyword">type</span>
    routine_body

<span class="hljs-comment">/*示例--根据给定学生id号返回学生性别，如果没有给定id，则返回"没有该学生"*/</span>
<span class="hljs-keyword">USE</span> <span class="hljs-keyword">test</span>;
DELIMITER $$
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> fn_search(cid <span class="hljs-built_in">INT</span>)
    <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">2</span>)
<span class="hljs-keyword">BEGIN</span>
    <span class="hljs-keyword">DECLARE</span> SEX <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">2</span>);
    <span class="hljs-keyword">SELECT</span> gender <span class="hljs-keyword">INTO</span> SEX <span class="hljs-keyword">FROM</span> students
        <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=cid;
    IF SEX IS NULL THEN
        RETURN(<span class="hljs-keyword">SELECT</span> <span class="hljs-string">"没有该学生"</span>);
    ELSE
        IF SEX='F' THEN
            RETURN(<span class="hljs-keyword">SELECT</span> <span class="hljs-string">'女'</span>);
        ELSE
            RETURN(<span class="hljs-keyword">SELECT</span> <span class="hljs-string">'男'</span>);
        <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;
    <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;
<span class="hljs-keyword">END</span>$$
DELIMITER ;


<span class="hljs-comment">--2.调用函数</span>
<span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">SELECT</span> sp_name([func_parameter[,...]])

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">SELECT</span> fn_search(<span class="hljs-number">10</span>);


<span class="hljs-comment">--3.删除函数</span>
<span class="hljs-comment">--语法格式</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>] sp_name

<span class="hljs-comment">/*示例*/</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> fn_search;</code></pre></div>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用python控制鼠标和键盘</title>
    <url>/2020/03/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E4%BD%BF%E7%94%A8python%E6%8E%A7%E5%88%B6%E9%BC%A0%E6%A0%87%E5%92%8C%E9%94%AE%E7%9B%98/</url>
    <content><![CDATA[<p>使用pyautogui这个库，来达到和按键精灵差不多的效果。可以运行在多平台。</p>
<p>PyAutoGUI的五个特点:</p>
<ul>
<li>移动鼠标点击或输入其他应用程序的窗口。</li>
<li>按键发送给应用程序(例如,填写表格)。</li>
<li>截图,给定一个图像(例如,一个按钮或复选框),在屏幕上找到它。</li>
<li>定位应用程序的窗口,和移动,调整,最大化、最小化、关闭(仅适用于windows,目前)</li>
<li>显示消息框进行用户交互,而您的GUI自动化脚本运行。</li>
</ul>
<h2 id="一：-安装pyautogui库">一： 安装pyautogui库</h2>
<p><code>pip3 install pyautogui</code></p>
<p><strong>ubuntu系统，可能需要<code>sudo apt-get install python3-tk python3-dev</code>，如果安装不上，请参考<a href="https://pyautogui.readthedocs.io/en/latest/install.html" target="_blank" rel="noopener">官方文档如何安装</a></strong></p>
<h2 id="二：-使用方法">二： 使用方法</h2>
<p><a href="https://pyautogui.readthedocs.io/en/latest/" target="_blank" rel="noopener">官方文档</a></p>
<h3 id="2-1-常规功能">2.1 常规功能</h3>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pyautogui
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.position()  <span class="hljs-comment"># 当前鼠标 x， y坐标</span>
(<span class="hljs-number">968</span>, <span class="hljs-number">56</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.size()  <span class="hljs-comment"># 当前屏幕分辨率宽和高</span>
(<span class="hljs-number">1920</span>, <span class="hljs-number">1080</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.onScreen(x, y)  <span class="hljs-comment"># 鼠标坐标x且y，在屏幕内</span>
<span class="hljs-literal">True</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.PAUSE = <span class="hljs-number">2.5</span> <span class="hljs-comment"># 在每次PyAutoGUI调用之后设置2.5秒的暂停：</span></code></pre></div>
<h3 id="2-2-鼠标功能">2.2 鼠标功能</h3>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment"># XY坐标在屏幕的左上角具有0、0的原点。X向右增加，Y向向下增加。</span>

<span class="hljs-comment"># 移动鼠标</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.moveTo(x, y, duration=num_seconds)  <span class="hljs-comment"># num秒内移动鼠标到XY坐标</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.move(xOffset, yOffset, duration=num_seconds)  <span class="hljs-comment"># 相对于当前位置，鼠标移动XY</span>
<span class="hljs-comment"># 如果duration为0或未指定，则立即移动，duration以秒为单位。</span>
<span class="hljs-comment"># 例： pyautogui.move(300, 200, 2)</span>

<span class="hljs-comment"># 拖拽鼠标</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.dragTo(x, y, duration=num_seconds)  <span class="hljs-comment"># 拖拽鼠标到XY</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.drag(xOffset, yOffset, duration=num_seconds)  <span class="hljs-comment"># 相对于当前位置，鼠标拖拽XY</span>
<span class="hljs-comment"># 例： pyautogui.drag(300, 200, 2)</span>

<span class="hljs-comment"># 点击鼠标</span>
<span class="hljs-comment"># 调用click()即在鼠标的当前位置左键单击一次，但是关键字参数可以改变它：</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.click(x=moveToX, y=moveToY, clicks=num_of_clicks, interval=secs_between_clicks, button=<span class="hljs-string">'left'</span>)
<span class="hljs-comment"># clicks关键字控制点击次数;interval关键字控制点击时间间隔。</span>
<span class="hljs-comment"># 该button关键字参数可以是'left'，'middle'或'right'。即左击，中击，右击。</span>
<span class="hljs-comment"># 例：pyautogui.click(300, 200,clicks=2,interval=3,button='right')</span>

<span class="hljs-comment"># 右击，中击及双、三击</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.rightClick(x=moveToX, y=moveToY)
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.middleClick(x=moveToX, y=moveToY)
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.doubleClick(x=moveToX, y=moveToY) <span class="hljs-comment"># 双击</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.tripleClick(x=moveToX, y=moveToY) <span class="hljs-comment"># 三击</span>

<span class="hljs-comment"># 鼠标中键滚动</span>
<span class="hljs-comment"># 正向滚动将向上滚动，负向滚动将向下滚动：</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.scroll(amount_to_scroll, x=moveToX, y=moveToY)
<span class="hljs-comment"># 例： pyautogui.scroll(-10) </span>

<span class="hljs-comment"># 鼠标按下或者弹起：</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.mouseDown(x=moveToX, y=moveToY, button=<span class="hljs-string">'left'</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.mouseUp(x=moveToX, y=moveToY, button=<span class="hljs-string">'left'</span>)</code></pre></div>
<h3 id="2-3-键盘功能">2.3 键盘功能</h3>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment"># 在键盘光标所在的位置按键。</span>

<span class="hljs-comment"># 输入字符串</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.write(<span class="hljs-string">'Hello world!\n'</span>, interval=secs_between_keys)  <span class="hljs-comment"># 用于输入文本，回车换行</span>
<span class="hljs-comment"># interval是字母输入间隔时间</span>

<span class="hljs-comment"># 依次按下键盘</span>
<span class="hljs-comment"># 也可以传递键名列表：</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.write([<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'left'</span>, <span class="hljs-string">'backspace'</span>, <span class="hljs-string">'enter'</span>, <span class="hljs-string">'f1'</span>], interval=secs_between_keys)
<span class="hljs-comment"># 键名的完整列表在pyautogui.KEYBOARD_KEYS中。</span>
<span class="hljs-comment"># 例： pyautogwrite(['a', 'b', 'c'], interval=0.25)</span>

<span class="hljs-comment"># 多次按键</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.press([<span class="hljs-string">'left'</span>, <span class="hljs-string">'left'</span>, <span class="hljs-string">'left'</span>])
<span class="hljs-comment"># 或者你可以设置按多少次左键 :</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.press(<span class="hljs-string">'1'</span>, presses=<span class="hljs-number">3</span>)

<span class="hljs-comment"># 键盘快捷键（如Ctrl-S或Ctrl-Shift-1）可以通过将键名列表传递给来完成hotkey()：</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.hotkey(<span class="hljs-string">'ctrl'</span>, <span class="hljs-string">'c'</span>)  <span class="hljs-comment"># ctrl-c to copy</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.hotkey(<span class="hljs-string">'ctrl'</span>, <span class="hljs-string">'v'</span>)  <span class="hljs-comment"># ctrl-v to paste</span>

<span class="hljs-comment"># 键盘按下和弹起可以分别调用：</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.keyDown(key_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.keyUp(key_name)</code></pre></div>
<h3 id="2-4-消息框的功能">2.4 消息框的功能</h3>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment"># PyAutoGUI利用PyMsgBox消息框功能提供跨平台的,纯Python方法显示javascript式消息框。 有四个消息框功能。</span>

<span class="hljs-comment"># alert显示()函数 </span>
<span class="hljs-meta">&gt;&gt;&gt; </span>alert(text=<span class="hljs-string">''</span>, title=<span class="hljs-string">''</span>, button=<span class="hljs-string">'OK'</span>)
<span class="hljs-comment"># 显示一个简单的消息框,文本和一个OK按钮。 返回文本的按钮点击。</span>
<span class="hljs-comment"># 例：pyautogui.alert('这将显示一些文本和OK按钮.')</span>

<span class="hljs-comment"># confirm确认()函数 </span>
<span class="hljs-meta">&gt;&gt;&gt; </span>confirm(text=<span class="hljs-string">''</span>, title=<span class="hljs-string">''</span>, buttons=[<span class="hljs-string">'OK'</span>, <span class="hljs-string">'Cancel'</span>])
<span class="hljs-comment"># 显示一个消息框好和取消按钮。 数量和文本的按钮可以定制。 返回文本的按钮点击。</span>
<span class="hljs-comment"># 例： pyautogui.confirm('显示文本和OK及取消键。')</span>

<span class="hljs-comment"># prompt提示()函数 </span>
<span class="hljs-meta">&gt;&gt;&gt; </span>prompt(text=<span class="hljs-string">''</span>, title=<span class="hljs-string">''</span> , default=<span class="hljs-string">''</span>)
<span class="hljs-comment"># 显示一个消息框,文本输入,OK和Cancel按钮。 返回输入的文本,或没有,如果点击取消。</span>
<span class="hljs-comment"># 例： pyautogui.prompt(text='显示文本输入框，OK及取消键', title='标题' , default='')</span>

<span class="hljs-comment"># password密码()函数 </span>
<span class="hljs-meta">&gt;&gt;&gt; </span>password(text=<span class="hljs-string">''</span>, title=<span class="hljs-string">''</span>, default=<span class="hljs-string">''</span>, mask=<span class="hljs-string">'*'</span>)
<span class="hljs-comment"># 显示一个消息框,文本输入,OK和Cancel按钮。 输入字符显示为 * 。 返回输入的文本,或没有,如果点击取消。</span>
<span class="hljs-comment"># 例： pyautogui.password(text='显示文本输入框，OK及取消键', title='标题' , default='默认密码' , mask='*')</span></code></pre></div>
<h3 id="2-5-屏幕截图功能">2.5 屏幕截图功能</h3>
<p>在ubuntu系统中支持的不是很好，比较复杂。<br>
<a href="https://pyautogui.readthedocs.io/en/latest/screenshot.html" target="_blank" rel="noopener">具体参照官方文档</a></p>
<p>还可以根据色块或图片返回对应的坐标。这个就比较强大啦。比如可以制作自动游戏脚本等等。</p>
<h2 id="三：-实战演练">三： 实战演练</h2>
<h3 id="3-1-实时显示鼠标位置">3.1 实时显示鼠标位置</h3>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python3</span>
<span class="hljs-comment"># -*- coding: utf-8 -*-</span>

<span class="hljs-keyword">import</span> pyautogui, sys
print(<span class="hljs-string">'Press Ctrl-C to quit.'</span>)
<span class="hljs-keyword">try</span>:
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        x, y = pyautogui.position()
        positionStr = <span class="hljs-string">'X: '</span> + str(x).rjust(<span class="hljs-number">4</span>) + <span class="hljs-string">' Y: '</span> + str(y).rjust(<span class="hljs-number">4</span>)
        print(positionStr, end=<span class="hljs-string">''</span>)
        print(<span class="hljs-string">'\b'</span> * len(positionStr), end=<span class="hljs-string">''</span>, flush=<span class="hljs-literal">True</span>)
<span class="hljs-keyword">except</span> KeyboardInterrupt:
    print(<span class="hljs-string">'\n'</span>)</code></pre></div>
<h3 id="3-2-画图软件中画出方形螺旋图">3.2 画图软件中画出方形螺旋图</h3>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python3</span>
<span class="hljs-comment"># -*- coding: utf-8 -*-</span>

<span class="hljs-keyword">import</span> pyautogui
distance = <span class="hljs-number">200</span>
<span class="hljs-keyword">while</span> distance &gt; <span class="hljs-number">0</span>:
        pyautogui.drag(distance, <span class="hljs-number">0</span>, duration=<span class="hljs-number">0.5</span>)   <span class="hljs-comment"># move right</span>
        distance -= <span class="hljs-number">5</span>
        pyautogui.drag(<span class="hljs-number">0</span>, distance, duration=<span class="hljs-number">0.5</span>)   <span class="hljs-comment"># move down</span>
        pyautogui.drag(-distance, <span class="hljs-number">0</span>, duration=<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># move left</span>
        distance -= <span class="hljs-number">5</span>
        pyautogui.drag(<span class="hljs-number">0</span>, -distance, duration=<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># move up</span></code></pre></div>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>按键精灵</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】 利用爬虫和树莓派打造萝莉音天气闹钟</title>
    <url>/2020/03/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E3%80%90%E8%BD%AC%E3%80%91%C2%96%E5%88%A9%E7%94%A8%E7%88%AC%E8%99%AB%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%AD%E9%9F%B3%E5%A4%A9%E6%B0%94%E9%97%B9%E9%92%9F/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/24983204?refer=woodenrobot" target="_blank" rel="noopener">原帖地址</a></p>
</blockquote>
<h2 id="一、-前期准备">一、 前期准备</h2>
<ol>
<li>树莓派一个</li>
<li>小音箱一对</li>
</ol>
<p><strong>获取所在位置天气</strong></p>
<p>这里选择墨迹天气获取实时天气信息，地址：</p>
<p><a href="http://tianqi.moji.com/" target="_blank" rel="noopener">http://tianqi.moji.com/</a></p>
<p>进入墨迹天气的页面，墨迹天气会根据你的ip加载相应地区的天气。</p>
<p>这次我们主要抓取温度、天气、湿度、风力、空气质量和天气提示这几个数据。</p>
<p>这种小爬虫我们就使用requests和BeautifulSoup这两个超级好用的库可以快速实现。</p>
<h2 id="二、-环境">二、 环境</h2>
<p>首先树莓派安装python3，python3-pip和requests、beautifulsoup4两个库及mplayer软件。</p>
<div class="hljs"><pre><code class="hljs sh">sudo apt install python3 -y
sudo apt install python3-pip -y
pip3 install requests
pip3 install beautifulsoup4
sudo apt-get install mplayer -y</code></pre></div>
<p>至于Requests和Beautiful Soup的用法这里就先不多说了，大家可以去看他们的中文文档。</p>
<ol>
<li><a href="https://zh_cn/en/master/zh_CN/latest/index/" target="_blank" rel="noopener">Requests中文wendnag</a></li>
<li><a href="https://beautifulsoup.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">Beautiful Soup中文文档</a></li>
</ol>
<p><strong>使用mplayer实现语音播放,通过以下命令安装mplayer:</strong></p>
<p>用法很简单输入以下命令即可播放本地音乐：</p>
<p><code>mplayer \xxx\xxx\xxx.mp3(绝对地址)</code></p>
<p>如果是在线音乐也可以用mplayer直接通过URL播放：</p>
<p><code>mplayer &quot;URl&quot;(URL外面一定要用双引号圈起来)</code></p>
<h2 id="三、-文字转语音">三、 文字转语音</h2>
<p>刚开始想通过python的库实现本地文字转语音，在windows系统下没有问题，但树莓派3上中文无法转换。后来就找到了百度的文字转换语音API，地址：<a href="http://yuyin.baidu.com/#try" target="_blank" rel="noopener">http://yuyin.baidu.com/#try</a></p>
<p>还可以选各种声音，调节语速。虽然它没有给出直接的api接口，但是我们利用Chrome浏览器的开发者模式可以找到api。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E5%88%A9%E7%94%A8%E7%88%AC%E8%99%AB%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE%E6%89%93%E9%80%A0%E8%90%9D%E8%8E%89%E9%9F%B3%E5%A4%A9%E6%B0%94%E9%97%B9%E9%92%9F.png" srcset="/img/loading.gif" alt="百度语音识别"></p>
<p>打开开发者模式，点击播放的按钮，在network里就可以找到刚刚发出的请求。</p>
<p><a href="http://tts.baidu.com/text2audio?idx=1&amp;tex=1&amp;cuid=baidu_speech_demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=5&amp;per=4&amp;vol=5&amp;pit=5" target="_blank" rel="noopener">http://tts.baidu.com/text2audio?idx=1&amp;tex=1&amp;cuid=baidu_speech_demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=5&amp;per=4&amp;vol=5&amp;pit=5</a></p>
<p>就我们要找的百度文字转语音API,其中per是参数是语音的类型，spd是语速，vol是音量，而tex则是需要转换的文字。通过以下代码就可以实现将特定的文字转换为语音。</p>
<div class="hljs"><pre><code class="hljs PY"><span class="hljs-keyword">import</span> os
  
url = <span class="hljs-string">u'http://tts.baidu.com/text2audio?idx=1&amp;tex=&#123;0&#125;&amp;cuid=baidu_speech_'</span> \
      <span class="hljs-string">u'demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=4&amp;per=4&amp;vol=5&amp;pit=5'</span>.format(text)
os.system(<span class="hljs-string">'mplayer "%s"'</span> % url)</code></pre></div>
<h2 id="四、-代码">四、 代码</h2>
<p>numtozh()函数专门转换数字为中文。最后所有的代码整合起来就是这样啦。</p>
<div class="hljs"><pre><code class="hljs sh"><span class="hljs-comment"># 新建weather_voice.py文件</span>
touch weather_voice.py
<span class="hljs-comment"># 黏贴如下代码</span>
nano weather_voice.py</code></pre></div>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span>
<span class="hljs-comment"># !/usr/bin/python3</span>

<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime, timedelta
<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup

headers = &#123;
    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit'</span>
                  <span class="hljs-string">'/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safar'</span>
                  <span class="hljs-string">'i/537.36'</span>,
&#125;


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">numtozh</span><span class="hljs-params">(num)</span>:</span>
    num_dict = &#123;<span class="hljs-number">1</span>: <span class="hljs-string">'一'</span>, <span class="hljs-number">2</span>: <span class="hljs-string">'二'</span>, <span class="hljs-number">3</span>: <span class="hljs-string">'三'</span>, <span class="hljs-number">4</span>: <span class="hljs-string">'四'</span>, <span class="hljs-number">5</span>: <span class="hljs-string">'五'</span>, <span class="hljs-number">6</span>: <span class="hljs-string">'六'</span>, <span class="hljs-number">7</span>: <span class="hljs-string">'七'</span>,
                <span class="hljs-number">8</span>: <span class="hljs-string">'八'</span>, <span class="hljs-number">9</span>: <span class="hljs-string">'九'</span>, <span class="hljs-number">0</span>: <span class="hljs-string">'零'</span>&#125;
    num = int(num)
    <span class="hljs-keyword">if</span> <span class="hljs-number">100</span> &lt;= num &lt; <span class="hljs-number">1000</span>:
        b_num = num // <span class="hljs-number">100</span>
        s_num = (num - b_num * <span class="hljs-number">100</span>) // <span class="hljs-number">10</span>
        g_num = (num - b_num * <span class="hljs-number">100</span>) % <span class="hljs-number">10</span>
        <span class="hljs-keyword">if</span> g_num == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> s_num == <span class="hljs-number">0</span>:
            num = <span class="hljs-string">'%s百'</span> % (num_dict[b_num])
        <span class="hljs-keyword">elif</span> s_num == <span class="hljs-number">0</span>:
            num = <span class="hljs-string">'%s百%s%s'</span> % (num_dict[b_num], num_dict.get(s_num, <span class="hljs-string">''</span>), num_dict.get(g_num, <span class="hljs-string">''</span>))
        <span class="hljs-keyword">elif</span> g_num == <span class="hljs-number">0</span>:
            num = <span class="hljs-string">'%s百%s十'</span> % (num_dict[b_num], num_dict.get(s_num, <span class="hljs-string">''</span>))
        <span class="hljs-keyword">else</span>:
            num = <span class="hljs-string">'%s百%s十%s'</span> % (num_dict[b_num], num_dict.get(s_num, <span class="hljs-string">''</span>), num_dict.get(g_num, <span class="hljs-string">''</span>))
    <span class="hljs-keyword">elif</span> <span class="hljs-number">10</span> &lt;= num &lt; <span class="hljs-number">100</span>:
        s_num = num // <span class="hljs-number">10</span>
        g_num = (num - s_num * <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>
        <span class="hljs-keyword">if</span> g_num == <span class="hljs-number">0</span>:
            g_num = <span class="hljs-string">''</span>
        num = <span class="hljs-string">'%s十%s'</span> % (num_dict[s_num], num_dict.get(g_num, <span class="hljs-string">''</span>))
    <span class="hljs-keyword">elif</span> <span class="hljs-number">0</span> &lt;= num &lt; <span class="hljs-number">10</span>:
        g_num = num
        num = <span class="hljs-string">'%s'</span> % (num_dict[g_num])
    <span class="hljs-keyword">elif</span> <span class="hljs-number">-10</span> &lt; num &lt; <span class="hljs-number">0</span>:
        g_num = -num
        num = <span class="hljs-string">'零下%s'</span> % (num_dict[g_num])
    <span class="hljs-keyword">elif</span> <span class="hljs-number">-100</span> &lt; num &lt;= <span class="hljs-number">-10</span>:
        num = -num
        s_num = num // <span class="hljs-number">10</span>
        g_num = (num - s_num * <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>
        <span class="hljs-keyword">if</span> g_num == <span class="hljs-number">0</span>:
            g_num = <span class="hljs-string">''</span>
        num = <span class="hljs-string">'零下%s十%s'</span> % (num_dict[s_num], num_dict.get(g_num, <span class="hljs-string">''</span>))
    <span class="hljs-keyword">return</span> num


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_weather</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-comment"># 下载墨迹天气主页源码</span>
    res = requests.get(<span class="hljs-string">'http://tianqi.moji.com/'</span>, headers=headers)
    <span class="hljs-comment"># 用BeautifulSoup获取所需信息</span>
    soup = BeautifulSoup(res.text, <span class="hljs-string">"html.parser"</span>)
    temp = soup.find(<span class="hljs-string">'div'</span>, attrs=&#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'wea_weather clearfix'</span>&#125;).em.getText()
    temp = numtozh(int(temp))
    weather = soup.find(<span class="hljs-string">'div'</span>, attrs=&#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'wea_weather clearfix'</span>&#125;).b.getText()
    sd = soup.find(<span class="hljs-string">'div'</span>, attrs=&#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'wea_about clearfix'</span>&#125;).span.getText()
    sd_num = re.search(<span class="hljs-string">r'\d+'</span>, sd).group()
    sd_num_zh = numtozh(int(sd_num))
    sd = sd.replace(sd_num, sd_num_zh)
    wind = soup.find(<span class="hljs-string">'div'</span>, attrs=&#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'wea_about clearfix'</span>&#125;).em.getText()
    aqi = soup.find(<span class="hljs-string">'div'</span>, attrs=&#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'wea_alert clearfix'</span>&#125;).em.getText()
    aqi_num = re.search(<span class="hljs-string">r'\d+'</span>, aqi).group()
    aqi_num_zh = numtozh(int(aqi_num))
    aqi = aqi.replace(aqi_num, aqi_num_zh).replace(<span class="hljs-string">' '</span>, <span class="hljs-string">',空气质量'</span>)
    info = soup.find(<span class="hljs-string">'div'</span>, attrs=&#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'wea_tips clearfix'</span>&#125;).em.getText()
    sd = sd.replace(<span class="hljs-string">' '</span>, <span class="hljs-string">'百分之'</span>).replace(<span class="hljs-string">'%'</span>, <span class="hljs-string">''</span>)
    aqi = <span class="hljs-string">'aqi'</span> + aqi
    info = info.replace(<span class="hljs-string">'，'</span>, <span class="hljs-string">','</span>)
    <span class="hljs-comment"># 获取今天的日期</span>
    today = datetime.now().date().strftime(<span class="hljs-string">'%Y年%m月%d日'</span>)
    <span class="hljs-comment"># 将获取的信息拼接成一句话</span>
    text = <span class="hljs-string">'早上好！今天是%s,天气%s,温度%s摄氏度,%s,%s,%s,%s'</span> % \
           (today, weather, temp, sd, wind, aqi, info)
    <span class="hljs-keyword">return</span> text


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">text2voice</span><span class="hljs-params">(text)</span>:</span>
    url = <span class="hljs-string">'http://tts.baidu.com/text2audio?idx=1&amp;tex=&#123;0&#125;&amp;cuid=baidu_speech_'</span> \
          <span class="hljs-string">'demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=4&amp;per=4&amp;vol=5&amp;pit=5'</span>.format(text)
    <span class="hljs-comment"># 直接播放语音</span>
    os.system(<span class="hljs-string">'mplayer "%s"'</span> % url)


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-comment"># 获取需要转换语音的文字</span>
    text = get_weather()
    print(text)
    <span class="hljs-comment"># 获取音乐文件绝对地址</span>
    mp3path2 = os.path.join(os.path.dirname(__file__), <span class="hljs-string">'2.mp3'</span>)
    <span class="hljs-comment"># 先播放渔舟唱晚cut版做为闹钟</span>
    os.system(<span class="hljs-string">'mplayer %s'</span> % <span class="hljs-string">"http://m7.music.126.net/20200321204545/92ef85b98df3233ebcf66b41529b1e0c/ymusic/714d/2975/d488/bcfd91fa30f23266c7151fbf43052634.mp3"</span>)
    <span class="hljs-comment"># 播报语音天气</span>
    text2voice(text)


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>
<h2 id="五、-定时任务">五、 定时任务</h2>
<p>输入如下命令添加定时任务。</p>
<p><code>crontab -e</code></p>
<p>每天8点语音天气。假设你的<code>weather_voice.py</code>绝对路径为<code>/home/pi/Documents/weather_voice.py</code>，则文末添加一句：</p>
<p><code>0 8 * * * /usr/bin/python3 /home/pi/Documents/weather_voice.py</code></p>
]]></content>
      <categories>
        <category>python</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux VPS一键更换软件源脚本</title>
    <url>/2020/03/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/Linux-VPS%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>有时候会遇到Linux的源更新速度非常的缓慢，特别是在国内使用默认的源，因为国内的网络环境，经常会出现无法更新，更新缓慢的情况。在这种情况下，更换一个更适合或者说更近，更快的软件源，会为你的Linux安装更新操作更加的流畅和顺利。</p>
<h2 id="使用">使用</h2>
<p><strong>系统要求</strong>：<code>CentOS 5+</code>、<code>Ubuntu 14.04+</code>、<code>Debian 7+</code></p>
<p>使用命令：</p>
<div class="hljs"><pre><code class="hljs sh"><span class="hljs-comment">#下载脚本</span>
wget git.io/superupdate.sh
<span class="hljs-comment">#运行脚本</span>
bash superupdate.sh</code></pre></div>
<p>如果第一步你出现错误或执行后无任何输出，请检查是否安装<code>wget</code>和<code>ca-certificates</code>，使用命令：</p>
<div class="hljs"><pre><code class="hljs sh"><span class="hljs-comment">#Debian、Ubuntu</span>
apt-get install -y wget &amp;&amp; apt-get install -y ca-certificates
<span class="hljs-comment">#CentOS</span>
yum install -y wget &amp;&amp; yum install -y ca-certificates</code></pre></div>
<p>对于Debian默认换源为<code>Fastly CDN</code>的<code>mirror</code>这个源有<code>Fastly</code>的加持对境外主机都有不错的速度。对于<code>Ubuntu</code>和 <code>CentOS</code>系统都默认换为阿里云的<code>mirror</code>，这个源有阿里云全球CDN的加持，全球都有不错的速度。</p>
<h2 id="进阶">进阶</h2>
<p>对于<code>Debian</code>系统还设置了四套其他的源，<code>阿里云</code>，<code>CloudFront CDN</code>，<code>网易163</code>，<code>中科大的源</code>，请根据需要使用参数一键设置如：</p>
<div class="hljs"><pre><code class="hljs sh">bash superupdate.sh cn
bash superupdate.sh 163
bash superupdate.sh aliyun
bash superupdate.sh aws</code></pre></div>
<h2 id="还原">还原</h2>
<p>如果配置的文件不满意，一键还原</p>
<div class="hljs"><pre><code class="hljs sh">bash superupdate.sh restore</code></pre></div>
<p><strong><a href="https://www.moerats.com/archives/784/" target="_blank" rel="noopener">文章出处</a></strong></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>换软件源</tag>
      </tags>
  </entry>
  <entry>
    <title>局域网内的主机实现外网访问(通过反向代理)</title>
    <url>/2020/03/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%BB%E6%9C%BA%E5%AE%9E%E7%8E%B0%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE-%E9%80%9A%E8%BF%87%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>比较简单的方法：<a href="https://zhuanlan.zhihu.com/p/36156129" target="_blank" rel="noopener">下载脚本，使用frp实现内网穿透</a></p>
</blockquote>
<p>本文记录如何在树莓派上如何实现反向代理，穿透内网进行远程登录和操作树莓派。本方法也适用于其他 Linux 系统和 mac osx<br>
系统，但目录上有所区别。</p>
<h2 id="一：-必备条件">一： 必备条件</h2>
<ol>
<li>具有公网 IP 的 vps 或者云主机。</li>
<li>局域网主机（如树莓派、nas）。</li>
</ol>
<h2 id="二：-准备工作（局域网主机上操作）">二： 准备工作（局域网主机上操作）</h2>
<ol>
<li>局域网主机生成密匙(如果已经生成，请跳过)<br>
打开终端，输入。<br>
<code>ssh-keygen</code> # 然后连续按三次Enter</li>
<li>输入如下命令：<br>
<code>ssh-copy-id -i ~/.ssh/id_rsa.pub 中文改为你的云主机用户名@中文改为你的云主机外网IP</code></li>
<li>使pi默认可以root登录<br>
<code>sudo passwd root</code> # 修改pi的root密码<br>
<code>sudo nano /etc/ssh/sshd_config</code><br>
找到PermitRootLogin这一行，将前面的‘#’去掉，这一行改为<code>PermitRootLogin yes</code>。</li>
</ol>
<h2 id="三：-反向代理的操作">三： 反向代理的操作</h2>
<p>原理图：</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>IP</th>
<th>用户名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>192.168.1.A</td>
<td>U_a</td>
<td>目标 计算机，（即树莓派），在局域网中，可以访问 A</td>
</tr>
<tr>
<td>B</td>
<td>B.B.B.B</td>
<td>U_b</td>
<td>代理服务器（我们的 vps 或云主机），在外网中，无法访问 A</td>
</tr>
<tr>
<td>C</td>
<td>-</td>
<td>U_c</td>
<td>外部的计算机，比如公司的电脑，可以访问B，无法直接访问 A</td>
</tr>
</tbody>
</table>
<h3 id="3-1-设计方案">3.1 设计方案</h3>
<p>在 A 机器上做到 B 机器的反向代理；在 B 机器上做正向代理本地端口转发</p>
<h3 id="3-2环境需求">3.2环境需求</h3>
<ul>
<li>每台机器上都需要 SSH 客户端</li>
<li>A、B 两台机器上需要 SSH 服务器端。通常是 openssh-server。</li>
</ul>
<p>ubuntu和debian上安装ssh代码如下：<br>
<code>sudo apt install openssl-server</code></p>
<h3 id="3-3-SSH-参数解释">3.3 SSH 参数解释</h3>
<div class="hljs"><pre><code class="hljs C">-f 后台运行
-C 允许压缩数据
-N 不执行任何命令
-R 将端口绑定到远程服务器，反向代理
-L 将端口绑定到本地客户端，正向代理

*******************区分大小写啊各位亲******************</code></pre></div>
<h3 id="3-4-具体步骤">3.4 具体步骤</h3>
<h3 id="3-4-1-登录云主机上开启自动端口转发【云主机上操作】">3.4.1 登录云主机上开启自动端口转发【云主机上操作】</h3>
<p><code>sudo vi /etc/ssh/sshd_config</code></p>
<p>找到GatewayPorts把前面的#去掉,后面改成yes，开启自动端口转发</p>
<h3 id="3-4-2-为-B-机器上端口，用来与-A-机器上的22端口绑定-【云主机上操作】">3.4.2 为 B 机器上端口，用来与 A 机器上的22端口绑定 【云主机上操作】</h3>
<div class="hljs"><pre><code class="hljs sh">
`ssh -fCNL <span class="hljs-string">'*:&lt;port_b2&gt;:localhost:&lt;port_b1&gt;'</span> localhost`
<span class="hljs-comment"># 其中&lt;port_b1&gt;跟上面的端口相同</span>
<span class="hljs-comment"># &lt;port_b2&gt;改为和&lt;port_b1&gt;不同的大于1000端口号，如12345</span>
<span class="hljs-comment"># 代码示例：</span>
ssh -fCNL <span class="hljs-string">'*:12345:localhost:7280'</span> localhost


<span class="hljs-comment"># 查看ssh进程</span>
ps aux | grep ssh


<span class="hljs-comment"># 将云主机设为开机就正向代理</span>
<span class="hljs-built_in">which</span> rc.local
<span class="hljs-comment"># cd进入上面的路径,我这边的路径是/etc/</span>
sudo vi /etc/rc.local

<span class="hljs-comment">#按i编辑，最后一行添加如下代码，:qw保存退出</span>
sshpass -p <span class="hljs-string">'云主机密码'</span> ssh -fCNL <span class="hljs-string">'*:12345:localhost:7280'</span> localhost</code></pre></div>
<h2 id="四：-autossh-反向代理">四： autossh 反向代理</h2>
<h3 id="4-1-局域网主机（树莓派）开启autossh反向代理">4.1 局域网主机（树莓派）开启autossh反向代理</h3>
<p><strong>在上文中，我们已经能够在C 计算机通过 B 计算机访问 A 计算机，但这个代理是暂时的，会出现代理随时断开或者下次重启树莓派又要重新开启，步骤麻烦。因此，我们把方案优化，升级 ssh 的代理工具，使用 autossh 这个工具。</strong></p>
<p>我们先要安装 autossh,在局域网主机（树莓派）上。<br>
<code>sudo apt install autossh -y</code><br>
<code>sudo apt install sshpass -y</code></p>
<p>然后输入命令绑定<br>
<code>autossh -M 5678 -NR &lt;port_b1&gt;:localhost:22 云主机用户名@云主机外网IP</code><br>
代码示例：<br>
<code>sudo sshpass -p '云主机密码' autossh -M 5678 -CNR 7280:localhost:22 root@123.123.123.123</code></p>
<div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment">#ssh密码登录</span>
sudo nano /etc/rc.local
sudo sshpass -p <span class="hljs-string">'云主机密码'</span> autossh -M 5678 -CNR 7280:localhost:22 root@123.123.123.123</code></pre></div>
<p>就这样开启了反向代理，作用跟前面的一致。但，这里当代理连接断开后，会自动重连，不需要担心，突然连不上自己的 树莓派 了。</p>
<p>但我们的 pi 重启后，也是要输入上述 autossh 的命令，为了更加自动化，把autossh 加入开机启动里(需要ssh免密码登录)</p>
<div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># ssh免密码登录</span>
sudo nano /etc/rc.local

<span class="hljs-comment"># 光标移动到exit 0 的上一行，输入命令。比如花生壳是用phddns.start启动，再这里加入后花生壳就会自动启动了。</span>
/bin/su -c /usr/bin/autossh -M 5678 -CNR 7280:localhost:22 root@123.123.123.123</code></pre></div>
<p>-M 5678参数，负责通过5678端口监视连接状态，连接有问题时就会自动重连.</p>
<h3 id="4-2-通过其他电脑手机访问局域网主机（树莓派）">4.2 通过其他电脑手机访问局域网主机（树莓派）</h3>
<p><code>ssh -p &lt;port_b2&gt; 你的云主机用户名@你的云主机外网IP</code><br>
<code>&lt;port_b2&gt;</code>改成上面的端口号，如1234</p>
<p>代码示例：<br>
<code>ssh -p12345 root@123.123.123.123</code></p>
<h2 id="五：-参考文档">五： 参考文档</h2>
<blockquote>
<p><a href="https://qimajiang.com/2017/02/25/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BA%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">参考文档</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>反向代理</tag>
        <tag>外网访问</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium操作cookie</title>
    <url>/2020/03/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%20%E4%BA%8C%EF%BC%9Acookie/</url>
    <content><![CDATA[<h2 id="一：-查看cookie">一： 查看cookie</h2>
<ol>
<li>查看cookie的方法：按下F12打开开发者工具。<br>
在<code>network</code>中可以看到请求发送的信息，在返回头中，会带有服务器提供的设置cookie的信息。<br>
在<code>application</code>当中，可以看到相应网站的所有cookie，并不是只有登录信息，也不是所有的网站都有cookie。</li>
<li>http协议是一个无状态的协议，用到cookie和session来保存访问中的一些状态。<br>
cookie和session都是由服务器生成的，cookie将保存在浏览器的本地，session记录在服务端。</li>
<li>cookie的几大属性
<ul>
<li>name：名字（键），cookie的必须字段。</li>
<li>value：值。</li>
<li>domain：域。cookie的作用域名。</li>
<li>path：表示路径。/表示当前域名下所有的网页都能使用该cookie。<br>
domain和path结合在一起，限定了cookie的适用范围。</li>
<li>expires：生命周期。限定cookie的使用时间。如果生命周期为Session的，表示只在当前这次会话中cookie有效，关闭浏览器之后立即失效。</li>
<li>sessionID：本次访问的会话留下的ID号。</li>
</ul>
</li>
</ol>
<h2 id="二：-用selenium操作">二： 用selenium操作</h2>
<p>通过<code>driver.add_cookie(my_cookie)</code>的方法，加载cookie，在浏览器向服务端发起请求时带上cookie进行访问。</p>
<p>通过<code>driver.getcookie()</code>的方法，获取cookie。</p>
]]></content>
      <categories>
        <category>python</category>
        <category>cookie</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派配置</title>
    <url>/2020/03/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="一-修改密码及时间">一: 修改密码及时间</h2>
<h3 id="1-1-设置su及pi密码">1.1 设置su及pi密码</h3>
<div class="hljs"><pre><code class="hljs shell">sudo passwd pi                   # 修改 Pi 密码  
sudo passwd root                 # 设置 root 密码
su root                          # 切换到 root 用户  
su pi                            # 切换到 pi 用户</code></pre></div>
<h3 id="1-2-修改时间">1.2 修改时间</h3>
<p>使用date 语句查看时间，如不正确，则：首先在终端中用下面的命令安装ntpdate工具</p>
<p><code>sudo apt install ntpdate</code></p>
<p>启用NTP</p>
<p><code>sudo timedatectl set-ntp true</code></p>
<p>继续使用date语句查看时间，如不正确，则：</p>
<p><code>sudo dpkg-reconfigure tzdata</code></p>
<p>修改时区为Asia Shanghai，继续使用date语句查看时间并确认正确</p>
<h2 id="二-中文环境">二: 中文环境</h2>
<h2 id="2-1-安装中文输入法">2.1 安装中文输入法</h2>
<p><code>sudo apt install scim-pinyin</code></p>
<h2 id="2-2-配置中文环境">2.2 配置中文环境</h2>
<p><code>sudo raspi-config</code></p>
<p>按4 -&gt; 1<br>
在Configuring locales窗口中，找到zh_CN.UTF-8 UTF-8</p>
<p>空格选中，并在确认后再次选择zh_CN.UTF-8</p>
<h3 id="2-3-安装中文字库">2.3 安装中文字库</h3>
<p><code>sudo apt install ttf-wqy-zenhei</code></p>
<p><code>reboot</code></p>
<h2 id="三-基本设置及软件">三: 基本设置及软件</h2>
<h3 id="3-1-开启SSH访问">3.1 开启SSH访问</h3>
<p><code>sudo raspi-config</code></p>
<p>5 -&gt; P2 SSH -&gt; enable.</p>
<h3 id="3-2-设置为固定ip访问">3.2 设置为固定ip访问</h3>
<p>先进入配置文件<br>
<code>sudo nano /etc/dhcpcd.conf</code></p>
<div class="hljs"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 有线设置</span>
interface eth0
<span class="hljs-meta">#</span><span class="bash"> 路由器ip</span>
static routers=192.168.2.1
<span class="hljs-meta">#</span><span class="bash"> DNS</span>
static domain_name_servers=192.168.2.1 8.8.8.8
static ip_address=192.168.2.4/24
<span class="hljs-meta">
#</span><span class="bash"> 无线设置</span>
interface wlan0
static routers=192.168.2.1
static domain_name_servers=192.168.2.1 8.8.8.8
static ip_address=192.168.2.4/24</code></pre></div>
<h3 id="3-3-添加树莓派开机启动命令，如花生壳">3.3 添加树莓派开机启动命令，如花生壳</h3>
<div class="hljs"><pre><code class="hljs SH">sudo nano /etc/rc.local

<span class="hljs-comment"># 在exit 0 的上一行输入命令。比如花生壳是用phddns.start启动，再这里加入后花生壳就会自动启动了。</span>
sudo phddns.start</code></pre></div>
<h3 id="3-4-安装mysql-server">3.4 安装mysql-server</h3>
<p>因mysql-server被收购，故安装mariadb-server，MariaDB是MySQL源代码的一个分支，一样用。</p>
<div class="hljs"><pre><code class="hljs sh">sudo apt install mariadb-server -y
<span class="hljs-comment"># 通过命令连接到MariaDB</span>
sudo mysql</code></pre></div>
<p>接下来配置mysql密码访问。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">use</span> mysql;
<span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">password</span>=<span class="hljs-keyword">password</span>(<span class="hljs-string">'改为你的密码,比如root'</span>) <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span>=<span class="hljs-string">'root'</span>;
<span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">plugin</span>=<span class="hljs-string">'mysql_native_password'</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span> = <span class="hljs-string">'root'</span>;
<span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;
exit</code></pre></div>
<div class="hljs"><pre><code class="hljs sh"><span class="hljs-comment"># 重启服务</span>
sudo systemctl restart mariadb
<span class="hljs-comment"># 密码登录mysql</span>
mysql -u root -p</code></pre></div>
<p>下面配置MariaDB可远程连接</p>
<div class="hljs"><pre><code class="hljs sh"><span class="hljs-comment"># MariaDB默认只监听了127.0.0.1这个IP地址，是无法从外部连接到树莓派上MariaDB。故修改配置</span>
nano /etc/mysql/mariadb.conf.d/50-server.cnf
<span class="hljs-comment"># 注释其中的127.0.0.1所在一行，示例如下：</span>
<span class="hljs-comment"># bind-address            = 127.0.0.1</span>
<span class="hljs-comment"># 这样MariaDB就监听了所有的IP。</span></code></pre></div>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-comment">--授权用户能够连接MariaDB Server</span>
<span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'改为你的密码，如root'</span>;
<span class="hljs-comment">--更新权限</span>
<span class="hljs-keyword">FLUSH</span> <span class="hljs-keyword">PRIVILEGES</span>;</code></pre></div>
<h3 id="3-5-安装、配置和加速docker">3.5 安装、配置和加速docker</h3>
<p><a href="https://shumeipai.nxez.com/2019/05/20/how-to-install-docker-on-your-raspberry-pi.html" target="_blank" rel="noopener">安装教程</a></p>
<div class="hljs"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 脚本安装</span>
curl -fsSL https://get.docker.com -o get-docker.sh | sh
<span class="hljs-meta">
#</span><span class="bash"> 查看版本</span>
docker -v
<span class="hljs-meta">
#</span><span class="bash"> 配置docker镜像加速</span>
<span class="hljs-meta">#</span><span class="bash"> 阿里云镜像获取地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，登陆后，左侧菜单选中镜像加速器就可以看到你的专属地址了</span>
<span class="hljs-meta">#</span><span class="bash"> 按照页面的操作文档配置加速</span>
sudo mkdir -p /etc/docker

sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'
&#123;
  "registry-mirrors": ["https://改为你的加速器地址.mirror.aliyuncs.com"]
&#125;
EOF

sudo systemctl daemon-reload

sudo systemctl restart docker
<span class="hljs-meta">
#</span><span class="bash"> 下载 Docker 图形化界面 portainer</span>
sudo docker pull portainer/portainer
<span class="hljs-meta">
#</span><span class="bash"> 创建 portainer 容器</span>
sudo docker volume create portainer_data
<span class="hljs-meta">
#</span><span class="bash"> 运行 portainer</span>
sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
<span class="hljs-meta">
#</span><span class="bash"> 输入树莓派ip:9000登录管理界面</span></code></pre></div>
<h2 id="四-安装Pi-hole搭建DNS缓存服务器，过滤网页广告">四: 安装Pi-hole搭建DNS缓存服务器，过滤网页广告</h2>
<p><strong>pi-hole使用后发现并不好用，故不推荐安装。</strong></p>
<h3 id="4-1-安装Pi-hole">4.1 安装Pi-hole</h3>
<p>使用脚本自定义安装，在安装过程中可以自定义Pi-hole，命令如下：</p>
<div class="hljs"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> --depth 1 https://github.com/pi-hole/pi-hole.git Pi-hole
<span class="hljs-built_in">cd</span> Pi-hole/automated\ install/
bash basic-install.sh</code></pre></div>
<p>安装过程中，将会下载安装软件包，然后弹出一个红蓝界面，可以选择Pi-hole的配置，选择默认方式即可。安装后会生成后台的登陆密码，请记住，如果没看到这个密码也没关系，安装成功后可以自己设置。等待脚本的安装完成，约1-2个小时。</p>
<h3 id="4-2-使用">4.2 使用</h3>
<p>Pi-hole安装成功后就会开始运行，如果你要使用它，请将你电脑的DNS改为树莓派的IP地址，同时，也应该将家庭路由器的DNS地址更改为树莓派当前的IP地址，这样才能使用树莓派的DNS服务和广告拦截服务。</p>
<h3 id="4-3-登陆Pi-hole">4.3 登陆Pi-hole</h3>
<p>Pi-hole有一个美观的界面，可以直观的看到今日DNS查询屏蔽次数、今日DNS查询次数、屏蔽比例、屏蔽库中的域名数量等信息。Pi-hole界面的查看地址为：</p>
<p><code>http://&lt;your pi’s IP address&gt;/admin</code></p>
<p>其中<code>&lt;your pi’s IP address&gt;</code>用树莓派的IP地址替换即可。</p>
<h3 id="4-4-重置密码">4.4 重置密码</h3>
<p>如果你忘记了密码，通过以下命令可以重置新的密码。</p>
<p><code>sudo pihole -a -p newpassword</code></p>
<h3 id="4-5-实时监控">4.5 实时监控</h3>
<p>通过SSH实时监控，输入命令：</p>
<p><code>pihole -c</code></p>
<h3 id="4-6-升级Pihole">4.6 升级Pihole</h3>
<p><code>pihole -up</code></p>
<h3 id="4-7-更改-重置GUI管理员密码">4.7 更改/重置GUI管理员密码</h3>
<p><code>pihole -a -p</code></p>
<h3 id="4-8-检查pi-hole状态">4.8 检查pi-hole状态</h3>
<p><code>pihole status</code></p>
<h3 id="4-9-重新配置pi-hole系统">4.9 重新配置pi-hole系统</h3>
<p><code>pihole -r</code></p>
<h3 id="4-10-从系统中卸载Pi-hole">4.10 从系统中卸载Pi-hole</h3>
<p><code>pihole uninstall</code></p>
<p>第一次选Y，第二次选N</p>
<h3 id="4-11-重启Pi-holes子系统">4.11 重启Pi-holes子系统</h3>
<p><code>pihole restartdns</code></p>
<h3 id="4-12-帮助">4.12 帮助</h3>
<p><code>pihole --help</code></p>
<p><strong>pi-hole使用后发现并不好用，故不推荐安装，已经卸载。</strong></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>关系数据库MySQL入门</title>
    <url>/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93MySQL/</url>
    <content><![CDATA[<blockquote>
<p><strong>本文转载于GitHub项目<a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">Python - 100天从新手到大师</a></strong></p>
</blockquote>
<h3 id="一：-关系数据库概述">一： 关系数据库概述</h3>
<ol>
<li>
<p>数据持久化 - 将数据保存到能够长久保存数据的存储介质中，在掉电的情况下数据也不会丢失。</p>
</li>
<li>
<p>数据库发展史 - 网状数据库、层次数据库、关系数据库、NoSQL数据库。</p>
<blockquote>
<p>1970年，IBM的研究员E.F.Codd在<em>Communication of the ACM</em>上发表了名为<em>A Relational Model of Data for Large Shared Data Banks</em>的论文，提出了关系模型的概念，奠定了关系模型的理论基础。后来Codd又陆续发表多篇文章，论述了范式理论和衡量关系系统的12条标准，用数学理论奠定了关系数据库的基础。</p>
</blockquote>
</li>
<li>
<p>关系数据库特点。</p>
<ul>
<li>
<p>理论基础：集合论和关系代数。</p>
</li>
<li>
<p>具体表象：用二维表（有行和列）组织数据。</p>
</li>
<li>
<p>编程语言：结构化查询语言（SQL）。</p>
</li>
</ul>
</li>
<li>
<p>ER模型（实体关系模型）和概念模型图。</p>
<p><strong>ER模型</strong>，全称为<strong>实体关系模型</strong>（Entity-Relationship Model），由美籍华裔计算机科学家陈品山先生提出，是概念数据模型的高层描述方式，如下图所示。</p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/er_diagram.png" srcset="/img/loading.gif" alt="er_diagram.png"></p>
<ul>
<li>实体 - 矩形框</li>
<li>属性 - 椭圆框</li>
<li>关系 - 菱形框</li>
<li>重数 - 1:1（一对一） / 1:N（一对多） / M:N（多对多）</li>
</ul>
<p>实际项目开发中，我们可以利用数据库建模工具（如：PowerDesigner）来绘制概念数据模型（其本质就是ER模型），然后再设置好目标数据库系统，将概念模型转换成物理模型，最终生成创建二维表的SQL（很多工具都可以根据我们设计的物理模型图以及设定的目标数据库来导出SQL或直接生成数据表）。</p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/conceptual_model.png" srcset="/img/loading.gif" alt="conceptual_model.png"></p>
</li>
<li>
<p>关系数据库产品。</p>
<ul>
<li><a href="https://www.oracle.com/index.html" target="_blank" rel="noopener">Oracle</a> - 目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系数据库，它是一个完备关系的产品；作为分布式数据库，它实现了分布式处理的功能。在Oracle最新的12c版本中，还引入了多承租方架构，使用该架构可轻松部署和管理数据库云。</li>
<li><a href="https://www.ibm.com/analytics/us/en/db2/" target="_blank" rel="noopener">DB2</a> - IBM公司开发的、主要运行于Unix（包括IBM自家的<a href="https://zh.wikipedia.org/wiki/AIX" target="_blank" rel="noopener">AIX</a>）、Linux、以及Windows服务器版等系统的关系数据库产品。DB2历史悠久且被认为是最早使用SQL的数据库产品，它拥有较为强大的商业智能功能。</li>
<li><a href="https://www.microsoft.com/en-us/sql-server/" target="_blank" rel="noopener">SQL Server</a> - 由Microsoft开发和推广的关系型数据库产品，最初适用于中小企业的数据管理，但是近年来它的应用范围有所扩展，部分大企业甚至是跨国公司也开始基于它来构建自己的数据管理系统。</li>
<li><a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL</a> - MySQL是开放源代码的，任何人都可以在GPL（General Public License）的许可下下载并根据个性化的需要对其进行修改。MySQL因为其速度、可靠性和适应性而备受关注。</li>
<li><a href="">PostgreSQL</a> - 在BSD许可证下发行的开放源代码的关系数据库产品。</li>
</ul>
</li>
</ol>
<h3 id="二：-MySQL简介">二： MySQL简介</h3>
<p>MySQL最早是由瑞典的MySQL AB公司开发的一个开放源码的关系数据库管理系统，该公司于2008年被昇阳微系统公司（Sun Microsystems）收购。在2009年，甲骨文公司（Oracle）收购昇阳微系统公司，因此在这之后MySQL成为了Oracle旗下产品。</p>
<p>MySQL在过去由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用于中小型网站开发。随着MySQL的不断成熟，它也逐渐被应用于更多大规模网站和应用，比如维基百科、谷歌（Google）、脸书（Facebook）、淘宝网等网站都使用了MySQL来提供数据持久化服务。</p>
<p>甲骨文公司收购后昇阳微系统公司，大幅调涨MySQL商业版的售价，且甲骨文公司不再支持另一个自由软件项目<a href="https://zh.wikipedia.org/wiki/OpenSolaris" target="_blank" rel="noopener">OpenSolaris</a>的发展，因此导致自由软件社区对于Oracle是否还会持续支持MySQL社区版（MySQL的各个发行版本中唯一免费的版本）有所担忧，MySQL的创始人麦克尔·维德纽斯以MySQL为基础，成立分支计划<a href="https://zh.wikipedia.org/wiki/MariaDB" target="_blank" rel="noopener">MariaDB</a>（以他女儿的名字命名的数据库）。有许多原来使用MySQL数据库的公司（例如：维基百科）已经陆续完成了从MySQL数据库到MariaDB数据库的迁移。</p>
<ol>
<li>
<p>安装和配置</p>
<blockquote>
<p><strong>说明</strong>：下面的安装和配置都是以CentOS Linux环境为例，如果需要在其他系统下安装MySQL，读者可以自行在网络上查找对应的安装教程）。</p>
</blockquote>
<ul>
<li>
<p>刚才说过，MySQL有一个分支版本名叫MariaDB，该数据库旨在继续保持MySQL数据库在<a href="https://zh.wikipedia.org/wiki/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%AE%B8%E5%8F%AF%E8%AF%81" target="_blank" rel="noopener">GNU GPL</a>下开源。如果要使用MariaDB作为MySQL的替代品，可以使用下面的命令进行安装。</p>
<div class="hljs"><pre><code class="hljs Shell">yum install mariadb mariadb-server</code></pre></div>
</li>
<li>
<p>如果要安装官方版本的MySQL，可以在<a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL官方网站</a>下载安装文件。首先在下载页面中选择平台和版本，然后找到对应的下载链接。下面以MySQL 5.7.26版本和Red Hat Enterprise Linux为例，直接下载包含所有安装文件的归档文件，解归档之后通过包管理工具进行安装。</p>
<div class="hljs"><pre><code class="hljs Shell">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar
tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</code></pre></div>
<p>如果系统上有MariaDB相关的文件，需要先移除MariaDB相关的文件。</p>
<div class="hljs"><pre><code class="hljs Shell">yum list installed | grep mariadb | awk '&#123;print $1&#125;' | xargs yum erase -y</code></pre></div>
<p>接下来可以按照如下所示的顺序用RPM（Redhat Package Manager）工具安装MySQL。</p>
<div class="hljs"><pre><code class="hljs Shell">rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm
rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm
rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm
rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</code></pre></div>
<p>可以使用下面的命令查看已经安装的MySQL相关的包。</p>
<div class="hljs"><pre><code class="hljs Shell">rpm -qa | grep mysql</code></pre></div>
</li>
<li>
<p>配置MySQL。</p>
<p>MySQL的配置文件在<code>/etc</code>目录下，名为<code>my.cnf</code>，默认的配置文件内容如下所示。如果对这个文件不理解并没有关系，什么时候用到这个配置文件什么时候再了解它就行了。</p>
<div class="hljs"><pre><code class="hljs Shell">cat /etc/my.cnf</code></pre></div>
<div class="hljs"><pre><code class="hljs INI"><span class="hljs-comment"># For advice on how to change settings please see</span>
<span class="hljs-comment"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span>
<span class="hljs-section">
[mysqld]</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment"># Remove leading # and set to the amount of RAM for the most important data</span>
<span class="hljs-comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span>
<span class="hljs-comment"># innodb_buffer_pool_size = 128M</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment"># Remove leading # to turn on a very important data integrity option: logging</span>
<span class="hljs-comment"># changes to the binary log between backups.</span>
<span class="hljs-comment"># log_bin</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment"># Remove leading # to set options mainly useful for reporting servers.</span>
<span class="hljs-comment"># The server defaults are faster for transactions and fast SELECTs.</span>
<span class="hljs-comment"># Adjust sizes as needed, experiment to find the optimal values.</span>
<span class="hljs-comment"># join_buffer_size = 128M</span>
<span class="hljs-comment"># sort_buffer_size = 2M</span>
<span class="hljs-comment"># read_rnd_buffer_size = 2M</span>
<span class="hljs-attr">datadir</span>=/var/lib/mysql
<span class="hljs-attr">socket</span>=/var/lib/mysql/mysql.sock

<span class="hljs-comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span>
<span class="hljs-attr">symbolic-links</span>=<span class="hljs-number">0</span>

<span class="hljs-attr">log-error</span>=/var/log/mysqld.log
<span class="hljs-attr">pid-file</span>=/var/run/mysqld/mysqld.pid</code></pre></div>
</li>
<li>
<p>启动MySQL服务。</p>
<p>可以使用下面的命令来启动MySQL。</p>
<div class="hljs"><pre><code class="hljs Shell">service mysqld start</code></pre></div>
<p>在CentOS 7中，更推荐使用下面的命令来启动MySQL。</p>
<div class="hljs"><pre><code class="hljs Shell">systemctl start mysqld</code></pre></div>
<p>启动MySQL成功后，可以通过下面的命令来检查网络端口使用情况，MySQL默认使用3306端口。</p>
<div class="hljs"><pre><code class="hljs Shell">netstat -ntlp | grep mysql</code></pre></div>
<p>也可以使用下面的命令查找是否有名为mysqld的进程。</p>
<div class="hljs"><pre><code class="hljs Shell">pgrep mysqld</code></pre></div>
</li>
<li>
<p>使用MySQL客户端工具连接服务器。</p>
<p>命令行工具：</p>
<div class="hljs"><pre><code class="hljs Shell">mysql -u root -p</code></pre></div>
<blockquote>
<p>说明：启动客户端时，<code>-u</code>参数用来指定用户名，MySQL默认的超级管理账号为<code>root</code>；<code>-p</code>表示要输入密码（用户口令）；如果连接的是其他主机而非本机，可以用<code>-h</code>来指定连接主机的主机名或IP地址。</p>
</blockquote>
<p>如果是首次安装MySQL，可以使用下面的命令来找到默认的初始密码。</p>
<div class="hljs"><pre><code class="hljs Shell">cat /var/log/mysqld.log | grep password</code></pre></div>
<p>上面的命令会查看MySQL的日志带有password的行，在显示的结果中<code>root@localhost:</code>后面的部分就是默认设置的初始密码。</p>
<p>修改超级管理员（root）的访问口令为<code>123456</code>。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password_policy=<span class="hljs-number">0</span>;
<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password_length=<span class="hljs-number">6</span>;
<span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'localhost'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'123456'</span>;</code></pre></div>
<blockquote>
<p><strong>说明</strong>：MySQL较新的版本默认不允许使用弱口令作为用户口令，所以我们通过上面的前两条命令修改了验证用户口令的策略和口令的长度。事实上我们不应该使用弱口令，因为存在用户口令被暴力破解的风险。近年来，攻击数据库窃取数据和劫持数据库勒索比特币的事件屡见不鲜，要避免这些潜在的风险，最为重要的一点是不要让数据库服务器暴露在公网上（最好的做法是将数据库置于内网，至少要做到不向公网开放数据库服务器的访问端口），另外要保管好<code>root</code>账号的口令，应用系统需要访问数据库时，通常不使用<code>root</code>账号进行访问，而是创建其他拥有适当权限的账号来访问。</p>
</blockquote>
<p>再次使用客户端工具连接MySQL服务器时，就可以使用新设置的口令了。在实际开发中，为了方便用户操作，可以选择图形化的客户端工具来连接MySQL服务器，包括：</p>
<ul>
<li>MySQL Workbench（官方提供的工具）</li>
<li>Navicat for MySQL（界面简单优雅，功能直观强大）</li>
<li>SQLyog for MySQL（强大的MySQL数据库管理员工具）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>常用命令。</p>
<ul>
<li>
<p>查看服务器版本。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-keyword">version</span>();</code></pre></div>
</li>
<li>
<p>查看所有数据库。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">show</span> <span class="hljs-keyword">databases</span>;</code></pre></div>
</li>
<li>
<p>切换到指定数据库。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">use</span> mysql;</code></pre></div>
</li>
<li>
<p>查看数据库下所有表。</p>
<div class="hljs"><pre><code class="hljs Shell">show tables;</code></pre></div>
</li>
<li>
<p>获取帮助。</p>
<div class="hljs"><pre><code class="hljs SQL">? contents;
? functions;
? numeric functions;
? round;

? data types;
? longblob;</code></pre></div>
</li>
</ul>
</li>
</ol>
<h3 id="三：-SQL详解">三： SQL详解</h3>
<h4 id="3-1-基本操作">3.1 基本操作</h4>
<p>我们通常可以将SQL分为三类：DDL（数据定义语言）、DML（数据操作语言）和DCL（数据控制语言）。DDL主要用于创建（create）、删除（drop）、修改（alter）数据库中的对象，比如创建、删除和修改二维表；DML主要负责插入数据（insert）、删除数据（delete）、更新数据（update）和查询（select）；DCL通常用于授予权限（grant）和召回权限（revoke）。</p>
<blockquote>
<p>说明：SQL是不区分大小写的语言，为了书写方便，下面的SQL都使用了小写字母来书写。</p>
</blockquote>
<ol>
<li>
<p>DDL（数据定义语言）</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">-- 如果存在名为school的数据库就删除它</span>
<span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> school;

<span class="hljs-comment">-- 创建名为school的数据库并设置默认的字符集和排序方式</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> school <span class="hljs-keyword">default</span> <span class="hljs-keyword">charset</span> utf8;

<span class="hljs-comment">-- 切换到school数据库上下文环境</span>
<span class="hljs-keyword">use</span> school;

<span class="hljs-comment">-- 创建学院表</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_college
(
collid 		<span class="hljs-built_in">int</span> auto_increment <span class="hljs-keyword">comment</span> <span class="hljs-string">'编号'</span>,
collname 	<span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'名称'</span>,
collintro 	<span class="hljs-built_in">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">''</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'介绍'</span>,
primary <span class="hljs-keyword">key</span> (collid)
);

<span class="hljs-comment">-- 创建学生表</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_student
(
stuid 		<span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'学号'</span>,
stuname 	<span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'姓名'</span>,
stusex 		<span class="hljs-built_in">boolean</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'性别'</span>,
stubirth 	<span class="hljs-built_in">date</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'出生日期'</span>,
stuaddr 	<span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">''</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'籍贯'</span>,
collid 		<span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'所属学院'</span>,
primary <span class="hljs-keyword">key</span> (stuid),
<span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (collid) <span class="hljs-keyword">references</span> tb_college (collid)
);

<span class="hljs-comment">-- 创建教师表</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_teacher
(
teaid 		<span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'工号'</span>,
teaname 	<span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'姓名'</span>,
teatitle 	<span class="hljs-built_in">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">'助教'</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'职称'</span>,
collid 		<span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'所属学院'</span>,
primary <span class="hljs-keyword">key</span> (teaid),
<span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (collid) <span class="hljs-keyword">references</span> tb_college (collid)
);

<span class="hljs-comment">-- 创建课程表</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_course
(
couid 		<span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'编号'</span>,
couname 	<span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'名称'</span>,
coucredit 	<span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'学分'</span>,
teaid 		<span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'授课老师'</span>,
primary <span class="hljs-keyword">key</span> (couid),
<span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (teaid) <span class="hljs-keyword">references</span> tb_teacher (teaid)
);

<span class="hljs-comment">-- 创建选课记录表</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_record
(
recid 		<span class="hljs-built_in">int</span> auto_increment <span class="hljs-keyword">comment</span> <span class="hljs-string">'选课记录编号'</span>,
<span class="hljs-keyword">sid</span> 		<span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'选课学生'</span>,
cid 		<span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'所选课程'</span>,
seldate 	datetime <span class="hljs-keyword">default</span> <span class="hljs-keyword">now</span>() <span class="hljs-keyword">comment</span> <span class="hljs-string">'选课时间日期'</span>,
score 		<span class="hljs-built_in">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">comment</span> <span class="hljs-string">'考试成绩'</span>,
primary <span class="hljs-keyword">key</span> (recid),
<span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (<span class="hljs-keyword">sid</span>) <span class="hljs-keyword">references</span> tb_student (stuid),
<span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (cid) <span class="hljs-keyword">references</span> tb_course (couid),
<span class="hljs-keyword">unique</span> (<span class="hljs-keyword">sid</span>, cid)
);</code></pre></div>
<p>上面的DDL有几个地方需要强调一下：</p>
<ul>
<li>
<p>创建数据库时，我们通过<code>default charset utf8</code>指定了数据库默认使用的字符集，我们推荐使用该字符集，因为utf8能够支持国际化编码。如果将来数据库中用到的字符可能包括类似于Emoji这样的图片字符，也可以将默认字符集设定为utf8mb4（最大4字节的utf-8编码）。查看MySQL支持的字符集可以执行下面的语句。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">show</span> <span class="hljs-built_in">character</span> <span class="hljs-keyword">set</span>;</code></pre></div>
<div class="hljs"><pre><code class="hljs plain">+----------+---------------------------------+---------------------+--------+
| Charset  | Description                     | Default collation   | Maxlen |
+----------+---------------------------------+---------------------+--------+
| big5     | Big5 Traditional Chinese        | big5_chinese_ci     |      2 |
| dec8     | DEC West European               | dec8_swedish_ci     |      1 |
| cp850    | DOS West European               | cp850_general_ci    |      1 |
| hp8      | HP West European                | hp8_english_ci      |      1 |
| koi8r    | KOI8-R Relcom Russian           | koi8r_general_ci    |      1 |
| latin1   | cp1252 West European            | latin1_swedish_ci   |      1 |
| latin2   | ISO 8859-2 Central European     | latin2_general_ci   |      1 |
| swe7     | 7bit Swedish                    | swe7_swedish_ci     |      1 |
| ascii    | US ASCII                        | ascii_general_ci    |      1 |
| ujis     | EUC-JP Japanese                 | ujis_japanese_ci    |      3 |
| sjis     | Shift-JIS Japanese              | sjis_japanese_ci    |      2 |
| hebrew   | ISO 8859-8 Hebrew               | hebrew_general_ci   |      1 |
| tis620   | TIS620 Thai                     | tis620_thai_ci      |      1 |
| euckr    | EUC-KR Korean                   | euckr_korean_ci     |      2 |
| koi8u    | KOI8-U Ukrainian                | koi8u_general_ci    |      1 |
| gb2312   | GB2312 Simplified Chinese       | gb2312_chinese_ci   |      2 |
| greek    | ISO 8859-7 Greek                | greek_general_ci    |      1 |
| cp1250   | Windows Central European        | cp1250_general_ci   |      1 |
| gbk      | GBK Simplified Chinese          | gbk_chinese_ci      |      2 |
| latin5   | ISO 8859-9 Turkish              | latin5_turkish_ci   |      1 |
| armscii8 | ARMSCII-8 Armenian              | armscii8_general_ci |      1 |
| utf8     | UTF-8 Unicode                   | utf8_general_ci     |      3 |
| ucs2     | UCS-2 Unicode                   | ucs2_general_ci     |      2 |
| cp866    | DOS Russian                     | cp866_general_ci    |      1 |
| keybcs2  | DOS Kamenicky Czech-Slovak      | keybcs2_general_ci  |      1 |
| macce    | Mac Central European            | macce_general_ci    |      1 |
| macroman | Mac West European               | macroman_general_ci |      1 |
| cp852    | DOS Central European            | cp852_general_ci    |      1 |
| latin7   | ISO 8859-13 Baltic              | latin7_general_ci   |      1 |
| utf8mb4  | UTF-8 Unicode                   | utf8mb4_general_ci  |      4 |
| cp1251   | Windows Cyrillic                | cp1251_general_ci   |      1 |
| utf16    | UTF-16 Unicode                  | utf16_general_ci    |      4 |
| utf16le  | UTF-16LE Unicode                | utf16le_general_ci  |      4 |
| cp1256   | Windows Arabic                  | cp1256_general_ci   |      1 |
| cp1257   | Windows Baltic                  | cp1257_general_ci   |      1 |
| utf32    | UTF-32 Unicode                  | utf32_general_ci    |      4 |
| binary   | Binary pseudo charset           | binary              |      1 |
| geostd8  | GEOSTD8 Georgian                | geostd8_general_ci  |      1 |
| cp932    | SJIS for Windows Japanese       | cp932_japanese_ci   |      2 |
| eucjpms  | UJIS for Windows Japanese       | eucjpms_japanese_ci |      3 |
| gb18030  | China National Standard GB18030 | gb18030_chinese_ci  |      4 |
+----------+---------------------------------+---------------------+--------+
41 rows in set (0.00 sec)</code></pre></div>
<p>如果要设置MySQL服务启动时默认使用的字符集，可以修改MySQL的配置并添加以下内容</p>
<div class="hljs"><pre><code class="hljs INI"><span class="hljs-section">[mysqld]</span>
<span class="hljs-attr">character-set-server</span>=utf8</code></pre></div>
</li>
<li>
<p>在创建表的时候，我们可以在右圆括号的后面通过<code>engine=XXX</code>来指定表的存储引擎，MySQL支持多种存储引擎，可以通过<code>show engines</code>命令进行查看。MySQL 5.5以后的版本默认使用的存储引擎是InnoDB，它正好也就是我们推荐大家使用的存储引擎（因为InnoDB更适合互联网应用对高并发、性能以及事务支持等方面的需求）。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">show</span> <span class="hljs-keyword">engines</span>\G</code></pre></div>
<div class="hljs"><pre><code class="hljs plain">*************************** 1. row ***************************
      Engine: InnoDB
     Support: DEFAULT
     Comment: Supports transactions, row-level locking, and foreign keys
Transactions: YES
          XA: YES
  Savepoints: YES
*************************** 2. row ***************************
      Engine: MRG_MYISAM
     Support: YES
     Comment: Collection of identical MyISAM tables
Transactions: NO
          XA: NO
  Savepoints: NO
*************************** 3. row ***************************
      Engine: MEMORY
     Support: YES
     Comment: Hash based, stored in memory, useful for temporary tables
Transactions: NO
          XA: NO
  Savepoints: NO
*************************** 4. row ***************************
      Engine: BLACKHOLE
     Support: YES
     Comment: &#x2F;dev&#x2F;null storage engine (anything you write to it disappears)
Transactions: NO
          XA: NO
  Savepoints: NO
*************************** 5. row ***************************
      Engine: MyISAM
     Support: YES
     Comment: MyISAM storage engine
Transactions: NO
          XA: NO
  Savepoints: NO
*************************** 6. row ***************************
      Engine: CSV
     Support: YES
     Comment: CSV storage engine
Transactions: NO
          XA: NO
  Savepoints: NO
*************************** 7. row ***************************
      Engine: ARCHIVE
     Support: YES
     Comment: Archive storage engine
Transactions: NO
          XA: NO
  Savepoints: NO
*************************** 8. row ***************************
      Engine: PERFORMANCE_SCHEMA
     Support: YES
     Comment: Performance Schema
Transactions: NO
          XA: NO
  Savepoints: NO
*************************** 9. row ***************************
      Engine: FEDERATED
     Support: NO
     Comment: Federated MySQL storage engine
Transactions: NULL
          XA: NULL
  Savepoints: NULL
9 rows in set (0.00 sec)</code></pre></div>
<p>下面的表格对MySQL几种常用的数据引擎进行了简单的对比。</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>InnoDB</th>
<th>MRG_MYISAM</th>
<th>MEMORY</th>
<th>MyISAM</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储限制</td>
<td>有</td>
<td>没有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>事务</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>锁机制</td>
<td>行锁</td>
<td>表锁</td>
<td>表锁</td>
<td>表锁</td>
</tr>
<tr>
<td>B树索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>哈希索引</td>
<td></td>
<td></td>
<td>支持</td>
<td></td>
</tr>
<tr>
<td>全文检索</td>
<td>支持（5.6+）</td>
<td></td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>集群索引</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据缓存</td>
<td>支持</td>
<td></td>
<td>支持</td>
<td></td>
</tr>
<tr>
<td>索引缓存</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据可压缩</td>
<td></td>
<td></td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>内存使用</td>
<td>高</td>
<td>低</td>
<td>中</td>
<td>低</td>
</tr>
<tr>
<td>存储空间使用</td>
<td>高</td>
<td>低</td>
<td></td>
<td>低</td>
</tr>
<tr>
<td>批量插入性能</td>
<td>低</td>
<td>高</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>是否支持外键</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>通过上面的比较我们可以了解到，InnoDB是唯一能够支持外键、事务以及行锁的存储引擎，所以我们之前说它更适合互联网应用，而且它也是较新的MySQL版本中默认使用的存储引擎。</p>
</li>
<li>
<p>在定义表结构为每个字段选择数据类型时，如果不清楚哪个数据类型更合适，可以通过MySQL的帮助系统来了解每种数据类型的特性、数据的长度和精度等相关信息。</p>
<div class="hljs"><pre><code class="hljs SQL">? data types</code></pre></div>
<div class="hljs"><pre><code class="hljs plain">You asked for help about help category: &quot;Data Types&quot;
For more information, type &#39;help &lt;item&gt;&#39;, where &lt;item&gt; is one of the following
topics:
   AUTO_INCREMENT
   BIGINT
   BINARY
   BIT
   BLOB
   BLOB DATA TYPE
   BOOLEAN
   CHAR
   CHAR BYTE
   DATE
   DATETIME
   DEC
   DECIMAL
   DOUBLE
   DOUBLE PRECISION
   ENUM
   FLOAT
   INT
   INTEGER
   LONGBLOB
   LONGTEXT
   MEDIUMBLOB
   MEDIUMINT
   MEDIUMTEXT
   SET DATA TYPE
   SMALLINT
   TEXT
   TIME
   TIMESTAMP
   TINYBLOB
   TINYINT
   TINYTEXT
   VARBINARY
   VARCHAR
   YEAR DATA TYPE</code></pre></div>
<div class="hljs"><pre><code class="hljs SQL">? varchar</code></pre></div>
<div class="hljs"><pre><code class="hljs plain">Name: &#39;VARCHAR&#39;
Description:
[NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATE
collation_name]

A variable-length string. M represents the maximum column length in
characters. The range of M is 0 to 65,535. The effective maximum length
of a VARCHAR is subject to the maximum row size (65,535 bytes, which is
shared among all columns) and the character set used. For example, utf8
characters can require up to three bytes per character, so a VARCHAR
column that uses the utf8 character set can be declared to be a maximum
of 21,844 characters. See
http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;column-count-limit.html.

MySQL stores VARCHAR values as a 1-byte or 2-byte length prefix plus
data. The length prefix indicates the number of bytes in the value. A
VARCHAR column uses one length byte if values require no more than 255
bytes, two length bytes if values may require more than 255 bytes.

*Note*:

MySQL follows the standard SQL specification, and does not remove
trailing spaces from VARCHAR values.

VARCHAR is shorthand for CHARACTER VARYING. NATIONAL VARCHAR is the
standard SQL way to define that a VARCHAR column should use some
predefined character set. MySQL uses utf8 as this predefined character
set. http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;charset-national.html.
NVARCHAR is shorthand for NATIONAL VARCHAR.

URL: http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;string-type-overview.html</code></pre></div>
<p>在数据类型的选择上，保存字符串数据通常都使用VARCHAR和CHAR两种类型，前者通常称为变长字符串，而后者通常称为定长字符串；对于InnoDB存储引擎，行存储格式没有区分固定长度和可变长度列，因此VARCHAR类型好CHAR类型没有本质区别，后者不一定比前者性能更好。如果要保存的很大字符串，可以使用TEXT类型；如果要保存很大的字节串，可以使用BLOB（二进制大对象）类型。在MySQL中，TEXT和BLOB又分别包括TEXT、MEDIUMTEXT、LONGTEXT和BLOB、MEDIUMBLOB、LONGBLOB三种不同的类型，它们主要的区别在于存储数据的最大大小不同。保存浮点数可以用FLOAT或DOUBLE类型，而保存定点数应该使用DECIMAL类型。如果要保存时间日期，DATETIME类型优于TIMESTAMP类型，因为前者能表示的时间日期范围更大。</p>
</li>
</ul>
</li>
<li>
<p>DML</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">-- 插入学院数据</span>
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_college (collname, collintro) <span class="hljs-keyword">values</span> 
(<span class="hljs-string">'计算机学院'</span>, <span class="hljs-string">'创建于1956年是我国首批建立计算机专业。学院现有计算机科学与技术一级学科和网络空间安全一级学科博士学位授予权，其中计算机科学与技术一级学科具有博士后流动站。计算机科学与技术一级学科在2017年全国第四轮学科评估中评为A；2019 U.S.News全球计算机学科排名26名；ESI学科排名0.945‰，进入全球前1‰，位列第43位。'</span>),
(<span class="hljs-string">'外国语学院'</span>, <span class="hljs-string">'1998年浙江大学、杭州大学、浙江农业大学、浙江医科大学四校合并，成立新的浙江大学。1999年原浙江大学外语系、原杭州大学外国语学院、原杭州大学大外部、原浙江农业大学公外部、原浙江医科大学外语教学部合并，成立浙江大学外国语学院。2003年学院更名为浙江大学外国语言文化与国际交流学院。'</span>),
(<span class="hljs-string">'经济管理学院'</span>, <span class="hljs-string">'四川大学经济学院历史悠久、传承厚重，其前身是创办于1905年的四川大学经济科,距今已有100多年的历史。已故著名经济学家彭迪先、张与九、蒋学模、胡寄窗、陶大镛、胡代光，以及当代著名学者刘诗白等曾先后在此任教或学习。在长期的办学过程中，学院坚持以马克思主义的立场、观点、方法为指导，围绕建设世界一流经济学院的奋斗目标，做实“两个伟大”深度融合，不断提高党的建设质量与科学推进一流事业深度融合。'</span>);

<span class="hljs-comment">-- 插入学生数据</span>
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_student (stuid, stuname, stusex, stubirth, stuaddr, collid) <span class="hljs-keyword">values</span>
(<span class="hljs-number">1001</span>, <span class="hljs-string">'杨逍'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1990-3-4'</span>, <span class="hljs-string">'四川成都'</span>, <span class="hljs-number">1</span>),
(<span class="hljs-number">1002</span>, <span class="hljs-string">'任我行'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1992-2-2'</span>, <span class="hljs-string">'湖南长沙'</span>, <span class="hljs-number">1</span>),
(<span class="hljs-number">1033</span>, <span class="hljs-string">'王语嫣'</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'1989-12-3'</span>, <span class="hljs-string">'四川成都'</span>, <span class="hljs-number">1</span>),
(<span class="hljs-number">1572</span>, <span class="hljs-string">'岳不群'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1993-7-19'</span>, <span class="hljs-string">'陕西咸阳'</span>, <span class="hljs-number">1</span>),
(<span class="hljs-number">1378</span>, <span class="hljs-string">'纪嫣然'</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'1995-8-12'</span>, <span class="hljs-string">'四川绵阳'</span>, <span class="hljs-number">1</span>),
(<span class="hljs-number">1954</span>, <span class="hljs-string">'林平之'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1994-9-20'</span>, <span class="hljs-string">'福建莆田'</span>, <span class="hljs-number">1</span>),
(<span class="hljs-number">2035</span>, <span class="hljs-string">'东方不败'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1988-6-30'</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>),
(<span class="hljs-number">3011</span>, <span class="hljs-string">'林震南'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1985-12-12'</span>, <span class="hljs-string">'福建莆田'</span>, <span class="hljs-number">3</span>),
(<span class="hljs-number">3755</span>, <span class="hljs-string">'项少龙'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1993-1-25'</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span>),
(<span class="hljs-number">3923</span>, <span class="hljs-string">'杨不悔'</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'1985-4-17'</span>, <span class="hljs-string">'四川成都'</span>, <span class="hljs-number">3</span>),
(<span class="hljs-number">4040</span>, <span class="hljs-string">'隔壁老王'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1989-1-1'</span>, <span class="hljs-string">'四川成都'</span>, <span class="hljs-number">2</span>);

<span class="hljs-comment">-- 删除学生数据</span>
<span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuid=<span class="hljs-number">4040</span>;

<span class="hljs-comment">-- 更新学生数据</span>
<span class="hljs-keyword">update</span> tb_student <span class="hljs-keyword">set</span> stuname=<span class="hljs-string">'杨过'</span>, stuaddr=<span class="hljs-string">'湖南长沙'</span> <span class="hljs-keyword">where</span> stuid=<span class="hljs-number">1001</span>;

<span class="hljs-comment">-- 插入老师数据</span>
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_teacher (teaid, teaname, teatitle, collid) <span class="hljs-keyword">values</span> 
(<span class="hljs-number">1122</span>, <span class="hljs-string">'张三丰'</span>, <span class="hljs-string">'教授'</span>, <span class="hljs-number">1</span>),
(<span class="hljs-number">1133</span>, <span class="hljs-string">'宋远桥'</span>, <span class="hljs-string">'副教授'</span>, <span class="hljs-number">1</span>),
(<span class="hljs-number">1144</span>, <span class="hljs-string">'杨逍'</span>, <span class="hljs-string">'副教授'</span>, <span class="hljs-number">1</span>),
(<span class="hljs-number">2255</span>, <span class="hljs-string">'范遥'</span>, <span class="hljs-string">'副教授'</span>, <span class="hljs-number">2</span>),
(<span class="hljs-number">3366</span>, <span class="hljs-string">'韦一笑'</span>, <span class="hljs-string">'讲师'</span>, <span class="hljs-number">3</span>);

<span class="hljs-comment">-- 插入课程数据</span>
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_course (couid, couname, coucredit, teaid) <span class="hljs-keyword">values</span> 
(<span class="hljs-number">1111</span>, <span class="hljs-string">'Python程序设计'</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1122</span>),
(<span class="hljs-number">2222</span>, <span class="hljs-string">'Web前端开发'</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1122</span>),
(<span class="hljs-number">3333</span>, <span class="hljs-string">'操作系统'</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1122</span>),
(<span class="hljs-number">4444</span>, <span class="hljs-string">'计算机网络'</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1133</span>),
(<span class="hljs-number">5555</span>, <span class="hljs-string">'编译原理'</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1144</span>),
(<span class="hljs-number">6666</span>, <span class="hljs-string">'算法和数据结构'</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1144</span>),
(<span class="hljs-number">7777</span>, <span class="hljs-string">'经贸法语'</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2255</span>),
(<span class="hljs-number">8888</span>, <span class="hljs-string">'成本会计'</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3366</span>),
(<span class="hljs-number">9999</span>, <span class="hljs-string">'审计学'</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3366</span>);

<span class="hljs-comment">-- 插入选课数据</span>
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_record (<span class="hljs-keyword">sid</span>, cid, seldate, score) <span class="hljs-keyword">values</span> 
(<span class="hljs-number">1001</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">95</span>),
(<span class="hljs-number">1001</span>, <span class="hljs-number">2222</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">87.5</span>),
(<span class="hljs-number">1001</span>, <span class="hljs-number">3333</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">100</span>),
(<span class="hljs-number">1001</span>, <span class="hljs-number">4444</span>, <span class="hljs-string">'2018-09-03'</span>, <span class="hljs-literal">null</span>),
(<span class="hljs-number">1001</span>, <span class="hljs-number">6666</span>, <span class="hljs-string">'2017-09-02'</span>, <span class="hljs-number">100</span>),
(<span class="hljs-number">1002</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">'2017-09-03'</span>, <span class="hljs-number">65</span>),
(<span class="hljs-number">1002</span>, <span class="hljs-number">5555</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">42</span>),
(<span class="hljs-number">1033</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">'2017-09-03'</span>, <span class="hljs-number">92.5</span>),
(<span class="hljs-number">1033</span>, <span class="hljs-number">4444</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">78</span>),
(<span class="hljs-number">1033</span>, <span class="hljs-number">5555</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">82.5</span>),
(<span class="hljs-number">1572</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">'2017-09-02'</span>, <span class="hljs-number">78</span>),
(<span class="hljs-number">1378</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">'2017-09-05'</span>, <span class="hljs-number">82</span>),
(<span class="hljs-number">1378</span>, <span class="hljs-number">7777</span>, <span class="hljs-string">'2017-09-02'</span>, <span class="hljs-number">65.5</span>),
(<span class="hljs-number">2035</span>, <span class="hljs-number">7777</span>, <span class="hljs-string">'2018-09-03'</span>, <span class="hljs-number">88</span>),
(<span class="hljs-number">2035</span>, <span class="hljs-number">9999</span>, <span class="hljs-keyword">default</span>, <span class="hljs-literal">null</span>),
(<span class="hljs-number">3755</span>, <span class="hljs-number">1111</span>, <span class="hljs-keyword">default</span>, <span class="hljs-literal">null</span>),
(<span class="hljs-number">3755</span>, <span class="hljs-number">8888</span>, <span class="hljs-keyword">default</span>, <span class="hljs-literal">null</span>),
(<span class="hljs-number">3755</span>, <span class="hljs-number">9999</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">92</span>);</code></pre></div>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">-- 查询所有学生信息</span>
<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_student;

<span class="hljs-comment">-- 查询所有课程名称及学分(投影和别名)</span>
<span class="hljs-keyword">select</span> couname, coucredit <span class="hljs-keyword">from</span> tb_course;
<span class="hljs-keyword">select</span> couname <span class="hljs-keyword">as</span> 课程名称, coucredit <span class="hljs-keyword">as</span> 学分 <span class="hljs-keyword">from</span> tb_course;

<span class="hljs-comment">-- 查询所有学生的姓名和性别(条件运算)</span>
<span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">as</span> 姓名, <span class="hljs-keyword">case</span> stusex <span class="hljs-keyword">when</span> <span class="hljs-number">1</span> <span class="hljs-keyword">then</span> <span class="hljs-string">'男'</span> <span class="hljs-keyword">else</span> <span class="hljs-string">'女'</span> <span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> 性别 <span class="hljs-keyword">from</span> tb_student;
<span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">as</span> 姓名, <span class="hljs-keyword">if</span>(stusex, <span class="hljs-string">'男'</span>, <span class="hljs-string">'女'</span>) <span class="hljs-keyword">as</span> 性别 <span class="hljs-keyword">from</span> tb_student;

<span class="hljs-comment">-- 查询所有女学生的姓名和出生日期(筛选)</span>
<span class="hljs-keyword">select</span> stuname, stubirth <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stusex=<span class="hljs-number">0</span>;

<span class="hljs-comment">-- 查询所有80后学生的姓名、性别和出生日期(筛选)</span>
<span class="hljs-keyword">select</span> stuname, stusex, stubirth <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stubirth&gt;=<span class="hljs-string">'1980-1-1'</span> <span class="hljs-keyword">and</span> stubirth&lt;=<span class="hljs-string">'1989-12-31'</span>;
<span class="hljs-keyword">select</span> stuname, stusex, stubirth <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stubirth <span class="hljs-keyword">between</span> <span class="hljs-string">'1980-1-1'</span> <span class="hljs-keyword">and</span> <span class="hljs-string">'1989-12-31'</span>;

<span class="hljs-comment">-- 查询姓"杨"的学生姓名和性别(模糊)</span>
<span class="hljs-keyword">select</span> stuname, stusex <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">'杨%'</span>;

<span class="hljs-comment">-- 查询姓"杨"名字两个字的学生姓名和性别(模糊)</span>
<span class="hljs-keyword">select</span> stuname, stusex <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">'杨_'</span>;

<span class="hljs-comment">-- 查询姓"杨"名字三个字的学生姓名和性别(模糊)</span>
<span class="hljs-keyword">select</span> stuname, stusex <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">'杨__'</span>;

<span class="hljs-comment">-- 查询名字中有"不"字或"嫣"字的学生的姓名(模糊)</span>
<span class="hljs-keyword">select</span> stuname, stusex <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">'%不%'</span> <span class="hljs-keyword">or</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">'%嫣%'</span>;

<span class="hljs-comment">-- 查询没有录入家庭住址的学生姓名(空值)</span>
<span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuaddr <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span>;

<span class="hljs-comment">-- 查询录入了家庭住址的学生姓名(空值)</span>
<span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuaddr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>;

<span class="hljs-comment">-- 查询学生选课的所有日期(去重)</span>
<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> seldate <span class="hljs-keyword">from</span> tb_record;

<span class="hljs-comment">-- 查询学生的家庭住址(去重)</span>
<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> stuaddr <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuaddr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>;

<span class="hljs-comment">-- 查询男学生的姓名和生日按年龄从大到小排列(排序)</span>
<span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">as</span> 姓名, <span class="hljs-keyword">datediff</span>(<span class="hljs-keyword">curdate</span>(), stubirth) <span class="hljs-keyword">div</span> <span class="hljs-number">365</span> <span class="hljs-keyword">as</span> 年龄 <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stusex=<span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 年龄 <span class="hljs-keyword">desc</span>;

<span class="hljs-comment">-- 查询年龄最大的学生的出生日期(聚合函数)</span>
<span class="hljs-keyword">select</span> <span class="hljs-keyword">min</span>(stubirth) <span class="hljs-keyword">from</span> tb_student;

<span class="hljs-comment">-- 查询年龄最小的学生的出生日期(聚合函数)</span>
<span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(stubirth) <span class="hljs-keyword">from</span> tb_student;

<span class="hljs-comment">-- 查询男女学生的人数(分组和聚合函数)</span>
<span class="hljs-keyword">select</span> stusex, <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> stusex;

<span class="hljs-comment">-- 查询课程编号为1111的课程的平均成绩(筛选和聚合函数)</span>
<span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">where</span> cid=<span class="hljs-number">1111</span>;

<span class="hljs-comment">-- 查询学号为1001的学生所有课程的平均分(筛选和聚合函数)</span>
<span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">where</span> <span class="hljs-keyword">sid</span>=<span class="hljs-number">1001</span>;

<span class="hljs-comment">-- 查询每个学生的学号和平均成绩(分组和聚合函数)</span>
<span class="hljs-keyword">select</span> <span class="hljs-keyword">sid</span> <span class="hljs-keyword">as</span> 学号, <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">as</span> 平均分 <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">sid</span>;

<span class="hljs-comment">-- 查询平均成绩大于等于90分的学生的学号和平均成绩</span>
<span class="hljs-comment">-- 分组以前的筛选使用where子句 / 分组以后的筛选使用having子句</span>
<span class="hljs-keyword">select</span> <span class="hljs-keyword">sid</span> <span class="hljs-keyword">as</span> 学号, <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">as</span> 平均分 <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">sid</span> <span class="hljs-keyword">having</span> 平均分&gt;=<span class="hljs-number">90</span>;

<span class="hljs-comment">-- 查询年龄最大的学生的姓名(子查询/嵌套的查询)</span>
<span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stubirth=( <span class="hljs-keyword">select</span> <span class="hljs-keyword">min</span>(stubirth) <span class="hljs-keyword">from</span> tb_student );

<span class="hljs-comment">-- 查询年龄最大的学生姓名和年龄(子查询+运算)</span>
<span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">as</span> 姓名, <span class="hljs-keyword">datediff</span>(<span class="hljs-keyword">curdate</span>(), stubirth) <span class="hljs-keyword">div</span> <span class="hljs-number">365</span> <span class="hljs-keyword">as</span> 年龄 <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stubirth=( <span class="hljs-keyword">select</span> <span class="hljs-keyword">min</span>(stubirth) <span class="hljs-keyword">from</span> tb_student );

<span class="hljs-comment">-- 查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)</span>
<span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuid <span class="hljs-keyword">in</span> ( <span class="hljs-keyword">select</span> stuid <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> stuid <span class="hljs-keyword">having</span> <span class="hljs-keyword">count</span>(stuid)&gt;<span class="hljs-number">2</span> );

<span class="hljs-comment">-- 查询学生姓名、课程名称以及成绩(连接查询)</span>
<span class="hljs-keyword">select</span> stuname, couname, score <span class="hljs-keyword">from</span> tb_student t1, tb_course t2, tb_record t3 <span class="hljs-keyword">where</span> stuid=<span class="hljs-keyword">sid</span> <span class="hljs-keyword">and</span> couid=cid <span class="hljs-keyword">and</span> score <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>;

<span class="hljs-comment">-- 查询学生姓名、课程名称以及成绩按成绩从高到低查询第11-15条记录(内连接+分页)</span>
<span class="hljs-keyword">select</span> stuname, couname, score <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_record <span class="hljs-keyword">on</span> stuid=<span class="hljs-keyword">sid</span> <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_course <span class="hljs-keyword">on</span> couid=cid <span class="hljs-keyword">where</span> score <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">10</span>;

<span class="hljs-keyword">select</span> stuname, couname, score <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_record <span class="hljs-keyword">on</span> stuid=<span class="hljs-keyword">sid</span> <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_course <span class="hljs-keyword">on</span> couid=cid <span class="hljs-keyword">where</span> score <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>, <span class="hljs-number">5</span>;

<span class="hljs-comment">-- 查询选课学生的姓名和平均成绩(子查询和连接查询)</span>
<span class="hljs-keyword">select</span> stuname, avgmark <span class="hljs-keyword">from</span> tb_student, ( <span class="hljs-keyword">select</span> <span class="hljs-keyword">sid</span>, <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">as</span> avgmark <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">sid</span> ) temp <span class="hljs-keyword">where</span> stuid=<span class="hljs-keyword">sid</span>;

<span class="hljs-keyword">select</span> stuname, avgmark <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> ( <span class="hljs-keyword">select</span> <span class="hljs-keyword">sid</span>, <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">as</span> avgmark <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">sid</span> ) temp <span class="hljs-keyword">on</span> stuid=<span class="hljs-keyword">sid</span>;

<span class="hljs-comment">-- 查询每个学生的姓名和选课数量(左外连接和子查询)</span>
<span class="hljs-keyword">select</span> stuname, <span class="hljs-keyword">ifnull</span>(total, <span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> ( <span class="hljs-keyword">select</span> <span class="hljs-keyword">sid</span>, <span class="hljs-keyword">count</span>(<span class="hljs-keyword">sid</span>) <span class="hljs-keyword">as</span> total <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">sid</span> ) temp <span class="hljs-keyword">on</span> stuid=<span class="hljs-keyword">sid</span>;</code></pre></div>
<p>上面的DML有几个地方需要加以说明：</p>
<ol>
<li>
<p>MySQL中支持多种类型的运算符，包括：算术运算符（+、-、*、/、%）、比较运算符（=、&lt;&gt;、&lt;=&gt;、&lt;、&lt;=、&gt;、&gt;=、BETWEEN…AND…、IN、IS NULL、IS NOT NULL、LIKE、RLIKE、REGEXP）、逻辑运算符（NOT、AND、OR、XOR）和位运算符（&amp;、|、^、~、&gt;&gt;、&lt;&lt;），我们可以在DML中使用这些运算符处理数据。</p>
</li>
<li>
<p>在查询数据时，可以在SELECT语句及其子句（如WHERE子句、ORDER BY子句、HAVING子句等）中使用函数，这些函数包括字符串函数、数值函数、时间日期函数、流程函数等，如下面的表格所示。</p>
<p>常用字符串函数。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONCAT</td>
<td>将多个字符串连接成一个字符串</td>
</tr>
<tr>
<td>FORMAT</td>
<td>将数值格式化成字符串并指定保留几位小数</td>
</tr>
<tr>
<td>FROM_BASE64 / TO_BASE64</td>
<td>BASE64解码/编码</td>
</tr>
<tr>
<td>BIN / OCT / HEX</td>
<td>将数值转换成二进制/八进制/十六进制字符串</td>
</tr>
<tr>
<td>LOCATE</td>
<td>在字符串中查找一个子串的位置</td>
</tr>
<tr>
<td>LEFT / RIGHT</td>
<td>返回一个字符串左边/右边指定长度的字符</td>
</tr>
<tr>
<td>LENGTH / CHAR_LENGTH</td>
<td>返回字符串的长度以字节/字符为单位</td>
</tr>
<tr>
<td>LOWER / UPPER</td>
<td>返回字符串的小写/大写形式</td>
</tr>
<tr>
<td>LPAD / RPAD</td>
<td>如果字符串的长度不足，在字符串左边/右边填充指定的字符</td>
</tr>
<tr>
<td>LTRIM / RTRIM</td>
<td>去掉字符串前面/后面的空格</td>
</tr>
<tr>
<td>ORD / CHAR</td>
<td>返回字符对应的编码/返回编码对应的字符</td>
</tr>
<tr>
<td>STRCMP</td>
<td>比较字符串，返回-1、0、1分别表示小于、等于、大于</td>
</tr>
<tr>
<td>SUBSTRING</td>
<td>返回字符串指定范围的子串</td>
</tr>
</tbody>
</table>
<p>常用数值函数。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>ABS</td>
<td>返回一个数的绝度值</td>
</tr>
<tr>
<td>CEILING / FLOOR</td>
<td>返回一个数上取整/下取整的结果</td>
</tr>
<tr>
<td>CONV</td>
<td>将一个数从一种进制转换成另一种进制</td>
</tr>
<tr>
<td>CRC32</td>
<td>计算循环冗余校验码</td>
</tr>
<tr>
<td>EXP / LOG / LOG2 / LOG10</td>
<td>计算指数/对数</td>
</tr>
<tr>
<td>POW</td>
<td>求幂</td>
</tr>
<tr>
<td>RAND</td>
<td>返回[0,1)范围的随机数</td>
</tr>
<tr>
<td>ROUND</td>
<td>返回一个数四舍五入后的结果</td>
</tr>
<tr>
<td>SQRT</td>
<td>返回一个数的平方根</td>
</tr>
<tr>
<td>TRUNCATE</td>
<td>截断一个数到指定的精度</td>
</tr>
<tr>
<td>SIN / COS / TAN / COT / ASIN / ACOS / ATAN</td>
<td>三角函数</td>
</tr>
</tbody>
</table>
<p>常用时间日期函数。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>CURDATE / CURTIME / NOW</td>
<td>获取当前日期/时间/日期和时间</td>
</tr>
<tr>
<td>ADDDATE / SUBDATE</td>
<td>将两个日期表达式相加/相减并返回结果</td>
</tr>
<tr>
<td>DATE / TIME</td>
<td>从字符串中获取日期/时间</td>
</tr>
<tr>
<td>YEAR / MONTH / DAY</td>
<td>从日期中获取年/月/日</td>
</tr>
<tr>
<td>HOUR / MINUTE / SECOND</td>
<td>从时间中获取时/分/秒</td>
</tr>
<tr>
<td>DATEDIFF / TIMEDIFF</td>
<td>返回两个时间日期表达式相差多少天/小时</td>
</tr>
<tr>
<td>MAKEDATE / MAKETIME</td>
<td>制造一个日期/时间</td>
</tr>
</tbody>
</table>
<p>常用流程函数。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>IF</td>
<td>根据条件是否成立返回不同的值</td>
</tr>
<tr>
<td>IFNULL</td>
<td>如果为NULL则返回指定的值否则就返回本身</td>
</tr>
<tr>
<td>NULLIF</td>
<td>两个表达式相等就返回NULL否则返回第一个表达式的值</td>
</tr>
</tbody>
</table>
<p>其他常用函数。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>MD5 / SHA1 / SHA2</td>
<td>返回字符串对应的哈希摘要</td>
</tr>
<tr>
<td>CHARSET / COLLATION</td>
<td>返回字符集/校对规则</td>
</tr>
<tr>
<td>USER / CURRENT_USER</td>
<td>返回当前用户</td>
</tr>
<tr>
<td>DATABASE</td>
<td>返回当前数据库名</td>
</tr>
<tr>
<td>VERSION</td>
<td>返回当前数据库版本</td>
</tr>
<tr>
<td>FOUND_ROWS / ROW_COUNT</td>
<td>返回查询到的行数/受影响的行数</td>
</tr>
<tr>
<td>LAST_INSERT_ID</td>
<td>返回最后一个自增主键的值</td>
</tr>
<tr>
<td>UUID / UUID_SHORT</td>
<td>返回全局唯一标识符</td>
</tr>
</tbody>
</table>
</li>
</ol>
</li>
<li>
<p>DCL</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">-- 创建可以远程登录的root账号并为其指定口令</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'123456'</span>;

<span class="hljs-comment">-- 为远程登录的root账号授权操作所有数据库所有对象的所有权限并允许其将权限再次赋予其他用户</span>
<span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">option</span>;

<span class="hljs-comment">-- 创建名为hellokitty的用户并为其指定口令</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">'hellokitty'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'123123'</span>;

<span class="hljs-comment">-- 将对school数据库所有对象的所有操作权限授予hellokitty</span>
<span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> school.* <span class="hljs-keyword">to</span> <span class="hljs-string">'hellokitty'</span>@<span class="hljs-string">'%'</span>;

<span class="hljs-comment">-- 召回hellokitty对school数据库所有对象的insert/delete/update权限</span>
<span class="hljs-keyword">revoke</span> <span class="hljs-keyword">insert</span>, <span class="hljs-keyword">delete</span>, <span class="hljs-keyword">update</span> <span class="hljs-keyword">on</span> school.* <span class="hljs-keyword">from</span> <span class="hljs-string">'hellokitty'</span>@<span class="hljs-string">'%'</span>;</code></pre></div>
<blockquote>
<p>说明：创建一个可以允许任意主机登录并且具有超级管理员权限的用户在现实中并不是一个明智的决定，因为一旦该账号的口令泄露或者被破解，数据库将会面临灾难级的风险。</p>
</blockquote>
</li>
</ol>
<h4 id="3-2-索引">3.2 索引</h4>
<p>索引是关系型数据库中用来提升查询性能最为重要的手段。关系型数据库中的索引就像一本书的目录，我们可以想象一下，如果要从一本书中找出某个知识点，但是这本书没有目录，这将是意见多么可怕的事情（我们估计得一篇一篇的翻下去，才能确定这个知识点到底在什么位置）。创建索引虽然会带来存储空间上的开销，就像一本书的目录会占用一部分的篇幅一样，但是在牺牲空间后换来的查询时间的减少也是非常显著的。</p>
<p>MySQL中，所有数据类型的列都可以被索引，常用的存储引擎InnoDB和MyISAM能支持每个表创建16个索引。InnoDB和MyISAM使用的索引其底层算法是B-tree（B树），B-tree是一种自平衡的树，类似于平衡二叉排序树，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的操作都在对数时间内完成。</p>
<p>接下来我们通过一个简单的例子来说明索引的意义，比如我们要根据学生的姓名来查找学生，这个场景在实际开发中应该经常遇到，就跟通过商品名称查找商品道理是一样的。我们可以使用MySQL的<code>explain</code>关键字来查看SQL的执行计划。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname=<span class="hljs-string">'林震南'</span>\G</code></pre></div>
<div class="hljs"><pre><code class="hljs plain">*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: tb_student
   partitions: NULL
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 11
     filtered: 10.00
        Extra: Using where
1 row in set, 1 warning (0.00 sec)</code></pre></div>
<p>在上面的SQL执行计划中，有几项值得我们关注：</p>
<ol>
<li>type：MySQL在表中找到满足条件的行的方式，也称为访问类型，包括：ALL（全表扫描）、index（索引全扫描）、range（索引范围扫描）、ref（非唯一索引扫描）、eq_ref（唯一索引扫描）、const/system、NULL。在所有的访问类型中，很显然ALL是性能最差的，它代表了全表扫描是指要扫描表中的每一行才能找到匹配的行。</li>
<li>possible_keys：MySQL可以选择的索引，但是<strong>有可能不会使用</strong>。</li>
<li>key：MySQL真正使用的索引。</li>
<li>rows：执行查询需要扫描的行数，这是一个<strong>预估值</strong>。</li>
</ol>
<p>从上面的执行计划可以看出，当我们通过学生名字查询学生时实际上是进行了全表扫描，不言而喻这个查询性能肯定是非常糟糕的，尤其是在表中的行很多的时候。如果我们需要经常通过学生姓名来查询学生，那么就应该在学生姓名对应的列上创建索引，通过索引来加速查询。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> idx_student_name <span class="hljs-keyword">on</span> tb_student(stuname);</code></pre></div>
<p>再次查看刚才的SQL对应的执行计划。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname=<span class="hljs-string">'林震南'</span>\G</code></pre></div>
<div class="hljs"><pre><code class="hljs plain">*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: tb_student
   partitions: NULL
         type: ref
possible_keys: idx_student_name
          key: idx_student_name
      key_len: 62
          ref: const
         rows: 1
     filtered: 100.00
        Extra: NULL
1 row in set, 1 warning (0.00 sec)</code></pre></div>
<p>可以注意到，在对学生姓名创建索引后，刚才的查询已经不是全表扫描而是基于索引的查询，而且扫描的行只有唯一的一行，这显然大大的提升了查询的性能。MySQL中还允许创建前缀索引，即对索引字段的前N个字符创建索引，这样的话可以减少索引占用的空间（但节省了空间很有可能会浪费时间，<strong>时间和空间是不可调和的矛盾</strong>），如下所示。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> idx_student_name_1 <span class="hljs-keyword">on</span> tb_student(stuname(<span class="hljs-number">1</span>));</code></pre></div>
<p>上面的索引相当于是根据学生姓名的第一个字来创建的索引，我们再看看SQL执行计划。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname=<span class="hljs-string">'林震南'</span>\G</code></pre></div>
<div class="hljs"><pre><code class="hljs plain">*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: tb_student
   partitions: NULL
         type: ref
possible_keys: idx_student_name
          key: idx_student_name
      key_len: 5
          ref: const
         rows: 2
     filtered: 100.00
        Extra: Using where
1 row in set, 1 warning (0.00 sec)</code></pre></div>
<p>不知道大家是否注意到，这一次扫描的行变成了2行，因为学生表中有两个姓“林”的学生，我们只用姓名的第一个字作为索引的话，在查询时通过索引就会找到这两行。</p>
<p>如果要删除索引，可以使用下面的SQL。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_student <span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> idx_student_name;</code></pre></div>
<p>或者</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> idx_student_name <span class="hljs-keyword">on</span> tb_student;</code></pre></div>
<p>我们简单的为大家总结一下索引的设计原则：</p>
<ol>
<li><strong>最适合</strong>索引的列是出现在<strong>WHERE子句</strong>和连接子句中的列。</li>
<li>索引列的基数越大（取值多重复值少），索引的效果就越好。</li>
<li>使用<strong>前缀索引</strong>可以减少索引占用的空间，内存中可以缓存更多的索引。</li>
<li><strong>索引不是越多越好</strong>，虽然索引加速了读操作（查询），但是写操作（增、删、改）都会变得更慢，因为数据的变化会导致索引的更新，就如同书籍章节的增删需要更新目录一样。</li>
<li>使用InnoDB存储引擎时，表的普通索引都会保存主键的值，所以<strong>主键要尽可能选择较短的数据类型</strong>，这样可以有效的减少索引占用的空间，利用提升索引的缓存效果。</li>
</ol>
<p>最后，还有一点需要说明，InnoDB使用的B-tree索引，数值类型的列除了等值判断时索引会生效之外，使用&gt;、&lt;、&gt;=、&lt;=、BETWEEN…AND… 、&lt;&gt;时，索引仍然生效；对于字符串类型的列，如果使用不以通配符开头的模糊查询，索引也是起作用的，但是其他的情况会导致索引失效，这就意味着很有可能会做全表查询。</p>
<h4 id="3-3-视图">3.3 视图</h4>
<p>视图是关系型数据库中将一组查询指令构成的结果集组合成可查询的数据表的对象。简单的说，视图就是虚拟的表，但与数据表不同的是，数据表是一种实体结构，而视图是一种虚拟结构，你也可以将视图理解为保存在数据库中被赋予名字的SQL语句。</p>
<p>使用视图可以获得以下好处：</p>
<ol>
<li>可以将实体数据表隐藏起来，让外部程序无法得知实际的数据结构，让访问者可以使用表的组成部分而不是整个表，降低数据库被攻击的风险。</li>
<li>在大多数的情况下视图是只读的（更新视图的操作通常都有诸多的限制），外部程序无法直接透过视图修改数据。</li>
<li>重用SQL语句，将高度复杂的查询包装在视图表中，直接访问该视图即可取出需要的数据；也可以将视图视为数据表进行连接查询。</li>
<li>视图可以返回与实体数据表不同格式的数据，</li>
</ol>
<p>创建视图。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> vw_score 
<span class="hljs-keyword">as</span> 
	<span class="hljs-keyword">select</span> <span class="hljs-keyword">sid</span>, <span class="hljs-keyword">round</span>(<span class="hljs-keyword">avg</span>(score), <span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> avgscore <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">sid</span>;

<span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> vw_student_score 
<span class="hljs-keyword">as</span> 
	<span class="hljs-keyword">select</span> stuname, avgscore 
		<span class="hljs-keyword">from</span> tb_student, vw_score  
		<span class="hljs-keyword">where</span> stuid=<span class="hljs-keyword">sid</span>;</code></pre></div>
<blockquote>
<p><strong>提示</strong>：因为视图不包含数据，所以每次使用视图时，都必须执行查询以获得数据，如果你使用了连接查询、嵌套查询创建了较为复杂的视图，你可能会发现查询性能下降得很厉害。因此，在使用复杂的视图前，应该进行测试以确保其性能能够满足应用的需求。</p>
</blockquote>
<p>使用视图。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> stuname, avgscore <span class="hljs-keyword">from</span> vw_student_score <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> avgscore <span class="hljs-keyword">desc</span>;</code></pre></div>
<div class="hljs"><pre><code class="hljs plain">+--------------+----------+
| stuname      | avgscore |
+--------------+----------+
| 杨过         |     95.6 |
| 任我行       |     53.5 |
| 王语嫣       |     84.3 |
| 纪嫣然       |     73.8 |
| 岳不群       |     78.0 |
| 东方不败     |     88.0 |
| 项少龙       |     92.0 |
+--------------+----------+</code></pre></div>
<p>既然视图是一张虚拟的表，那么视图的中的数据可以更新吗？视图的可更新性要视具体情况而定，以下类型的视图是不能更新的：</p>
<ol>
<li>使用了聚合函数（SUM、MIN、MAX、AVG、COUNT等）、DISTINCT、GROUP BY、HAVING、UNION或者UNION ALL的视图。</li>
<li>SELECT中包含了子查询的视图。</li>
<li>FROM子句中包含了一个不能更新的视图的视图。</li>
<li>WHERE子句的子查询引用了FROM子句中的表的视图。</li>
</ol>
<p>删除视图。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> vw_student_score;</code></pre></div>
<blockquote>
<p><strong>说明</strong>：如果希望更新视图，可以先用上面的命令删除视图，也可以通过<code>create or replace view</code>来更新视图。</p>
</blockquote>
<p>视图的规则和限制。</p>
<ol>
<li>视图可以嵌套，可以利用从其他视图中检索的数据来构造一个新的视图。视图也可以和表一起使用。</li>
<li>创建视图时可以使用<code>order by</code>子句，但如果从视图中检索数据时也使用了<code>order by</code>，那么该视图中原先的<code>order by</code>会被覆盖。</li>
<li>视图无法使用索引，也不会激发触发器（实际开发中因为性能等各方面的考虑，通常不建议使用触发器，所以我们也不对这个概念进行介绍）的执行。</li>
</ol>
<h4 id="3-4-存储过程">3.4 存储过程</h4>
<p>存储过程是事先编译好存储在数据库中的一组SQL的集合，调用存储过程可以简化应用程序开发人员的工作，减少与数据库服务器之间的通信，对于提升数据操作的性能也是有帮助的。其实迄今为止，我们使用的SQL语句都是针对一个或多个表的单条语句，但在实际开发中经常会遇到某个操作需要多条SQL语句才能完成的情况。例如，电商网站在受理用户订单时，需要做以下一系列的处理。</p>
<ol>
<li>通过查询来核对库存中是否有对应的物品以及库存是否充足。</li>
<li>如果库存有物品，需要锁定库存以确保这些物品不再卖给别人， 并且要减少可用的物品数量以反映正确的库存量。</li>
<li>如果库存不足，可能需要进一步与供应商进行交互或者至少产生一条系统提示消息。</li>
<li>不管受理订单是否成功，都需要产生流水记录，而且需要给对应的用户产生一条通知信息。</li>
</ol>
<p>我们可以通过存储过程将复杂的操作封装起来，这样不仅有助于保证数据的一致性，而且将来如果业务发生了变动，只需要调整和修改存储过程即可。对于调用存储过程的用户来说，存储过程并没有暴露数据表的细节，而且执行存储过程比一条条的执行一组SQL要快得多。</p>
<p>下面的存储过程实现了查询某门课程的最高分、最低分和平均分。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> sp_score_by_cid;

delimiter $$

<span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> sp_score_by_cid(
	courseId <span class="hljs-built_in">int</span>, 
	<span class="hljs-keyword">out</span> maxScore <span class="hljs-built_in">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>), 
	<span class="hljs-keyword">out</span> minScore <span class="hljs-built_in">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>),
	<span class="hljs-keyword">out</span> avgScore <span class="hljs-built_in">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>)
)
<span class="hljs-keyword">begin</span>
	<span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(score) <span class="hljs-keyword">into</span> maxScore <span class="hljs-keyword">from</span> tb_record 
		<span class="hljs-keyword">where</span> cid=courseId;
	<span class="hljs-keyword">select</span> <span class="hljs-keyword">min</span>(score) <span class="hljs-keyword">into</span> minScore <span class="hljs-keyword">from</span> tb_record 
		<span class="hljs-keyword">where</span> cid=courseId;
	<span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">into</span> avgScore <span class="hljs-keyword">from</span> tb_record 
		<span class="hljs-keyword">where</span> cid=courseId;
<span class="hljs-keyword">end</span> $$

delimiter ;

<span class="hljs-keyword">call</span> sp_score_by_cid(<span class="hljs-number">1111</span>, @a, @b, @c);
<span class="hljs-keyword">select</span> @a, @b, @c;</code></pre></div>
<blockquote>
<p>说明：在定义存储过程时，因为可能需要书写多条SQL，而分隔这些SQL需要使用分号作为分隔符，如果这个时候，仍然用分号表示整段代码结束，那么定义存储过程的SQL就会出现错误，所以上面我们用<code>delimiter $$</code>将整段代码结束的标记定义为<code>$$</code>，那么代码中的分号将不再表示整段代码的结束，需要马上执行，整段代码在遇到<code>end $$</code>时才输入完成并执行。在定义完存储过程后，通过<code>delimiter ;</code>将结束符重新改回成分号。</p>
</blockquote>
<p>上面定义的存储过程有四个参数，其中第一个参数是输入参数，代表课程的编号，后面的参数都是输出参数，因为存储过程不能定义返回值，只能通过输出参数将执行结果带出，定义输出参数的关键字是<code>out</code>，默认情况下参数都是输入参数。</p>
<p>调用存储过程。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">call</span> sp_score_by_cid(<span class="hljs-number">1111</span>, @a, @b, @c);</code></pre></div>
<p>获取输出参数的值。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> @a <span class="hljs-keyword">as</span> 最高分, @b <span class="hljs-keyword">as</span> 最低分, @c <span class="hljs-keyword">as</span> 平均分;</code></pre></div>
<p>删除存储过程。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> sp_score_by_cid;</code></pre></div>
<p>在存储过程中，我们可以定义变量、条件，可以使用分支和循环语句，可以通过游标操作查询结果，还可以使用事件调度器，这些内容我们暂时不在此处进行介绍。虽然我们说了很多存储过程的好处，但是在实际开发中，如果过度的使用存储过程，将大量复杂的运算放到存储过程中，也会导致占用数据库服务器的CPU资源，造成数据库服务器承受巨大的压力。为此，我们一般会将复杂的运算和处理交给应用服务器，因为很容易部署多台应用服务器来分摊这些压力。</p>
<h3 id="四：-几个重要的概念">四： 几个重要的概念</h3>
<h4 id="4-1-范式理论-设计二维表的指导思想">4.1 范式理论 - 设计二维表的指导思想</h4>
<ol>
<li>第一范式：数据表的每个列的值域都是由原子值组成的，不能够再分割。</li>
<li>第二范式：数据表里的所有数据都要和该数据表的键（主键与候选键）有完全依赖关系。</li>
<li>第三范式：所有非键属性都只和候选键有相关性，也就是说非键属性之间应该是独立无关的。</li>
</ol>
<h4 id="4-2-数据完整性">4.2 数据完整性</h4>
<ol>
<li>
<p>实体完整性 - 每个实体都是独一无二的</p>
<ul>
<li>主键（primary key） / 唯一约束 / 唯一索引（unique）</li>
</ul>
</li>
<li>
<p>引用完整性（参照完整性）- 关系中不允许引用不存在的实体</p>
<ul>
<li>外键（foreign key）</li>
</ul>
</li>
<li>
<p>域完整性 - 数据是有效的</p>
<ul>
<li>
<p>数据类型及长度</p>
</li>
<li>
<p>非空约束（not null）</p>
</li>
<li>
<p>默认值约束（default）</p>
</li>
<li>
<p>检查约束（check）</p>
<blockquote>
<p>说明：在MySQL数据库中，检查约束并不起作用。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h4 id="4-3-数据一致性">4.3 数据一致性</h4>
<ol>
<li>
<p>事务：一系列对数据库进行读/写的操作，这些操作要么全都成功，要么全都失败。</p>
</li>
<li>
<p>事务的ACID特性</p>
<ul>
<li>原子性：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行</li>
<li>一致性：事务应确保数据库的状态从一个一致状态转变为另一个一致状态</li>
<li>隔离性：多个事务并发执行时，一个事务的执行不应影响其他事务的执行</li>
<li>持久性：已被提交的事务对数据库的修改应该永久保存在数据库中</li>
</ul>
</li>
<li>
<p>MySQL中的事务操作</p>
<ul>
<li>
<p>开启事务环境</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span></code></pre></div>
<p>或</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">begin</span></code></pre></div>
</li>
<li>
<p>提交事务</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">commit</span></code></pre></div>
</li>
<li>
<p>回滚事务</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">rollback</span></code></pre></div>
</li>
</ul>
</li>
</ol>
<h3 id="五：-其他内容">五： 其他内容</h3>
<p>大家应该能够想到，关于MySQL的知识肯定远远不止上面列出的这些，比如MySQL的性能优化、管理和维护MySQL的相关工具、MySQL数据的备份和恢复、监控MySQL、部署高可用架构等问题我们在这里都没有进行讨论。当然，这些内容也都是跟项目开发密切相关的，我们就留到后续的章节中再续点进行讲解。</p>
<h3 id="六：-Python数据库编程">六： Python数据库编程</h3>
<p>我们用如下所示的数据库来演示在Python中如何访问MySQL数据库。</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> hrs;
<span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> hrs <span class="hljs-keyword">default</span> <span class="hljs-keyword">charset</span> utf8;

<span class="hljs-keyword">use</span> hrs;

<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> tb_emp;
<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> tb_dept;

<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_dept
(
dno   <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'编号'</span>,
dname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'名称'</span>,
dloc  <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'所在地'</span>,
primary <span class="hljs-keyword">key</span> (dno)
);

<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_dept <span class="hljs-keyword">values</span> 
	(<span class="hljs-number">10</span>, <span class="hljs-string">'会计部'</span>, <span class="hljs-string">'北京'</span>),
	(<span class="hljs-number">20</span>, <span class="hljs-string">'研发部'</span>, <span class="hljs-string">'成都'</span>),
	(<span class="hljs-number">30</span>, <span class="hljs-string">'销售部'</span>, <span class="hljs-string">'重庆'</span>),
	(<span class="hljs-number">40</span>, <span class="hljs-string">'运维部'</span>, <span class="hljs-string">'深圳'</span>);

<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_emp
(
eno   <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'员工编号'</span>,
ename <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'员工姓名'</span>,
job   <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'员工职位'</span>,
mgr   <span class="hljs-built_in">int</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'主管编号'</span>,
sal   <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'员工月薪'</span>,
comm  <span class="hljs-built_in">int</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'每月补贴'</span>,
dno   <span class="hljs-built_in">int</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'所在部门编号'</span>,
primary <span class="hljs-keyword">key</span> (eno)
);

<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_emp_dno <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (dno) <span class="hljs-keyword">references</span> tb_dept (dno);

<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_emp <span class="hljs-keyword">values</span> 
	(<span class="hljs-number">7800</span>, <span class="hljs-string">'张三丰'</span>, <span class="hljs-string">'总裁'</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">9000</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">20</span>),
	(<span class="hljs-number">2056</span>, <span class="hljs-string">'乔峰'</span>, <span class="hljs-string">'分析师'</span>, <span class="hljs-number">7800</span>, <span class="hljs-number">5000</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">20</span>),
	(<span class="hljs-number">3088</span>, <span class="hljs-string">'李莫愁'</span>, <span class="hljs-string">'设计师'</span>, <span class="hljs-number">2056</span>, <span class="hljs-number">3500</span>, <span class="hljs-number">800</span>, <span class="hljs-number">20</span>),
	(<span class="hljs-number">3211</span>, <span class="hljs-string">'张无忌'</span>, <span class="hljs-string">'程序员'</span>, <span class="hljs-number">2056</span>, <span class="hljs-number">3200</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">20</span>),
	(<span class="hljs-number">3233</span>, <span class="hljs-string">'丘处机'</span>, <span class="hljs-string">'程序员'</span>, <span class="hljs-number">2056</span>, <span class="hljs-number">3400</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">20</span>),
	(<span class="hljs-number">3251</span>, <span class="hljs-string">'张翠山'</span>, <span class="hljs-string">'程序员'</span>, <span class="hljs-number">2056</span>, <span class="hljs-number">4000</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">20</span>),
	(<span class="hljs-number">5566</span>, <span class="hljs-string">'宋远桥'</span>, <span class="hljs-string">'会计师'</span>, <span class="hljs-number">7800</span>, <span class="hljs-number">4000</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">10</span>),
	(<span class="hljs-number">5234</span>, <span class="hljs-string">'郭靖'</span>, <span class="hljs-string">'出纳'</span>, <span class="hljs-number">5566</span>, <span class="hljs-number">2000</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">10</span>),
	(<span class="hljs-number">3344</span>, <span class="hljs-string">'黄蓉'</span>, <span class="hljs-string">'销售主管'</span>, <span class="hljs-number">7800</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">800</span>, <span class="hljs-number">30</span>),
	(<span class="hljs-number">1359</span>, <span class="hljs-string">'胡一刀'</span>, <span class="hljs-string">'销售员'</span>, <span class="hljs-number">3344</span>, <span class="hljs-number">1800</span>, <span class="hljs-number">200</span>, <span class="hljs-number">30</span>),
	(<span class="hljs-number">4466</span>, <span class="hljs-string">'苗人凤'</span>, <span class="hljs-string">'销售员'</span>, <span class="hljs-number">3344</span>, <span class="hljs-number">2500</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">30</span>),
	(<span class="hljs-number">3244</span>, <span class="hljs-string">'欧阳锋'</span>, <span class="hljs-string">'程序员'</span>, <span class="hljs-number">3088</span>, <span class="hljs-number">3200</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">20</span>),
	(<span class="hljs-number">3577</span>, <span class="hljs-string">'杨过'</span>, <span class="hljs-string">'会计'</span>, <span class="hljs-number">5566</span>, <span class="hljs-number">2200</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">10</span>),
	(<span class="hljs-number">3588</span>, <span class="hljs-string">'朱九真'</span>, <span class="hljs-string">'会计'</span>, <span class="hljs-number">5566</span>, <span class="hljs-number">2500</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">10</span>);</code></pre></div>
<p>在Python 3中，我们通常使用纯Python的三方库PyMySQL来访问MySQL数据库，它应该是目前Python操作MySQL数据库最好的选择。</p>
<ol>
<li>
<p>安装PyMySQL。</p>
<div class="hljs"><pre><code class="hljs Shell">pip install pymysql</code></pre></div>
</li>
<li>
<p>添加一个部门。</p>
<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    no = int(input(<span class="hljs-string">'编号: '</span>))
    name = input(<span class="hljs-string">'名字: '</span>)
    loc = input(<span class="hljs-string">'所在地: '</span>)
    <span class="hljs-comment"># 1. 创建数据库连接对象</span>
    con = pymysql.connect(host=<span class="hljs-string">'localhost'</span>, port=<span class="hljs-number">3306</span>,
                          database=<span class="hljs-string">'hrs'</span>, charset=<span class="hljs-string">'utf8'</span>,
                          user=<span class="hljs-string">'yourname'</span>, password=<span class="hljs-string">'yourpass'</span>)
    <span class="hljs-keyword">try</span>:
        <span class="hljs-comment"># 2. 通过连接对象获取游标</span>
        <span class="hljs-keyword">with</span> con.cursor() <span class="hljs-keyword">as</span> cursor:
            <span class="hljs-comment"># 3. 通过游标执行SQL并获得执行结果</span>
            result = cursor.execute(
                <span class="hljs-string">'insert into tb_dept values (%s, %s, %s)'</span>,
                (no, name, loc)
            )
        <span class="hljs-keyword">if</span> result == <span class="hljs-number">1</span>:
            print(<span class="hljs-string">'添加成功!'</span>)
        <span class="hljs-comment"># 4. 操作成功提交事务</span>
        con.commit()
    <span class="hljs-keyword">finally</span>:
        <span class="hljs-comment"># 5. 关闭连接释放资源</span>
        con.close()


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>
</li>
<li>
<p>删除一个部门。</p>
<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    no = int(input(<span class="hljs-string">'编号: '</span>))
    con = pymysql.connect(host=<span class="hljs-string">'localhost'</span>, port=<span class="hljs-number">3306</span>,
                          database=<span class="hljs-string">'hrs'</span>, charset=<span class="hljs-string">'utf8'</span>,
                          user=<span class="hljs-string">'yourname'</span>, password=<span class="hljs-string">'yourpass'</span>,
                          autocommit=<span class="hljs-literal">True</span>)
    <span class="hljs-keyword">try</span>:
        <span class="hljs-keyword">with</span> con.cursor() <span class="hljs-keyword">as</span> cursor:
            result = cursor.execute(
                <span class="hljs-string">'delete from tb_dept where dno=%s'</span>,
                (no, )
            )
        <span class="hljs-keyword">if</span> result == <span class="hljs-number">1</span>:
            print(<span class="hljs-string">'删除成功!'</span>)
    <span class="hljs-keyword">finally</span>:
        con.close()


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>
<blockquote>
<p>说明：如果不希望每次SQL操作之后手动提交或回滚事务，可以像上面的代码那样，在创建连接的时候多加一个名为<code>autocommit</code>的参数并将它的值设置为<code>True</code>，表示每次执行SQL之后自动提交。如果程序中不需要使用事务环境也不希望手动的提交或回滚就可以这么做。</p>
</blockquote>
</li>
<li>
<p>更新一个部门。</p>
<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    no = int(input(<span class="hljs-string">'编号: '</span>))
    name = input(<span class="hljs-string">'名字: '</span>)
    loc = input(<span class="hljs-string">'所在地: '</span>)
    con = pymysql.connect(host=<span class="hljs-string">'localhost'</span>, port=<span class="hljs-number">3306</span>,
                          database=<span class="hljs-string">'hrs'</span>, charset=<span class="hljs-string">'utf8'</span>,
                          user=<span class="hljs-string">'yourname'</span>, password=<span class="hljs-string">'yourpass'</span>,
                          autocommit=<span class="hljs-literal">True</span>)
    <span class="hljs-keyword">try</span>:
        <span class="hljs-keyword">with</span> con.cursor() <span class="hljs-keyword">as</span> cursor:
            result = cursor.execute(
                <span class="hljs-string">'update tb_dept set dname=%s, dloc=%s where dno=%s'</span>,
                (name, loc, no)
            )
        <span class="hljs-keyword">if</span> result == <span class="hljs-number">1</span>:
            print(<span class="hljs-string">'更新成功!'</span>)
    <span class="hljs-keyword">finally</span>:
        con.close()


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>
</li>
<li>
<p>查询所有部门。</p>
<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql
<span class="hljs-keyword">from</span> pymysql.cursors <span class="hljs-keyword">import</span> DictCursor


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    con = pymysql.connect(host=<span class="hljs-string">'localhost'</span>, port=<span class="hljs-number">3306</span>,
                          database=<span class="hljs-string">'hrs'</span>, charset=<span class="hljs-string">'utf8'</span>,
                          user=<span class="hljs-string">'yourname'</span>, password=<span class="hljs-string">'yourpass'</span>)
    <span class="hljs-keyword">try</span>:
        <span class="hljs-keyword">with</span> con.cursor(cursor=DictCursor) <span class="hljs-keyword">as</span> cursor:
            cursor.execute(<span class="hljs-string">'select dno as no, dname as name, dloc as loc from tb_dept'</span>)
            results = cursor.fetchall()
            print(results)
            print(<span class="hljs-string">'编号\t名称\t\t所在地'</span>)
            <span class="hljs-keyword">for</span> dept <span class="hljs-keyword">in</span> results:
                print(dept[<span class="hljs-string">'no'</span>], end=<span class="hljs-string">'\t'</span>)
                print(dept[<span class="hljs-string">'name'</span>], end=<span class="hljs-string">'\t'</span>)
                print(dept[<span class="hljs-string">'loc'</span>])
    <span class="hljs-keyword">finally</span>:
        con.close()


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>
</li>
<li>
<p>分页查询员工信息。</p>
<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql
<span class="hljs-keyword">from</span> pymysql.cursors <span class="hljs-keyword">import</span> DictCursor


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Emp</span><span class="hljs-params">(object)</span>:</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, no, name, job, sal)</span>:</span>
        self.no = no
        self.name = name
        self.job = job
        self.sal = sal

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">f'\n编号：<span class="hljs-subst">&#123;self.no&#125;</span>\n姓名：<span class="hljs-subst">&#123;self.name&#125;</span>\n职位：<span class="hljs-subst">&#123;self.job&#125;</span>\n月薪：<span class="hljs-subst">&#123;self.sal&#125;</span>\n'</span>


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    page = int(input(<span class="hljs-string">'页码: '</span>))
    size = int(input(<span class="hljs-string">'大小: '</span>))
    con = pymysql.connect(host=<span class="hljs-string">'localhost'</span>, port=<span class="hljs-number">3306</span>,
                          database=<span class="hljs-string">'hrs'</span>, charset=<span class="hljs-string">'utf8'</span>,
                          user=<span class="hljs-string">'yourname'</span>, password=<span class="hljs-string">'yourpass'</span>)
    <span class="hljs-keyword">try</span>:
        <span class="hljs-keyword">with</span> con.cursor() <span class="hljs-keyword">as</span> cursor:
            cursor.execute(
                <span class="hljs-string">'select eno as no, ename as name, job, sal from tb_emp limit %s,%s'</span>,
                ((page - <span class="hljs-number">1</span>) * size, size)
            )
            <span class="hljs-keyword">for</span> emp_tuple <span class="hljs-keyword">in</span> cursor.fetchall():
                emp = Emp(*emp_tuple)
                print(emp)
    <span class="hljs-keyword">finally</span>:
        con.close()


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>MYSQL</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Linux操作系统</title>
    <url>/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E7%8E%A9%E8%BD%ACLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p><strong>本文转载于GitHub项目<a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">Python - 100天从新手到大师</a></strong></p>
</blockquote>
<blockquote>
<p>说明：本文中对Linux命令的讲解都是基于名为CentOS的Linux发行版本，我自己使用的是阿里云服务器，系统版本为CentOS Linux release 7.6.1810。不同的Linux发行版本在Shell命令和工具程序上会有一些差别，但是这些差别是很小的。</p>
</blockquote>
<h3 id="一：-操作系统发展史">一： 操作系统发展史</h3>
<p>只有硬件没有软件的计算机系统被称之为“裸机”，我们很难用“裸机”来完成计算机日常的工作（如存储和运算），所以必须用特定的软件来控制硬件的工作。最靠近计算机硬件的软件是系统软件，其中最为重要的就是“操作系统”。“操作系统”是控制和管理整个计算机硬件和软件资源、实现资源分配和任务调配、为系统用户以及其他软件提供接口和环境的程序的集合。</p>
<h4 id="1-1-没有操作系统（手工操作）">1.1 没有操作系统（手工操作）</h4>
<p>在计算机诞生之初没有操作系统的年代，人们先把程序纸带（或卡片）装上计算机，然后启动输入机把程序送入计算机，接着通过控制台开关启动程序运行。当程序执行完毕，打印机输出计算的结果，用户卸下并取走纸带（或卡片）。第二个用户上机，重复同样的步骤。在整个过程中用户独占机器，CPU等待手工操作，资源利用率极低。</p>
<h4 id="1-2-批处理系统">1.2 批处理系统</h4>
<p>首先启动计算机上的一个监督程序，在监督程序的控制下，计算机能够自动的、成批的处理一个或多个用户的作业。完成一批作业后，监督程度又从输入机读取作业存入磁带机。按照上面的步骤重复处理任务。监督程序不停的处理各个作业，实现了作业的自动转接，减少了作业的建立时间和手工操作时间，提高了计算机资源的利用率。 批处理系统又可以分为单道批处理系统、多道批处理系统、联机批处理系统、脱机批处理系统。</p>
<h4 id="1-3-分时系统和实时系统">1.3 分时系统和实时系统</h4>
<p>分时系统是把处理器的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。 若某个作业在分配给它的时间片内不能完成其计算，则该作业暂时中断，把处理机让给另一作业使用，等待下一轮调度时再继续其运行。由于计算机速度很快，作业运行轮转得很快，给每个用户的感觉是他独占了一台计算机。而每个用户可以通过自己的终端向系统发出各种操作控制命令，在充分的人机交互情况下，完成作业的运行。为了解决分时系统不能及时响应用户指令的情况，又出现了能够在在严格的时间范围内完成事件处理，及时响应随机外部事件的实时系统。</p>
<h4 id="1-4-通用操作系统">1.4 通用操作系统</h4>
<ol>
<li>
<p>1960s：IBM的System/360系列的机器有了统一的操作系统OS/360。</p>
</li>
<li>
<p>1965年：AT&amp;T的贝尔实验室加入GE和MIT的合作计划开始开发MULTICS。</p>
</li>
<li>
<p>1969年：MULTICS项目失败，Ken Tompson赋闲在家，为了玩“Space Travel”游戏用汇编语言在当时已经被淘汰的PDP-7上开发了Unics。</p>
<blockquote>
<p>注：很难想象，Unix这么伟大的系统，居然是一个赋闲在家的程序员（关键是老婆回娘家还带上了孩子）在一台被淘汰的设备上为了玩游戏开发出来的。</p>
</blockquote>
</li>
<li>
<p>1970年~1971年：Ken Tompson和Dennis Ritchie用B语言在PDP-11上重写了Unics，并在Brian Kernighan的建议下将其更名为Unix。</p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/ken-and-dennis-pdp-11.png" srcset="/img/loading.gif" alt=""></p>
</li>
<li>
<p>1972年~1973年：Dennis Ritchie发明了C语言来取代可移植性较差的B语言，并开启了用C语言重写Unix的工作。</p>
</li>
<li>
<p>1974年：Unix推出了里程碑意义的第5版，几乎完全用C语言来实现。</p>
</li>
<li>
<p>1979年：从Unix第7版开始，AT&amp;T发布新的使用条款，将Unix私有化。</p>
</li>
<li>
<p>1987年：Andrew S. Tanenbaum教授为了能在课堂上为学生讲解操作系统运作的细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统以避免版权上的争议，该系统被命名为Minix。</p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/andrew.jpg" srcset="/img/loading.gif" alt=""></p>
</li>
<li>
<p>1991年：Linus Torvalds就读于芬兰赫尔辛基大学期间，尝试在Minix上做一些开发工作，但因为Minix只是作为教学用途的操作系统，功能并不强大，为了方便在学校的新闻组和邮件系统中读写和下载文件，Linus编写了磁盘驱动程序和文件系统，这些东西形成了Linux系统内核的雏形。</p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/linus.png" srcset="/img/loading.gif" alt=""></p>
</li>
</ol>
<p>下图是Unix操作系统家族的图谱。</p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/history-of-unix.png" srcset="/img/loading.gif" alt=""></p>
<h3 id="二：-Linux概述">二： Linux概述</h3>
<p>Linux是一个通用操作系统。一个操作系统要负责任务调度、内存分配、处理外围设备I/O等操作。操作系统通常由内核（运行其他程序，管理像磁盘、打印机等硬件设备的核心程序）和系统程序（设备驱动、底层库、shell、服务程序等）两部分组成。</p>
<p>Linux内核是芬兰人Linus Torvalds开发的，于1991年9月发布。而Linux操作系统作为Internet时代的产物，它是由全世界许多开发者共同合作开发的，是一个自由的操作系统（注意自由和免费并不是同一个概念，想了解二者的差别可以<a href="https://www.debian.org/intro/free" target="_blank" rel="noopener">点击这里</a>）。</p>
<h3 id="三：-Linux系统优点">三： Linux系统优点</h3>
<ol>
<li>通用操作系统，不跟特定的硬件绑定。</li>
<li>用C语言编写，可移植性强，有内核编程接口。</li>
<li>支持多用户和多任务，支持安全的分层文件系统。</li>
<li>大量的实用程序，完善的网络功能以及强大的支持文档。</li>
<li>可靠的安全性和良好的稳定性，对开发者更友好。</li>
</ol>
<h3 id="四：-Linux系统发行版本">四： Linux系统发行版本</h3>
<ol>
<li><a href="https://www.redhat.com/en" target="_blank" rel="noopener">Redhat</a></li>
<li><a href="https://www.ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a></li>
<li><a href="https://www.centos.org/" target="_blank" rel="noopener">CentOS</a></li>
<li><a href="https://getfedora.org/" target="_blank" rel="noopener">Fedora</a></li>
<li><a href="https://www.debian.org/" target="_blank" rel="noopener">Debian</a></li>
<li><a href="https://www.opensuse.org/" target="_blank" rel="noopener">openSUSE</a></li>
</ol>
<h3 id="五：-基础命令">五： 基础命令</h3>
<p>Linux系统的命令通常都是如下所示的格式：</p>
<div class="hljs"><pre><code class="hljs Shell">命令名称 [命名参数] [命令对象]</code></pre></div>
<ol>
<li>
<p>获取登录信息 - <strong>w</strong> / <strong>who</strong> / <strong>last</strong>/ <strong>lastb</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# w
 23:31:16 up 12:16,  2 users,  load average: 0.00, 0.01, 0.05
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
root     pts/0    182.139.66.250   23:03    4.00s  0.02s  0.00s w
jackfrue pts/1    182.139.66.250   23:26    3:56   0.00s  0.00s -bash
[root ~]# who
root     pts/0        2018-04-12 23:03 (182.139.66.250)
jackfrued pts/1        2018-04-12 23:26 (182.139.66.250)
[root ~]# who am i
root     pts/0        2018-04-12 23:03 (182.139.66.250)
[root ~]# who mom likes
root     pts/0        2018-04-12 23:03 (182.139.66.250)
[root ~]# last
root     pts/0        117.136.63.184   Sun May 26 18:57   still logged in   
reboot   system boot  3.10.0-957.10.1. Mon May 27 02:52 - 19:10  (-7:-42)   
root     pts/4        117.136.63.184   Sun May 26 18:51 - crash  (08:01)    
root     pts/4        117.136.63.184   Sun May 26 18:49 - 18:49  (00:00)    
root     pts/3        117.136.63.183   Sun May 26 18:35 - crash  (08:17)    
root     pts/2        117.136.63.183   Sun May 26 18:34 - crash  (08:17)    
root     pts/0        117.136.63.183   Sun May 26 18:10 - crash  (08:42)</code></pre></div>
</li>
<li>
<p>查看自己使用的Shell - <strong>ps</strong>。</p>
<p>Shell也被称为“壳”或“壳程序”，它是用户与操作系统内核交流的翻译官，简单的说就是人与计算机交互的界面和接口。目前很多Linux系统默认的Shell都是bash（<u>B</u>ourne <u>A</u>gain <u>SH</u>ell），因为它可以使用tab键进行命令和路径补全、可以保存历史命令、可以方便的配置环境变量以及执行批处理操作。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# ps
  PID TTY          TIME CMD
 3531 pts/0    00:00:00 bash
 3553 pts/0    00:00:00 ps</code></pre></div>
</li>
<li>
<p>查看命令的说明和位置 - <strong>whatis</strong> / <strong>which</strong> / <strong>whereis</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# whatis ps
ps (1)        - report a snapshot of the current processes.
[root ~]# whatis python
python (1)    - an interpreted, interactive, object-oriented programming language
[root ~]# whereis ps
ps: /usr/bin/ps /usr/share/man/man1/ps.1.gz
[root ~]# whereis python
python: /usr/bin/python /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /etc/python /usr/include/python2.7 /usr/share/man/man1/python.1.gz
[root ~]# which ps
/usr/bin/ps
[root ~]# which python
/usr/bin/python</code></pre></div>
</li>
<li>
<p>清除屏幕上显示的内容 - <strong>clear</strong>。</p>
</li>
<li>
<p>查看帮助文档 - <strong>man</strong> / <strong>info</strong> / <strong>help</strong> / <strong>apropos</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# ps --help
Usage:
 ps [options]
 Try 'ps --help &lt;simple|list|output|threads|misc|all&gt;'
  or 'ps --help &lt;s|l|o|t|m|a&gt;'
 for additional help text.
For more details see ps(1).
[root@izwz97tbgo9lkabnat2lo8z ~]# man ps
PS(1)                                User Commands                                PS(1)
NAME
       ps - report a snapshot of the current processes.
SYNOPSIS
       ps [options]
DESCRIPTION
...</code></pre></div>
</li>
<li>
<p>查看系统和主机名 - <strong>uname</strong> / <strong>hostname</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# uname
Linux
[root@izwz97tbgo9lkabnat2lo8z ~]# hostname
izwz97tbgo9lkabnat2lo8z
[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-release
CentOS Linux release 7.6.1810 (Core)</code></pre></div>
<blockquote>
<p>说明：<code>cat</code>是连接文件内容并打印到标准输出的命令，后面会讲到该命令；<code>/etc</code>是Linux系统上的一个非常重要的目录，它保存了很多的配置文件；<code>centos-release</code>是该目录下的一个文件，因为我自己使用的Linux发行版本是CentOS 7.6，因此这里会有一个这样的文件。</p>
</blockquote>
</li>
<li>
<p>时间和日期 - <strong>date</strong> / <strong>cal</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# date
Wed Jun 20 12:53:19 CST 2018
[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal
      June 2018
Su Mo Tu We Th Fr Sa
                1  2
 3  4  5  6  7  8  9
10 11 12 13 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28 29 30
[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal 5 2017
      May 2017
Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6
 7  8  9 10 11 12 13
14 15 16 17 18 19 20
21 22 23 24 25 26 27
28 29 30 31</code></pre></div>
</li>
<li>
<p>重启和关机 - <strong>reboot</strong> / <strong>shutdown</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# shutdown -h +5
Shutdown scheduled for Sun 2019-05-26 19:34:27 CST, use 'shutdown -c' to cancel.
[root ~]# 
Broadcast message from root (Sun 2019-05-26 19:29:27 CST):

The system is going down for power-off at Sun 2019-05-26 19:34:27 CST!
[root ~]# shutdown -c

Broadcast message from root (Sun 2019-05-26 19:30:22 CST):

The system shutdown has been cancelled at Sun 2019-05-26 19:31:22 CST!
[root ~]# shutdown -r 23:58
Shutdown scheduled for Sun 2019-05-26 23:58:00 CST, use 'shutdown -c' to cancel.
[root ~]# shutdown -c

Broadcast message from root (Sun 2019-05-26 19:31:06 CST):

The system shutdown has been cancelled at Sun 2019-05-26 19:32:06 CST!</code></pre></div>
<blockquote>
<p>说明：在执行<code>shutdown</code>命令时会向登录系统的用户发出警告，可以在命令后面跟上警告消息来替换默认的警告消息，也可以在<code>-h</code>参数后通过<code>now</code>来表示立刻关机。</p>
</blockquote>
</li>
<li>
<p>退出登录 -  <strong>exit</strong> / <strong>logout</strong>。</p>
</li>
<li>
<p>查看历史命令 - <strong>history</strong>。</p>
</li>
</ol>
  <div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# history
...
452  ls
453  cd Python-3.6.5/
454  clear
455  history
[root@iZwz97tbgo9lkabnat2lo8Z ~]# !454</code></pre></div>
<blockquote>
<p>说明：查看到历史命令之后，可以用<code>!历史命令编号</code>来重新执行该命令；通过<code>history -c</code>可以清除历史命令。</p>
</blockquote>
<h3 id="六：-实用程序">六： 实用程序</h3>
<h4 id="6-1-文件和文件夹操作">6.1 文件和文件夹操作</h4>
<ol>
<li>
<p>创建/删除空目录 - <strong>mkdir</strong> / <strong>rmdir</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# mkdir abc
[root ~]# mkdir -p xyz/abc
[root ~]# rmdir abc</code></pre></div>
</li>
<li>
<p>创建/删除文件 - <strong>touch</strong> / <strong>rm</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# touch readme.txt
[root ~]# touch error.txt
[root ~]# rm error.txt
rm: remove regular empty file ‘error.txt’? y
[root ~]# rm -rf xyz</code></pre></div>
<ul>
<li><code>touch</code>命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间：
<ul>
<li>更改内容的时间 - mtime。</li>
<li>更改权限的时间 - ctime。</li>
<li>最后访问时间 - atime。</li>
</ul>
</li>
<li><code>rm</code>的几个重要参数：
<ul>
<li><code>-i</code>：交互式删除，每个删除项都会进行询问。</li>
<li><code>-r</code>：删除目录并递归的删除目录中的文件和目录。</li>
<li><code>-f</code>：强制删除，忽略不存在的文件，没有任何提示。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>切换和查看当前工作目录 - <strong>cd</strong> / <strong>pwd</strong>。</p>
<blockquote>
<p>说明：<code>cd</code>命令后面可以跟相对路径（以当前路径作为参照）或绝对路径（以<code>/</code>开头）来切换到指定的目录，也可以用<code>cd ..</code>来返回上一级目录。请大家想一想，如果要返回到上上一级目录应该给<code>cd</code>命令加上什么样的参数呢？</p>
</blockquote>
</li>
<li>
<p>查看目录内容 - <strong>ls</strong>。</p>
<ul>
<li><code>-l</code>：以长格式查看文件和目录。</li>
<li><code>-a</code>：显示以点开头的文件和目录（隐藏文件）。</li>
<li><code>-R</code>：遇到目录要进行递归展开（继续列出目录下面的文件和目录）。</li>
<li><code>-d</code>：只列出目录，不列出其他内容。</li>
<li><code>-S</code> / <code>-t</code>：按大小/时间排序。</li>
</ul>
</li>
<li>
<p>查看文件内容 - <strong>cat</strong> / <strong>tac</strong> / <strong>head</strong> / <strong>tail</strong> / <strong>more</strong> / <strong>less</strong> / <strong>rev</strong> / <strong>od</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# wget http://www.sohu.com/ -O sohu.html
--2018-06-20 18:42:34--  http://www.sohu.com/
Resolving www.sohu.com (www.sohu.com)... 14.18.240.6
Connecting to www.sohu.com (www.sohu.com)|14.18.240.6|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 212527 (208K) [text/html]
Saving to: ‘sohu.html’
<span class="hljs-meta">100%</span><span class="bash">[==================================================&gt;] 212,527     --.-K/s   <span class="hljs-keyword">in</span> 0.03s</span>
2018-06-20 18:42:34 (7.48 MB/s) - ‘sohu.html’ saved [212527/212527]
[root ~]# cat sohu.html
...
[root ~]# head -10 sohu.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;搜狐&lt;/title&gt;
&lt;meta name="Keywords" content="搜狐,门户网站,新媒体,网络媒体,新闻,财经,体育,娱乐,时尚,汽车,房产,科技,图片,论坛,微博,博客,视频,电影,电视剧"/&gt;
&lt;meta name="Description" content="搜狐网为用户提供24小时不间断的最新资讯，及搜索、邮件等网络服务。内容包括全球热点事件、突发新闻、时事评论、热播影视剧、体育赛事、行业动态、生活服务信息，以及论坛、博客、微博、我的搜狐等互动空间。" /&gt;
&lt;meta name="shenma-site-verification" content="1237e4d02a3d8d73e96cbd97b699e9c3_1504254750"&gt;
&lt;meta charset="utf-8"/&gt;
&lt;meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"/&gt;
[root ~]# tail -2 sohu.html
&lt;/body&gt;
&lt;/html&gt;
[root ~]# less sohu.html
...
[root ~]# cat -n sohu.html | more
...</code></pre></div>
<blockquote>
<p>说明：上面用到了一个名为<code>wget</code>的命令，它是一个网络下载器程序，可以从指定的URL下载资源。</p>
</blockquote>
</li>
<li>
<p>拷贝/移动文件 - <strong>cp</strong> / <strong>mv</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# mkdir backup
[root ~]# cp sohu.html backup/
[root ~]# cd backup
[root backup]# ls
sohu.html
[root backup]# mv sohu.html sohu_index.html
[root backup]# ls
sohu_index.html</code></pre></div>
</li>
<li>
<p>文件重命名 - <strong>rename</strong>。</p>
</li>
</ol>
  <div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# rename .htm .html *.htm</code></pre></div>
<ol start="8">
<li>
<p>查找文件和查找内容 - <strong>find</strong> / <strong>grep</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find / -name "*.html"
/root/sohu.html
/root/backup/sohu_index.html
[root@izwz97tbgo9lkabnat2lo8z ~]# find . -atime 7 -type f -print
[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -size +2k
[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -name "*.swp" -delete
[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep "&lt;script&gt;" sohu.html -n
20:&lt;script&gt;
[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep -E \&lt;\/?script.*\&gt; sohu.html -n
20:&lt;script&gt;
22:&lt;/script&gt;
24:&lt;script src="//statics.itc.cn/web/v3/static/js/es5-shim-08e41cfc3e.min.js"&gt;&lt;/script&gt;
25:&lt;script src="//statics.itc.cn/web/v3/static/js/es5-sham-1d5fa1124b.min.js"&gt;&lt;/script&gt;
26:&lt;script src="//statics.itc.cn/web/v3/static/js/html5shiv-21fc8c2ba6.js"&gt;&lt;/script&gt;
29:&lt;script type="text/javascript"&gt;
52:&lt;/script&gt;
...</code></pre></div>
<blockquote>
<p>说明：<code>grep</code>在搜索字符串时可以使用正则表达式，如果需要使用正则表达式可以用<code>grep -E</code>或者直接使用<code>egrep</code>。</p>
</blockquote>
</li>
<li>
<p>创建链接和查看链接 - <strong>ln</strong> / <strong>readlink</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html
-rw-r--r-- 1 root root 212131 Jun 20 19:15 sohu.html
[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup
[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html
-rw-r--r-- 2 root root 212131 Jun 20 19:15 sohu.html
[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup2
[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html
-rw-r--r-- 3 root root 212131 Jun 20 19:15 sohu.html
[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /etc/centos-release sysinfo
[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sysinfo
lrwxrwxrwx 1 root root 19 Jun 20 19:21 sysinfo -&gt; /etc/centos-release
[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sysinfo
CentOS Linux release 7.4.1708 (Core)
[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-release
CentOS Linux release 7.4.1708 (Core)</code></pre></div>
<blockquote>
<p>说明：链接可以分为硬链接和软链接（符号链接）。硬链接可以认为是一个指向文件数据的指针，就像Python中对象的引用计数，每添加一个硬链接，文件的对应链接数就增加1，只有当文件的链接数为0时，文件所对应的存储空间才有可能被其他文件覆盖。我们平常删除文件时其实并没有删除硬盘上的数据，我们删除的只是一个指针，或者说是数据的一条使用记录，所以类似于“文件粉碎机”之类的软件在“粉碎”文件时除了删除文件指针，还会在文件对应的存储区域填入数据来保证文件无法再恢复。软链接类似于Windows系统下的快捷方式，当软链接链接的文件被删除时，软链接也就失效了。</p>
</blockquote>
</li>
<li>
<p>压缩/解压缩和归档/解归档 - <strong>gzip</strong> / <strong>gunzip</strong> / <strong>xz</strong>。</p>
</li>
</ol>
  <div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://download.redis.io/releases/redis-4.0.10.tar.gz
--2018-06-20 19:29:59--  http://download.redis.io/releases/redis-4.0.10.tar.gz
Resolving download.redis.io (download.redis.io)... 109.74.203.151
Connecting to download.redis.io (download.redis.io)|109.74.203.151|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1738465 (1.7M) [application/x-gzip]
Saving to: ‘redis-4.0.10.tar.gz’
<span class="hljs-meta">100%</span><span class="bash">[==================================================&gt;] 1,738,465   70.1KB/s   <span class="hljs-keyword">in</span> 74s</span>
2018-06-20 19:31:14 (22.9 KB/s) - ‘redis-4.0.10.tar.gz’ saved [1738465/1738465]
[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*
redis-4.0.10.tar.gz
[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-4.0.10.tar.gz
[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*
redis-4.0.10.tar</code></pre></div>
<ol start="11">
<li>归档和解归档 - <strong>tar</strong>。</li>
</ol>
   <div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-4.0.10.tar
redis-4.0.10/
redis-4.0.10/.gitignore
redis-4.0.10/00-RELEASENOTES
redis-4.0.10/BUGS
redis-4.0.10/CONTRIBUTING
redis-4.0.10/COPYING
redis-4.0.10/INSTALL
redis-4.0.10/MANIFESTO
redis-4.0.10/Makefile
redis-4.0.10/README.md
redis-4.0.10/deps/
redis-4.0.10/deps/Makefile
redis-4.0.10/deps/README.md
...</code></pre></div>
<blockquote>
<p>说明：归档（也称为创建归档）和解归档都使用<code>tar</code>命令，通常创建归档需要<code>-cvf</code>三个参数，其中<code>c</code>表示创建（create），<code>v</code>表示显示创建归档详情（verbose），<code>f</code>表示指定归档的文件（file）；解归档需要加上<code>-xvf</code>参数，其中<code>x</code>表示抽取（extract），其他两个参数跟创建归档相同。</p>
</blockquote>
<ol start="12">
<li>将标准输入转成命令行参数 - <strong>xargs</strong>。</li>
</ol>
<p>下面的命令会将查找当前路径下的html文件，然后通过<code>xargs</code>将这些文件作为参数传给<code>rm</code>命令，实现查找并删除文件的操作。</p>
   <div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find . -type f -name "*.html" | xargs rm -f</code></pre></div>
<p>下面的命令将a.txt文件中的多行内容变成一行输出到b.txt文件中，其中<code>&lt;</code>表示从a.txt中读取输入，<code>&gt;</code>表示将命令的执行结果输出到b.txt中。</p>
   <div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# xargs &lt; a.txt &gt; b.txt</code></pre></div>
<blockquote>
<p>说明：这个命令就像上面演示的那样常在管道（实现进程间通信的一种方式）和重定向（重新指定输入输出的位置）操作中用到，后面的内容中会讲到管道操作和输入输出重定向操作。</p>
</blockquote>
<ol start="13">
<li>
<p>显示文件或目录 - <strong>basename</strong> / <strong>dirname</strong>。</p>
</li>
<li>
<p>其他相关工具。</p>
</li>
</ol>
<ul>
<li><strong>sort</strong> - 对内容排序</li>
<li><strong>uniq</strong> - 去掉相邻重复内容</li>
<li><strong>tr</strong> - 替换指定内容为新内容</li>
<li><strong>cut</strong> / <strong>paste</strong> - 剪切/黏贴内容</li>
<li><strong>split</strong> - 拆分文件</li>
<li><strong>file</strong> - 判断文件类型</li>
<li><strong>wc</strong> - 统计文件行数、单词数、字节数</li>
<li><strong>iconv</strong> - 编码转换</li>
</ul>
   <div class="hljs"><pre><code class="hljs Shell">[root ~]# cat foo.txt
grape
apple
pitaya
[root ~]# cat bar.txt
100
200
300
400
[root ~]# paste foo.txt bar.txt
grape   100
apple   200
pitaya  300
        400
[root ~]# paste foo.txt bar.txt &gt; hello.txt
[root ~]# cut -b 4-8 hello.txt
pe      10
le      20
aya     3
0
[root ~]# cat hello.txt | tr '\t' ','
grape,100
apple,200
pitaya,300
,400
[root ~]# split -l 100 sohu.html hello
[root ~]# wget https://www.baidu.com/img/bd_logo1.png
[root ~]# file bd_logo1.png
bd_logo1.png: PNG image data, 540 x 258, 8-bit colormap, non-interlaced
[root ~]# wc sohu.html
  2979   6355 212527 sohu.html
[root ~]# wc -l sohu.html
2979 sohu.html
[root ~]# wget http://www.qq.com -O qq.html
[root ~]# iconv -f gb2312 -t utf-8 qq.html</code></pre></div>
<h4 id="6-2-管道和重定向">6.2 管道和重定向</h4>
<ol>
<li>
<p>管道的使用 - <strong>|</strong>。</p>
<p>例子：查找当前目录下文件个数。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# find ./ | wc -l
6152</code></pre></div>
<p>例子：列出当前路径下的文件和文件夹，给每一项加一个编号。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# ls | cat -n
     1  dump.rdb
     2  mongodb-3.6.5
     3  Python-3.6.5
     4  redis-3.2.11
     5  redis.conf</code></pre></div>
<p>例子：查找record.log中包含AAA，但不包含BBB的记录的总数</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# cat record.log | grep AAA | grep -v BBB | wc -l</code></pre></div>
</li>
<li>
<p>输出重定向和错误重定向 - <strong>&gt;</strong> / <strong>&gt;&gt;</strong> / <strong>2&gt;</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# cat readme.txt
banana
apple
grape
apple
grape
watermelon
pear
pitaya
[root ~]# cat readme.txt | sort | uniq &gt; result.txt
[root ~]# cat result.txt
apple
banana
grape
pear
pitaya
watermelon</code></pre></div>
</li>
<li>
<p>输入重定向 - <strong>&lt;</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# echo 'hello, world!' &gt; hello.txt
[root ~]# wall &lt; hello.txt
[root ~]#
Broadcast message from root (Wed Jun 20 19:43:05 2018):
hello, world!
[root ~]# echo 'I will show you some code.' &gt;&gt; hello.txt
[root ~]# wall &lt; hello.txt
[root ~]#
Broadcast message from root (Wed Jun 20 19:43:55 2018):
hello, world!
I will show you some code.</code></pre></div>
</li>
<li>
<p>多重定向 - <strong>tee</strong>。</p>
<p>下面的命令除了在终端显示命令<code>ls</code>的结果之外，还会追加输出到<code>ls.txt</code>文件中。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# ls | tee -a ls.txt</code></pre></div>
</li>
</ol>
<h4 id="6-3-别名">6.3 别名</h4>
<ol>
<li>
<p><strong>alias</strong></p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# alias ll='ls -l'
[root ~]# alias frm='rm -rf'
[root ~]# ll
...
drwxr-xr-x  2 root       root   4096 Jun 20 12:52 abc
...
[root ~]# frm abc</code></pre></div>
</li>
<li>
<p><strong>unalias</strong></p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# unalias frm
[root ~]# frm sohu.html
-bash: frm: command not found</code></pre></div>
</li>
</ol>
<h4 id="6-4-文本处理">6.4 文本处理</h4>
<ol>
<li>
<p>字符流编辑器 - <strong>sed</strong>。</p>
<p>sed是操作、过滤和转换文本内容的工具。假设有一个名为fruit.txt的文件，内容如下所示。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# cat -n fruit.txt 
     1  banana
     2  grape
     3  apple
     4  watermelon
     5  orange</code></pre></div>
<p>接下来，我们在第2行后面添加一个pitaya。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# sed '2a pitaya' fruit.txt 
banana
grape
pitaya
apple
watermelon
orange</code></pre></div>
<blockquote>
<p>注意：刚才的命令和之前我们讲过的很多命令一样并没有改变fruit.txt文件，而是将添加了新行的内容输出到终端中，如果想保存到fruit.txt中，可以使用输出重定向操作。</p>
</blockquote>
<p>在第2行前面插入一个waxberry。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# sed '2i waxberry' fruit.txt
banana
waxberry
grape
apple
watermelon
orange</code></pre></div>
<p>删除第3行。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# sed '3d' fruit.txt
banana
grape
watermelon
orange</code></pre></div>
<p>删除第2行到第4行。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# sed '2,4d' fruit.txt
banana
orange</code></pre></div>
<p>将文本中的字符a替换为@。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# sed 's#a#@#' fruit.txt 
b@nana
gr@pe
@pple
w@termelon
or@nge</code></pre></div>
<p>将文本中的字符a替换为@，使用全局模式。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# sed 's#a#@#g' fruit.txt 
b@n@n@
gr@pe
@pple
w@termelon
or@nge</code></pre></div>
<p>先cd目录，将后缀为.cfg的文件里面所有老内容替换为新内容。</p>
<div class="hljs"><pre><code class="hljs Shell">sed -i "s/老内容/新内容/g" `find . -type f -name "*.cfg"`</code></pre></div>
</li>
<li>
<p>模式匹配和处理语言 - <strong>awk</strong>。</p>
<p>awk是一种编程语言，也是Linux系统中处理文本最为强大的工具，它的作者之一和现在的维护者就是之前提到过的Brian Kernighan（ken和dmr最亲密的伙伴）。通过该命令可以从文本中提取出指定的列、用正则表达式从文本中取出我们想要的内容、显示指定的行以及进行统计和运算，总之它非常强大。</p>
<p>假设有一个名为fruit2.txt的文件，内容如下所示。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# cat fruit2.txt 
1       banana      120
2       grape       500
3       apple       1230
4       watermelon  80
5       orange      400</code></pre></div>
<p>显示文件的第3行。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# awk 'NR==3' fruit2.txt 
3       apple       1230</code></pre></div>
<p>显示文件的第2列。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# awk '&#123;print $2&#125;' fruit2.txt 
banana
grape
apple
watermelon
orange</code></pre></div>
<p>显示文件的最后一列。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# awk '&#123;print $NF&#125;' fruit2.txt 
120
500
1230
80
400</code></pre></div>
<p>输出末尾数字大于等于300的行。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# awk '&#123;if($3 &gt;= 300) &#123;print $0&#125;&#125;' fruit2.txt 
2       grape       500
3       apple       1230
5       orange      400</code></pre></div>
<p>上面展示的只是awk命令的冰山一角，更多的内容留给读者自己在实践中去探索。</p>
</li>
</ol>
<h3 id="七：-用户管理">七： 用户管理</h3>
<ol>
<li>
<p>创建和删除用户 - <strong>useradd</strong> / <strong>userdel</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root home]# useradd hellokitty
[root home]# userdel hellokitty</code></pre></div>
<ul>
<li><code>-d</code> - 创建用户时为用户指定用户主目录</li>
<li><code>-g</code> - 创建用户时指定用户所属的用户组</li>
</ul>
</li>
<li>
<p>创建和删除用户组 - <strong>groupadd</strong> / <strong>groupdel</strong>。</p>
<blockquote>
<p>说明：用户组主要是为了方便对一个组里面所有用户的管理。</p>
</blockquote>
</li>
<li>
<p>修改密码 - <strong>passwd</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# passwd hellokitty
New password: 
Retype new password: 
passwd: all authentication tokens updated successfully.</code></pre></div>
<blockquote>
<p>说明：输入密码和确认密码没有回显且必须一气呵成的输入完成（不能使用退格键），密码和确认密码需要一致。如果使用<code>passwd</code>命令时没有指定命令作用的对象，则表示要修改当前用户的密码。如果想批量修改用户密码，可以使用<code>chpasswd</code>命令。</p>
</blockquote>
<ul>
<li><code>-l</code> / <code>-u</code> - 锁定/解锁用户。</li>
<li><code>-d</code> - 清除用户密码。</li>
<li><code>-e</code> - 设置密码立即过期，用户登录时会强制要求修改密码。</li>
<li><code>-i</code> - 设置密码过期多少天以后禁用该用户。</li>
</ul>
</li>
<li>
<p>查看和修改密码有效期 - <strong>chage</strong>。</p>
<p>设置hellokitty用户100天后必须修改密码，过期前15天通知该用户，过期后15天禁用该用户。</p>
<div class="hljs"><pre><code class="hljs Shell">chage -M 100 -W 15 -I 15 hellokitty</code></pre></div>
</li>
<li>
<p>切换用户 - <strong>su</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# su hellokitty
[hellokitty root]$</code></pre></div>
</li>
<li>
<p>以管理员身份执行命令 - <strong>sudo</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[hellokitty ~]$ ls /root
ls: cannot open directory /root: Permission denied
[hellokitty ~]$ sudo ls /root
[sudo] password for hellokitty:</code></pre></div>
<blockquote>
<p><strong>说明</strong>：如果希望用户能够以管理员身份执行命令，用户必须要出现在sudoers名单中，sudoers文件在 <code>/etc</code>目录下，如果希望直接编辑该文件也可以使用下面的命令。</p>
</blockquote>
</li>
<li>
<p>编辑sudoers文件 - <strong>visudo</strong>。</p>
<p>这里使用的编辑器是vi，关于vi的知识在后面有讲解。该文件的部分内容如下所示：</p>
<div class="hljs"><pre><code class="hljs plain">## Allow root to run any commands anywhere 
root    ALL&#x3D;(ALL)   ALL

## Allows members of the &#39;sys&#39; group to run networking, software, 
## service management apps and more.
# %sys ALL &#x3D; NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS
## Allows people in group wheel to run all commands
%wheel  ALL&#x3D;(ALL)   ALL

## Same thing without a password
# %wheel    ALL&#x3D;(ALL)   NOPASSWD: ALL

## Allows members of the users group to mount and unmount the
## cdrom as root
# %users  ALL&#x3D;&#x2F;sbin&#x2F;mount &#x2F;mnt&#x2F;cdrom, &#x2F;sbin&#x2F;umount &#x2F;mnt&#x2F;cdrom

## Allows members of the users group to shutdown this system
# %users  localhost&#x3D;&#x2F;sbin&#x2F;shutdown -h now</code></pre></div>
</li>
<li>
<p>显示用户与用户组的信息 - <strong>id</strong>。</p>
</li>
<li>
<p>给其他用户发消息 -<strong>write</strong> / <strong>wall</strong>。</p>
<p>发送方：</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# write hellokitty
Dinner is on me.
Call me at 6pm.</code></pre></div>
<p>接收方：</p>
<div class="hljs"><pre><code class="hljs Shell">[hellokitty ~]$ 
Message from root on pts/0 at 17:41 ...
Dinner is on me.
Call me at 6pm.
EOF</code></pre></div>
</li>
<li>
<p>查看/设置是否接收其他用户发送的消息 - <strong>mesg</strong>。</p>
</li>
</ol>
   <div class="hljs"><pre><code class="hljs Shell">[hellokitty ~]$ mesg
is y
[hellokitty ~]$ mesg n
[hellokitty ~]$ mesg
is n</code></pre></div>
<h3 id="八：-文件系统">八： 文件系统</h3>
<h4 id="8-1-文件和路径">8.1 文件和路径</h4>
<ol>
<li>命名规则：文件名的最大长度与文件系统类型有关，一般情况下，文件名不应该超过255个字符，虽然绝大多数的字符都可以用于文件名，但是最好使用英文大小写字母、数字、下划线、点这样的符号。文件名中虽然可以使用空格，但应该尽可能避免使用空格，否则在输入文件名时需要用将文件名放在双引号中或者通过<code>\</code>对空格进行转义。</li>
<li>扩展名：在Linux系统下文件的扩展名是可选的，但是使用扩展名有助于对文件内容的理解。有些应用程序要通过扩展名来识别文件，但是更多的应用程序并不依赖文件的扩展名，就像<code>file</code>命令在识别文件时并不是依据扩展名来判定文件的类型。</li>
<li>隐藏文件：以点开头的文件在Linux系统中是隐藏文件（不可见文件）。</li>
</ol>
<h4 id="8-2-目录结构">8.2 目录结构</h4>
<ol>
<li>/bin - 基本命令的二进制文件。</li>
<li>/boot - 引导加载程序的静态文件。</li>
<li>/dev - 设备文件。</li>
<li><strong>/etc</strong> - 配置文件。</li>
<li>/home - 普通用户主目录的父目录。</li>
<li>/lib - 共享库文件。</li>
<li>/lib64 - 共享64位库文件。</li>
<li>/lost+found - 存放未链接文件。</li>
<li>/media - 自动识别设备的挂载目录。</li>
<li>/mnt - 临时挂载文件系统的挂载点。</li>
<li>/opt - 可选插件软件包安装位置。</li>
<li>/proc -  内核和进程信息。</li>
<li><strong>/root</strong> - 超级管理员用户主目录。</li>
<li>/run - 存放系统运行时需要的东西。</li>
<li>/sbin - 超级用户的二进制文件。</li>
<li>/sys - 设备的伪文件系统。</li>
<li>/tmp - 临时文件夹。</li>
<li><strong>/usr</strong> - 用户应用目录。</li>
<li>/var - 变量数据目录。</li>
</ol>
<h4 id="8-3-访问权限">8.3 访问权限</h4>
<ol>
<li>
<p><strong>chmod</strong> - 改变文件模式比特。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# ls -l
...
-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html
...
[root ~]# chmod g+w,o+w sohu.html
[root ~]# ls -l
...
-rw-rw-rw-  1 root       root 211878 Jun 19 16:06 sohu.html
...
[root ~]# chmod 644 sohu.html
[root ~]# ls -l
...
-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html
...</code></pre></div>
<blockquote>
<p>说明：通过上面的例子可以看出，用<code>chmod</code>改变文件模式比特有两种方式：一种是字符设定法，另一种是数字设定法。除了<code>chmod</code>之外，可以通过<code>umask</code>来设定哪些权限将在新文件的默认权限中被删除。</p>
</blockquote>
<p>长格式查看目录或文件时显示结果及其对应权限的数值如下表所示。</p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/file-mode.png" srcset="/img/loading.gif" alt=""></p>
</li>
<li>
<p><strong>chown</strong> - 改变文件所有者。</p>
 <div class="hljs"><pre><code class="hljs Shell">[root ~]# ls -l
...
-rw-r--r--  1 root root     54 Jun 20 10:06 readme.txt
...
[root ~]# chown hellokitty readme.txt
[root ~]# ls -l
...
-rw-r--r--  1 hellokitty root     54 Jun 20 10:06 readme.txt
...</code></pre></div>
</li>
<li>
<p><strong>chgrp</strong> - 改变用户组。</p>
</li>
</ol>
<h4 id="8-4-磁盘管理">8.4 磁盘管理</h4>
<ol>
<li>
<p>列出文件系统的磁盘使用状况 - <strong>df</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda1        40G  5.0G   33G  14% /
devtmpfs        486M     0  486M   0% /dev
tmpfs           497M     0  497M   0% /dev/shm
tmpfs           497M  356K  496M   1% /run
tmpfs           497M     0  497M   0% /sys/fs/cgroup
tmpfs           100M     0  100M   0% /run/user/0</code></pre></div>
</li>
<li>
<p>磁盘分区表操作 - <strong>fdisk</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# fdisk -l
Disk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0x000a42f4
   Device Boot      Start         End      Blocks   Id  System
/dev/vda1   *        2048    83884031    41940992   83  Linux
Disk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes</code></pre></div>
</li>
<li>
<p>磁盘分区工具 - <strong>parted</strong>。</p>
</li>
<li>
<p>格式化文件系统 - <strong>mkfs</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# mkfs -t ext4 -v /dev/sdb</code></pre></div>
<ul>
<li><code>-t</code> - 指定文件系统的类型。</li>
<li><code>-c</code> - 创建文件系统时检查磁盘损坏情况。</li>
<li><code>-v</code> - 显示详细信息。</li>
</ul>
</li>
<li>
<p>文件系统检查 - <strong>fsck</strong>。</p>
</li>
<li>
<p>转换或拷贝文件 - <strong>dd</strong>。</p>
</li>
<li>
<p>挂载/卸载 - <strong>mount</strong> / <strong>umount</strong>。</p>
</li>
<li>
<p>创建/激活/关闭交换分区 - <strong>mkswap</strong> / <strong>swapon</strong> / <strong>swapoff</strong>。</p>
</li>
</ol>
<blockquote>
<p>说明：执行上面这些命令会带有一定的风险，如果不清楚这些命令的用法，最好不用随意使用，在使用的过程中，最好对照参考资料进行操作，并在操作前确认是否要这么做。</p>
</blockquote>
<h3 id="九：-编辑器-vim">九： 编辑器 - vim</h3>
<ol>
<li>
<p>启动vim。可以通过<code>vi</code>或<code>vim</code>命令来启动vim，启动时可以指定文件名来打开一个文件，如果没有指定文件名，也可以在保存的时候指定文件名。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# vim guess.py</code></pre></div>
</li>
<li>
<p>命令模式、编辑模式和末行模式：启动vim进入的是命令模式（也称为Normal模式），在命令模式下输入英文字母<code>i</code>会进入编辑模式（Insert模式），屏幕下方出现<code>-- INSERT --</code>提示；在编辑模式下按下<code>Esc</code>会回到命令模式，此时如果输入英文<code>:</code>会进入末行模式，在末行模式下输入<code>q!</code>可以在不保存当前工作的情况下强行退出vim；在命令模式下输入<code>v</code>会进入可视模式（Visual模式），可以用光标选择一个区域再完成对应的操作。</p>
</li>
<li>
<p>保存和退出vim：在命令模式下输入<code>:</code> 进入末行模式，输入<code>wq</code>可以实现保存退出；如果想放弃编辑的内容输入<code>q!</code>强行退出，这一点刚才已经提到过了；在命令模式下也可以直接输入<code>ZZ</code>实现保存退出。如果只想保存文件不退出，那么可以在末行模式下输入<code>w</code>；可以在<code>w</code>后面输入空格再指定要保存的文件名。</p>
</li>
<li>
<p>光标操作。</p>
<ul>
<li>在命令模式下可以通过<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>来控制光标向左、下、上、右的方向移动，可以在字母前输入数字来表示移动的距离，例如：<code>10h</code>表示向左移动10个字符。</li>
<li>在命令模式下可以通过<code>Ctrl+y</code>和<code>Ctrl+e</code>来实现向上、向下滚动一行文本的操作，可以通过<code>Ctrl+f</code>和<code>Ctrl+b</code>来实现向前和向后翻页的操作。</li>
<li>在命令模式下可以通过输入英文字母<code>G</code>将光标移到文件的末尾，可以通过<code>gg</code>将光标移到文件的开始，也可以通过在<code>G</code>前输入数字来将光标移动到指定的行。</li>
</ul>
</li>
<li>
<p>文本操作。</p>
<ul>
<li>删除：在命令模式下可以用<code>dd</code>来删除整行；可以在<code>dd</code>前加数字来指定删除的行数；可以用<code>d$</code>来实现删除从光标处删到行尾的操作，也可以通过<code>d0</code>来实现从光标处删到行首的操作；如果想删除一个单词，可以使用<code>dw</code>；如果要删除全文，可以在输入<code>:%d</code>（其中<code>:</code>用来从命令模式进入末行模式）。</li>
<li>复制和粘贴：在命令模式下可以用<code>yy</code>来复制整行；可以在<code>yy</code>前加数字来指定复制的行数；可以通过<code>p</code>将复制的内容粘贴到光标所在的地方。</li>
<li>撤销和恢复：在命令模式下输入<code>u</code>可以撤销之前的操作；通过<code>Ctrl+r</code>可以恢复被撤销的操作。</li>
<li>对内容进行排序：在命令模式下输入<code>%!sort</code>。</li>
</ul>
</li>
<li>
<p>查找和替换。</p>
<ul>
<li>查找操作需要输入<code>/</code>进入末行模式并提供正则表达式来匹配与之对应的内容，例如：<code>/doc.*\.</code>，输入<code>n</code>来向前搜索，也可以输入<code>N</code>来向后搜索。</li>
<li>替换操作需要输入<code>:</code>进入末行模式并指定搜索的范围、正则表达式以及替换后的内容和匹配选项，例如：<code>:1,$s/doc.*/hello/gice</code>，其中：
<ul>
<li><code>g</code> - global：全局匹配。</li>
<li><code>i</code> - ignore case：忽略大小写匹配。</li>
<li><code>c</code> - confirm：替换时需要确认。</li>
<li><code>e</code> - error：忽略错误。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>参数设定：在输入<code>:</code>进入末行模式后可以对vim进行设定。</p>
<ul>
<li>
<p>设置Tab键的空格数：<code>set ts=4</code></p>
</li>
<li>
<p>设置显示/不显示行号：<code>set nu</code> / <code>set nonu</code></p>
</li>
<li>
<p>设置启用/关闭高亮语法：<code>syntax on</code> / <code>syntax off</code></p>
</li>
<li>
<p>设置显示标尺（光标所在的行和列）： <code>set ruler</code></p>
</li>
<li>
<p>设置启用/关闭搜索结果高亮：<code>set hls</code> / <code>set nohls</code></p>
<blockquote>
<p>说明：如果希望上面的这些设定在每次启动vim时都能自动生效，需要将这些设定写到用户主目录下的.vimrc文件中。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>高级技巧</p>
<ul>
<li>
<p>比较多个文件。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# vim -d foo.txt bar.txt</code></pre></div>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/vim-diff.png" srcset="/img/loading.gif" alt=""></p>
</li>
<li>
<p>打开多个文件。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# vim foo.txt bar.txt hello.txt</code></pre></div>
<p>启动vim后只有一个窗口显示的是foo.txt，可以在末行模式中输入<code>ls</code>查看到打开的三个文件，也可以在末行模式中输入<code>b &lt;num&gt;</code>来显示另一个文件，例如可以用<code>:b 2</code>将bar.txt显示出来，可以用<code>:b 3</code>将hello.txt显示出来。</p>
</li>
<li>
<p>拆分和切换窗口。</p>
<p>可以在末行模式中输入<code>sp</code>或<code>vs</code>来实现对窗口的水平或垂直拆分，这样我们就可以同时打开多个编辑窗口，通过按两次<code>Ctrl+w</code>就可以实现编辑窗口的切换，在一个窗口中执行退出操作只会关闭对应的窗口，其他的窗口继续保留。</p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/vim-multi-window.png" srcset="/img/loading.gif" alt=""></p>
</li>
<li>
<p>映射快捷键：在vim下可以将一些常用操作映射为快捷键来提升工作效率。</p>
<ul>
<li>
<p>例子1：在命令模式下输入<code>F4</code>执行从第一行开始删除10000行代码的操作。</p>
<p><code>:map &lt;F4&gt; gg10000dd</code>。</p>
<p>例子2：在编辑模式下输入<code>__main</code>直接补全为<code>if __name__ == '__main__':</code>。</p>
<p><code>:inoremap __main if __name__ == '__main__':</code></p>
</li>
</ul>
<blockquote>
<p>说明：上面例子2的<code>inoremap</code>中的<code>i</code>表示映射的键在编辑模式使用， <code>nore</code>表示不要递归，这一点非常重要，否则如果键对应的内容中又出现键本身，就会引发递归（相当于进入了死循环）。如果希望映射的快捷键每次启动vim时都能生效，需要将映射写到用户主目录下的.vimrc文件中。</p>
</blockquote>
</li>
<li>
<p>录制宏。</p>
<ul>
<li>
<p>在命令模式下输入<code>qa</code>开始录制宏（其中<code>a</code>是寄存器的名字，也可以是其他英文字母或0-9的数字）。</p>
</li>
<li>
<p>执行你的操作（光标操作、编辑操作等），这些操作都会被录制下来。</p>
</li>
<li>
<p>如果录制的操作已经完成了，按<code>q</code>结束录制。</p>
</li>
<li>
<p>通过<code>@a</code>（<code>a</code>是刚才使用的寄存器的名字）播放宏，如果要多次执行宏可以在前面加数字，例如<code>100@a</code>表示将宏播放100次。</p>
</li>
<li>
<p>可以试一试下面的例子来体验录制宏的操作，该例子来源于<a href="https://harttle.land/tags.html#Vim" target="_blank" rel="noopener">Harttle Land网站</a>，该网站上提供了很多关于vim的使用技巧，有兴趣的可以了解一下。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/vim-macro.png" srcset="/img/loading.gif" alt=""></p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="十：-软件安装和配置">十： 软件安装和配置</h3>
<h4 id="10-1-使用包管理工具">10.1 使用包管理工具</h4>
<ol>
<li><strong>yum</strong> - Yellowdog Updater Modified。
<ul>
<li><code>yum search</code>：搜索软件包，例如<code>yum search nginx</code>。</li>
<li><code>yum list installed</code>：列出已经安装的软件包，例如<code>yum list installed | grep zlib</code>。</li>
<li><code>yum install</code>：安装软件包，例如<code>yum install nginx</code>。</li>
<li><code>yum remove</code>：删除软件包，例如<code>yum remove nginx</code>。</li>
<li><code>yum update</code>：更新软件包，例如<code>yum update</code>可以更新所有软件包，而<code>yum update tar</code>只会更新tar。</li>
<li><code>yum check-update</code>：检查有哪些可以更新的软件包。</li>
<li><code>yum info</code>：显示软件包的相关信息，例如<code>yum info nginx</code>。</li>
</ul>
</li>
<li><strong>rpm</strong> - Redhat Package Manager。
<ul>
<li>安装软件包：<code>rpm -ivh &lt;packagename&gt;.rpm</code>。</li>
<li>移除软件包：<code>rpm -e &lt;packagename&gt;</code>。</li>
<li>查询软件包：<code>rpm -qa</code>，例如可以用<code>rpm -qa | grep mysql</code>来检查是否安装了MySQL相关的软件包。</li>
</ul>
</li>
</ol>
<p>下面以Nginx为例，演示如何使用yum安装软件。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# yum -y install nginx
...
Installed:
  nginx.x86_64 1:1.12.2-2.el7
Dependency Installed:
  nginx-all-modules.noarch 1:1.12.2-2.el7
  nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7
  nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7
  nginx-mod-http-perl.x86_64 1:1.12.2-2.el7
  nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7
  nginx-mod-mail.x86_64 1:1.12.2-2.el7
  nginx-mod-stream.x86_64 1:1.12.2-2.el7
Complete!
[root ~]# yum info nginx
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
Installed Packages
Name        : nginx
Arch        : x86_64
Epoch       : 1
Version     : 1.12.2
Release     : 2.el7
Size        : 1.5 M
Repo        : installed
From repo   : epel
Summary     : A high performance web server and reverse proxy server
URL         : http://nginx.org/
License     : BSD
Description : Nginx is a web server and a reverse proxy server for HTTP, SMTP, POP3 and
            : IMAP protocols, with a strong focus on high concurrency, performance and low
            : memory usage.
[root ~]# nginx -v
nginx version: nginx/1.12.2</code></pre></div>
<p>移除Nginx。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# yum -y remove nginx</code></pre></div>
<p>下面以MySQL为例，演示如何使用rpm安装软件。要安装MySQL需要先到<a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL官方网站</a>下载对应的<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">RPM文件</a>，当然要选择和你使用的Linux系统对应的版本。MySQL现在是Oracle公司旗下的产品，在MySQL被收购后，MySQL的作者重新制作了一个MySQL的分支MariaDB，可以通过yum进行安装。</p>
<div class="hljs"><pre><code class="hljs Shell">[root mysql]# ls
mysql-community-client-5.7.22-1.el7.x86_64.rpm
mysql-community-common-5.7.22-1.el7.x86_64.rpm
mysql-community-libs-5.7.22-1.el7.x86_64.rpm
mysql-community-server-5.7.22-1.el7.x86_64.rpm
[root mysql]# yum -y remove mariadb-libs
[root mysql]# yum -y install libaio
[root mysql]#rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm
...
[root mysql]#rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm
...
[root mysql]#rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm
...
[root mysql]#rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm
...</code></pre></div>
<blockquote>
<p>说明：由于MySQL和<a href="https://mariadb.org/" target="_blank" rel="noopener">MariaDB</a>的底层依赖库是有冲突的，所以上面我们首先用<code>yum</code>移除了名为mariadb-libs的依赖库并安装了名为libaio支持异步I/O操作的依赖库。关于MySQL和MariaDB之间的关系，可以阅读<a href="https://zh.wikipedia.org/wiki/MariaDB" target="_blank" rel="noopener">维基百科</a>上关于MariaDB的介绍。</p>
</blockquote>
<p>移除安装的MySQL。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# rpm -qa | grep mysql | xargs rpm -e</code></pre></div>
<h4 id="10-2-下载解压配置环境变量">10.2 下载解压配置环境变量</h4>
<p>下面以安装MongoDB为例，演示这类软件应该如何安装。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz
--2018-06-21 18:32:53--  https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz
Resolving fastdl.mongodb.org (fastdl.mongodb.org)... 52.85.83.16, 52.85.83.228, 52.85.83.186, ...
Connecting to fastdl.mongodb.org (fastdl.mongodb.org)|52.85.83.16|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 100564462 (96M) [application/x-gzip]
Saving to: ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’
<span class="hljs-meta">100%</span><span class="bash">[==================================================&gt;] 100,564,462  630KB/s   <span class="hljs-keyword">in</span> 2m 9s</span>
2018-06-21 18:35:04 (760 KB/s) - ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’ saved [100564462/100564462]
[root ~]# gunzip mongodb-linux-x86_64-rhel70-3.6.5.tgz
[root ~]# tar -xvf mongodb-linux-x86_64-rhel70-3.6.5.tar
mongodb-linux-x86_64-rhel70-3.6.5/README
mongodb-linux-x86_64-rhel70-3.6.5/THIRD-PARTY-NOTICES
mongodb-linux-x86_64-rhel70-3.6.5/MPL-2
mongodb-linux-x86_64-rhel70-3.6.5/GNU-AGPL-3.0
mongodb-linux-x86_64-rhel70-3.6.5/bin/mongodump
mongodb-linux-x86_64-rhel70-3.6.5/bin/mongorestore
mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoexport
mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoimport
mongodb-linux-x86_64-rhel70-3.6.5/bin/mongostat
mongodb-linux-x86_64-rhel70-3.6.5/bin/mongotop
mongodb-linux-x86_64-rhel70-3.6.5/bin/bsondump
mongodb-linux-x86_64-rhel70-3.6.5/bin/mongofiles
mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoreplay
mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoperf
mongodb-linux-x86_64-rhel70-3.6.5/bin/mongod
mongodb-linux-x86_64-rhel70-3.6.5/bin/mongos
mongodb-linux-x86_64-rhel70-3.6.5/bin/mongo
mongodb-linux-x86_64-rhel70-3.6.5/bin/install_compass
[root ~]# vim .bash_profile
...
PATH=$PATH:$HOME/bin:$HOME/mongodb-linux-x86_64-rhel70-3.6.5/bin
export PATH
...
[root ~]# source .bash_profile
[root ~]# mongod --version
db version v3.6.5
git version: a20ecd3e3a174162052ff99913bc2ca9a839d618
OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013
allocator: tcmalloc
modules: none
build environment:
    distmod: rhel70
    distarch: x86_64
    target_arch: x86_64
[root ~]# mongo --version
MongoDB shell version v3.6.5
git version: a20ecd3e3a174162052ff99913bc2ca9a839d618
OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013
allocator: tcmalloc
modules: none
build environment:
    distmod: rhel70
    distarch: x86_64
    target_arch: x86_64</code></pre></div>
<blockquote>
<p>说明：当然也可以通过yum来安装MongoDB，具体可以参照<a href="https://docs.mongodb.com/master/administration/install-on-linux/" target="_blank" rel="noopener">官方网站</a>上给出的说明。</p>
</blockquote>
<h4 id="10-3-源代码构建安装">10.3 源代码构建安装</h4>
<ol>
<li>
<p>安装Python 3.6。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# yum install gcc
[root ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz
[root ~]# gunzip Python-3.6.5.tgz
[root ~]# tar -xvf Python-3.6.5.tar
[root ~]# cd Python-3.6.5
[root ~]# ./configure --prefix=/usr/local/python36 --enable-optimizations
[root ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel
[root ~]# make &amp;&amp; make install
...
[root ~]# ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3
[root ~]# python3 --version
Python 3.6.5
[root ~]# python3 -m pip install -U pip
[root ~]# pip3 --version</code></pre></div>
<blockquote>
<p>说明：上面在安装好Python之后还需要注册PATH环境变量，将Python安装路径下bin文件夹的绝对路径注册到PATH环境变量中。注册环境变量可以修改用户主目录下的.bash_profile或者/etc目录下的profile文件，二者的区别在于前者相当于是用户环境变量，而后者相当于是系统环境变量。</p>
</blockquote>
</li>
<li>
<p>安装Redis-3.2.12。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# wget http://download.redis.io/releases/redis-3.2.12.tar.gz
[root ~]# gunzip redis-3.2.12.tar.gz
[root ~]# tar -xvf redis-3.2.12.tar
[root ~]# cd redis-3.2.12
[root ~]# make &amp;&amp; make install
[root ~]# redis-server --version
Redis server v=3.2.12 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=5bc5cd3c03d6ceb6
[root ~]# redis-cli --version
redis-cli 3.2.12</code></pre></div>
</li>
</ol>
<h3 id="十一：-配置服务">十一： 配置服务</h3>
<p>我们可以Linux系统下安装和配置各种服务，也就是说我们可以把Linux系统打造成数据库服务器、Web服务器、缓存服务器、文件服务器、消息队列服务器等等。Linux下的大多数服务都被设置为守护进程（驻留在系统后台运行，但不会因为服务还在运行而导致Linux无法停止运行），所以我们安装的服务通常名字后面都有一个字母<code>d</code>，它是英文单词<code>daemon</code>的缩写，例如：防火墙服务叫firewalld，我们之前安装的MySQL服务叫mysqld，Apache服务器叫httpd等。在安装好服务之后，可以使用<code>systemctl</code>命令或<code>service</code>命令来完成对服务的启动、停止等操作，具体操作如下所示。</p>
<ol>
<li>
<p>启动防火墙服务。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# systemctl start firewalld</code></pre></div>
</li>
<li>
<p>终止防火墙服务。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# systemctl stop firewalld</code></pre></div>
</li>
<li>
<p>重启防火墙服务。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# systemctl restart firewalld</code></pre></div>
</li>
<li>
<p>查看防火墙服务状态。</p>
 <div class="hljs"><pre><code class="hljs Shell">[root ~]# systemctl status firewalld</code></pre></div>
</li>
<li>
<p>设置/禁用防火墙服务开机自启。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# systemctl enable firewalld
Created symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.
Created symlink from /etc/systemd/system/multi-user.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.
[root ~]# systemctl disable firewalld
Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.
Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</code></pre></div>
</li>
</ol>
<h3 id="十二：-计划任务">十二： 计划任务</h3>
<ol>
<li>
<p>在指定的时间执行命令</p>
<ul>
<li><strong>at</strong> - 将任务排队，在指定的时间执行。</li>
<li><strong>atq</strong> - 查看待执行的任务队列。</li>
<li><strong>atrm</strong> - 从队列中删除待执行的任务。</li>
</ul>
<p>指定3天以后下午5点要执行的任务。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# at 5pm+3days
<span class="hljs-meta">at&gt;</span><span class="bash"> rm -f /root/*.html</span>
<span class="hljs-meta">at&gt;</span><span class="bash"> &lt;EOT&gt;</span>
job 9 at Wed Jun  5 17:00:00 2019</code></pre></div>
<p>查看待执行的任务队列。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# atq
9       Wed Jun  5 17:00:00 2019 a root</code></pre></div>
<p>从队列中删除指定的任务。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]$ atrm 9</code></pre></div>
</li>
<li>
<p>计划任务表 - <strong>crontab</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# crontab -e
* * * * * echo "hello, world!" &gt;&gt; /root/hello.txt
59 23 * * * rm -f /root/*.log</code></pre></div>
<blockquote>
<p>说明：输入<code>crontab -e</code>命令会打开vim来编辑Cron表达式并指定触发的任务，上面我们定制了两个计划任务，一个是每分钟向/root目录下的hello.txt中追加输出<code>hello, world!</code>；另一个是每天23时59分执行删除/root目录下以log为后缀名的文件。如果不知道Cron表达式如何书写，可以参照/etc/crontab文件中的提示（下面会讲到）或者用搜索引擎找一下“Cron表达式在线生成器”来生成Cron表达式。</p>
</blockquote>
<p>和crontab相关的文件在<code>/etc</code>目录下，通过修改<code>/etc</code>目录下的crontab文件也能够定制计划任务。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# cd /etc
[root etc]# ls -l | grep cron
-rw-------.  1 root root      541 Aug  3  2017 anacrontab
drwxr-xr-x.  2 root root     4096 Mar 27 11:56 cron.d
drwxr-xr-x.  2 root root     4096 Mar 27 11:51 cron.daily
-rw-------.  1 root root        0 Aug  3  2017 cron.deny
drwxr-xr-x.  2 root root     4096 Mar 27 11:50 cron.hourly
drwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.monthly
-rw-r--r--   1 root root      493 Jun 23 15:09 crontab
drwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.weekly
[root etc]# vim crontab
  1 SHELL=/bin/bash
  2 PATH=/sbin:/bin:/usr/sbin:/usr/bin
  3 MAILTO=root
  4
  5 # For details see man 4 crontabs
  6
  7 # Example of job definition:
  8 # .---------------- minute (0 - 59)
  9 # |  .------------- hour (0 - 23)
 10 # |  |  .---------- day of month (1 - 31)
 11 # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
 12 # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
 13 # |  |  |  |  |
 14 # *  *  *  *  * user-name  command to be executed</code></pre></div>
</li>
</ol>
<h3 id="十三：-网络访问和管理">十三： 网络访问和管理</h3>
<ol>
<li>
<p>安全远程连接 - <strong>ssh</strong>。</p>
 <div class="hljs"><pre><code class="hljs Shell">[root ~]$ ssh root@120.77.222.217
The authenticity of host '120.77.222.217 (120.77.222.217)' can't be established.
ECDSA key fingerprint is SHA256:BhUhykv+FvnIL03I9cLRpWpaCxI91m9n7zBWrcXRa8w.
ECDSA key fingerprint is MD5:cc:85:e9:f0:d7:07:1a:26:41:92:77:6b:7f:a0:92:65.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '120.77.222.217' (ECDSA) to the list of known hosts.
root@120.77.222.217's password:</code></pre></div>
</li>
<li>
<p>通过网络获取资源 - <strong>wget</strong>。</p>
<ul>
<li>-b 后台下载模式</li>
<li>-O 下载到指定的目录</li>
<li>-r 递归下载</li>
</ul>
</li>
<li>
<p>发送和接收邮件 - <strong>mail</strong>。</p>
</li>
<li>
<p>网络配置工具（旧） - <strong>ifconfig</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# ifconfig eth0
eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 172.18.61.250  netmask 255.255.240.0  broadcast 172.18.63.255
        ether 00:16:3e:02:b6:46  txqueuelen 1000  (Ethernet)
        RX packets 1067841  bytes 1296732947 (1.2 GiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 409912  bytes 43569163 (41.5 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions</code></pre></div>
</li>
<li>
<p>网络配置工具（新） - <strong>ip</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# ip address
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:16:3e:02:b6:46 brd ff:ff:ff:ff:ff:ff
    inet 172.18.61.250/20 brd 172.18.63.255 scope global eth0
       valid_lft forever preferred_lft forever</code></pre></div>
</li>
<li>
<p>网络可达性检查 - <strong>ping</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# ping www.baidu.com -c 3
PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data.
64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=1 ttl=51 time=36.3 ms
64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=2 ttl=51 time=36.4 ms
64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=3 ttl=51 time=36.4 ms
--- www.a.shifen.com ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2002ms
rtt min/avg/max/mdev = 36.392/36.406/36.427/0.156 ms</code></pre></div>
</li>
<li>
<p>显示或管理路由表 - <strong>route</strong>。</p>
</li>
<li>
<p>查看网络服务和端口 - <strong>netstat</strong> / <strong>ss</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# netstat -nap | grep nginx</code></pre></div>
</li>
<li>
<p>网络监听抓包 - <strong>tcpdump</strong>。</p>
</li>
<li>
<p>安全文件拷贝 - <strong>scp</strong>。</p>
</li>
</ol>
  <div class="hljs"><pre><code class="hljs Shell">[root ~]# scp root@1.2.3.4:/root/guido.jpg hellokitty@4.3.2.1:/home/hellokitty/pic.jpg</code></pre></div>
<p>scp中使用sshpass带密码传输文件</p>
  <div class="hljs"><pre><code class="hljs Shell">sshpass -p '密码' scp -r 用户名@ip:/home/file1 /home/file1</code></pre></div>
<ol start="11">
<li>
<p>文件同步工具 - <strong>rsync</strong>。</p>
<blockquote>
<p>说明：使用<code>rsync</code>可以实现文件的自动同步，这个对于文件服务器来说相当重要。关于这个命令的用法，我们在后面讲项目部署的时候为大家详细说明。</p>
</blockquote>
</li>
<li>
<p>安全文件传输 - <strong>sftp</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# sftp root@1.2.3.4
root@1.2.3.4's password:
Connected to 1.2.3.4.
<span class="hljs-meta">sftp&gt;</span></code></pre></div>
<ul>
<li>
<p><code>help</code>：显示帮助信息。</p>
</li>
<li>
<p><code>ls</code>/<code>lls</code>：显示远端/本地目录列表。</p>
</li>
<li>
<p><code>cd</code>/<code>lcd</code>：切换远端/本地路径。</p>
</li>
<li>
<p><code>mkdir</code>/<code>lmkdir</code>：创建远端/本地目录。</p>
</li>
<li>
<p><code>pwd</code>/<code>lpwd</code>：显示远端/本地当前工作目录。</p>
</li>
<li>
<p><code>get</code>：下载文件。</p>
</li>
<li>
<p><code>put</code>：上传文件。</p>
</li>
<li>
<p><code>rm</code>：删除远端文件。</p>
</li>
<li>
<p><code>bye</code>/<code>exit</code>/<code>quit</code>：退出sftp。</p>
</li>
</ul>
</li>
</ol>
<h3 id="十四：-进程管理">十四： 进程管理</h3>
<ol>
<li>
<p>查看进程 - <strong>ps</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 Jun23 ?        00:00:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 21
root         2     0  0 Jun23 ?        00:00:00 [kthreadd]
...
[root ~]# ps -ef | grep mysqld
root      4943  4581  0 22:45 pts/0    00:00:00 grep --color=auto mysqld
mysql    25257     1  0 Jun25 ?        00:00:39 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</code></pre></div>
</li>
<li>
<p>显示进程状态树 - <strong>pstree</strong>。</p>
 <div class="hljs"><pre><code class="hljs Shell">[root ~]# pstree
systemd─┬─AliYunDun───18*[&#123;AliYunDun&#125;]
        ├─AliYunDunUpdate───3*[&#123;AliYunDunUpdate&#125;]
        ├─2*[agetty]
        ├─aliyun-service───2*[&#123;aliyun-service&#125;]
        ├─atd
        ├─auditd───&#123;auditd&#125;
        ├─dbus-daemon
        ├─dhclient
        ├─irqbalance
        ├─lvmetad
        ├─mysqld───28*[&#123;mysqld&#125;]
        ├─nginx───2*[nginx]
        ├─ntpd
        ├─polkitd───6*[&#123;polkitd&#125;]
        ├─rsyslogd───2*[&#123;rsyslogd&#125;]
        ├─sshd───sshd───bash───pstree
        ├─systemd-journal
        ├─systemd-logind
        ├─systemd-udevd
        └─tuned───4*[&#123;tuned&#125;]</code></pre></div>
</li>
<li>
<p>查找与指定条件匹配的进程 - <strong>pgrep</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]$ pgrep mysqld
3584</code></pre></div>
</li>
<li>
<p>通过进程号终止进程 - <strong>kill</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]$ kill -l
 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP
 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1
11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM
16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP
21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ
26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR
31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
63) SIGRTMAX-1  64) SIGRTMAX
[root ~]# kill 1234
[root ~]# kill -9 1234</code></pre></div>
<p>例子：用一条命令强制终止正在运行的Redis进程。</p>
 <div class="hljs"><pre><code class="hljs Shell">ps -ef | grep redis | grep -v grep | awk '&#123;print $2&#125;' | xargs kill</code></pre></div>
</li>
<li>
<p>通过进程名终止进程 - <strong>killall</strong> / <strong>pkill</strong>。</p>
<p>结束名为mysqld的进程。</p>
 <div class="hljs"><pre><code class="hljs Shell">[root ~]# pkill mysqld</code></pre></div>
<p>结束hellokitty用户的所有进程。</p>
 <div class="hljs"><pre><code class="hljs Shell">[root ~]# pkill -u hellokitty</code></pre></div>
<blockquote>
<p>说明：这样的操作会让hellokitty用户和服务器断开连接。</p>
</blockquote>
</li>
<li>
<p>将进程置于后台运行。</p>
<ul>
<li><code>Ctrl+Z</code> - 快捷键，用于停止进程并置于后台。</li>
<li><code>&amp;</code> - 将进程置于后台运行。</li>
</ul>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# mongod &amp;
[root ~]# redis-server
...
^Z
[4]+  Stopped                 redis-server</code></pre></div>
</li>
<li>
<p>查询后台进程 - <strong>jobs</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# jobs
[2]   Running                 mongod &amp;
[3]-  Stopped                 cat
[4]+  Stopped                 redis-server</code></pre></div>
</li>
<li>
<p>让进程在后台继续运行 - <strong>bg</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# bg %4
[4]+ redis-server &amp;
[root ~]# jobs
[2]   Running                 mongod &amp;
[3]+  Stopped                 cat
[4]-  Running                 redis-server &amp;</code></pre></div>
</li>
<li>
<p>将后台进程置于前台 - <strong>fg</strong>。</p>
 <div class="hljs"><pre><code class="hljs Shell">[root ~]# fg %4
redis-server</code></pre></div>
<blockquote>
<p>说明：置于前台的进程可以使用<code>Ctrl+C</code>来终止它。</p>
</blockquote>
</li>
<li>
<p>调整程序/进程运行时优先级 - <strong>nice</strong> / <strong>renice</strong>。</p>
</li>
<li>
<p>用户登出后进程继续工作 - <strong>nohup</strong>。</p>
 <div class="hljs"><pre><code class="hljs Shell">[root ~]# nohup ping www.baidu.com &gt; result.txt &amp;</code></pre></div>
</li>
<li>
<p>跟踪进程系统调用情况 - <strong>strace</strong>。</p>
 <div class="hljs"><pre><code class="hljs Shell">[root ~]# pgrep mysqld
8803
[root ~]# strace -c -p 8803
strace: Process 8803 attached
^Cstrace: Process 8803 detached
<span class="hljs-meta">%</span><span class="bash"> time     seconds  usecs/call     calls    errors syscall</span>
------ ----------- ----------- --------- --------- ----------------
 99.18    0.005719        5719         1           restart_syscall
  0.49    0.000028          28         1           mprotect
  0.24    0.000014          14         1           clone
  0.05    0.000003           3         1           mmap
  0.03    0.000002           2         1           accept
------ ----------- ----------- --------- --------- ----------------
100.00    0.005766                     5           total</code></pre></div>
<blockquote>
<p>说明：这个命令的用法和参数都比较复杂，建议大家在真正用到这个命令的时候再根据实际需要进行了解。</p>
</blockquote>
</li>
<li>
<p>查看当前运行级别 - <strong>runlevel</strong>。</p>
 <div class="hljs"><pre><code class="hljs Shell">[root ~]# runlevel
N 3</code></pre></div>
</li>
<li>
<p>实时监控进程占用资源状况 - <strong>top</strong>。</p>
 <div class="hljs"><pre><code class="hljs Shell">[root ~]# top
top - 23:04:23 up 3 days, 14:10,  1 user,  load average: 0.00, 0.01, 0.05
Tasks:  65 total,   1 running,  64 sleeping,   0 stopped,   0 zombie
<span class="hljs-meta">%</span><span class="bash">Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span>
KiB Mem :  1016168 total,   191060 free,   324700 used,   500408 buff/cache
KiB Swap:        0 total,        0 free,        0 used.   530944 avail Mem
...</code></pre></div>
<ul>
<li><code>-c</code> - 显示进程的整个路径。</li>
<li><code>-d</code> - 指定两次刷屏之间的间隔时间（秒为单位）。</li>
<li><code>-i</code> - 不显示闲置进程或僵尸进程。</li>
<li><code>-p</code> - 显示指定进程的信息。</li>
</ul>
</li>
</ol>
<h3 id="十五：-系统诊断">十五： 系统诊断</h3>
<ol>
<li>
<p>系统启动异常诊断 - <strong>dmesg</strong>。</p>
</li>
<li>
<p>查看系统活动信息 - <strong>sar</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# sar -u -r 5 10
Linux 3.10.0-957.10.1.el7.x86_64 (izwz97tbgo9lkabnat2lo8z)      06/02/2019      _x86_64_        (2 CPU)

06:48:30 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle
06:48:35 PM     all      0.10      0.00      0.10      0.00      0.00     99.80

06:48:30 PM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty
06:48:35 PM   1772012   2108392     54.33    102816   1634528    784940     20.23    793328   1164704         0</code></pre></div>
<ul>
<li><code>-A</code> - 显示所有设备（CPU、内存、磁盘）的运行状况。</li>
<li><code>-u</code> - 显示所有CPU的负载情况。</li>
<li><code>-d</code> - 显示所有磁盘的使用情况。</li>
<li><code>-r</code> - 显示内存的使用情况。</li>
<li><code>-n</code> - 显示网络运行状态。</li>
</ul>
</li>
<li>
<p>查看内存使用情况 - <strong>free</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# free
              total        used        free      shared  buff/cache   available
Mem:        1016168      323924      190452         356      501792      531800
Swap:             0           0           0</code></pre></div>
</li>
<li>
<p>虚拟内存统计 - <strong>vmstat</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# vmstat
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 2  0      0 204020  79036 667532    0    0     5    18  101   58  1  0 99  0  0</code></pre></div>
</li>
<li>
<p>CPU信息统计 - <strong>mpstat</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# mpstat
Linux 3.10.0-957.5.1.el7.x86_64 (iZ8vba0s66jjlfmo601w4xZ)       05/30/2019      _x86_64_        (1 CPU)

01:51:54 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
01:51:54 AM  all    0.71    0.00    0.17    0.04    0.00    0.00    0.00    0.00    0.00   99.07</code></pre></div>
</li>
<li>
<p>查看进程使用内存状况 - <strong>pmap</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# ps
  PID TTY          TIME CMD
 4581 pts/0    00:00:00 bash
 5664 pts/0    00:00:00 ps
[root ~]# pmap 4581
4581:   -bash
0000000000400000    884K r-x-- bash
00000000006dc000      4K r---- bash
00000000006dd000     36K rw--- bash
00000000006e6000     24K rw---   [ anon ]
0000000001de0000    400K rw---   [ anon ]
00007f82fe805000     48K r-x-- libnss_files-2.17.so
00007f82fe811000   2044K ----- libnss_files-2.17.so
...</code></pre></div>
</li>
<li>
<p>报告设备CPU和I/O统计信息 - <strong>iostat</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# iostat
Linux 3.10.0-693.11.1.el7.x86_64 (iZwz97tbgo9lkabnat2lo8Z)      06/26/2018      _x86_64_       (1 CPU)
avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.79    0.00    0.20    0.04    0.00   98.97
Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
vda               0.85         6.78        21.32    2106565    6623024
vdb               0.00         0.01         0.00       2088          0</code></pre></div>
</li>
<li>
<p>显示所有PCI设备 - <strong>lspci</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# lspci
00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)
00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]
00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II]
00:01.2 USB controller: Intel Corporation 82371SB PIIX3 USB [Natoma/Triton II] (rev 01)
00:01.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 03)
00:02.0 VGA compatible controller: Cirrus Logic GD 5446
00:03.0 Ethernet controller: Red Hat, Inc. Virtio network device
00:04.0 Communication controller: Red Hat, Inc. Virtio console
00:05.0 SCSI storage controller: Red Hat, Inc. Virtio block device
00:06.0 SCSI storage controller: Red Hat, Inc. Virtio block device
00:07.0 Unclassified device [00ff]: Red Hat, Inc. Virtio memory balloon</code></pre></div>
</li>
<li>
<p>显示进程间通信设施的状态 - <strong>ipcs</strong>。</p>
<div class="hljs"><pre><code class="hljs Shell">[root ~]# ipcs

------ Message Queues --------
key        msqid      owner      perms      used-bytes   messages    

------ Shared Memory Segments --------
key        shmid      owner      perms      bytes      nattch     status      

------ Semaphore Arrays --------
key        semid      owner      perms      nsems</code></pre></div>
</li>
</ol>
<h3 id="十六：-Shell编程">十六： Shell编程</h3>
<p>之前我们提到过，Shell是一个连接用户和操作系统的应用程序，它提供了人机交互的界面（接口），用户通过这个界面访问操作系统内核的服务。Shell脚本是一种为Shell编写的脚本程序，我们可以通过Shell脚本来进行系统管理，同时也可以通过它进行文件操作。总之，编写Shell脚本对于使用Linux系统的人来说，应该是一项标配技能。</p>
<p>互联网上有大量关于Shell脚本的相关知识，我不打算再此对Shell脚本做一个全面系统的讲解，我们通过下面的代码来感性的认识下Shell脚本就行了。</p>
<p>例子1：输入两个整数m和n，计算从m到n的整数求和的结果。</p>
<div class="hljs"><pre><code class="hljs Shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/bash</span>
printf 'm = '
read m
printf 'n = '
read n
a=$m
sum=0
while [ $a -le $n ]
do
    sum=$[ sum + a ]
    a=$[ a + 1 ]
done
echo '结果: '$sum</code></pre></div>
<p>例子2：自动创建文件夹和指定数量的文件。</p>
<div class="hljs"><pre><code class="hljs Shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/bash</span>
printf '输入文件名: '
read file
printf '输入文件数量(&lt;1000): '
read num
if [ $num -ge 1000 ]
then
    echo '文件数量不能超过1000'
else
    if [ -e $dir -a -d $dir ]
    then
        rm -rf $dir
    else
        if [ -e $dir -a -f $dir ]
        then
            rm -f $dir
        fi
    fi
    mkdir -p $dir
    index=1
    while [ $index -le $num ]
    do
        if [ $index -lt 10 ]
        then
            pre='00'
        elif [ $index -lt 100 ]
        then
            pre='0'
        else
            pre=''
        fi
        touch $dir'/'$file'_'$pre$index
        index=$[ index + 1 ]
    done
fi</code></pre></div>
<p>例子3：自动安装指定版本的Redis。</p>
<div class="hljs"><pre><code class="hljs Shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/bash</span>
install_redis() &#123;
    if ! which redis-server &gt; /dev/null
    then
        cd /root
        wget $1$2'.tar.gz' &gt;&gt; install.log
        gunzip /root/$2'.tar.gz'
        tar -xf /root/$2'.tar'
        cd /root/$2
        make &gt;&gt; install.log
        make install &gt;&gt; install.log
        echo '安装完成'
    else
        echo '已经安装过Redis'
    fi
&#125;

install_redis 'http://download.redis.io/releases/' $1</code></pre></div>
<h3 id="十七：-相关资源">十七： 相关资源</h3>
<ol>
<li>
<p>Linux命令行常用快捷键</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>tab</td>
<td>自动补全命令或路径</td>
</tr>
<tr>
<td>Ctrl+a</td>
<td>将光标移动到命令行行首</td>
</tr>
<tr>
<td>Ctrl+e</td>
<td>将光标移动到命令行行尾</td>
</tr>
<tr>
<td>Ctrl+f</td>
<td>将光标向右移动一个字符</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>将光标向左移动一个字符</td>
</tr>
<tr>
<td>Ctrl+k</td>
<td>剪切从光标到行尾的字符</td>
</tr>
<tr>
<td>Ctrl+u</td>
<td>剪切从光标到行首的字符</td>
</tr>
<tr>
<td>Ctrl+w</td>
<td>剪切光标前面的一个单词</td>
</tr>
<tr>
<td>Ctrl+y</td>
<td>复制剪切命名剪切的内容</td>
</tr>
<tr>
<td>Ctrl+c</td>
<td>中断正在执行的任务</td>
</tr>
<tr>
<td>Ctrl+h</td>
<td>删除光标前面的一个字符</td>
</tr>
<tr>
<td>Ctrl+d</td>
<td>退出当前命令行</td>
</tr>
<tr>
<td>Ctrl+r</td>
<td>搜索历史命令</td>
</tr>
<tr>
<td>Ctrl+g</td>
<td>退出历史命令搜索</td>
</tr>
<tr>
<td>Ctrl+l</td>
<td>清除屏幕上所有内容在屏幕的最上方开启一个新行</td>
</tr>
<tr>
<td>Ctrl+s</td>
<td>锁定终端使之暂时无法输入内容</td>
</tr>
<tr>
<td>Ctrl+q</td>
<td>退出终端锁定</td>
</tr>
<tr>
<td>Ctrl+z</td>
<td>将正在终端执行的任务停下来放到后台</td>
</tr>
<tr>
<td>!!</td>
<td>执行上一条命令</td>
</tr>
<tr>
<td>!数字</td>
<td>执行数字对应的历史命令</td>
</tr>
<tr>
<td>!字母</td>
<td>执行最近的以字母打头的命令</td>
</tr>
<tr>
<td>!$ / Esc+.</td>
<td>获得上一条命令最后一个参数</td>
</tr>
<tr>
<td>Esc+b</td>
<td>移动到当前单词的开头</td>
</tr>
<tr>
<td>Esc+f</td>
<td>移动到当前单词的结尾</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>man查阅命令手册的内容说明</p>
<table>
<thead>
<tr>
<th>手册中的标题</th>
<th>功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>NAME</td>
<td>命令的说明和介绍</td>
</tr>
<tr>
<td>SYNOPSIS</td>
<td>使用该命令的基本语法</td>
</tr>
<tr>
<td>DESCRIPTION</td>
<td>使用该命令的详细描述，各个参数的作用，有时候这些信息会出现在OPTIONS中</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>命令相关参数选项的说明</td>
</tr>
<tr>
<td>EXAMPLES</td>
<td>使用该命令的参考例子</td>
</tr>
<tr>
<td>EXIT STATUS</td>
<td>命令结束的退出状态码，通常0表示成功执行</td>
</tr>
<tr>
<td>SEE ALSO</td>
<td>和命令相关的其他命令或信息</td>
</tr>
<tr>
<td>BUGS</td>
<td>和命令相关的缺陷的描述</td>
</tr>
<tr>
<td>AUTHOR</td>
<td>该命令的作者介绍</td>
</tr>
</tbody>
</table>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用正则表达式</title>
    <url>/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p><strong>本文转载于GitHub项目<a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">Python - 100天从新手到大师</a></strong></p>
</blockquote>
<h3 id="一：-正则表达式相关知识">一： 正则表达式相关知识</h3>
<p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要，正则表达式就是用于描述这些规则的工具，换句话说正则表达式是一种工具，它定义了字符串的匹配模式（如何检查一个字符串是否有跟某种模式匹配的部分或者从一个字符串中将与模式匹配的部分提取出来或者替换掉）。如果你在Windows操作系统中使用过文件查找并且在指定文件名时使用过通配符（*和?），那么正则表达式也是与之类似的用来进行文本匹配的工具，只不过比起通配符正则表达式更强大，它能更精确地描述你的需求（当然你付出的代价是书写一个正则表达式比打出一个通配符要复杂得多，要知道任何给你带来好处的东西都是有代价的，就如同学习一门编程语言一样），比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串（像028-12345678或0813-7654321），这不就是国内的座机号码吗。最初计算机是为了做数学运算而诞生的，处理的信息基本上都是数值，而今天我们在日常工作中处理的信息基本上都是文本数据，我们希望计算机能够识别和处理符合某些模式的文本，正则表达式就显得非常重要了。今天几乎所有的编程语言都提供了对正则表达式操作的支持，Python通过标准库中的re模块来支持正则表达式操作。</p>
<p>我们可以考虑下面一个问题：我们从某个地方（可能是一个文本文件，也可能是网络上的一则新闻）获得了一个字符串，希望在字符串中找出手机号和座机号。当然我们可以设定手机号是11位的数字（注意并不是随机的11位数字，因为你没有见过“25012345678”这样的手机号吧）而座机号跟上一段中描述的模式相同，如果不使用正则表达式要完成这个任务就会很麻烦。</p>
<p>关于正则表达式的相关知识，大家可以阅读一篇非常有名的博客叫<a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">《正则表达式30分钟入门教程》</a>，读完这篇文章后你就可以看懂下面的表格，这是我们对正则表达式中的一些基本符号进行的扼要总结。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>解释</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>匹配任意字符</td>
<td>b.t</td>
<td>可以匹配bat / but / b#t / b1t等</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母/数字/下划线</td>
<td>b\wt</td>
<td>可以匹配bat / b1t / b_t等<br>但不能匹配b#t</td>
</tr>
<tr>
<td>\s</td>
<td>匹配空白字符（包括\r、\n、\t等）</td>
<td>love\syou</td>
<td>可以匹配love you</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字</td>
<td>\d\d</td>
<td>可以匹配01 / 23 / 99等</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词的边界</td>
<td>\bThe\b</td>
<td></td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开始</td>
<td>^The</td>
<td>可以匹配The开头的字符串</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的结束</td>
<td>.exe$</td>
<td>可以匹配.exe结尾的字符串</td>
</tr>
<tr>
<td>\W</td>
<td>匹配非字母/数字/下划线</td>
<td>b\Wt</td>
<td>可以匹配b#t / b@t等<br>但不能匹配but / b1t / b_t等</td>
</tr>
<tr>
<td>\S</td>
<td>匹配非空白字符</td>
<td>love\Syou</td>
<td>可以匹配love#you等<br>但不能匹配love you</td>
</tr>
<tr>
<td>\D</td>
<td>匹配非数字</td>
<td>\d\D</td>
<td>可以匹配9a / 3# / 0F等</td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界</td>
<td>\Bio\B</td>
<td></td>
</tr>
<tr>
<td>[]</td>
<td>匹配来自字符集的任意单一字符</td>
<td>[aeiou]</td>
<td>可以匹配任一元音字母字符</td>
</tr>
<tr>
<td>[^]</td>
<td>匹配不在字符集中的任意单一字符</td>
<td>[^aeiou]</td>
<td>可以匹配任一非元音字母字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配0次或多次</td>
<td>\w*</td>
<td></td>
</tr>
<tr>
<td>+</td>
<td>匹配1次或多次</td>
<td>\w+</td>
<td></td>
</tr>
<tr>
<td>?</td>
<td>匹配0次或1次</td>
<td>\w?</td>
<td></td>
</tr>
<tr>
<td>{N}</td>
<td>匹配N次</td>
<td>\w{3}</td>
<td></td>
</tr>
<tr>
<td>{M,}</td>
<td>匹配至少M次</td>
<td>\w{3,}</td>
<td></td>
</tr>
<tr>
<td>{M,N}</td>
<td>匹配至少M次至多N次</td>
<td>\w{3,6}</td>
<td></td>
</tr>
<tr>
<td>|</td>
<td>分支</td>
<td>foo|bar</td>
<td>可以匹配foo或者bar</td>
</tr>
<tr>
<td>(?#)</td>
<td>注释</td>
<td></td>
<td></td>
</tr>
<tr>
<td>(exp)</td>
<td>匹配exp并捕获到自动命名的组中</td>
<td></td>
<td></td>
</tr>
<tr>
<td>(? &lt;name&gt;exp)</td>
<td>匹配exp并捕获到名为name的组中</td>
<td></td>
<td></td>
</tr>
<tr>
<td>(?:exp)</td>
<td>匹配exp但是不捕获匹配的文本</td>
<td></td>
<td></td>
</tr>
<tr>
<td>(?=exp)</td>
<td>匹配exp前面的位置</td>
<td>\b\w+(?=ing)</td>
<td>可以匹配I’m dancing中的danc</td>
</tr>
<tr>
<td>(?&lt;=exp)</td>
<td>匹配exp后面的位置</td>
<td>(?&lt;=\bdanc)\w+\b</td>
<td>可以匹配I love dancing and reading中的第一个ing</td>
</tr>
<tr>
<td>(?!exp)</td>
<td>匹配后面不是exp的位置</td>
<td></td>
<td></td>
</tr>
<tr>
<td>(?&lt;!exp)</td>
<td>匹配前面不是exp的位置</td>
<td></td>
<td></td>
</tr>
<tr>
<td>*?</td>
<td>重复任意次，但尽可能少重复</td>
<td>a.*b<br>a.*?b</td>
<td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td>
</tr>
<tr>
<td>+?</td>
<td>重复1次或多次，但尽可能少重复</td>
<td></td>
<td></td>
</tr>
<tr>
<td>??</td>
<td>重复0次或1次，但尽可能少重复</td>
<td></td>
<td></td>
</tr>
<tr>
<td>{M,N}?</td>
<td>重复M到N次，但尽可能少重复</td>
<td></td>
<td></td>
</tr>
<tr>
<td>{M,}?</td>
<td>重复M次以上，但尽可能少重复</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>说明：</strong> 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\进行转义处理，例如想匹配小数点可以写成\.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成\(和\)，否则圆括号被视为正则表达式中的分组。</p>
</blockquote>
<h3 id="二：-Python对正则表达式的支持">二： Python对正则表达式的支持</h3>
<p>Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>compile(pattern, flags=0)</td>
<td>编译正则表达式返回正则表达式对象</td>
</tr>
<tr>
<td>match(pattern, string, flags=0)</td>
<td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td>
</tr>
<tr>
<td>search(pattern, string, flags=0)</td>
<td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td>
</tr>
<tr>
<td>split(pattern, string, maxsplit=0, flags=0)</td>
<td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td>
</tr>
<tr>
<td>sub(pattern, repl, string, count=0, flags=0)</td>
<td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td>
</tr>
<tr>
<td>fullmatch(pattern, string, flags=0)</td>
<td>match函数的完全匹配（从字符串开头到结尾）版本</td>
</tr>
<tr>
<td>findall(pattern, string, flags=0)</td>
<td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td>
</tr>
<tr>
<td>finditer(pattern, string, flags=0)</td>
<td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td>
</tr>
<tr>
<td>purge()</td>
<td>清除隐式编译的正则表达式的缓存</td>
</tr>
<tr>
<td>re.I / re.IGNORECASE</td>
<td>忽略大小写匹配标记</td>
</tr>
<tr>
<td>re.M / re.MULTILINE</td>
<td>多行匹配标记</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>说明：</strong> 上面提到的re模块中的这些函数，实际开发中也可以用正则表达式对象的方法替代对这些函数的使用，如果一个正则表达式需要重复的使用，那么先通过compile函数编译正则表达式并创建出正则表达式对象无疑是更为明智的选择。</p>
</blockquote>
<p>下面我们通过一系列的例子来告诉大家在Python中如何使用正则表达式。</p>
<h4 id="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。">例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。</h4>
<div class="hljs"><pre><code class="hljs Python"><span class="hljs-string">"""
验证输入用户名和QQ号是否有效并给出对应的提示信息

要求：用户名必须由字母、数字或下划线构成且长度在6~20个字符之间，QQ号是5~12的数字且首位不能为0
"""</span>
<span class="hljs-keyword">import</span> re


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    username = input(<span class="hljs-string">'请输入用户名: '</span>)
    qq = input(<span class="hljs-string">'请输入QQ号: '</span>)
    <span class="hljs-comment"># match函数的第一个参数是正则表达式字符串或正则表达式对象</span>
    <span class="hljs-comment"># 第二个参数是要跟正则表达式做匹配的字符串对象</span>
    m1 = re.match(<span class="hljs-string">r'^[0-9a-zA-Z_]&#123;6,20&#125;$'</span>, username)
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> m1:
        print(<span class="hljs-string">'请输入有效的用户名.'</span>)
    m2 = re.match(<span class="hljs-string">r'^[1-9]\d&#123;4,11&#125;$'</span>, qq)
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> m2:
        print(<span class="hljs-string">'请输入有效的QQ号.'</span>)
    <span class="hljs-keyword">if</span> m1 <span class="hljs-keyword">and</span> m2:
        print(<span class="hljs-string">'你输入的信息是有效的!'</span>)


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>
<blockquote>
<p><strong>提示：</strong> 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，说得更直接一点就是字符串中没有所谓的转义字符啦。因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\\，例如表示数字的\d得书写成\\d，这样不仅写起来不方便，阅读的时候也会很吃力。</p>
</blockquote>
<h4 id="例子2：从一段文字中提取出国内手机号码。">例子2：从一段文字中提取出国内手机号码。</h4>
<p>下面这张图是截止到2017年底，国内三家运营商推出的手机号段。</p>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/tel-start-number.png" srcset="/img/loading.gif" alt="tel-start-number.png"></p>
<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-comment"># 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字</span>
    pattern = re.compile(<span class="hljs-string">r'(?&lt;=\D)1[34578]\d&#123;9&#125;(?=\D)'</span>)
    sentence = <span class="hljs-string">'''
    重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，
    不是15600998765，也是110或119，王大锤的手机号才是15600998765。
    '''</span>
    <span class="hljs-comment"># 查找所有匹配并保存到一个列表中</span>
    mylist = re.findall(pattern, sentence)
    print(mylist)
    print(<span class="hljs-string">'--------华丽的分隔线--------'</span>)
    <span class="hljs-comment"># 通过迭代器取出匹配对象并获得匹配的内容</span>
    <span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> pattern.finditer(sentence):
        print(temp.group())
    print(<span class="hljs-string">'--------华丽的分隔线--------'</span>)
    <span class="hljs-comment"># 通过search函数指定搜索位置找出所有匹配</span>
    m = pattern.search(sentence)
    <span class="hljs-keyword">while</span> m:
        print(m.group())
        m = pattern.search(sentence, m.end())


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>
<blockquote>
<p><strong>说明：</strong> 上面匹配国内手机号的正则表达式并不够好，因为像14开头的号码只有145或147，而上面的正则表达式并没有考虑这种情况，要匹配国内手机号，更好的正则表达式的写法是：<code>(?&lt;=\D)(1[38]\d{9}|14[57]\d{8}|15[0-35-9]\d{8}|17[678]\d{8})(?=\D)</code>，国内最近好像有19和16开头的手机号了，但是这个暂时不在我们考虑之列。</p>
</blockquote>
<h4 id="例子3：替换字符串中的不良内容">例子3：替换字符串中的不良内容</h4>
<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    sentence = <span class="hljs-string">'你丫是傻叉吗? 我操你大爷的. Fuck you.'</span>
    purified = re.sub(<span class="hljs-string">'[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔'</span>,
                      <span class="hljs-string">'*'</span>, sentence, flags=re.IGNORECASE)
    print(purified)  <span class="hljs-comment"># 你丫是*吗? 我*你大爷的. * you.</span>


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>
<blockquote>
<p><strong>说明：</strong> re模块的正则表达式相关函数中都有一个flags参数，它代表了正则表达式的匹配标记，可以通过该标记来指定匹配时是否忽略大小写、是否进行多行匹配、是否显示调试信息等。如果需要为flags参数指定多个值，可以使用<a href="http://www.runoob.com/python/python-operators.html#ysf5" target="_blank" rel="noopener">按位或运算符</a>进行叠加，如<code>flags=re.I | re.M</code>。</p>
</blockquote>
<h4 id="例子4：拆分长字符串">例子4：拆分长字符串</h4>
<div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    poem = <span class="hljs-string">'窗前明月光，疑是地上霜。举头望明月，低头思故乡。'</span>
    sentence_list = re.split(<span class="hljs-string">r'[，。, .]'</span>, poem)
    <span class="hljs-keyword">while</span> <span class="hljs-string">''</span> <span class="hljs-keyword">in</span> sentence_list:
        sentence_list.remove(<span class="hljs-string">''</span>)
    print(sentence_list)  <span class="hljs-comment"># ['窗前明月光', '疑是地上霜', '举头望明月', '低头思故乡']</span>


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>
<h3 id="三：-后话">三： 后话</h3>
<p>如果要从事爬虫类应用的开发，那么正则表达式一定是一个非常好的助手，因为它可以帮助我们迅速的从网页代码中发现某种我们指定的模式并提取出我们需要的信息，当然对于初学者来收，要编写一个正确的适当的正则表达式可能并不是一件容易的事情（当然有些常用的正则表达式可以直接在网上找找），所以实际开发爬虫应用的时候，有很多人会选择<a href="https://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="noopener">Beautiful Soup</a>或<a href="http://lxml.de/" target="_blank" rel="noopener">Lxml</a>来进行匹配和信息的提取，前者简单方便但是性能较差，后者既好用性能也好，但是安装稍嫌麻烦。</p>
<h3 id="四：-文献及工具">四： 文献及工具</h3>
<p><a href="https://regex101.com/" target="_blank" rel="noopener">在线正则表达式：https://regex101.com/</a><br>
<a href="https://regex101.com/settings" target="_blank" rel="noopener">设置里面可以切换语言</a></p>
<p><a href="https://gist.github.com/JavaCS3/e36e494e78a02049950bfa7c7ebeb929" target="_blank" rel="noopener">实用文档：https://gist.github.com/JavaCS3/e36e494e78a02049950bfa7c7ebeb929</a></p>
<p><a href="https://www.bilibili.com/video/BV1ef4y1U7V4" target="_blank" rel="noopener">视频教程：https://www.bilibili.com/video/BV1ef4y1U7V4</a></p>
]]></content>
      <categories>
        <category>python</category>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>python处理excle实例之字符串减法</title>
    <url>/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E5%A4%84%E7%90%86excle%E5%AE%9E%E4%BE%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%8F%E6%B3%95/</url>
    <content><![CDATA[<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%2Bexcel.jpg" srcset="/img/loading.gif" alt="python+excel"></p>
<a id="more"></a>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python</span>
<span class="hljs-comment"># -*- coding: utf-8 -*-</span>
<span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> load_workbook


<span class="hljs-comment"># 求字符串A-B</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_A_cut_B</span><span class="hljs-params">(a, b)</span>:</span>
    <span class="hljs-keyword">if</span> b:
        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a:
            <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> b:
                a = a.replace(x, <span class="hljs-string">""</span>)
    <span class="hljs-keyword">return</span> a


<span class="hljs-comment"># 写入模式打开output.txt</span>
<span class="hljs-comment"># f = open("output.txt", "w")</span>

<span class="hljs-comment"># 打开excel名为test</span>
wb = load_workbook(filename=<span class="hljs-string">'test.xlsx'</span>)

<span class="hljs-comment"># 打开工作表Sheet1</span>
sheet = wb[<span class="hljs-string">'Sheet1'</span>]

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>, <span class="hljs-number">36</span>):
    temp = <span class="hljs-string">'C'</span> + str(i)

    <span class="hljs-comment"># 将temp单元格的内容存入str1</span>
    str1 = sheet[temp].value
    str0 = <span class="hljs-string">"张 朱 颜 赵 杨 施 胡 何 秦 刘 夏 鹏 李 唐 许 王 邓 顾"</span>
    z = str_A_cut_B(str0, str1)

    <span class="hljs-comment"># 若单元格为空，换行输出</span>
    <span class="hljs-keyword">if</span> str1:
        <span class="hljs-comment"># 输出格式</span>
        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(z)):
            print(z[j], end=<span class="hljs-string">' '</span>)  <span class="hljs-comment"># 不换行输出</span>
            <span class="hljs-comment"># print(z[j], end=' ', file=f)</span>
        print(<span class="hljs-string">'\n'</span>, end=<span class="hljs-string">''</span>)
        <span class="hljs-comment"># print('\n', end='', file=f)</span>
    <span class="hljs-keyword">else</span>:
        print(<span class="hljs-string">'\n'</span>, end=<span class="hljs-string">''</span>)
        <span class="hljs-comment"># print('\n', end='', file=f)</span>
<span class="hljs-comment"># f.close()</span></code></pre></div>
]]></content>
      <categories>
        <category>python</category>
        <category>excel</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在GitHub搜索开源项目</title>
    <url>/2020/02/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Github/%E5%A6%82%E4%BD%95%E5%9C%A8GitHub%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="一：-如何使用搜索栏">一： 如何使用搜索栏</h2>
<p>所有搜索需求用空格隔开。</p>
<p>搜索栏输入：</p>
<ol>
<li>
<p>搜索项目名里面包含python、项目readme里面包含python、描述里面包含python<br>
<code>in:name python</code>、<code>in:readme python</code>、<code>in:description 爬虫</code>/<code>in:des 爬虫</code><br>
PS：description描述里面包含比较准确</p>
</li>
<li>
<p>stars数大于1000、forks数大于xxx<br>
<code>stars:&gt;1000</code>、<code>forks:&gt;xxx</code></p>
</li>
<li>
<p>指定编程语言<br>
<code>language:python</code></p>
</li>
<li>
<p>最后更新时间限定<br>
<code>pushed:&gt;2020-01-01</code></p>
</li>
<li>
<p>限定国内开发者<br>
<code>location:China</code></p>
</li>
</ol>
<h2 id="二：-chrome插件推荐">二： chrome插件推荐</h2>
<ul>
<li>Octotree</li>
<li>GitZip for github<br>
双击你想下载的文件后面空白的地方，文件前方会出现√，右下角出现<code>Download checked items</code>即可下载。</li>
<li>英文不好的小伙伴推荐沙拉查词</li>
</ul>
<h2 id="三：-git-clone速度慢的解决方案">三： git clone速度慢的解决方案</h2>
<p>登录<a href="https://gitee.com/" target="_blank" rel="noopener">Gitee</a> -&gt; 新建仓库 -&gt; 拉到最下的创建上面，点击导入已有仓库 -&gt; 填入你想git clone的GitHub仓库地址 -&gt; 本地，git clone。</p>
<h2 id="四：-参考视频">四： 参考视频</h2>
<p><a href="https://www.bilibili.com/video/av75587104" target="_blank" rel="noopener">https://www.bilibili.com/video/av75587104</a></p>
]]></content>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装完以后的基础配置</title>
    <url>/2020/02/17/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/ubuntu%E5%AE%89%E8%A3%85%E5%AE%8C%E4%BB%A5%E5%90%8E%E7%9A%84%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<ol>
<li>先试用ubuntu，打开软件目录 -&gt; 磁盘，右上角菜单。然后格式化磁盘;擦除 -&gt; 不要覆盖…(快速);分区 -&gt; 硬盘2T以下MBR/DOS、2T以上GPT</li>
<li>不要连接网络 -&gt; 正常安装 -&gt; 其他选项</li>
</ol>
<h2 id="一：-安装类型">一： 安装类型</h2>
<ol>
<li>/boot分区（引导）-&gt;512MB-&gt;主分区-&gt;空间起始位置-&gt;Ext4日志文件系统-&gt;/boot。</li>
<li>/ 根分区（相当于windows的c盘）-&gt;102400MB-&gt;主分区-&gt;空间起始位置-&gt;XFS日志文件系统-&gt;/。</li>
<li>swap分区（桌面系统不分，服务器必分）-&gt;2048MB-&gt;逻辑分区-&gt;空间起始位置-&gt;交换空间。</li>
<li>/home分区（存储空间，剩余都给它）-&gt;max MB-&gt;主分区-&gt;空间起始位置-&gt;XFS日志文件系统-&gt;/home。</li>
<li>现在安装。</li>
</ol>
<h2 id="二：-基础配置">二： 基础配置</h2>
<h3 id="2-1-设置root用户密码">2.1 设置root用户密码</h3>
<p><code>sudo passwd root</code><br>
<code>su</code></p>
<a id="more"></a>
<h3 id="2-2-修改镜像源">2.2 修改镜像源</h3>
<ol>
<li><code>sudo nano /etc/apt/sources.list</code></li>
<li>将原文件所有内容注释掉；</li>
<li>复制<a href="https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.2f191b11mRGGjV" target="_blank" rel="noopener">阿里巴巴镜像源</a></li>
<li>黏贴到终端，<code>ctrl</code>+<code>o</code>保存，回车确定,<code>ctrl</code>+<code>x</code>。</li>
</ol>
<h3 id="2-3-更新源和系统">2.3 更新源和系统</h3>
<p><code>sudo apt update</code><br>
<code>sudo apt upgrade</code><br>
<code>sudo apt dist-upgrade</code><br>
<code>sudo apt autoremove</code>  # 清理不需要的旧组件<br>
<code>reboot</code>  # 重启</p>
<h3 id="2-4-安装输入法">2.4 安装输入法</h3>
<ol>
<li>卸载自带ibus<br>
<code>sudo apt remove ibus</code></li>
<li>安装fcitx<br>
<code>sudo apt install fcitx-bin fcitx-table</code></li>
<li>安装Google拼音<br>
<code>sudo apt install fcitx-googlepinyin</code></li>
<li><code>sudo im-config</code>-&gt;确定-&gt;yes-&gt;选择fcitx,确定-&gt;reboot重启。</li>
</ol>
<h3 id="2-5-安装Google浏览器">2.5 安装Google浏览器</h3>
<ol>
<li>打开 <a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">https://www.google.cn/intl/zh-CN/chrome/</a></li>
<li>下载-&gt;64位.deb-&gt;接受并安装。</li>
<li>在下载文件夹内打开终端。</li>
<li><code>sudo dpkg -i google-chrome-stable_current_amd64.deb</code></li>
</ol>
<h3 id="2-6-设置语言">2.6 设置语言</h3>
<p>设置-&gt;区域和语言-&gt;管理已安装的语言-&gt;安装。</p>
<h3 id="2-7-安装vlc">2.7 安装vlc</h3>
<p><code>sudo apt install vlc</code></p>
<h3 id="2-8-关闭ubuntu内部错误">2.8 关闭ubuntu内部错误</h3>
<ol>
<li><code>sudo nano /etc/default/apport</code></li>
<li>enable=1改为0</li>
<li><code>ctrl</code>+<code>o</code>保存，回车确定,<code>ctrl</code>+<code>x</code>。</li>
</ol>
<h3 id="2-9-安装新立得软件包">2.9 安装新立得软件包</h3>
<p><code>sudo apt install synaptic</code></p>
<h3 id="2-10-安装aria2和ariang及配置">2.10 安装aria2和ariang及配置</h3>
<h4 id="2-10-1-安装aria2及其配置">2.10.1 安装aria2及其配置</h4>
<p><code>sudo apt install aria2 -y</code></p>
<div class="hljs"><pre><code class="hljs shell">mkdir /home/ubuntu/.aria2
cd /home/ubuntu/.aria2
touch aria2.conf aria2.session #创建配置文件与session文件
vi /home/ubuntu/.aria2/aria2.conf</code></pre></div>
<p>aria2.conf配置文件如下</p>
<div class="hljs"><pre><code class="hljs sh">dir=~/下载/
<span class="hljs-built_in">disable</span>-ipv6=<span class="hljs-literal">true</span>

<span class="hljs-comment">#打开rpc的目的是为了给web管理端用</span>
<span class="hljs-built_in">enable</span>-rpc=<span class="hljs-literal">true</span>
rpc-allow-origin-all=<span class="hljs-literal">true</span>
rpc-listen-all=<span class="hljs-literal">true</span>
<span class="hljs-comment">#rpc-listen-port=6800</span>
<span class="hljs-comment">#断点续传</span>
<span class="hljs-built_in">continue</span>=<span class="hljs-literal">true</span>
input-file=/home/ubuntu/.aria2/aria2.session
save-session=/home/ubuntu/.aria2/aria2.session

<span class="hljs-comment">#最大同时下载任务数</span>
max-concurrent-downloads=20
save-session-interval=120

<span class="hljs-comment"># Http/FTP 相关</span>
connect-timeout=120
<span class="hljs-comment">#lowest-speed-limit=10K</span>
<span class="hljs-comment">#同服务器连接数</span>
max-connection-per-server=10
<span class="hljs-comment">#max-file-not-found=2</span>
<span class="hljs-comment">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span>
min-split-size=10M

<span class="hljs-comment">#单文件最大线程数, 路由建议值: 5</span>
split=10
check-certificate=<span class="hljs-literal">false</span>
<span class="hljs-comment">#http-no-cache=true</span></code></pre></div>
<p>后台运行aria2</p>
<p><code>aria2c --conf-path=/home/ubuntu/.aria2/aria2.conf -D</code></p>
<p>设置aria2开机自动启动</p>
<p><code>sudo vi /etc/rc.local</code></p>
<p>在最下面加入：</p>
<p><code>aria2c --conf-path=/home/ubuntu/.aria2/aria2.conf -D &amp;</code></p>
<h4 id="2-10-2-安装ariang及配置">2.10.2 安装ariang及配置</h4>
<p><a href="http://ariang.mayswind.net/zh_Hans/" target="_blank" rel="noopener">参考官方文档</a></p>
<div class="hljs"><pre><code class="hljs sh">sudo apt install nodejs
sudo apt install npm
sudo apt install gulp</code></pre></div>
<p>然后<a href="https://github.com/mayswind/AriaNg/releases" target="_blank" rel="noopener">下载源码解压并cd进入解压的文件夹</a></p>
<p>然后安装单文件版</p>
<p><code>npm install</code><br>
<code>gulp clean build-bundle</code></p>
<h2 id="三：-常用软件安装">三： 常用软件安装</h2>
<p>PS：deb文件如何安装？</p>
<ul>
<li><code>sudo dpkg -i 软件名</code> # 安装</li>
<li><code>sudo apt install -f</code> # 修复依赖</li>
<li><code>sudo dpkg -r 软件名</code> # 进行卸载</li>
</ul>
<p>安装git<br>
<code>sudo apt install git</code></p>
<p>生成公匙<br>
<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code><br>
<code>cat ~/.ssh/id_rsa.pub</code><br>
添加到github，gitee，coding</p>
<p>下载安装wps<br>
<code>sudo dpkg -i wps-office_11.1.0.9080_amd64.deb</code></p>
<p>下载安装lantern<br>
<code>sudo dpkg -i lantern-installer-preview-64-bit.deb</code></p>
<p>下载安装zoom<br>
<code>sudo dpkg -i zoom_amd64.deb</code></p>
<p>下载安装python3<br>
<code>tar zxvf Python-3.8.2.tgz</code><br>
<code>cd Python-3.8.2\</code><br>
<code>sudo apt install gcc</code><br>
<code>sudo apt install make</code><br>
<code>./configure</code><br>
<code>make</code><br>
<code>sudo make install</code><br>
<code>sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100</code> # 设置python2为默认<br>
<code>sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150</code> # 设置python3为默认<br>
<code>sudo update-alternatives --config python</code> # 选择默认的python版本<br>
<code>sudo apt install python3-pip</code> # 安装pip3<br>
<code>pip3 install -U pip -i https://pypi.tuna.tsinghua.edu.cn/simple</code> # 升级pip<br>
如果这个升级命令出现问题 ，可以使用以下命令：<code>sudo easy_install --upgrade pip</code><br>
<code>pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code> # pip3设置清华源</p>
<p>下载安装vscode<br>
<code>sudo dpkg -i code_1.42.1-1581432938_amd64.deb</code><br>
<code>ctrl+shift+p，然后输入lang -&gt; 选择configure Display language，然后安装简体中文，然后重启vscode</code></p>
<p>下载安装百度网盘<br>
<code>sudo dpkg -i baidunetdisk_linux_3.0.1.2.deb</code></p>
<p>下载安装hexo<br>
<code>sudo apt install nodejs</code><br>
<code>sudo apt install npm</code><br>
<code>sudo npm install hexo-cli -g</code><br>
<code>sudo npm install</code></p>
<p>下载安装qBittorrent</p>
<ul>
<li>qBittorrent Stable # 稳定版<br>
<code>sudo add-apt-repository ppa:qbittorrent-team/qbittorrent-stable</code></li>
<li>qBittorrent Unstable # 不稳定版<br>
<code>sudo add-apt-repository ppa:qbittorrent-team/qbittorrent-unstable</code></li>
</ul>
<p><code>sudo apt-get update &amp;&amp; sudo apt-get install qbittorrent</code></p>
<h2 id="四：-参考视频">四： 参考视频</h2>
<p><strong><a href="https://www.bilibili.com/video/av48233413" target="_blank" rel="noopener">https://www.bilibili.com/video/av48233413</a></strong></p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>利用python实现Gitee Pages定时自动部署/自动签到</title>
    <url>/2020/02/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E5%88%A9%E7%94%A8python%E5%AE%9E%E7%8E%B0Gitee-Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E3%80%81%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0/</url>
    <content><![CDATA[<h2 id="一：-前期准备">一： 前期准备</h2>
<h3 id="1-1-基础环境">1.1 基础环境</h3>
<ol>
<li>python3 + selenium + chrome浏览器。<br>
如果有不懂的可以查阅<a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">selenium-python中文文档</a></li>
<li>chrome-&gt;设置-&gt;关于chrome-&gt;查看版本（我的版本是 80.0.3987.106（正式版本） （64 位））。</li>
<li>需要下载跟你的chrome版本一致的<a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">ChromeDriver可执行驱动</a><br>
下载完解压放在python根目录(即跟python.exe放在一起)。<br>
<strong>如果上面的ChromeDriver网址打不开，可以使用<a href="https://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">ChromeDriver淘宝镜像</a></strong></li>
<li>最好有一台云主机，没有的话需要自己的电脑设定定时开机，定时任务，定时关机。  <a id="more"></a></li>
</ol>
<h3 id="1-2-安装环境">1.2 安装环境</h3>
<ol>
<li>安装python3,不懂的请查阅我的相关blog文。</li>
<li>打开windows命令行，安装selenium<br>
<code>pip install selenium -i https://pypi.tuna.tsinghua.edu.cn/simple</code></li>
</ol>
<h3 id="1-3-获取cookie">1.3 获取cookie</h3>
<p>首先登录gitee的Gitee Pages服务界面；</p>
<p>点击网页地址栏左边的小锁标志 -&gt; 选择Cookie；</p>
<p><a href="http://xn--gitee-4n1h40u17dce570gxwgotaq63vh6lqi1f.com" target="_blank" rel="noopener">右边弹出的窗口中展开gitee.com</a> -&gt; 展开Cookie -&gt; 点击名为<code>gitee-session-n</code>的项目 -&gt; 下面的内容后面就是你的cookie；</p>
<p>记得要全部复制进去，替换掉下面源码的my_cookie里面的内容。</p>
<h2 id="二：-代码">二： 代码</h2>
<h3 id="2-1-源码">2.1 源码</h3>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python3</span>
<span class="hljs-comment"># -*- coding: utf-8 -*-</span>
<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver
<span class="hljs-keyword">from</span> selenium.webdriver.common.alert <span class="hljs-keyword">import</span> Alert
<span class="hljs-keyword">from</span> selenium.webdriver.chrome.options <span class="hljs-keyword">import</span> Options

<span class="hljs-comment"># 将你的cookie内容替换掉下面的内容</span>
my_cookie = &#123;<span class="hljs-string">'domain'</span>: <span class="hljs-string">'.gitee.com'</span>, <span class="hljs-string">'httpOnly'</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">'name'</span>: <span class="hljs-string">'gitee-session-n'</span>, <span class="hljs-string">'path'</span>: <span class="hljs-string">'/'</span>, <span class="hljs-string">'secure'</span>: <span class="hljs-literal">False</span>,
             <span class="hljs-string">'value'</span>: <span class="hljs-string">'内容'</span>&#125;

<span class="hljs-comment"># 实例化一个启动参数对象</span>
options = Options()

<span class="hljs-comment"># 设置启动浏览器时窗口最大化运行</span>
<span class="hljs-comment"># options.add_argument('--start-maximized')</span>

<span class="hljs-comment"># 设置无界面模式运行浏览器</span>
options.add_argument(<span class="hljs-string">'-headless'</span>)

<span class="hljs-comment"># 不加载图片, 提升速度</span>
prefs = &#123;<span class="hljs-string">"profile.managed_default_content_settings.images"</span>: <span class="hljs-number">2</span>&#125;
options.add_experimental_option(<span class="hljs-string">"prefs"</span>, prefs)

<span class="hljs-comment"># 打开浏览器</span>
print(<span class="hljs-string">'Launch browser'</span>)
driver = webdriver.Chrome(chrome_options=options)

<span class="hljs-comment"># 删除缓存</span>
print(<span class="hljs-string">'Delete cookies'</span>)
driver.delete_all_cookies()

<span class="hljs-comment"># 访问网页</span>
print(<span class="hljs-string">'Visit website'</span>)
<span class="hljs-comment"># 这里链接改为你的码云部署页面的链接</span>
driver.get(<span class="hljs-string">"https://gitee.com/此处改为你的ID/此处改为你的ID/pages"</span>)
time.sleep(<span class="hljs-number">5</span>)

<span class="hljs-comment"># 加载cookie</span>
print(<span class="hljs-string">'Add cookie'</span>)
driver.add_cookie(my_cookie)

<span class="hljs-comment"># 刷新</span>
print(<span class="hljs-string">'Refresh'</span>)
driver.refresh()
time.sleep(<span class="hljs-number">5</span>)

<span class="hljs-comment"># 点击更新按钮--通过xpath确定点击位置</span>
driver.find_element_by_xpath(<span class="hljs-string">'//*[@id="pages-branch"]/div[7]'</span>).click()
time.sleep(<span class="hljs-number">3</span>)

<span class="hljs-comment"># 确认更新提示框--这个函数的作用是确认提示框</span>
Alert(driver).accept()

<span class="hljs-comment"># 等待40秒更新</span>
time.sleep(<span class="hljs-number">40</span>)

<span class="hljs-comment"># 这个print其实没事什么用,如果真的要测试脚本是否运行成功，可以用try来抛出异常</span>
print(<span class="hljs-string">"success"</span>)

<span class="hljs-comment"># 脚本运行成功,退出浏览器</span>
driver.quit()

<span class="hljs-comment"># 写上更新日志</span>
<span class="hljs-comment"># 我这里是写在D盘</span>
fp = open(<span class="hljs-string">"D:\log.txt"</span>, <span class="hljs-string">"a+"</span>)
<span class="hljs-comment"># linux写在/home</span>
<span class="hljs-comment"># fp = open("/home/temp/log.log", "a+")</span>
now_time = time.strftime(<span class="hljs-string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime())
fp.write(<span class="hljs-string">"auto update time:&#123;0&#125;\n"</span>.format(now_time))
fp.close()</code></pre></div>
<p>把源码黏贴到<code>gitee.py</code>文件内，备用。</p>
<h3 id="2-2-注意事项">2.2 注意事项</h3>
<ul>
<li>
<p>html的id属性、xpath可以通过在chrome的网页里面按F12 -&gt; 选择一个元素进行检查(快捷键Ctrl + Shift + C)查看，如图就是<code>百度一下</code>的div块元素属性。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/CopyFullXPath.png" srcset="/img/loading.gif" alt="CopyXPath"></p>
</li>
<li>
<p>python selenium模块的具体函数使用方法请参考官方文档。</p>
</li>
<li>
<p>编写自动签到脚本也差不多同样的道理。</p>
</li>
</ul>
<h2 id="三：-添加定时任务自动部署">三： 添加定时任务自动部署</h2>
<h3 id="3-1-Windows主机">3.1 Windows主机</h3>
<ol>
<li>登录windows云主机，复制<code>gitee.py</code>到D盘根目录。</li>
<li>云主机内-&gt;右键我的电脑-&gt;管理-&gt;工具-&gt;任务计划程序-&gt;创建基本任务…添加任务每天执行一次，实在不会的请<a href="https://jingyan.baidu.com/article/154b463130041128ca8f41c7.html" target="_blank" rel="noopener">百度</a></li>
<li>在自己电脑上的话也可以设置定时开关机，并把如下代码添加到<a href="https://8hn9w5.coding-pages.com/2020/02/15/hexo/hexo%E4%B8%80%E9%94%AE%E4%B8%8A%E4%BC%A0%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E7%9A%84%E6%9E%84%E5%BB%BA/" target="_blank" rel="noopener">hexo一键上传部署脚本</a>的后面，每次定时git push后自动在gitee的pages界面部署。</li>
</ol>
<div class="hljs"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off
<span class="hljs-function">
d:

<span class="hljs-title">python</span> <span class="hljs-title">gitee.py</span>
<span class="hljs-title">echo</span> "等待更新完成过后再关闭窗口"
<span class="hljs-title">timeout</span> /<span class="hljs-title">t</span> 180
<span class="hljs-title">rem</span> 上面的代码是等待3分钟。</span></code></pre></div>
<h3 id="3-2-Linux主机">3.2 Linux主机</h3>
<ol>
<li>登录Linux云主机，复制<code>gitee.py</code>到<code>/home/temp/</code>目录。</li>
<li>添加Linux计划任务<br>
<code>crontab -e</code></li>
<li>选择1选项nano编辑，光标拉到最后面，复制如下代码;</li>
<li><code>10 6 * * * /home/temp/gitee.py start</code></li>
</ol>
<p>说明：</p>
<ul>
<li><a href="http://www.bejson.com/othertools/cron/" target="_blank" rel="noopener">crontab表达式在线生成</a></li>
<li>延迟0~1小时的话，直接在py或者sh文件中利用sleep及random命令设置。</li>
<li><code>crontab -l</code>查看当前已经保存的计划任务。</li>
</ul>
<h2 id="四：-参考文献">四： 参考文献</h2>
<ul>
<li><a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">https://python-selenium-zh.readthedocs.io/zh_CN/latest/</a></li>
<li><a href="https://blog.csdn.net/ydydyd00/article/details/80882183" target="_blank" rel="noopener">https://blog.csdn.net/ydydyd00/article/details/80882183</a></li>
<li><a href="https://jingyan.baidu.com/article/154b463130041128ca8f41c7.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/154b463130041128ca8f41c7.html</a></li>
<li><a href="https://jupitersh.gitee.io/2020/02/Preparation-for-Gitee-Auto-Update-by-Ptyhon/" target="_blank" rel="noopener">https://jupitersh.gitee.io/2020/02/Preparation-for-Gitee-Auto-Update-by-Ptyhon/</a></li>
</ul>
<p><strong>enjoy!</strong></p>
]]></content>
      <categories>
        <category>python</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>python</tag>
        <tag>自动签到</tag>
      </tags>
  </entry>
  <entry>
    <title>you-get下载视频</title>
    <url>/2020/02/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/you-get%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<h2 id="一：-简介">一： 简介</h2>
<p>You-Get 乃一小小哒命令行程序，提供便利的方式来下载网络上的媒体信息，通过python来安装。<br>
支持主流视频网站如：YouTube、Google+、bilibili哔哩哔哩、163/网易视频/网易云音乐、斗鱼、爱奇艺、Youku、AcFun等等</p>
<h2 id="二：-安装及其使用">二： 安装及其使用</h2>
<h3 id="2-1-安装">2.1 安装</h3>
<p>1） 安装python3  <a id="more"></a><br>
安装教程这里推荐：<a href="http://www.runoob.com/python3/python3-install.html" target="_blank" rel="noopener">http://www.runoob.com/python3/python3-install.html</a><br>
win下载地址：<a href="https://www.python.org/downloads/windows" target="_blank" rel="noopener">https://www.python.org/downloads/windows</a><br>
Linux下载地址：<a href="https://www.python.org/downloads/source" target="_blank" rel="noopener">https://www.python.org/downloads/source</a></p>
<p>2） 安装you-get<br>
然后打开win的cmd命令行、Linux为终端，输入以下命令：</p>
<ul>
<li>升级pip<br>
<code>python -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple</code></li>
<li>安装you-get<br>
<code>pip install you-get -i https://pypi.tuna.tsinghua.edu.cn/simple</code></li>
<li>升级you-get<br>
<code>pip install --upgrade you-get -i https://pypi.tuna.tsinghua.edu.cn/simple</code></li>
</ul>
<p>3） 安装<a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a><br>
FFmpeg用于转换视频格式、播放视频等，下载下来的视频有可能播放格式不支持，不需要也可不装。<br>
FFmpeg下载地址：<a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">https://www.ffmpeg.org/</a><br>
windows下载地址：<a href="https://ffmpeg.zeranoe.com/builds/" target="_blank" rel="noopener">https://ffmpeg.zeranoe.com/builds/</a><br>
ps：windows下载，选择默认选项即可</p>
<h3 id="2-2-下载">2.2 下载</h3>
<h4 id="2-2-1-下载默认画质和格式">2.2.1 下载默认画质和格式</h4>
<p><code>you-get https://www.bilibili.com/video/av77151622/</code></p>
<p>下载路径默认为文件所在当前路径。<br>
所以要下载在指定路径需要先cd到指定路径。</p>
<h4 id="2-2-2-下载指定画质和格式">2.2.2 下载指定画质和格式</h4>
<p>1） 先用<code>-i</code>以查看所有可用画质与格式。<br>
<code>you-get -i https://www.bilibili.com/video/av77151622/</code><br>
最上面的标有<code>[ DASH(也可能是 DEFAULT ） ]</code>为默认画质。如认同，可下载。</p>
<p>2） 或，您希望下载其他播放格式或者其他清晰度，请追加屏幕上面提示的参数，如本视频是:<br>
<code>you-get --format=flv720 https://www.bilibili.com/video/av77151622/</code></p>
<ul>
<li>目前，格式选择没有大规模铺开；默认选项为最高画质.</li>
<li>如不希望you-get合并视频，使用<code>-n</code>。</li>
<li>如YouTube视频带有字幕，将被一同下载，以SubRip格式保存.</li>
</ul>
<h4 id="2-2-3-下载其他内容">2.2.3 下载其他内容</h4>
<p>1） 如你有URL，可以直接使用，如下载you-get:<br>
<code>you-get https://github.com/soimort/you-get/archive/master.zip</code></p>
<p>2） 或者, you-get将自动检查网页，下载一切有可能感兴趣的内容:<br>
<code>you-get http://kopasas.tumblr.com/post/69361932517</code></p>
<ul>
<li>此功能为测试性，远未完成。对于类似Tumblr和Blogger的大图有效，但是没有办法为所有网站建立通用格式.</li>
</ul>
<p>3） 在Google Videos搜索并下载<br>
you-get可以下载任何东西. 如果不是合法的URL, you-get将在Google查找并下载最相关视频. (可能不是最心仪的，但是很有可能)<br>
<code>you-get &quot;Richard Stallman eats&quot;</code></p>
<h4 id="2-2-4-暂停与恢复下载">2.2.4 暂停与恢复下载</h4>
<p>可以使用<code>Ctrl</code>+<code>C</code> 暂停下载.<br>
临时的<code>.download</code>文件将保存于输出目录。下次使用you-get传入相同参数时，下载将从上次继续开始. 如果下载已经完成 (临时的<code>.download</code> 扩展名消失), you-get将忽略下载.<br>
用<code>-f</code>强行重下载. (注意: 将覆盖同名文件或临时文件!)</p>
<h4 id="2-2-5-设置输出文件名或路径">2.2.5 设置输出文件名或路径</h4>
<p>使用<code>-o</code> 设定路径为d:, <code>-O</code> 设定输出文件名为out:<br>
<code>you-get -o d:\ -O out https://www.bilibili.com/video/av77151622/</code><br>
提示:</p>
<ul>
<li>如果原视频标题含有与系统不兼容字符，十分有效.</li>
<li>也可以帮助使用脚本批量下载于指定目录和文件名.</li>
</ul>
<h4 id="2-2-6-批量下载">2.2.6 批量下载</h4>
<p>两种方法：</p>
<ol>
<li>把视频URL用空格隔开<br>
<code>you-get 视频A网址 视频B网址</code></li>
<li>用<code>--playlist</code><br>
<code>you-get --playlist https://www.bilibili.com/video/av5123229</code></li>
<li>下载视频的同时会下载xml格式弹幕，需要将其转换为ass格式，有一个工具可以帮你：<a href="https://github.com/ikde/danmu2ass/releases/download/v1.1/Danmu2Ass1.1.zip" target="_blank" rel="noopener">Danmu2Ass</a>。</li>
</ol>
<h3 id="2-3-观看视频">2.3 观看视频</h3>
<p>使用 <code>-p</code> 将视频喂进播放器, 例如 mPlayer 或者 vlc,而不是下载:<br>
<code>you-get -p vlc 'https://www.youtube.com/watch?v=jNQXAC9IVRw'</code><br>
或者你想在浏览器中观看而不希望看广告或评论区:<br>
<code>you-get -p chromium 'https://www.youtube.com/watch?v=jNQXAC9IVRw'</code></p>
<h2 id="三：-官方文档">三： 官方文档</h2>
<p><a href="https://github.com/soimort/you-get/wiki/%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">官方中文文档</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>you-get</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬图攻略</title>
    <url>/2020/02/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E7%88%AC%E5%9B%BE%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<h2 id="一：-软件工具">一： 软件工具</h2>
<h3 id="1-1-Python3">1.1 Python3</h3>
<p>这里选择的是最新版 Python3<br>
安装教程这里推荐：<a href="http://www.runoob.com/python3/python3-install.html" target="_blank" rel="noopener">http://www.runoob.com/python3/python3-install.html</a><br>
win下载地址：<a href="https://www.python.org/downloads/windows" target="_blank" rel="noopener">https://www.python.org/downloads/windows</a><br>
Linux下载地址：<a href="https://www.python.org/downloads/source" target="_blank" rel="noopener">https://www.python.org/downloads/source</a>  <a id="more"></a></p>
<h3 id="1-2-PyCharm">1.2 PyCharm</h3>
<p>可视化开发工具IDE：<a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/download/</a></p>
<h2 id="二：原理">二：原理</h2>
<h3 id="2-1-实现步骤">2.1 实现步骤</h3>
<p>以图片为例，其实很简单，分以下四步：</p>
<ul>
<li>获取首页的页码数，并创建与页码对应的文件夹</li>
<li>获取页面的栏目地址</li>
<li>进入栏目，获取栏目页码数(每个栏目下有多张图片，分页显示)</li>
<li>获取到栏目下对用标签容器中的图片并下载</li>
</ul>
<h3 id="2-2-注意事项">2.2 注意事项</h3>
<p>这里以爬取某个网站的套路为例，详细见代码，这里主要说以下几点注意事项：</p>
<p>1）导库，其实就类似于Java中框架或者是工具类，底层都被封装好了</p>
<p>安装第三方库：</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment"># Win下直接装的 python3</span>
pip install BeautifulSoup4 -i https://pypi.tuna.tsinghua.edu.cn/simple
pip install requests -i https://pypi.tuna.tsinghua.edu.cn/simple
<span class="hljs-comment"># Linux python2 python3 共存</span>
pip3 install BeautifulSoup4 -i https://pypi.tuna.tsinghua.edu.cn/simple
pip3 install requests -i https://pypi.tuna.tsinghua.edu.cn/simple</code></pre></div>
<p>导入第三方库：</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment"># 导入requests库</span>
<span class="hljs-keyword">import</span> requests
<span class="hljs-comment"># 导入文件操作库</span>
<span class="hljs-keyword">import</span> os
<span class="hljs-comment"># bs4全名BeautifulSoup4，是编写python爬虫常用库之一，主要用来解析html标签。</span>
<span class="hljs-keyword">import</span> bs4
<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup
<span class="hljs-comment"># 基础类库</span>
<span class="hljs-keyword">import</span> sys
<span class="hljs-comment"># Python 3.x 解决中文编码问题</span>
<span class="hljs-keyword">import</span> importlib
importlib.reload(sys)</code></pre></div>
<p>2）定义方法函数，一个爬虫可能会几百行，所以尽量不要写成一坨</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span><span class="hljs-params">(page_no, file_path)</span>:</span>
    <span class="hljs-comment"># 这里写代码逻辑</span></code></pre></div>
<p>3）定义全局变量</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment"># 给请求指定一个请求头来模拟chrome浏览器</span>
<span class="hljs-keyword">global</span> headers <span class="hljs-comment"># 告诉编译器这是全局变量 headers </span>
headers = &#123;<span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36'</span>&#125;

<span class="hljs-comment"># 函数内使用之前需要</span>
<span class="hljs-comment"># 告诉编译器我在这个方法中使用的a是刚才定义的全局变量 headers ，而不是方法内部的局部变量。</span>
<span class="hljs-keyword">global</span> headers</code></pre></div>
<p>4）防盗链</p>
<p>有些网站加入了防盗链，无所不能的 python  解决方案：</p>
<div class="hljs"><pre><code class="hljs py">headers = &#123;<span class="hljs-string">'Referer'</span>: href&#125;
img = requests.get(url, headers=headers)</code></pre></div>
<p>5）切换版本</p>
<p>Linux服务器使用的是阿里云服务器（centos7.4），默认版本 python2，python3 自行安装</p>
<div class="hljs"><pre><code class="hljs py">[root@AY140216131049Z mzitu]<span class="hljs-comment"># python2 -V</span>
Python <span class="hljs-number">2.7</span><span class="hljs-number">.5</span>
[root@AY140216131049Z mzitu]<span class="hljs-comment"># python3 -V</span>
Python <span class="hljs-number">3.7</span><span class="hljs-number">.1</span>
<span class="hljs-comment"># 默认版本</span>
[root@AY140216131049Z mzitu]<span class="hljs-comment"># python -V</span>
Python <span class="hljs-number">2.7</span><span class="hljs-number">.5</span>
<span class="hljs-comment"># 临时切换版本 &lt;whereis python&gt;</span>
[root@AY140216131049Z mzitu]<span class="hljs-comment"># alias python='/usr/local/bin/python3.7'</span>
[root@AY140216131049Z mzitu]<span class="hljs-comment"># python -V</span>
Python <span class="hljs-number">3.7</span><span class="hljs-number">.1</span></code></pre></div>
<p>6）异常捕获</p>
<p>在爬取的过程中可能存在异常页面，这里我们进行捕获，不影响后续操作：</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-keyword">try</span>:
    <span class="hljs-comment"># 业务逻辑</span>
<span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:
   print(e)</code></pre></div>
<h3 id="2-3-执行脚本">2.3 执行脚本</h3>
<div class="hljs"><pre><code class="hljs py">python3 mzitu.py

<span class="hljs-comment"># 或者后台执行</span>

nohup python3 -u mzitu.py &gt; mzitu.log <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;</code></pre></div>
<h2 id="三：-源码">三： 源码</h2>
<h3 id="3-1-win下代码">3.1 win下代码</h3>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment">#coding=utf-8</span>
<span class="hljs-comment">#!/usr/bin/python</span>
<span class="hljs-comment"># 导入requests库</span>
<span class="hljs-keyword">import</span> requests
<span class="hljs-comment"># 导入文件操作库</span>
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> bs4
<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup
<span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">import</span> importlib
<span class="hljs-keyword">import</span> random
<span class="hljs-keyword">import</span> time
importlib.reload(sys)


<span class="hljs-comment"># 越多越好</span>
meizi_headers = [
    <span class="hljs-string">"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36"</span>,
    <span class="hljs-string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36"</span>,
    <span class="hljs-string">"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0"</span>,
    <span class="hljs-string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/537.75.14"</span>,
    <span class="hljs-string">"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0)"</span>,
    <span class="hljs-string">'Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11'</span>,
    <span class="hljs-string">'Opera/9.25 (Windows NT 5.1; U; en)'</span>,
    <span class="hljs-string">'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)'</span>,
    <span class="hljs-string">'Mozilla/5.0 (compatible; Konqueror/3.5; Linux) KHTML/3.5.5 (like Gecko) (Kubuntu)'</span>,
    <span class="hljs-string">'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.12) Gecko/20070731 Ubuntu/dapper-security Firefox/1.5.0.12'</span>,
    <span class="hljs-string">'Lynx/2.8.5rel.1 libwww-FM/2.14 SSL-MM/1.4.1 GNUTLS/1.2.9'</span>,
    <span class="hljs-string">"Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.7 (KHTML, like Gecko) Ubuntu/11.04 Chromium/16.0.912.77 Chrome/16.0.912.77 Safari/535.7"</span>,
    <span class="hljs-string">"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:10.0) Gecko/20100101 Firefox/10.0"</span>,
    <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36'</span>
]
<span class="hljs-comment"># 给请求指定一个请求头来模拟chrome浏览器</span>
<span class="hljs-keyword">global</span> headers
headers = &#123;<span class="hljs-string">'User-Agent'</span>: random.choice(meizi_headers)&#125;
<span class="hljs-comment"># 爬图网址</span>
mziTu = <span class="hljs-string">'http://www.mzitu.com/'</span>
<span class="hljs-comment"># 定义图片存储位置</span>
<span class="hljs-keyword">global</span> save_path
save_path = <span class="hljs-string">'D:\BeautifulPictures'</span>

<span class="hljs-comment"># 创建文件夹</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createFile</span><span class="hljs-params">(file_path)</span>:</span>
    <span class="hljs-keyword">if</span> os.path.exists(file_path) <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:
        os.makedirs(file_path)
    <span class="hljs-comment"># 切换路径至上面创建的文件夹</span>
    os.chdir(file_path)

<span class="hljs-comment"># 下载文件</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span><span class="hljs-params">(page_no, file_path)</span>:</span>
    <span class="hljs-keyword">global</span> headers
    res_sub = requests.get(page_no, headers=headers)
    <span class="hljs-comment"># 解析html</span>
    soup_sub = BeautifulSoup(res_sub.text, <span class="hljs-string">'html.parser'</span>)
    <span class="hljs-comment"># 获取页面的栏目地址</span>
    all_a = soup_sub.find(<span class="hljs-string">'div'</span>,class_=<span class="hljs-string">'postlist'</span>).find_all(<span class="hljs-string">'a'</span>,target=<span class="hljs-string">'_blank'</span>)
    count = <span class="hljs-number">0</span>
    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> all_a:
        count = count + <span class="hljs-number">1</span>
        <span class="hljs-keyword">if</span> (count % <span class="hljs-number">2</span>) == <span class="hljs-number">0</span>:
            headers = &#123;<span class="hljs-string">'User-Agent'</span>: random.choice(meizi_headers)&#125;
            print(<span class="hljs-string">"内页第几页："</span> + str(count))
            <span class="hljs-comment"># 提取href</span>
            href = a.attrs[<span class="hljs-string">'href'</span>]
            print(<span class="hljs-string">"套图地址："</span> + href)
            res_sub_1 = requests.get(href, headers=headers)
            soup_sub_1 = BeautifulSoup(res_sub_1.text, <span class="hljs-string">'html.parser'</span>)
            <span class="hljs-comment"># ------ 这里最好使用异常处理 ------</span>
            <span class="hljs-keyword">try</span>:
                <span class="hljs-comment"># 获取套图的最大数量</span>
                pic_max = soup_sub_1.find(<span class="hljs-string">'div'</span>, class_=<span class="hljs-string">'pagenavi'</span>).find_all(<span class="hljs-string">'span'</span>)[<span class="hljs-number">6</span>].text
                print(<span class="hljs-string">"套图数量："</span> + pic_max)
                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, int(pic_max) + <span class="hljs-number">1</span>):
                    <span class="hljs-comment"># 单位为秒，1-3 随机数</span>
                    time.sleep(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))
                    headers = &#123;<span class="hljs-string">'User-Agent'</span>: random.choice(meizi_headers)&#125;
                    <span class="hljs-comment"># print("子内页第几页：" + str(j))</span>
                    <span class="hljs-comment"># j int类型需要转字符串</span>
                    href_sub = href + <span class="hljs-string">"/"</span> + str(j)
                    print(<span class="hljs-string">"图片地址："</span>+href_sub)
                    res_sub_2 = requests.get(href_sub, headers=headers)
                    soup_sub_2 = BeautifulSoup(res_sub_2.text, <span class="hljs-string">"html.parser"</span>)
                    img = soup_sub_2.find(<span class="hljs-string">'div'</span>, class_=<span class="hljs-string">'main-image'</span>).find(<span class="hljs-string">'img'</span>)
                    <span class="hljs-keyword">if</span> isinstance(img, bs4.element.Tag):
                        <span class="hljs-comment"># 提取src</span>
                        url = img.attrs[<span class="hljs-string">'src'</span>]
                        array = url.split(<span class="hljs-string">'/'</span>)
                        file_name = array[len(array)<span class="hljs-number">-1</span>]
                        <span class="hljs-comment"># 防盗链加入Referer</span>
                        headers = &#123;<span class="hljs-string">'User-Agent'</span>: random.choice(meizi_headers), <span class="hljs-string">'Referer'</span>: url&#125;
                        img = requests.get(url, headers=headers)
                        print(<span class="hljs-string">'开始保存图片'</span>, img)
                        f = open(file_name, <span class="hljs-string">'ab'</span>)
                        f.write(img.content)
                        print(file_name, <span class="hljs-string">'图片保存成功！'</span>)
                        f.close()
            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:
                print(e)


<span class="hljs-comment"># 主方法</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    res = requests.get(mziTu, headers=headers)
    <span class="hljs-comment"># 使用自带的html.parser解析</span>
    soup = BeautifulSoup(res.text, <span class="hljs-string">'html.parser'</span>)
    <span class="hljs-comment"># 创建文件夹</span>
    createFile(save_path)
    <span class="hljs-comment"># 获取首页总页数</span>
    img_max = soup.find(<span class="hljs-string">'div'</span>, class_=<span class="hljs-string">'nav-links'</span>).find_all(<span class="hljs-string">'a'</span>)[<span class="hljs-number">3</span>].text
    <span class="hljs-comment"># print("总页数:"+img_max)</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, int(img_max) + <span class="hljs-number">1</span>):
        <span class="hljs-comment"># 获取每页的URL地址</span>
        <span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span>:
            page = mziTu
        <span class="hljs-keyword">else</span>:
            page = mziTu + <span class="hljs-string">'page/'</span> + str(i)
        file = save_path + <span class="hljs-string">'\\'</span> + str(i)
        createFile(file)
        <span class="hljs-comment"># 下载每页的图片</span>
        print(<span class="hljs-string">"套图页码："</span> + page)
        download(page, file)


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>
<h3 id="3-2-linux下代码">3.2 linux下代码</h3>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment">#coding=utf-8</span>
<span class="hljs-comment">#!/usr/bin/python</span>
<span class="hljs-comment"># 导入requests库</span>
<span class="hljs-keyword">import</span> requests
<span class="hljs-comment"># 导入文件操作库</span>
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> bs4
<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup
<span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">import</span> importlib
importlib.reload(sys)

<span class="hljs-comment"># 给请求指定一个请求头来模拟chrome浏览器</span>
<span class="hljs-keyword">global</span> headers
headers = &#123;<span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36'</span>&#125;
<span class="hljs-comment"># 爬图地址</span>
mziTu = <span class="hljs-string">'http://www.mzitu.com/'</span>
<span class="hljs-comment"># 定义存储位置</span>
<span class="hljs-keyword">global</span> save_path
save_path = ​<span class="hljs-string">'/mnt/data/mzitu'</span>

<span class="hljs-comment"># 创建文件夹</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createFile</span><span class="hljs-params">(file_path)</span>:</span>
    <span class="hljs-keyword">if</span> os.path.exists(file_path) <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:
        os.makedirs(file_path)
    <span class="hljs-comment"># 切换路径至上面创建的文件夹</span>
    os.chdir(file_path)

<span class="hljs-comment"># 下载文件</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span><span class="hljs-params">(page_no, file_path)</span>:</span>
    <span class="hljs-keyword">global</span> headers
    res_sub = requests.get(page_no, headers=headers)
    <span class="hljs-comment"># 解析html</span>
    soup_sub = BeautifulSoup(res_sub.text, <span class="hljs-string">'html.parser'</span>)
    <span class="hljs-comment"># 获取页面的栏目地址</span>
    all_a = soup_sub.find(<span class="hljs-string">'div'</span>,class_=<span class="hljs-string">'postlist'</span>).find_all(<span class="hljs-string">'a'</span>,target=<span class="hljs-string">'_blank'</span>)
    count = <span class="hljs-number">0</span>
    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> all_a:
        count = count + <span class="hljs-number">1</span>
        <span class="hljs-keyword">if</span> (count % <span class="hljs-number">2</span>) == <span class="hljs-number">0</span>:
            print(<span class="hljs-string">"内页第几页："</span> + str(count))
            <span class="hljs-comment"># 提取href</span>
            href = a.attrs[<span class="hljs-string">'href'</span>]
            print(<span class="hljs-string">"套图地址："</span> + href)
            res_sub_1 = requests.get(href, headers=headers)
            soup_sub_1 = BeautifulSoup(res_sub_1.text, <span class="hljs-string">'html.parser'</span>)
            <span class="hljs-comment"># ------ 这里最好使用异常处理 ------</span>
            <span class="hljs-keyword">try</span>:
                <span class="hljs-comment"># 获取套图的最大数量</span>
                pic_max = soup_sub_1.find(<span class="hljs-string">'div'</span>,class_=<span class="hljs-string">'pagenavi'</span>).find_all(<span class="hljs-string">'span'</span>)[<span class="hljs-number">6</span>].text
                print(<span class="hljs-string">"套图数量："</span> + pic_max)
                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, int(pic_max) + <span class="hljs-number">1</span>):
                    <span class="hljs-comment"># print("子内页第几页：" + str(j))</span>
                    <span class="hljs-comment"># j int类型需要转字符串</span>
                    href_sub = href + <span class="hljs-string">"/"</span> + str(j)
                    print(href_sub)
                    res_sub_2 = requests.get(href_sub, headers=headers)
                    soup_sub_2 = BeautifulSoup(res_sub_2.text, <span class="hljs-string">"html.parser"</span>)
                    img = soup_sub_2.find(<span class="hljs-string">'div'</span>, class_=<span class="hljs-string">'main-image'</span>).find(<span class="hljs-string">'img'</span>)
                    <span class="hljs-keyword">if</span> isinstance(img, bs4.element.Tag):
                        <span class="hljs-comment"># 提取src</span>
                        url = img.attrs[<span class="hljs-string">'src'</span>]
                        array = url.split(<span class="hljs-string">'/'</span>)
                        file_name = array[len(array)<span class="hljs-number">-1</span>]
                        <span class="hljs-comment"># print(file_name)</span>
                        <span class="hljs-comment"># 防盗链加入Referer</span>
                        headers = &#123;<span class="hljs-string">'Referer'</span>: href&#125;
                        img = requests.get(url, headers=headers)
                        <span class="hljs-comment"># print('开始保存图片')</span>
                        f = open(file_name, <span class="hljs-string">'ab'</span>)
                        f.write(img.content)
                        <span class="hljs-comment"># print(file_name, '图片保存成功！')</span>
                        f.close()
            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:
                print(e)


<span class="hljs-comment"># 主方法</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    res = requests.get(mziTu, headers=headers)
    <span class="hljs-comment"># 使用自带的html.parser解析</span>
    soup = BeautifulSoup(res.text, <span class="hljs-string">'html.parser'</span>)
    <span class="hljs-comment"># 创建文件夹</span>
    createFile(save_path)
    <span class="hljs-comment"># 获取首页总页数</span>
    img_max = soup.find(<span class="hljs-string">'div'</span>, class_=<span class="hljs-string">'nav-links'</span>).find_all(<span class="hljs-string">'a'</span>)[<span class="hljs-number">3</span>].text
    <span class="hljs-comment"># print("总页数:"+img_max)</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, int(img_max) + <span class="hljs-number">1</span>):
        <span class="hljs-comment"># 获取每页的URL地址</span>
        <span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span>:
            page = mziTu
        <span class="hljs-keyword">else</span>:
            page = mziTu + <span class="hljs-string">'page/'</span> + str(i)
        file = save_path + <span class="hljs-string">'/'</span> + str(i)
        createFile(file)
        <span class="hljs-comment"># 下载每页的图片</span>
        print(<span class="hljs-string">"套图页码："</span> + page)
        download(page, file)


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>
<h2 id="四：-参考文献">四： 参考文献</h2>
<p><a href="https://gitee.com/52itstyle/Python" target="_blank" rel="noopener">小柒2012 / 从零学Python / Day01</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬图</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo一键上传部署脚本的构建</title>
    <url>/2020/02/15/hexo/hexo%E4%B8%80%E9%94%AE%E4%B8%8A%E4%BC%A0%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E7%9A%84%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<ol>
<li>windows先右键新建一个文本文档，后缀改为<code>git push hexo.bat</code>；Linux新建一个<code>git push hexo.sh</code>文档;</li>
<li>注意：编码要是windows默认编码GBK；Linux上是UTF-8；</li>
<li>然后复制黏贴，话不多说，直接上代码。  <a id="more"></a></li>
</ol>
<h2 id="Windows">Windows</h2>
<div class="hljs"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off

<span class="hljs-built_in">cd</span> G:\code\hexo
<span class="hljs-comment">REM 改为hexo根目录</span>
<span class="hljs-built_in">echo</span> "当前目录是： G:\code\hexo"
<span class="hljs-comment">REM 改为hexo根目录</span>
<span class="hljs-built_in">echo</span> "正在add... ..."
git add source/ 
<span class="hljs-comment">REM 只添加了blog文件目录，需要的可自行添加...</span>
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span> "add complete."
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span>;

<span class="hljs-built_in">echo</span> "正在commit... ..."
<span class="hljs-built_in">set</span> now=<span class="hljs-variable">%date%</span> <span class="hljs-variable">%time%</span>
<span class="hljs-built_in">echo</span> <span class="hljs-variable">%now%</span>
git commit -m "blog update <span class="hljs-built_in">at</span> <span class="hljs-variable">%now%</span>"
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span> "commit complete."
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span>;
 
<span class="hljs-built_in">echo</span> "正在将更改提交到远程git服务器... ..."
git push githuborigin hexo &amp;&amp; git push giteeorigin hexo &amp;&amp; git push codingorigin hexo
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span> "git push complete."
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span>;

<span class="hljs-built_in">echo</span> "正在部署blog... ..."
hexo clean &amp;&amp; hexo g &amp;&amp; hexo d
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span> "部署 complete."
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span>;

<span class="hljs-built_in">pause</span></code></pre></div>
<h2 id="Linux">Linux</h2>
<p>先提升权限，<code>chmod +x ./git\ push\ hexo.sh</code>。</p>
<div class="hljs"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /home/zs/文档/hexo/closer_laps
<span class="hljs-comment"># 改为hexo根目录</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"当前目录是： /home/zs/文档/hexo/closer_laps"</span>

<span class="hljs-comment"># 改为hexo根目录</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"正在add... ..."</span>
git add <span class="hljs-built_in">source</span>/ 
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span> <span class="hljs-string">"add complete."</span>
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span>;

<span class="hljs-built_in">echo</span> <span class="hljs-string">"正在commit... ..."</span>
now=`date <span class="hljs-string">'+%Y-%m-%d %H:%M:%S'</span>`
<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$now</span>"</span>
git commit -m <span class="hljs-string">"blog update at <span class="hljs-variable">$now</span>"</span>
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span> <span class="hljs-string">"commit complete."</span>
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span>;
 
<span class="hljs-built_in">echo</span> <span class="hljs-string">"正在push... ..."</span>
git push githuborigin hexo &amp;&amp; git push giteeorigin hexo &amp;&amp; git push codingorigin hexo
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span> <span class="hljs-string">"git push complete."</span>
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span>;

<span class="hljs-built_in">echo</span> <span class="hljs-string">"正在部署blog... ..."</span>
hexo clean &amp;&amp; hexo g &amp;&amp; hexo d
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span> <span class="hljs-string">"部署 complete."</span>
<span class="hljs-built_in">echo</span>;
<span class="hljs-built_in">echo</span>;</code></pre></div>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>一键部署</tag>
      </tags>
  </entry>
  <entry>
    <title>同时在Github、Gitee、Coding上部署Hexo</title>
    <url>/2020/02/14/hexo/%E5%90%8C%E6%97%B6%E5%9C%A8Github%E3%80%81Gitee%E3%80%81Coding%E4%B8%8A%E9%83%A8%E7%BD%B2Hexo/</url>
    <content><![CDATA[<h2 id="一、创建托管仓库">一、创建托管仓库</h2>
<ul>
<li>
<p>GitHub <a href="https://github.com" target="_blank" rel="noopener">https://github.com</a><br>
与用户名相同，<a href="http://xn--YouID-dq1hm91h5lp.github.io" target="_blank" rel="noopener">格式为YouID.github.io</a></p>
</li>
<li>
<p>Gitee <a href="https://gitee.com" target="_blank" rel="noopener">https://gitee.com</a><br>
与用户名相同，格式为YouID</p>
</li>
<li>
<p>Coding <a href="https://coding.net" target="_blank" rel="noopener">https://coding.net</a><br>
与用户名相同，<a href="http://xn--YouID-dq1hm91h5lp.coding.me" target="_blank" rel="noopener">格式为YouID.coding.me</a></p>
</li>
</ul>
<a id="more"></a>
<h2 id="二、在Github、Gitee、Coding上添加SSH，并push">二、在Github、Gitee、Coding上添加SSH，并push</h2>
<ol>
<li>获取id_rsa.pub文件内的公匙;具体如何获取请百度<code>id_rsa.pub</code></li>
<li>在 Github、Gitee、Coding平台 - 设置 - 添加SSH Keys。</li>
<li>将博客分支master和分支hexo里的内容push到仓库，并设定hexo为主分支（hexo分支的好处请参考<a href="https://closer_laps.gitee.io/2019/12/09/hexo/hexo%20%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8A%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2/"> hexo 多客户端上更新博客</a>）。</li>
</ol>
<h2 id="三、开启Pages服务并绑定域名">三、开启Pages服务并绑定域名</h2>
<ul>
<li>GitHub 进入托管的仓库 -&gt; Settings -&gt; Options 往下拉-&gt;GitHub Pages</li>
<li>Gitee 进入托管的仓库 -&gt; 服务-&gt; Gitee Pages (绑定域名需要升级Gitee Pro，普通版每次部署更新需要手动点更新！！！)</li>
<li>Coding 进入托管的仓库 -&gt; Pages服务 -&gt; 设置</li>
</ul>
<h2 id="四、Hexo推送设置">四、Hexo推送设置</h2>
<p>在博客根目录下，打开<code>_config.yml</code>,deploy设置如下所示</p>
<div class="hljs"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span>
  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>
  <span class="hljs-attr">repo:</span>
        <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:YouID/YouID.github.io.git</span>
        <span class="hljs-attr">gitee:</span> <span class="hljs-string">git@gitee.com:YouID/YouID.git</span>
        <span class="hljs-attr">coding:</span> <span class="hljs-string">git@e.coding.net:YouID/YouID.coding.me.git</span>
  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span></code></pre></div>
<h2 id="五：将本地仓库和远程仓库连接">五：将本地仓库和远程仓库连接</h2>
<ul>
<li>
<p>GitHub<br>
<code>git remote add githuborigin git@github.com:YouID/YouID.github.io.git</code></p>
</li>
<li>
<p>Gitee<br>
<code>git remote add giteeorigin git@gitee.com:YouID/YouID.git</code></p>
</li>
<li>
<p>Coding<br>
<code>git remote add codingorigin git@e.coding.net:YouID/YouID.coding.me.git</code></p>
</li>
</ul>
<p>输入<code>git remote -v</code>，成功的话会显示3个你关联的远程库：<code>codingorigin</code>、<code>githuborigin</code>、<code>giteeorigin</code>。如下：</p>
<div class="hljs"><pre><code class="hljs plain">codingorigin    git@e.coding.net:YouID&#x2F;YouID.coding.me.git (fetch)
codingorigin    git@e.coding.net:YouID&#x2F;YouID.coding.me.git (push)
giteeorigin     git@gitee.com:YouID&#x2F;YouID.git (fetch)
giteeorigin     git@gitee.com:YouID&#x2F;YouID.git (push)
githuborigin  git@github.com:YouID&#x2F;YouID.github.io.git (fetch)
githuborigin  git@github.com:YouID&#x2F;YouID.github.io.git (push)</code></pre></div>
<h2 id="六、一键部署必杀命令">六、一键部署必杀命令</h2>
<p><code>git add source/ &amp;&amp; git commit -m &quot;blog update&quot; &amp;&amp; git push githuborigin hexo &amp;&amp; git push giteeorigin hexo &amp;&amp; git push codingorigin hexo &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; exit</code><br>
把所有命令用<code>&amp;&amp;</code>串起来，有一个失败就会停止；成功，最后一条命令就会退出终端。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>多平台部署</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在markdown中优雅的编辑数学公式</title>
    <url>/2020/02/12/hexo/%E5%A6%82%E4%BD%95%E5%9C%A8markdown%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E7%BC%96%E8%BE%91%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="IDE">IDE</h2>
<p>下载IDE软件vscode，安装插件<code>Markdown Preview Enhanced</code>(简称MPE)。</p>
<p><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/" target="_blank" rel="noopener">MPE官方使用文档</a>。</p>
<h2 id="hexo博客中使用-KaTeX-来渲染数学表达式">hexo博客中使用 KaTeX 来渲染数学表达式</h2>
<ol>
<li>在Next主题配置下面开启mathjax。（不知道怎么开启的小伙伴请查询官方文档或者github）</li>
<li>在博客需要用到公式的md文件的头文件中添加一句：<code>mathjax: true</code>。</li>
</ol>
<h2 id="上下标及标记">上下标及标记</h2>
<a id="more"></a>
<ol>
<li>默认下的分隔符：<br>
<code>$...$</code> 或者<code>\(...\)</code>中的数学表达式将会在行内显示。<br>
<code>$$...$$</code> 或者 <code>\[...\]</code> 或者 <code> ```math</code> 中的数学表达式将会在块内显示。</li>
<li>公式两边用<code>$</code>符号标记为公式，如:<br>
<code>$a^2$</code>显示为$a^2$<br>
<code>$H_2O$</code>显示为$H_2O$<br>
<code>==marked==</code>显示为==marked==</li>
</ol>
<h2 id="数学公式">数学公式</h2>
<p>Markdown Preview Enhanced 使用 KaTeX 来渲染数学表达式。</p>
<p>如这个公式：$f(x)=\int_{-\infty}^\infty\widehat f\xi,e^{2\pi i\xi x},d\xi$</p>
<p>想要正确地写出它的文本形式可不容易：<br>
<code>f(x)=\int_{-\infty}^\infty\widehat f\xi\,e^{2\pi i\xi x}\,d\xi</code></p>
<p>如果仅仅为了写个公式，就去学LaTeX语法，那没有十天半月的肯定不行。这个时候，你需要一个<a href="http://www.wiris.com/editor/demo/en/developers#output-formats" target="_blank" rel="noopener">可视化公式编辑器</a>的神器，它可以让我们可视化地编辑公式，然后自动得到它的LaTeX文本：<br>
<img src="https://www.liaoxuefeng.com/files/attachments/1280023417847873/l" srcset="/img/loading.gif" alt="使用说明"></p>
<p>在线转换地址1：<a href="http://www.wiris.com/editor/demo/en/developers#output-formats" target="_blank" rel="noopener">http://www.wiris.com/editor/demo/en/developers#output-formats</a></p>
<p>在线转换地址2：<a href="https://latex.91maths.com/" target="_blank" rel="noopener">https://latex.91maths.com/</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>数学公式</tag>
        <tag>markdown语法</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习之路 一：基础知识</title>
    <url>/2020/02/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%20%E4%B8%80%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>本文适合有基础c、c++语言知识的人学习，同时也可当作python工具书查阅。</p>
<h2 id="前言">前言</h2>
<ol>
<li>
<p>这里选择的是最新版 Python3<br>
安装教程这里推荐：<a href="http://www.runoob.com/python3/python3-install.html" target="_blank" rel="noopener">http://www.runoob.com/python3/python3-install.html</a><br>
win下载地址：<a href="https://www.python.org/downloads/windows" target="_blank" rel="noopener">https://www.python.org/downloads/windows</a><br>
Linux下载地址：<a href="https://www.python.org/downloads/source" target="_blank" rel="noopener">https://www.python.org/downloads/source</a></p>
</li>
<li>
<p>可视化开发工具IDE：<a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/download/</a></p>
</li>
<li>
<p><strong>因国内pip速度较慢，安装完python后建议改为国内清华大学镜像源，以下：</strong></p>
<ul>
<li>
<p>临时使用<br>
<code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 模块名字</code><a id="more"></a></p>
</li>
<li>
<p>设为默认<br>
升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置：<br>
<code>pip install -U pip</code> 假如这个命令出了问题，使用以下命令 <code>easy_install --upgrade pip</code><br>
<code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
</li>
</ul>
</li>
<li>
<p>指定目录 pip下载及离线安装包</p>
<ul>
<li>将pip安装的包导出至requirements文件列表<br>
cd进入想要下载的目录。<br>
<code>pip freeze &gt; requirements.txt</code></li>
<li>批量下载pip包<br>
<code>pip download -d d:\0\package -r requirements.txt</code></li>
<li>pip批量安装包及通过列表文件安装（先cd进入requirements所在目录）<br>
<code>pip install -r requirements.txt</code></li>
</ul>
</li>
</ol>
<h2 id="1-1基础语法">1.1基础语法</h2>
<h3 id="1-1-1-输出">1.1.1 输出</h3>
<p>打印 <code>print (&quot;Hello, Python!&quot;)</code><br>
print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号<code>,</code>。<br>
不换行输出 <code>print('*', end=' ')</code>。</p>
<h3 id="1-1-2-字符串转义">1.1.2 字符串转义</h3>
<p>特殊字符会使用反斜杠<code>\</code>来转义。比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以\表示的字符就是\<br>
<code>print('Isn\'t, they said.')</code><br>
如果不希望前置了 \ 的字符转义成特殊字符，而是使用<em>原始字符串</em>方式，在引号前添加 r 即可。<br>
<code>print(r'C:\软件\python')</code><br>
用三重引号可以跨行连续输入。<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>或<code>'''...'''</code><br>
字符串可以用 + 进行连接（粘到一起），也可以用 * 进行重复:<code>3 * 'io' + ' so easy'</code></p>
<h3 id="1-1-3-脚本式编程">1.1.3 脚本式编程</h3>
<p>Python 文件将以 <code>.py</code> 为扩展名。<br>
在linux和mac上面编程时，已经设置了PATH变量，头文件加入<code>#!/usr/bin/python</code>，可以直接执行。</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span>
<span class="hljs-comment"># -*- coding: utf-8 -*-</span>
<span class="hljs-keyword">print</span> (<span class="hljs-string">"Hello, Python!"</span>)</code></pre></div>
<p>这里，假定您的Python解释器在/usr/bin目录中，使用以下命令执行脚本：</p>
<div class="hljs"><pre><code class="hljs py">chmod +x test.py     <span class="hljs-comment"># 脚本文件添加可执行权限</span>
./test.py</code></pre></div>
<h3 id="1-1-4-行和缩进">1.1.4 行和缩进</h3>
<p>Python与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。<br>
缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量(一般是四个空格)，这个必须严格执行。</p>
<h3 id="1-1-5-注释">1.1.5 注释</h3>
<p>python中单行注释采用 # 开头。<br>
python 中多行注释使用三个单引号(’’’)或三个双引号(&quot;&quot;&quot;)。</p>
<h3 id="1-1-6-同一行显示多条语句">1.1.6 同一行显示多条语句</h3>
<p>Python可以在同一行中使用多条语句，语句之间使用分号(;)分割。</p>
<h3 id="1-1-7-多个语句构成代码组">1.1.7 多个语句构成代码组</h3>
<p>缩进相同的一组语句构成一个代码块，我们称之代码组。<br>
像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。<br>
我们将首行及后面的代码组称为一个子句(clause)。<br>
如下实例：</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-keyword">if</span> expression :
   suite
<span class="hljs-keyword">elif</span> expression :  
   suite  
<span class="hljs-keyword">else</span> :  
   suite</code></pre></div>
<h2 id="1-2-变量类型">1.2 变量类型</h2>
<h3 id="1-2-1-变量赋值">1.2.1 变量赋值</h3>
<p>Python 中的变量赋值不需要类型声明。<br>
Python允许你同时为多个变量赋值。例如：<br>
<code>a, b, c = 1, 2, &quot;john&quot;</code></p>
<h3 id="1-2-2-标准数据类型">1.2.2 标准数据类型</h3>
<p>Python 定义了一些标准类型，用于存储各种类型的数据。<br>
Python有五个标准的数据类型：</p>
<ul>
<li>Numbers（数字）</li>
<li>String（字符串）</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Dictionary（字典）</li>
</ul>
<p>bool类型有True和False和None（等于NULL）。</p>
<h3 id="1-2-2-1-Python数字">1.2.2.1 Python数字</h3>
<p>数字数据类型用于存储数值。他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。<br>
当你指定一个值时，Number对象就会被创建：<br>
<code>var1 = 1</code><br>
您也可以使用del语句删除一些对象的引用。del语句的语法是：<br>
<code>del var1[,var2[,var3[....,varN]]]]</code><br>
您可以通过使用del语句删除单个或多个对象的引用。例如：<br>
<code>del var_a, var_b</code><br>
Python支持四种不同的数字类型：</p>
<ul>
<li>int（有符号整型,如<code>0112L</code>,<code>0xDEFL</code>,<code>0x69</code>）# long 类型只在Python2.X版本中。在Python3.X版本中 long 类被 int 替代。</li>
<li>float（浮点型,<code>-32.54e100</code>）</li>
<li>complex（复数,<code>4.53e-7j</code>）</li>
</ul>
<h3 id="1-2-2-2-Python字符串">1.2.2.2 Python字符串</h3>
<p>字符串或串(String)是由数字、字母、下划线组成的一串字符。<br>
python的字串列表有2种取值顺序:</p>
<ul>
<li>从左到右索引默认0开始的，最大范围是字符串长度少1</li>
<li>从右到左索引默认-1开始的，最大范围是字符串开头</li>
</ul>
<p>如果你要实现从字符串中获取一段子字符串的话，可以使用 [头下标:尾下标] 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。<br>
[头下标:尾下标] 获取的子字符串包含头下标的字符，但不包含尾下标的字符。</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">'abcdef'</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>print(<span class="hljs-string">'s[1:5]  '</span>,s[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>print(<span class="hljs-string">'s[-6:-4]  '</span>,s[<span class="hljs-number">-6</span>:<span class="hljs-number">-4</span>])
s[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>]   bcde
s[<span class="hljs-number">-6</span>:<span class="hljs-number">-4</span>]   ab</code></pre></div>
<p>字符串格式化<br>
在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>print(<span class="hljs-string">"My name is %s and weight is %d kg!"</span> % (<span class="hljs-string">'Zara'</span>, <span class="hljs-number">21</span>))
My name <span class="hljs-keyword">is</span> Zara <span class="hljs-keyword">and</span> weight <span class="hljs-keyword">is</span> <span class="hljs-number">21</span> kg!</code></pre></div>
<h3 id="1-2-2-3-Python列表">1.2.2.3 Python列表</h3>
<p>List（列表）相当于c语言中的数组。 是 Python 中使用最频繁的数据类型。<br>
列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。<br>
列表用 <code>[ ]</code> 标识，是 python 最通用的复合数据类型。<br>
列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。<br>
加号 + 是列表连接运算符，星号 * 是重复操作。如下实例：</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>list = [ <span class="hljs-string">'runoob'</span>, <span class="hljs-number">786</span> , <span class="hljs-number">2.23</span>, <span class="hljs-string">'john'</span>, <span class="hljs-number">70.2</span> ]
<span class="hljs-meta">&gt;&gt;&gt; </span>tinylist = [<span class="hljs-number">123</span>, <span class="hljs-string">'john'</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> (<span class="hljs-string">'输出第1个至第三个元素  '</span>, list[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]) 
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> (<span class="hljs-string">'输出从第2个开始至列表末尾的所有元素   '</span>, list[<span class="hljs-number">2</span>:])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> (<span class="hljs-string">'输出列表两次    '</span>, tinylist * <span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> (<span class="hljs-string">'打印组合的列表    '</span>, list + tinylist)
输出第<span class="hljs-number">1</span>个至第三个元素   [<span class="hljs-number">786</span>, <span class="hljs-number">2.23</span>]
输出从第<span class="hljs-number">2</span>个开始至列表末尾的所有元素    [<span class="hljs-number">2.23</span>, <span class="hljs-string">'john'</span>, <span class="hljs-number">70.2</span>]
输出列表两次     [<span class="hljs-number">123</span>, <span class="hljs-string">'john'</span>, <span class="hljs-number">123</span>, <span class="hljs-string">'john'</span>]
打印组合的列表     [<span class="hljs-string">'runoob'</span>, <span class="hljs-number">786</span>, <span class="hljs-number">2.23</span>, <span class="hljs-string">'john'</span>, <span class="hljs-number">70.2</span>, <span class="hljs-number">123</span>, <span class="hljs-string">'john'</span>]</code></pre></div>
<p>每当需要访问最后一个列表元素时，都可使用索引-1，来获取最后一个元素。如<code>list[-1]</code>。<br>
<code>squares = [value**2 for value in range(1,11)]</code>此列表解析生成1-10的平方数存入数组。<br>
<code>list[1]=list[:]</code>可以复制列表。</p>
<h3 id="1-2-2-4-Python-元组">1.2.2.4 Python 元组</h3>
<p>元组是另一个数据类型，类似于 List（列表）。<br>
元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。<br>
<strong>元组是不允许更新的。而列表是允许更新的。</strong></p>
<h3 id="1-2-2-5-Python-字典">1.2.2.5 Python 字典</h3>
<p>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。<br>
两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。<br>
字典用&quot;{ }&quot;标识。字典由索引(key)和它对应的值value组成。</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>dict = &#123;&#125;
<span class="hljs-meta">&gt;&gt;&gt; </span>dict[<span class="hljs-string">'one'</span>] = <span class="hljs-string">"This is one"</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dict[<span class="hljs-number">2</span>] = <span class="hljs-string">"This is two"</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tinydict = &#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'john'</span>,<span class="hljs-string">'code'</span>:<span class="hljs-number">6734</span>, <span class="hljs-string">'dept'</span>: <span class="hljs-string">'sales'</span>&#125;
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> (dict[<span class="hljs-string">'one'</span>])          <span class="hljs-comment"># 输出键为'one' 的值</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> (dict[<span class="hljs-number">2</span>])              <span class="hljs-comment"># 输出键为 2 的值</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> (tinydict)             <span class="hljs-comment"># 输出完整的字典</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> (tinydict.keys())      <span class="hljs-comment"># 输出所有键</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> (tinydict.values())    <span class="hljs-comment"># 输出所有值</span>
This <span class="hljs-keyword">is</span> one
This <span class="hljs-keyword">is</span> two
&#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'john'</span>, <span class="hljs-string">'code'</span>: <span class="hljs-number">6734</span>, <span class="hljs-string">'dept'</span>: <span class="hljs-string">'sales'</span>&#125;
dict_keys([<span class="hljs-string">'name'</span>, <span class="hljs-string">'code'</span>, <span class="hljs-string">'dept'</span>])
dict_values([<span class="hljs-string">'john'</span>, <span class="hljs-number">6734</span>, <span class="hljs-string">'sales'</span>])</code></pre></div>
<ol>
<li>
<p>修改字典中的值<br>
<code>dict['color'] = 'yellow'</code></p>
</li>
<li>
<p>删除键-值对<br>
<code>del dict['color']</code> # 删除键’color’<br>
<code>dict.clear()</code> # 清空字典<br>
<code>del dict</code> # 删除字典</p>
</li>
<li>
<p>遍历字典</p>
 <div class="hljs"><pre><code class="hljs py"><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> dict.items():
  print(<span class="hljs-string">"\nKey: "</span> + key)
  print(<span class="hljs-string">"Value: "</span> + value)</code></pre></div>
</li>
</ol>
<h3 id="1-2-3-Python数据类型转换">1.2.3 Python数据类型转换</h3>
<p>和c语言一样。当我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。<br>
<code>float(2)</code></p>
<h3 id="1-2-4-如何查看模块及其方法的使用和它们的源码">1.2.4 如何查看模块及其方法的使用和它们的源码</h3>
<ol>
<li>进入cmd或者终端，python交互模式。</li>
<li><code>import 模块名</code>  # 导入模块</li>
<li><code>dir(模块名)</code> # 查看模块拥有的方法</li>
<li><code>help(模块名)</code> # 查看模块介绍及其所含方法、拉到最后file后面查看源码路径</li>
<li><code>help(方法名)</code> # 查看方法的内置帮助、用法</li>
</ol>
<h2 id="1-3-运算符">1.3 运算符</h2>
<p><code>+、-、*、/、%</code>和c语言一样<br>
<code>**</code>是幂，<code>2**3=8</code><br>
<code>//</code>是取整除,<code>9//2=4</code><br>
比较运算符和c语言一样<br>
赋值运算符和c语言一样，多了<code>**=</code>,<code>//=</code><br>
位运算符和c语言一样<br>
逻辑运算符:<code>and</code>等同于c语言中的<code>&amp;&amp;</code>，<code>or</code>等于c语言中的<code>||</code>，<code>not</code>等于c语言中的<code>!</code></p>
<h3 id="1-3-1-成员运算符">1.3.1 成员运算符</h3>
<p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p>
<ul>
<li>in<br>
如果在指定的序列中找到值返回 True，否则返回 False。例子：x in y , 如果 x 在 y 序列中返回 True。</li>
<li>not in<br>
如果在指定的序列中没有找到值返回 True，否则返回 False。例子：x not in y , 如果 x 不在 y 序列中返回 True。</li>
</ul>
<h3 id="1-3-2-身份运算符">1.3.2 身份运算符</h3>
<p>身份运算符用于比较两个对象的存储单元.</p>
<ul>
<li>is<br>
is 是判断两个标识符是不是引用自一个对象。例子：x is y, 类似 id(x) == id(y)</li>
<li>is not<br>
is not 是判断两个标识符是不是引用自不同对象。例子：x is not y ， 类似 id(a) != id(b)</li>
</ul>
<h2 id="1-4-条件语句">1.4 条件语句</h2>
<p><code>if</code>等用于c语言中<code>if</code>，<code>else</code>等同于c语言中<code>else</code>，<code>elif</code>等同于c语言中<code>else if</code><br>
Python程序语言指定任何非0和非空（null）值为True，0 或者 null为False。<br>
Python 编程中 if 语句用于控制程序的执行，基本形式为：</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-keyword">if</span> 判断条件<span class="hljs-number">1</span>:
    执行语句<span class="hljs-number">1</span>……
<span class="hljs-keyword">elif</span> 判断条件<span class="hljs-number">2</span>:
    执行语句<span class="hljs-number">2</span>……
<span class="hljs-keyword">elif</span> 判断条件<span class="hljs-number">3</span>:
    执行语句<span class="hljs-number">3</span>……
<span class="hljs-keyword">else</span>:
    执行语句<span class="hljs-number">4</span>……</code></pre></div>
<h2 id="1-5-循环语句">1.5 循环语句</h2>
<p>有while，for循环，循环控制语句有break，continue，pass。</p>
<h3 id="1-5-1-while">1.5.1 while</h3>
<p>while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。其基本形式为：</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-keyword">while</span> 判断条件(condition)：
    执行语句(statements)……</code></pre></div>
<p>例子：</p>
<div class="hljs"><pre><code class="hljs py">pets = [<span class="hljs-string">'dog'</span>, <span class="hljs-string">'cat'</span>, <span class="hljs-string">'dog'</span>, <span class="hljs-string">'goldfish'</span>, <span class="hljs-string">'cat'</span>, <span class="hljs-string">'rabbit'</span>, <span class="hljs-string">'cat'</span>]
<span class="hljs-keyword">while</span> <span class="hljs-string">'cat'</span> <span class="hljs-keyword">in</span> pets:
    pets.remove(<span class="hljs-string">'cat'</span>)
print(pets)</code></pre></div>
<h3 id="1-5-2-for">1.5.2 for</h3>
<p>for循环的语法格式如下：</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-keyword">for</span> 迭代变量(iterating_var) <span class="hljs-keyword">in</span> 数列、序列(sequence):
   执行语句(statements)</code></pre></div>
<div class="hljs"><pre><code class="hljs py">sum = <span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">101</span>):
    sum = sum + x
print(sum) <span class="hljs-comment">#1-100的和，等于5050</span></code></pre></div>
<div class="hljs"><pre><code class="hljs py">L = [<span class="hljs-string">'Bart'</span>, <span class="hljs-string">'Lisa'</span>, <span class="hljs-string">'Adam'</span>]
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> L:
    print(i)</code></pre></div>
<h3 id="1-5-3-循环控制语句">1.5.3 循环控制语句</h3>
<p>break,continue和c语言相同。pass就是一个空语句,不做任何事情，一般用做占位语句。。</p>
<h2 id="1-6-函数">1.6 函数</h2>
<p>Python内置了很多有用的函数，我们可以直接调用。可以直接从Python的官方网站查看文档：<br>
<a href="https://docs.python.org/zh-cn/3/library/functions.html#abs" target="_blank" rel="noopener">Python的官方网站查看内置函数</a><br>
比如求绝对值的函数abs，只有一个参数。<br>
也可以在交互式命令行通过help(abs)查看abs函数的帮助信息。</p>
<h3 id="1-6-1-定义函数">1.6.1 定义函数</h3>
<p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p>
<ol>
<li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。</li>
<li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li>
<li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li>
<li>函数内容以冒号起始，并且缩进。</li>
<li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li>
</ol>
<p>一般格式如下：</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> 函数名（参数列表）:</span>
    函数体</code></pre></div>
<p>python函数的使用方法基本上和c语言相同，不用指定返回类型，可以返回列表，字典等。</p>
<p>一、python可以给函数指定默认值。<br>
<code>def student(name='Li Ming', age=18):</code><br>
如果函数有一个实参默认值为空，则必须确保为空的实参在最后一个。如：<br>
<code>def get_name(first_name, last_name, middle_name=''):</code></p>
<p>二、将列表传递给函数后，函数就可对其进行修改。在函数中对这个列表所做的任何修改都是永久性的，这让你能够高效地处理大量的数据。<br>
有时候，需要禁止函数修改列表。这时候，可向函数传递列表的副本而不是原件。<br>
<code>def stu(name[:], age[:])</code></p>
<p>三、Python允许函数从调用语句中收集任意数量的实参。<br>
<code>def make_pizza(*toppings):</code><br>
形参名 *toppings 中的星号让Python创建一个名为 toppings 的空元组，并将收到的所有值都封装到这个元组中。<br>
如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。Python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。<br>
<code>def make_pizza(size, *toppings):</code></p>
<p>四、使用任意数量的关键字实参<br>
<code>def build_profile(first, last, **user_info):</code></p>
<h3 id="1-6-2-将函数存储在模块中">1.6.2 将函数存储在模块中</h3>
<p>可以将函数存储在被称为模块的独立文件中，再将模块导入到主程序中。跟c语言差不多，c语言中用头文件，函数文件。</p>
<ol>
<li>导入整个模块<br>
假设<code>xxx.py</code>所在目录内有另外一个<code>pizza.py</code>，添加<code>import pizza</code>语句<br>
导入名为模块 module_name.py 的的整个模块通用语法：<code>import module_name</code><br>
可使用下面的语法来使用其中任何一个函数：<code>module_name.function_name ()</code></li>
<li>导入特定的函数<br>
<code>from module_name import function_0 , function_1 , function_2</code><br>
通过用逗号分隔函数名，可根据需要从模块中导入任意数量的函数。<br>
若使用这种语法，调用函数时就无需使用句点。<code>make_pizza(16, 'pepperoni')</code></li>
<li>使用 as 给函数指定别名<br>
指定别名的通用语法如下：<code>from module_name import function_name as fn</code></li>
<li>使用 as 给模块指定别名<br>
给模块指定别名的通用语法如下：<code>import module_name as mn</code></li>
<li>导入模块中的所有函数<br>
最好只导入你需要用的函数，或者导入整个模块并使用句点表示法。<br>
导入模块 module_name 中的所有函数通用语法如下：<code>from module_name import *</code></li>
</ol>
<p>所有的 import 语句都应放在文件开头，唯一例外的情形是，在文件开头使用了注释来描述整个程序。</p>
<h2 id="1-7-类">1.7 类</h2>
<h3 id="1-7-1-创建类">1.7.1 创建类</h3>
<p>根据约定，在Python中，首字母大写的名称指的是类。</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-string">"""一次模拟小狗的简单尝试"""</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, age)</span>:</span>
        <span class="hljs-string">"""初始化属性name和age"""</span>
        self.name = name
        self.age = age
        self.son = <span class="hljs-string">'zero'</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sit</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-string">"""模拟小狗被命令时蹲下"""</span>
        print(self.name.title() + <span class="hljs-string">" is now sitting."</span>)
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">roll_over</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-string">"""模拟小狗被命令时打滚"""</span>
        print(self.name.title() + <span class="hljs-string">" rolled over!"</span>)
my_dog = Dog(<span class="hljs-string">'willie'</span>, <span class="hljs-number">6</span>)
print(<span class="hljs-string">"My dog's name is "</span> + my_dog.name.title() + <span class="hljs-string">"."</span>)
print(<span class="hljs-string">"My dog is "</span> + str(my_dog.age) + <span class="hljs-string">" years old."</span>)
my_dog.sit()
print(my_dog.son)</code></pre></div>
<p>一 方法 <strong>init</strong>()<br>
可参考c++中的构造函数。</p>
<ol>
<li>我们将方法 <strong>init</strong>() 定义成了包含三个形参： self 、 name 和 age 。在这个方法的定义中，形参 self 必不可少，还必须位于其他形参的前面，相当于c++中的This指针。</li>
<li>因为Python调用这个 <strong>init</strong>() 方法来创建 Dog 实例时，将自动传入实参 self 。每个与类相关联的方法调用都自动传递实参 self ，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。</li>
<li>我们将通过实参向 Dog() 传递名字和年龄； self 会自动传递，因此我们不需要传递它。每当我们根据 Dog 类创建实例时，都只需给最后两个形参（ name 和 age ）提供值。</li>
<li>Dog 类还定义了另外两个方法： sit() 和 roll_over() 。由于这些方法不需要额外的信息，如名字，因此它们只有一个形参 self 。</li>
</ol>
<p>二 根据类创建实例</p>
<ol>
<li>访问属性<br>
要访问实例的属性，可使用句点表示法。<code>my_dog.name</code></li>
<li>调用方法<br>
用句点表示法来调用 Dog 类中定义的任何方法。<code>my_dog.roll_over()</code></li>
<li>给属性指定默认值<br>
可以在方法 <strong>init</strong>()中添加默认值<br>
如果你对某个属性这样做了，就无需包含为它提供初始值的形参。</li>
</ol>
<p>三 修改属性的值</p>
<ol>
<li>直接修改属性的值<br>
<code>my_dog.son='kuku'</code></li>
<li>通过方法修改属性的值<br>
等于在类里面新建一个方法，来修改类里面属性的值<br>
<code>def update_name(self, mile):</code><br>
<code>self.name = mile</code></li>
<li>通过方法对属性的值进行递增<br>
跟2差不多，用方法里面的实参来修改。</li>
</ol>
<h3 id="1-7-2-继承">1.7.2 继承</h3>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElectricCar</span><span class="hljs-params">(Car)</span>:</span>
    <span class="hljs-string">"""电动汽车的独特之处"""</span>
   <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, make, model, year)</span>:</span>
      <span class="hljs-string">"""初始化父类的属性"""</span>
      super().__init__(make, model, year)
      self.battery_size = <span class="hljs-number">70</span></code></pre></div>
<p>一 给子类定义属性和方法<br>
<strong>super() 是一个特殊函数，帮助Python将父类和子类关联起来。这行代码让Python调用ElectricCar 的父类的方法 <strong>init</strong>() ，让 ElectricCar 实例包含父类的所有属性。父类也称为超类（superclass），名称super因此而得名。</strong></p>
<p>二 重写父类的方法</p>
<p>可在子类中定义一个这样的方法，即它与要重写的父类方法同名。这样，Python将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。</p>
<h3 id="1-7-3-导入类">1.7.3 导入类</h3>
<p>Python允许你将类存储在模块中，然后在主程序中导入所需的模块。</p>
<ol>
<li>导入类<br>
<code>from car import Car</code></li>
<li>从一个模块中导入多个类<br>
<code>from car import Car, ElectricCar</code></li>
<li>导入整个模块<br>
你还可以导入整个模块，再使用句点表示法访问需要的类。<code>import car</code></li>
<li>导入模块中的所有类<br>
<code>from module_name import *</code> #不推荐这种方式</li>
<li>在一个模块中导入另一个模块</li>
</ol>
<h3 id="1-7-4-类编码风格">1.7.4 类编码风格</h3>
<p>类名应采用驼峰命名法，即将类名中的每个单词的首字母都大写，而不使用下划线。实例名和模块名都采用小写格式，并在单词之间加上下划线。</p>
<h2 id="1-8-文件和异常">1.8 文件和异常</h2>
<h3 id="1-8-1-从文件中读取数据">1.8.1 从文件中读取数据</h3>
<h4 id="1-8-1-1-读取整个文件">1.8.1.1 读取整个文件</h4>
<p>open() 函数常用形式是接收两个参数：文件名(file)和模式(mode)。<br>
<code>open(file, mode='r')</code><br>
完整的语法格式为：<br>
<code>open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code><br>
参数说明:</p>
<ul>
<li>file: 必需，文件路径（相对或者绝对路径）。</li>
<li>mode: 可选，文件打开模式</li>
<li>buffering: 设置缓冲</li>
<li>encoding: 一般使用utf8</li>
<li>errors: 报错级别</li>
<li>newline: 区分换行符</li>
<li>closefd: 传入的file参数类型</li>
<li>opener:</li>
</ul>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-keyword">with</span> open(<span class="hljs-string">'pi_digits.txt'</span>) <span class="hljs-keyword">as</span> file_object:
   contents = file_object.read()
   print(contents)</code></pre></div>
<p>函数 open() 接受一个参数：要打开的文件的名称。 函数 open()返回一个表示文件的对象。Python将这个对象存储在我们将在后面使用的变量中。<br>
关键字 ==with== 在不再需要访问文件后将其关闭。在这个程序中，我们没有调用 close() ；你只管打开文件，并在需要时使用它，Python自会在合适的时候自动将其关闭。<br>
有了表示 pi_digits.txt 的文件对象后，我们使用方法 read() （前述程序的第2行）读取这个文件的全部内容，并将其作为一个长长的字符串存储在变量 contents 中。这样，通过打印 contents 的值，就可将这个文本文件的全部内容显示出来。<br>
相比于原始文件，该输出唯一不同的地方是末尾多了一个空行。为何会多出这个空行呢？因为 read() 到达文件末尾时返回一个空字符串，而将这个空字符串显示出来时就是一个空行。要删除多出来的空行，可在 print 语句中使用 rstrip() ：<code>print(contents.rstrip())</code></p>
<h4 id="1-8-1-2-文件路径">1.8.1.2 文件路径</h4>
<p>在Linux和OS X中，你可以这样编写代码：<br>
<code>file_path = '/home/ehmatthes/other_files/text_files/filename.txt'</code><br>
<code>with open(file_path) as file_object:</code><br>
Windows系统中，在文件路径中使用反斜杠（ \ ）而不是斜杠（ / ）：<br>
<code>file_path = 'C:\Users\ehmatthes\other_files\text_files\filename.txt'</code><br>
<code>with open(file_path) as file_object:</code></p>
<h4 id="1-8-1-3-逐行读取">1.8.1.3 逐行读取</h4>
<div class="hljs"><pre><code class="hljs py">filename = <span class="hljs-string">'pi_digits.txt'</span>
<span class="hljs-keyword">with</span> open(filename) <span class="hljs-keyword">as</span> file_object:
   <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> file_object:
      print(a.rstrip())</code></pre></div>
<h4 id="1-8-1-4-创建一个包含文件各行内容的列表">1.8.1.4 创建一个包含文件各行内容的列表</h4>
<div class="hljs"><pre><code class="hljs py">filename = <span class="hljs-string">'pi_digits.txt'</span>
<span class="hljs-keyword">with</span> open(filename) <span class="hljs-keyword">as</span> file_object:
   lines = file_object.readlines()
<span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:
   print(line.rstrip())</code></pre></div>
<h4 id="1-8-1-5-使用文件的内容">1.8.1.5 使用文件的内容</h4>
<div class="hljs"><pre><code class="hljs py">filename = <span class="hljs-string">'pi_digits.txt'</span>
<span class="hljs-keyword">with</span> open(filename) <span class="hljs-keyword">as</span> file_object:
   lines = file_object.readlines()
pi_string = <span class="hljs-string">''</span>
<span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:
   pi_string += line.strip()
print(pi_string)</code></pre></div>
<p>输出3.141592653589793238462643383279<br>
在变量 pi_string 存储的字符串中，包含原来位于每行左边的空格，为删除这些空格，可使用 strip() 函数消除空格。<br>
<code>print str.strip( '0' );  # 去除首尾字符 0</code></p>
<h3 id="1-8-2-写入文件">1.8.2 写入文件</h3>
<h4 id="1-8-2-1-写入空文件">1.8.2.1 写入空文件</h4>
<div class="hljs"><pre><code class="hljs py">filename = <span class="hljs-string">'a.txt'</span>
<span class="hljs-keyword">with</span> open(filename, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> file_object:
   file_object.write(<span class="hljs-string">"I love programming.\n"</span>)</code></pre></div>
<p>打开文件时，可指定<strong>读取模式（ ‘r’ ）、写入模式（ ‘w’ ）、附加模式（ ‘a’ ）或让你能够读取和写入文件的模式（ ‘r+’ ）</strong>。如果<br>
你省略了模式实参，Python将以默认的只读模式打开文件。<br>
<strong>Python只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数str() 将其转换为字符串格式。</strong></p>
<h4 id="1-8-2-2-写入多行">1.8.2.2 写入多行</h4>
<p>每句后面加上换行符。</p>
<h3 id="1-8-3-异常">1.8.3 异常</h3>
<p>Python使用被称为异常的特殊对象来管理程序执行期间发生的错误。每当发生错误时，它都会创建一个异常对象。如果你编写了处理该异常的代码，程序将继续运行；如果你未对异常进行处理，程序将停止，并显示一个traceback，其中包含有关异常的报告。<br>
异常是使用 try-except 代码块处理的。 try-except 代码块让Python执行指定的操作，同时告诉Python发生异常时怎么办。使用了 try-except 代码块时，即便出现异常，程序也将继续运行：显示你编写的友好的错误消息，而不是令用户迷惑的traceback。</p>
<h4 id="1-8-3-1-使用-try-except-else-代码块">1.8.3.1 使用 try-except-else 代码块</h4>
<div class="hljs"><pre><code class="hljs py">print(<span class="hljs-string">"Give me two numbers, and I'll divide them."</span>)
print(<span class="hljs-string">"Enter 'q' to quit."</span>)
<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
   first_number = input(<span class="hljs-string">"\nFirst number: "</span>)
   <span class="hljs-keyword">if</span> first_number == <span class="hljs-string">'q'</span>:
     <span class="hljs-keyword">break</span>
   second_number = input(<span class="hljs-string">"Second number: "</span>)
   <span class="hljs-keyword">try</span>:
      answer = int(first_number) / int(second_number)
   <span class="hljs-keyword">except</span> ZeroDivisionError:
      print(<span class="hljs-string">"You can't divide by 0!"</span>)
   <span class="hljs-keyword">else</span>:
      print(answer)</code></pre></div>
<p>当你认为可能发生了错误时，可编写一个 try-except 代码块来处理可能引发的异常。<br>
通过将可能引发错误的代码放在 try-except 代码块中，可提高这个程序抵御错误的能力。这个示例还包含一个 else 代码块；依赖于 try 代码块成功执行的代码都应放到 else 代码块中。<br>
try-except-else 代码块的工作原理大致如下：<strong>Python尝试执行 try 代码块中的代码；只有可能引发异常的代码才需要放在 try 语句中。有时候，有一些仅在 try 代码块成功执行时才需要运行的代码；这些代码应放在 else 代码块中。 except 代码块告诉Python，如果它尝试运行 try 代码块中的代码时引发了指定的异常，该怎么办。</strong></p>
<h4 id="1-8-3-2-分析多个文本">1.8.3.2 分析多个文本</h4>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count_words</span><span class="hljs-params">(filename)</span>:</span>
   <span class="hljs-string">"""计算一个文件大致包含多少个单词"""</span>
   <span class="hljs-keyword">try</span>:
      <span class="hljs-keyword">with</span> open(filename) <span class="hljs-keyword">as</span> f_obj:
         contents = f_obj.read()
   <span class="hljs-keyword">except</span> FileNotFoundError:
      print(<span class="hljs-string">"Sorry, the file "</span> + filename + <span class="hljs-string">" does not exist."</span>)
   <span class="hljs-keyword">else</span>:
      <span class="hljs-comment"># 计算文件大致包含多少个单词</span>
      words = contents.split()
      num_words = len(words)
      print(<span class="hljs-string">"The file "</span> + filename + <span class="hljs-string">" has about "</span> + str(num_words) + <span class="hljs-string">" words."</span>)

filenames = [<span class="hljs-string">'0.txt'</span>, <span class="hljs-string">'1.txt'</span>, <span class="hljs-string">'2.txt'</span>, <span class="hljs-string">'3.txt'</span>]
<span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:
   count_words(filename)</code></pre></div>
<p>如果你希望失败的时候不提示用户，可以在 except xxxError 后面添加一句pass。</p>
<h3 id="1-8-4-存储数据">1.8.4 存储数据</h3>
<p>模块 json 让你能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据。还可以使用 json 在Python程序之间分享数据。更重要的是，JSON数据格式并非Python专用的，这让你能够将以JSON格式存储的数据与使用其他编程语言的人分享。</p>
<h4 id="1-8-4-1-使用-json-dump-和-json-load-保存和读取用户生成的数据">1.8.4.1 使用 json.dump() 和 json.load() 保存和读取用户生成的数据</h4>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-keyword">import</span> json
<span class="hljs-comment"># 如果以前存储了用户名，就加载它</span>
<span class="hljs-comment"># 否则，就提示用户输入用户名并存储它</span>
filename = <span class="hljs-string">'username.json'</span>
<span class="hljs-keyword">try</span>:
   <span class="hljs-keyword">with</span> open(filename) <span class="hljs-keyword">as</span> f_obj:
      username = json.load(f_obj)
<span class="hljs-keyword">except</span> FileNotFoundError:
   username = input(<span class="hljs-string">"What is your name? "</span>)
   <span class="hljs-keyword">with</span> open(filename, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f_obj:
      json.dump(username, f_obj)
      print(<span class="hljs-string">"We'll remember you when you come back, "</span> + username + <span class="hljs-string">"!"</span>)
<span class="hljs-keyword">else</span>:
   print(<span class="hljs-string">"Welcome back, "</span> + username + <span class="hljs-string">"!"</span>)</code></pre></div>
<p>先导入模块json，通过方法json.dump() 和 json.load()来保存用户名。<br>
上面的程序，如果第一次执行，保存用户名到username，第二次执行则显示欢迎回来。</p>
<h4 id="1-8-4-2-重构">1.8.4.2 重构</h4>
<p>有时候，我们要保证高内聚，低耦合，需要将各个模块代码分为一系列完成具体工作的函数，这样的过程称为重构。<br>
下面我们来重构上一节的代码：</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-keyword">import</span> json
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_stored_username</span><span class="hljs-params">()</span>:</span>
   <span class="hljs-string">"""如果存储了用户名，就获取它"""</span>
   filename = <span class="hljs-string">'username.json'</span>
   <span class="hljs-keyword">try</span>:
      <span class="hljs-keyword">with</span> open(filename) <span class="hljs-keyword">as</span> f_obj:
         username = json.load(f_obj)
   <span class="hljs-keyword">except</span> FileNotFoundError:
      <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>
   <span class="hljs-keyword">else</span>:
      <span class="hljs-keyword">return</span> username

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_new_username</span><span class="hljs-params">()</span>:</span>
   <span class="hljs-string">"""提示用户输入用户名"""</span>
   username = input(<span class="hljs-string">"What is your name? "</span>)
   filename = <span class="hljs-string">'username.json'</span>
   <span class="hljs-keyword">with</span> open(filename, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f_obj:
      json.dump(username, f_obj)
   <span class="hljs-keyword">return</span> username

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet_user</span><span class="hljs-params">()</span>:</span>
   <span class="hljs-string">"""问候用户，并指出其名字"""</span>
   username = get_stored_username()
   <span class="hljs-keyword">if</span> username:
      print(<span class="hljs-string">"Welcome back, "</span> + username + <span class="hljs-string">"!"</span>)
   <span class="hljs-keyword">else</span>:
      username = get_new_username()
      print(<span class="hljs-string">"We'll remember you when you come back, "</span> + username + <span class="hljs-string">"!"</span>)

greet_user()</code></pre></div>
<p>在这个最终版本中，每个函数都执行单一而清晰的任务。要编写出清晰而易于维护和扩展的代码，划分工作必不可少。</p>
<h2 id="1-9-测试代码">1.9 测试代码</h2>
<p>这章中我们学习如何使用Python模块 unittest 中的工具来测试代码。</p>
<h3 id="1-9-1-测试函数">1.9.1 测试函数</h3>
<h4 id="1-9-1-1-单元测试和测试用例">1.9.1.1 单元测试和测试用例</h4>
<p>Python标准库中的模块 unittest 提供了代码测试工具。单元测试用于核实函数的某个方面没有问题；测试用例是一组单元测试，这些单元测试一起核实函数在各种情形下的行为都符合要求。良好的测试用例考虑到了函数可能收到的各种输入，包含针对所有这些情形的测试。全覆盖式测试用例包含一整套单元测试，涵盖了各种可能的函数使用方式。对于大型项目，要实现全覆盖可能很难。通常，最初只要针对代码的重要行为编写测试即可，等项目被广泛使用时再考虑全覆盖。</p>
<h4 id="1-9-1-2-如何测试">1.9.1.2 如何测试</h4>
<p>要为函数编写测试用例，可先导入模块 unittest 以及要测试的函数，再创建一个继承 unittest.TestCase 的类，并编写一系列方法对函数行为的不同方面进行测试。<br>
下面是一个只包含一个方法的测试用例，它检查函数 get_formatted_name() 在给定名和姓时能否正确地工作：</p>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-comment">#文件名name_function.py</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_formatted_name</span><span class="hljs-params">(first, last, middle=<span class="hljs-string">''</span>)</span>:</span>
    <span class="hljs-string">"""生成整洁的姓名"""</span>
    <span class="hljs-keyword">if</span> middle:
        full_name = first + <span class="hljs-string">' '</span> + middle + <span class="hljs-string">' '</span> + last
    <span class="hljs-keyword">else</span>:
        full_name = first + <span class="hljs-string">' '</span> + last
    <span class="hljs-keyword">return</span> full_name.title()</code></pre></div>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-keyword">import</span> unittest
<span class="hljs-keyword">from</span> name_function <span class="hljs-keyword">import</span> get_formatted_name
<span class="hljs-comment">#文件名test_name_ function.py</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NamesTestCase</span><span class="hljs-params">(unittest.TestCase)</span>:</span>
    <span class="hljs-string">"""测试name_function.py"""</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_first_last_name</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-string">"""能够正确地处理像Janis Joplin这样的姓名吗？"""</span>
        formatted_name = get_formatted_name(<span class="hljs-string">'janis'</span>, <span class="hljs-string">'joplin'</span>)
        self.assertEqual(formatted_name, <span class="hljs-string">'Janis Joplin'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_first_last_middle_name</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-string">"""能够正确地处理像Wolfgang Amadeus Mozart这样的姓名吗？"""</span>
        formatted_name = get_formatted_name(<span class="hljs-string">'wolfgang'</span>, <span class="hljs-string">'mozart'</span>, <span class="hljs-string">'amadeus'</span>)
        self.assertEqual(formatted_name, <span class="hljs-string">'Wolfgang Amadeus Mozart'</span>)

unittest.main()</code></pre></div>
<p>首先，我们导入了模块 unittest 和要测试的函数 get_formatted_ name() 。我们创建了一个名为 NamesTestCase（名字随便） 的类，用于包含一系列针对 get_formatted_name() 的单元测试。这个类必须继承unittest.TestCase 类，这样Python才知道如何运行你编写的测试。<br>
我们运行 test_name_function.py 时，所有以 test_ 打头的方法都将自动运行。<br>
在这个方法中，我们调用了要测试的函数，并存储了要测试的返回值。<br>
最后我们使用了 unittest 类最有用的功能之一：一个断言方法。断言方法用来核实得到的结果是否与期望的结果一致。<br>
我们调用 <strong>unittest 的方法 assertEqual()</strong> ，并向它传递 formatted_name 和 ‘Janis Joplin’ 。代码行 <code>self.assertEqual(formatted_name, 'Janis Joplin')</code> 的意思是说：“将 formatted_name 的值同字符串 ‘Janis Joplin’ 进行比较，如果它们相等，就万事大吉，如果它们不相等，跟我说一声！”</p>
<h3 id="1-9-2-测试类">1.9.2 测试类</h3>
<h4 id="1-9-2-1-各种断言方法">1.9.2.1 各种断言方法</h4>
<p>Python在 unittest.TestCase 类中提供了很多断言方法。如下：</p>
<table>
<thead>
<tr>
<th>方 法</th>
<th>用 途</th>
</tr>
</thead>
<tbody>
<tr>
<td>assertEqual(a, b)</td>
<td>核实 a == b</td>
</tr>
<tr>
<td>assertNotEqual(a, b)</td>
<td>核实 a != b</td>
</tr>
<tr>
<td>assertTrue(x)</td>
<td>核实 x 为 True</td>
</tr>
<tr>
<td>assertFalse(x)</td>
<td>核实 x 为 False</td>
</tr>
<tr>
<td>assertIn( item , list )</td>
<td>核实 item 在 list 中</td>
</tr>
<tr>
<td>assertNotIn( item , list )</td>
<td>核实 item 不在 list 中</td>
</tr>
</tbody>
</table>
<h4 id="1-9-2-2-方法-setUp">1.9.2.2 方法 setUp()</h4>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnonymousSurvey</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-string">"""收集匿名调查问卷的答案"""</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, question)</span>:</span>
        <span class="hljs-string">"""存储一个问题，并为存储答案做准备"""</span>
        self.question = question
        self.responses = []

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_question</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-string">"""显示调查问卷"""</span>
        print(question)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">store_response</span><span class="hljs-params">(self, new_response)</span>:</span>
        <span class="hljs-string">"""存储单份调查答卷"""</span>
        self.responses.append(new_response)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_results</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-string">"""显示收集到的所有答卷"""</span>
        print(<span class="hljs-string">"Survey results:"</span>)
        <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> responses:
            print(<span class="hljs-string">'- '</span> + response)</code></pre></div>
<div class="hljs"><pre><code class="hljs py"><span class="hljs-keyword">import</span> unittest
<span class="hljs-keyword">from</span> survey <span class="hljs-keyword">import</span> AnonymousSurvey
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAnonymousSurvey</span><span class="hljs-params">(unittest.TestCase)</span>:</span>
    <span class="hljs-string">"""针对AnonymousSurvey类的测试"""</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span>
    <span class="hljs-comment"># 创建一个调查对象和一组答案，供使用的测试方法使用</span>
        question = <span class="hljs-string">"What language did you first learn to speak?"</span>
        self.my_survey = AnonymousSurvey(question)
        self.responses = [<span class="hljs-string">'English'</span>, <span class="hljs-string">'Spanish'</span>, <span class="hljs-string">'Mandarin'</span>]

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_store_single_response</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-string">"""测试单个答案会被妥善地存储"""</span>
        self.my_survey.store_response(self.responses[<span class="hljs-number">0</span>])
        self.assertIn(self.responses[<span class="hljs-number">0</span>], self.my_survey.responses)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_store_three_responses</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-string">"""测试三个答案会被妥善地存储"""</span>
        <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> self.responses:
            self.my_survey.store_response(response)
        <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> self.responses:
            self.assertIn(response, self.my_survey.responses)

unittest.main()</code></pre></div>
<p>使用 setUp() 来创建一个调查对象和一组答案，供方法 <code>test_store_single_response()</code> 和 <code>test_store_three_responses()</code> 使用。<br>
方法 setUp() 做了两件事情：创建一个调查对象（见方法setUp()第4行）；创建一个答案列表（见方法setUp()第5行）。<br>
这让两个测试方法都更简单，因为它们都不用创建调查对象和答案。方法 <code>test_store_three_response()</code> 核实 self.responses 中的第一个答案—— self.responses[0] ——被妥善地存储，而方法 <code>test_store_three_response()</code> 核实 self.responses 中的全部三个答案都被妥善地存储。</p>
]]></content>
      <categories>
        <category>python</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构第九章 排序</title>
    <url>/2020/02/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC9%E7%AB%A0%20%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p><strong>排序的定义：</strong><br>
<strong>假设含有n个记录的序列为{$r_1$，$r_2$，…，$r_n$}，其相应的关键字分别为{$k_1$，$k_2$，…，$k_n$}，需确定1，2，……，n的一种排列$p_1$，$p_2$，……，$p_n$，使其相应的关键字满足$k_{p1}$≤$k_{p2}$≤······≤$k_{pn}$（非递减或非递增）关系，即使得序列成为一个按关键字有序的序列{$r_{p1}$，$r_{p2}$，······，$r_{pn}$}，这样的操作就称为排序。</strong></p>
<a id="more"></a>
<h2 id="9-1-9-2-排序的基本概念与分类">9.1-9.2 排序的基本概念与分类</h2>
<p>我们在排序问题中，通常将数据元素称为记录。显然我们输入的是一个记录集合，输出的也是一个记录集合，所以说，可以将排序看成是线性表的一种操作。</p>
<p>排序的依据是关键字之间的大小关系，那么，对同一个记录集合，针对不同的关键字进行排序，可以得到不同序列。</p>
<p>这里关键字k可以是记录r的主关键字，也可以是次关键字，甚至是若干数据项的组合。</p>
<h3 id="9-2-1-排序的稳定性">9.2.1 排序的稳定性</h3>
<p>假设$k_i=k_y(1≤i≤n，1≤j≤n，i≠j)$，且在排序前的序列中$r_i$领先于$r_j$（即$i&lt;j$）。如果排序后$r_i$仍领先于$r_j$，则称所用的排序方法是稳定的；反之，若可能使得排序后的序列中$r_j$领先$r_i$，则称所用的排序方法是不稳定的。</p>
<h3 id="9-2-2-内排序与外排序">9.2.2 内排序与外排序</h3>
<p>根据在排序过程中待排序的记录是否全部被放置在内存中，排序分为：内排序和外排序。</p>
<p>**内排序是在排序整个过程中，待排序的所有记录全部被放置在内存中。外排序是由于排序的记录个数太多，不能同时放置在内存，整个排序过程需要在内外存之间多次交换数据才能进行。**我们这里主要就介绍内排序的多种方法。</p>
<p>对于内排序来说，排序算法的性能主要是受3个方面影响：</p>
<ol>
<li><strong>时间性能</strong><br>
排序是数据处理中经常执行的一种操作，往往属于系统的核心部分，因此排序算法的时间开销是衡量其好坏的最重要的标志。在内排序中，主要进行两种操作：比较和移动。比较指关键字之间的比较，这是要做排序最起码的操作。移动指记录从一个位置移动到另一个位置，事实上，移动可以通过改变记录的存储方式来予以避免（这个我们在讲解具体的算法时再谈）。总之，高效率的内排序算法应该是具有尽可能少的关键字比较次数和尽可能少的记录移动次数。</li>
<li><strong>辅助空间</strong><br>
评价排序算法的另一个主要标准是执行算法所需要的辅助存储空间。辅助存储空间是除了存放待排序所占用的存储空间之外，执行算法所需要的其他存储空间。</li>
<li><strong>算法的复杂性</strong><br>
注意这里指的是算法本身的复杂度，而不是指算法的时间复杂度。显然算法过于复杂也会影响排序的性能。</li>
</ol>
<p>根据排序过程中借助的主要操作，我们把<strong>内排序分为：插入排序、交换排序、选择排序和归并排序。</strong></p>
<p>本章一共要讲解七种排序的算法，按照算法的复杂度分为两大类，冒泡排序、简单选择排序和直接插入排序属于简单算法，而希尔排序、堆排序、归并排序、快速排序属于改进算法。</p>
<h3 id="9-2-3-排序用到的结构与函数">9.2.3 排序用到的结构与函数</h3>
<p>为了讲清楚排序算法的代码，我先提供一个用于排序用的顺序表结构，此结构也将用于之后我们要讲的所有排序算法。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXSIZE 10  <span class="hljs-comment">/* 用于要排序数组个数最大值，可根据需要修改 */</span></span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>
&#123;</span>
    <span class="hljs-keyword">int</span> r[MAXSIZE + <span class="hljs-number">1</span>];    <span class="hljs-comment">/* 用于存储要排序数组，r[0]用作哨兵或临时变量 */</span>
    <span class="hljs-keyword">int</span> length;            <span class="hljs-comment">/* 用于记录顺序表的长度 */</span>
&#125;SqList;</code></pre></div>
<p>另外，由于排序最最常用到的操作是数组两元素的交换，我们将它写成函数，在之后的讲解中会大量的用到。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 交换L中数组r的下标为i和j的值 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> temp = L-&gt;r[i];
    L-&gt;r[i] = L-&gt;r[j];
    L-&gt;r[j] = temp;
&#125;</code></pre></div>
<h2 id="9-3-冒泡排序">9.3 冒泡排序</h2>
<h3 id="9-3-1-最简单排序实现">9.3.1 最简单排序实现</h3>
<p>**冒泡排序（Bubble Sort）一种交换排序，它的基本思想是：两两比较相邻记录的关键字，如果反序则交换，直到没有反序的记录为止。**冒泡的实现在细节上可以有很多种变化，我们将分别就3种不同的冒泡实现代码，来讲解冒泡排序的思想。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作交换排序（冒泡排序初级版） */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BubbleSort0</span><span class="hljs-params">(SqList *L)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i, j;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; L-&gt;length; i++)
    &#123;
        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt;= L-&gt;length; j++)
        &#123;
            <span class="hljs-keyword">if</span> (L-&gt;r[i] &gt; L-&gt;r[j])
            &#123;
                swap(L, i, j);<span class="hljs-comment">/* 交换L-&gt;r[i]与L-&gt;r[j]的值 */</span>
            &#125;
        &#125;
    &#125;
&#125;</code></pre></div>
<h3 id="9-3-2-冒泡排序算法">9.3.2 冒泡排序算法</h3>
<p>我们来看看正宗的冒泡算法。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作冒泡排序 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BubbleSort</span><span class="hljs-params">(SqList *L)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i, j;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; L-&gt;length; i++)
    &#123;
        <span class="hljs-keyword">for</span> (j = L-&gt;length - <span class="hljs-number">1</span>; j &gt;= i; j--)  <span class="hljs-comment">/* 注意j是从后往前循环 */</span>
        &#123;
            <span class="hljs-keyword">if</span> (L-&gt;r[j] &gt; L-&gt;r[j + <span class="hljs-number">1</span>]) <span class="hljs-comment">/* 若前者大于后者（注意这里与上一算法的差异）*/</span>
            &#123;
                swap(L, j, j + <span class="hljs-number">1</span>);<span class="hljs-comment">/* 交换L-&gt;r[j]与L-&gt;r[j+1]的值 */</span>
            &#125;
        &#125;
    &#125;
&#125;</code></pre></div>
<h3 id="9-3-3-冒泡排序优化">9.3.3 冒泡排序优化</h3>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作改进冒泡算法 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BubbleSort2</span><span class="hljs-params">(SqList *L)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i, j;
    Status flag = TRUE;            <span class="hljs-comment">/* flag用来作为标记 */</span>
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; L-&gt;length &amp;&amp; flag; i++) <span class="hljs-comment">/* 若flag为true说明有过数据交换，否则停止循环 */</span>
    &#123;
        flag = FALSE;                <span class="hljs-comment">/* 初始为False */</span>
        <span class="hljs-keyword">for</span> (j = L-&gt;length - <span class="hljs-number">1</span>; j &gt;= i; j--)
        &#123;
            <span class="hljs-keyword">if</span> (L-&gt;r[j] &gt; L-&gt;r[j + <span class="hljs-number">1</span>])
            &#123;
                swap(L, j, j + <span class="hljs-number">1</span>);    <span class="hljs-comment">/* 交换L-&gt;r[j]与L-&gt;r[j+1]的值 */</span>
                flag = TRUE;        <span class="hljs-comment">/* 如果有数据交换，则flag为true */</span>
            &#125;
        &#125;
    &#125;
&#125;</code></pre></div>
<p>代码改动的关键就是在i变量的for循环中，增加了对flag是否为true的判断。</p>
<p>经过这样的改进，冒泡排序在性能上就有了一些提升，可以避免因已经有序的情况下的无意义循环判断。</p>
<h3 id="9-3-4-冒泡排序复杂度分析">9.3.4 冒泡排序复杂度分析</h3>
<p>分析一下它的时间复杂度。当最好的情况，也就是要排序的表本身就是有序的，那么我们比较次数，根据最后改进的代码，可以推断出就是n-1次的比较，没有数据交换，时间复杂度为 O（n）。当最坏的情况，即待排序表是逆序的情况，此时需要比较$\sum_{i=2}^n(i-1)=1+2+3+…+（n-1）=\frac{n(n-1)}2$次，并作等数量级的记录移动。因此，时间复杂度为O（n²）。</p>
<h2 id="9-4-简单选择排序">9.4 简单选择排序</h2>
<p>冒泡排序的思想就是不断地在交换，通过交换完成最终的排序，这和做股票短线频繁操作的人是类似的。我们可不可以像只有在时机非常明确到来时才出手的股票高手一样，也就是在排序时找到合适的关键字再做交换，并且只移动一次就完成相应关键字的排序定位工作呢？这就是选择排序法的初步思想。</p>
<p>选择排序的基本思想是每一趟在<code>n-i+1（i=1,2,…,n-1）</code>个记录中选取关键字最小的记录作为有序序列的第i个记录。我们这里先介绍的是简单选择排序法。</p>
<h3 id="9-4-1-简单选择排序算法">9.4.1 简单选择排序算法</h3>
<p><strong>简单选择排序法（Simple Selection Sort）就是通过n-i次关键字间的比较，从n-i+1个记录中选出关键字最小的记录，并和第i（1≤i≤n）个记录交换之。</strong></p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作简单选择排序 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(SqList *L)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i, j, <span class="hljs-built_in">min</span>;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; L-&gt;length; i++)
    &#123;
        <span class="hljs-built_in">min</span> = i;                        <span class="hljs-comment">/* 将当前下标定义为最小值下标 */</span>
        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt;= L-&gt;length; j++)<span class="hljs-comment">/* 循环之后的数据 */</span>
        &#123;
            <span class="hljs-keyword">if</span> (L-&gt;r[<span class="hljs-built_in">min</span>] &gt; L-&gt;r[j])    <span class="hljs-comment">/* 如果有小于当前最小值的关键字 */</span>
                <span class="hljs-built_in">min</span> = j;                <span class="hljs-comment">/* 将此关键字的下标赋值给min */</span>
        &#125;
        <span class="hljs-keyword">if</span> (i != <span class="hljs-built_in">min</span>)                        <span class="hljs-comment">/* 若min不等于i，说明找到最小值，交换 */</span>
            swap(L, i, <span class="hljs-built_in">min</span>);                <span class="hljs-comment">/* 交换L-&gt;r[i]与L-&gt;r[min]的值 */</span>
    &#125;
&#125;</code></pre></div>
<p>简单选择排序会先找到最小值的下标，然后交换。接着迭代循环。</p>
<h3 id="9-4-2-简单选择排序复杂度分析">9.4.2 简单选择排序复杂度分析</h3>
<p>从简单选择排序的过程来看，它最大的特点就是交换移动数据次数相当少，这样也就节约了相应的时间。分析它的时间复杂度发现，无论最好最差的情况，其比较次数都是一样的多，第i趟排序需要进行n-i次关键字的比较，此时需要比较$\sum_{i=1}^{n-1}(n-i)=n-1+n-2+…+1=\frac{n(n-1)}{2}$次。而对于交换次数而言，当最好的时候，交换为0次，最差的时候，也就初始降序时，交换次数为n-1次，基于最终的排序时间是比较与交换的次数总和，因此，总的时间复杂度依然为O（n²）。</p>
<p>应该说，尽管与冒泡排序同为O（n²），但简单选择排序的性能上还是要略优于冒泡排序。</p>
<h2 id="9-5-直接插入排序">9.5 直接插入排序</h2>
<h3 id="9-5-1-直接插入排序算法">9.5.1 直接插入排序算法</h3>
<p><strong>直接插入排序（Straight Insertion Sort）的基本操作是将一个记录插入到已经排好序的有序表中，从而得到一个新的、记录数增1的有序表。</strong></p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作直接插入排序 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertSort</span><span class="hljs-params">(SqList *L)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i, j;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= L-&gt;length; i++)
    &#123;
        <span class="hljs-keyword">if</span> (L-&gt;r[i] &lt; L-&gt;r[i - <span class="hljs-number">1</span>]) <span class="hljs-comment">/* 需将L-&gt;r[i]插入有序子表 */</span>
        &#123;
            L-&gt;r[<span class="hljs-number">0</span>] = L-&gt;r[i]; <span class="hljs-comment">/* L-&gt;r[0]一开始无数值，以待设置哨兵 */</span>
            <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; L-&gt;r[j] &gt; L-&gt;r[<span class="hljs-number">0</span>]; j--)
                L-&gt;r[j + <span class="hljs-number">1</span>] = L-&gt;r[j]; <span class="hljs-comment">/* 记录后移 */</span>
            L-&gt;r[j + <span class="hljs-number">1</span>] = L-&gt;r[<span class="hljs-number">0</span>]; <span class="hljs-comment">/* 插入到正确位置 */</span>
        &#125;
    &#125;
&#125;</code></pre></div>
<h3 id="9-5-2-直接插入排序复杂度分析">9.5.2 直接插入排序复杂度分析</h3>
<p>我们来分析一下这个算法，从空间上来看，它只需要一个记录的辅助空间，因此关键是看它的时间复杂度。</p>
<p>当最好的情况，也就是要排序的表本身就是有序的，比如数列是{2，3，4，5，6}，那么我们比较次数，其实就是代码第7行每个L.r[i]与L.r[i-1]的比较，共比较了$n-1(\sum_{i=2}^{n}1)$次，由于每次都是L.r[i]&gt;L.r[i-1]，因此没有移动的记录，时间复杂度为O(n)。</p>
<p>当最坏的情况，即待排序表是逆序的情况，比如{6，5，4，3，2}，此时需要比较$\sum_{i=2}^{n}(i)=2+3+…+n=\frac{(n+2)(n-1)}{2}$次，而记录的移动次数也达到最大值$\sum_{i=2}^{n}(i+1)=\frac{(n+4)(n-1)}{2}$次。</p>
<p>如果排序记录是随机的，那么根据概率相同的原则，平均比较和移动次数约为$\frac{n^{2}}{4}$次。因此，我们得出直接插入排序法的时间复杂度为O(n²)。从这里也看出，同样的O(n²)时间复杂度，直接插入排序法比冒泡和简单选择排序的性能要好一些。</p>
<h2 id="9-6-希尔排序">9.6 希尔排序</h2>
<h3 id="9-6-1-希尔排序原理">9.6.1 希尔排序原理</h3>
<p>因为直接插入排序在排序表本身有序的情况下，时间复杂度为O(n)。</p>
<p>如果让待排序的记录个数较少呢，我们就可以用直接插入排序很快完成排序工作。很容易想到的就是将原本有大量记录数的记录进行分组。分割成若干个子序列，此时每个子序列待排序的记录个数就比较少了，然后在这些子序列内分别进行直接插入排序，当整个序列都基本有序时，注意只是基本有序时，再对全体记录进行一次直接插入排序。</p>
<p>**所谓的基本有序，就是小的关键字基本在前面，大的基本在后面，不大不小的基本在中间，像{2，1，3，6，4，7，5，8，9}这样可以称为基本有序了。**但像{1，5，9，3，7.8，2，4，6}这样的9在第三位，2在倒数第三位就谈不上基本有序。</p>
<p>因此，我们需要采取跳跃分割的策略：<strong>将相距某个“增量”的记录组成一个子序列，这样才能保证在子序列内分别进行直接插入排序后得到的结果是基本有序而不是局部有序。</strong></p>
<h3 id="9-6-2-希尔排序算法">9.6.2 希尔排序算法</h3>
<p>希尔排序算法代码如下。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作希尔排序 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShellSort</span><span class="hljs-params">(SqList *L)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i, j, k = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">int</span> increment = L-&gt;length;
    <span class="hljs-keyword">do</span>
    &#123;
        increment = increment / <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<span class="hljs-comment">/* 增量序列 */</span>
        <span class="hljs-keyword">for</span> (i = increment + <span class="hljs-number">1</span>; i &lt;= L-&gt;length; i++)
        &#123;
            <span class="hljs-keyword">if</span> (L-&gt;r[i] &lt; L-&gt;r[i - increment])
            &#123;<span class="hljs-comment">/*  需将L-&gt;r[i]插入有序增量子表 */</span>
                L-&gt;r[<span class="hljs-number">0</span>] = L-&gt;r[i]; <span class="hljs-comment">/*  暂存在L-&gt;r[0] */</span>
                <span class="hljs-keyword">for</span> (j = i - increment; j &gt; <span class="hljs-number">0</span> &amp;&amp; L-&gt;r[<span class="hljs-number">0</span>] &lt; L-&gt;r[j]; j -= increment)
                    L-&gt;r[j + increment] = L-&gt;r[j]; <span class="hljs-comment">/*  记录后移，查找插入位置 */</span>
                L-&gt;r[j + increment] = L-&gt;r[<span class="hljs-number">0</span>]; <span class="hljs-comment">/*  插入 */</span>
            &#125;
        &#125;
    &#125;
    <span class="hljs-keyword">while</span> (increment &gt; <span class="hljs-number">1</span>);
&#125;</code></pre></div>
<h3 id="9-6-3-希尔排序复杂度分析">9.6.3 希尔排序复杂度分析</h3>
<p>通过这段代码的剖析，相信大家有些明白，希尔排序的关键并不是随便分组后各自排序，而是将相隔某个“增量”的记录组成一个子序列，实现跳跃式的移动，使得排序的效率提高。</p>
<p>这里“增量”的选取就非常关键了。我们在代码中第7行，是用increment=increment/3+1；的方式选取增量的，可究竟应该选取什么样的增量才是最好，目前还是一个数学难题，迄今为止还没有人找到一种最好的增量序列。不过大量的研究表明，当增量序列为$dlta[k]=2^{t-k+1}-1(0\leq k\leq t\leq [\log_{2}(n+1)] )$时，可以获得不错的效率，其时间复杂度为$O(n^{3/2})$，要好于直接排序的O(n²)。需要注意的是，增量序列的最后一个增量值必须等于1才行。另外由于记录是跳跃式的移动，希尔排序并不是一种稳定的排序算法。</p>
<p>不管怎么说，希尔排序算法的发明，使得我们终于突破了慢速排序的时代（超越了时间复杂度为O(n²)），之后，相应的更为高效的排序算法也就相继出现了。</p>
<h2 id="9-7-堆排序">9.7 堆排序</h2>
<p><strong>堆是具有下列性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆（例如图9-7-2左图所示）；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆</strong>（例如图9-7-2右图所示）。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-7-2.JPG" srcset="/img/loading.gif" alt="9-7-2"></p>
<p>这里需要注意从堆的定义可知，根结点一定是堆中所有结点最大（小）者。较大（小）的结点靠近根结点（但也不绝对，比如右图小顶堆中60、40均小于70，但它们并没有70靠近根结点）。</p>
<p>如果按照层序遍历的方式给结点从1开始编号，则结点之间满足如下关系：<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-7-2.5.JPG" srcset="/img/loading.gif" alt="9-7-2.5"></p>
<p>这里为什么i要小于等于[n/2]呢？相信大家可能都忘记了二叉树的性质5，其实忘记也不奇怪，这个性质在我们讲完之后，就再也没有提到过它。可以说，这个性质仿佛就是在为堆准备的。性质5的第一条就说一棵完全二叉树，如果i=1，则结点i是二叉树的根，无双亲；如果i&gt;1，则其双亲是结点[i/2]。那么对于有n个结点的二叉树而言，它的i值自然就是小于等于[n/2]了。性质5的第二、三条，也是在说明下标i与2i和2i+1的双亲子女关系。如果完全忘记的同学不妨去复习一下。</p>
<p>如果将图9-7-2的大顶堆和小顶堆用层序遍历存入数组，则一定满足上面的关系表达，如图9-7-3所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-7-3.JPG" srcset="/img/loading.gif" alt="9-7-3"></p>
<h3 id="9-7-1-堆排序算法">9.7.1 堆排序算法</h3>
<p>**堆排序（Heap Sort）**就是利用堆（假设利用大顶堆）进行排序的方法。它的基本思想是，<strong>将待排序的序列构造成一个大顶堆。此时，整个序列的最大值就是堆顶的根结点。将它移走（其实就是将其与堆数组的末尾元素交换，此时末尾元素就是最大值），然后将剩余的n-1个序列重新构造成一个堆，这样就会得到n个元素中的次小值。如此反复执行，便能得到一个有序序列了。</strong></p>
<p>相信大家有些明白堆排序的基本思想了，不过要实现它还需要解决两个问题：</p>
<ol>
<li>如何由一个无序序列构建成一个堆？</li>
<li>如果在输出堆顶元素后，调整剩余元素成为一个新的堆？</li>
</ol>
<p>要解释清楚它们，让我们来看代码。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/*  对顺序表L进行堆排序 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">(SqList *L)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i;
    <span class="hljs-keyword">for</span> (i = L-&gt;length / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i--) <span class="hljs-comment">/*  把L中的r构建成一个大根堆 */</span>
        HeapAdjust(L, i, L-&gt;length);

    <span class="hljs-keyword">for</span> (i = L-&gt;length; i &gt; <span class="hljs-number">1</span>; i--)
    &#123;
        swap(L, <span class="hljs-number">1</span>, i); <span class="hljs-comment">/* 将堆顶记录和当前未经排序子序列的最后一个记录交换 */</span>
        HeapAdjust(L, <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>); <span class="hljs-comment">/*  将L-&gt;r[1..i-1]重新调整为大根堆 */</span>
    &#125;
&#125;</code></pre></div>
<p>从代码中也可以看出，整个排序过程分为两个for循环。第一个循环要完成的就是将现在的待排序序列构建成一个大顶堆。第二个循环要完成的就是逐步将每个最大值的根结点与末尾元素交换，并且再调整其成为大顶堆。</p>
<p>现在我们来看关键的 HeapAdjust（堆调整）函数是如何实现的。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 已知L-&gt;r[s..m]中记录的关键字除L-&gt;r[s]之外均满足堆的定义， */</span>
<span class="hljs-comment">/* 本函数调整L-&gt;r[s]的关键字,使L-&gt;r[s..m]成为一个大顶堆 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HeapAdjust</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> m)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> temp, j;
    temp = L-&gt;r[s];
    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">2</span> * s; j &lt;= m; j *= <span class="hljs-number">2</span>) <span class="hljs-comment">/* 沿关键字较大的孩子结点向下筛选 */</span>
    &#123;
        <span class="hljs-keyword">if</span> (j &lt; m &amp;&amp; L-&gt;r[j] &lt; L-&gt;r[j + <span class="hljs-number">1</span>])
            ++j; <span class="hljs-comment">/* j为关键字中较大的记录的下标 */</span>
        <span class="hljs-keyword">if</span> (temp &gt;= L-&gt;r[j])
            <span class="hljs-keyword">break</span>; <span class="hljs-comment">/* rc应插入在位置s上 */</span>
        L-&gt;r[s] = L-&gt;r[j];
        s = j;
    &#125;
    L-&gt;r[s] = temp; <span class="hljs-comment">/* 插入 */</span>
&#125;</code></pre></div>
<p>HeapAdjust函数的作用其实就是构建初始堆。初始堆的构建如下：假设有n个结点，依次检查（n/2）到1的所有结点。假如序号为n/2的结点不是堆，则调整位置，将较大的元素调整到根结点（保证根结点比左右孩子都大）；假如n/2的结点已经是堆，则考虑下面序号为n/2-1的结点…直到最后序号为1的结点。此时，序号为1的结点就是最大的数了。</p>
<h3 id="9-7-2-堆排序复杂度分析">9.7.2 堆排序复杂度分析</h3>
<p>堆排序的效率到底有多高呢？我们来分析一下。</p>
<p>它的运行时间主要是消耗在初始构建堆和在重建堆时的反复筛选上。</p>
<p>在构建堆的过程中，因为我们是完全二叉树从最下层最右边的非终端结点开始构建，将它与其孩子进行比较和若有必要的互换，对于每个非终端结点来说，其实最多进行两次比较和互换操作，因此整个构建堆的时间复杂度为O（n）。</p>
<p>在正式排序时，第i次取堆顶记录重建堆需要用O(㏒i)的时间（完全二叉树的某个结点到根结点的距离为$[\log_{2}i]+1$，并且需要取n-1次堆顶记录，因此，重建堆的时间复杂度为O(n㏒n)。</p>
<p>所以总体来说，堆排序的时间复杂度为O(n㏒n)。由于堆排序对原始记录的排序状态并不敏感，因此它无论是最好、最坏和平均时间复杂度均为O(n㏒n)。这在性能上显然要远远好过于冒泡、简单选择、直接插入的O（n²）的时间复杂度了。</p>
<p>空间复杂度上，它只有一个用来交换的暂存单元，也非常的不错。不过由于记录的比较与交换是跳跃式进行，因此堆排序也是一种不稳定的排序方法。</p>
<p>另外，由于初始构建堆所需的比较次数较多，因此，它并不适合待排序序列个数较少的情况。</p>
<h2 id="9-8-归并排序">9.8 归并排序</h2>
<h3 id="9-8-1-归并排序算法">9.8.1 归并排序算法</h3>
<p>归并”一词的中文含义就是合并、并入的意思，而在数据结构中的定义是将两个或两个以上的有序表组合成一个新的有序表。</p>
<p><strong>归并排序（Merging Sort）<strong>就是利用归并的思想实现的排序方法。它的原理是</strong>假设初始序列含有n个记录，则可以看成是n个有序的子序列，每个子序列的长度为1，然后两两归并，得到[n/2]（[x]表示不小于x的最小整数）个长度为2或1的有序子序列；再两两归并，……，如此重复，直至得到一个长度为n的有序序列为止，这种排序方法称为2路归并排序。</strong></p>
<p>好了，有了对归并排序的初步认识后，我们来看代码。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作归并排序 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">(SqList *L)</span>
</span>&#123;
    MSort(L-&gt;r, L-&gt;r, <span class="hljs-number">1</span>, L-&gt;length);
&#125;</code></pre></div>
<p>一句代码，别奇怪，它只是调用了另一个函数而已。为了与前面的排序算法统一，我们用了同样的参数定义SqList*L，由于我们要讲解的归并排序实现需要用到递归调用，因此我们外封装了一个函数。假设现在要对数组{50，10，90，30，70，40，80，60，20}进行排序，L.length=9，我现来看看MSort的实现。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 递归法 */</span>
<span class="hljs-comment">/* 将SR[s..t]归并排序为TR1[s..t] */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> SR[], <span class="hljs-keyword">int</span> TR1[], <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> m;
    <span class="hljs-keyword">int</span> TR2[MAXSIZE + <span class="hljs-number">1</span>];
    <span class="hljs-keyword">if</span> (s == t)
        TR1[s] = SR[s];
    <span class="hljs-keyword">else</span>
    &#123;
        m = (s + t) / <span class="hljs-number">2</span>;                <span class="hljs-comment">/* 将SR[s..t]平分为SR[s..m]和SR[m+1..t] */</span>
        MSort(SR, TR2, s, m);        <span class="hljs-comment">/* 递归地将SR[s..m]归并为有序的TR2[s..m] */</span>
        MSort(SR, TR2, m + <span class="hljs-number">1</span>, t);    <span class="hljs-comment">/* 递归地将SR[m+1..t]归并为有序的TR2[m+1..t] */</span>
        Merge(TR2, TR1, s, m, t);    <span class="hljs-comment">/* 将TR2[s..m]和TR2[m+1..t]归并到TR1[s..t] */</span>
    &#125;
&#125;</code></pre></div>
<p>可以说，如果对递归函数的运行方式理解比较透的话，MSort 函数还是很好理解的。我们来看看整个数据变换示意图，如图9-8-6所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-8-6.JPG" srcset="/img/loading.gif" alt="9-8-6"></p>
<p>现在我们来看看Merge函数的代码是如何实现的。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 将有序的SR[i..m]和SR[m+1..n]归并为有序的TR[i..n] */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> SR[], <span class="hljs-keyword">int</span> TR[], <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> j, k, l;
    <span class="hljs-keyword">for</span> (j = m + <span class="hljs-number">1</span>, k = i; i &lt;= m &amp;&amp; j &lt;= n; k++)    <span class="hljs-comment">/* 将SR中记录由小到大地并入TR */</span>
    &#123;
        <span class="hljs-keyword">if</span> (SR[i] &lt; SR[j])
            TR[k] = SR[i++];
        <span class="hljs-keyword">else</span>
            TR[k] = SR[j++];
    &#125;
    <span class="hljs-keyword">if</span> (i &lt;= m)
    &#123;
        <span class="hljs-keyword">for</span> (l = <span class="hljs-number">0</span>; l &lt;= m - i; l++)
            TR[k + l] = SR[i + l];        <span class="hljs-comment">/* 将剩余的SR[i..m]复制到TR */</span>
    &#125;
    <span class="hljs-keyword">if</span> (j &lt;= n)
    &#123;
        <span class="hljs-keyword">for</span> (l = <span class="hljs-number">0</span>; l &lt;= n - j; l++)
            TR[k + l] = SR[j + l];        <span class="hljs-comment">/* 将剩余的SR[j..n]复制到TR */</span>
    &#125;
&#125;</code></pre></div>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-8-7.JPG" srcset="/img/loading.gif" alt="9-8-7"><br>
如图9-8-7，函数Merge的作用其实就是将SR数组的下标1和6比较，较小的归并到TR数组；然后SR的6和2比较，较小的归并到TR；然后SR的2和7比较，较小的归并到TR；…；最后SR的5和9比较，归并到TR，大功告成。</p>
<p>就这样，我们的归并排序就算是完成了一次排序工作，怎么样，和堆排序比，是不是要简单一些呢？</p>
<h3 id="9-8-2-归并排序复杂度分析">9.8.2 归并排序复杂度分析</h3>
<p>我们来分析一下归并排序的时间复杂度，一趟归并需要将SR[1]~SR[n]中相邻的长度为h的有序序列进行两两归并。并将结果放到TR1[1]~TR1[n]中，这需要将待排序序列中的所有记录扫描一遍，因此耗费O（n）时间，而由完全二叉树的深度可知，整个归并排序需要进行$[\log_{2}n]$次，因此，总的时间复杂度为$O（n㏒n）$，而且这是归并排序算法中最好、最坏、平均的时间性能。</p>
<p>由于归并排序在归并过程中需要与原始记录序列同样数量的存储空间存放归并结果以及递归时深度为$\log_{2}n$的栈空间，因此空间复杂度为$O（n+㏒n）$。</p>
<p>另外，对代码进行仔细研究，发现Merge函数中有<code>if(SR[i]&lt;SR[j])</code>语句，这就说明它需要两两比较，不存在跳跃，因此归并排序是一种稳定的排序算法。也就是说，归并排序是一种比较占用内存，但却效率高且稳定的算法。</p>
<h3 id="9-8-3-非递归实现归并排序">9.8.3 非递归实现归并排序</h3>
<p>我们常说，“没有最好，只有更好。”归并排序大量引用了递归，尽管在代码上比较清晰，容易理解，但这会造成时间和空间上的性能损耗。我们排序追求的就是效率，有没有可能将递归转化成迭代呢？结论当然是可以的，而且改动之后，性能上进一步提高了，来看代码。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作归并非递归排序 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergeSort2</span><span class="hljs-params">(SqList *L)</span>
</span>&#123;
    <span class="hljs-keyword">int</span>* TR = (<span class="hljs-keyword">int</span>*)<span class="hljs-built_in">malloc</span>(L-&gt;length * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<span class="hljs-comment">/* 申请额外空间 */</span>
    <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">while</span> (k &lt; L-&gt;length)
    &#123;
        MergePass(L-&gt;r, TR, k, L-&gt;length);
        k = <span class="hljs-number">2</span> * k;<span class="hljs-comment">/* 子序列长度加倍 */</span>
        MergePass(TR, L-&gt;r, k, L-&gt;length);
        k = <span class="hljs-number">2</span> * k;<span class="hljs-comment">/* 子序列长度加倍 */</span>
    &#125;
&#125;</code></pre></div>
<p>从代码中，我们能够感受到，非递归的迭代做法更加直截了当，从最小的序列开始归并直至完成。不需要像归并的递归算法一样，需要先拆分递归，再归并退出递归。</p>
<p>现在我们来看MergePass代码是如何实现的。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 非递归法 */</span>
<span class="hljs-comment">/* 将SR[]中相邻长度为s的子序列两两归并到TR[] */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergePass</span><span class="hljs-params">(<span class="hljs-keyword">int</span> SR[], <span class="hljs-keyword">int</span> TR[], <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">int</span> j;
    <span class="hljs-keyword">while</span> (i &lt;= n - <span class="hljs-number">2</span> * s + <span class="hljs-number">1</span>)
    &#123;<span class="hljs-comment">/* 两两归并 */</span>
        Merge(SR, TR, i, i + s - <span class="hljs-number">1</span>, i + <span class="hljs-number">2</span> * s - <span class="hljs-number">1</span>);
        i = i + <span class="hljs-number">2</span> * s;
    &#125;
    <span class="hljs-keyword">if</span> (i &lt; n - s + <span class="hljs-number">1</span>) <span class="hljs-comment">/* 归并最后两个序列 */</span>
        Merge(SR, TR, i, i + s - <span class="hljs-number">1</span>, n);
    <span class="hljs-keyword">else</span> <span class="hljs-comment">/* 若最后只剩下单个子序列 */</span>
        <span class="hljs-keyword">for</span> (j = i; j &lt;= n; j++)
            TR[j] = SR[j];
&#125;</code></pre></div>
<p>非递归的迭代方法，避免了递归时深度为$\log_{2}n$的栈空间，空间只是用到申请归并临时用的TR数组，因此空间复杂度为O（n），并且避免递归也在时间性能上有一定的提升，<strong>应该说，使用归并排序时，尽量考虑用非递归方法。</strong></p>
<h2 id="9-9-快速排序">9.9 快速排序</h2>
<p>快速排序算法最早由图灵奖获得者Tony Hoare设计出来的，他在形式化方法理论以及ALGOL60编程语言的发明中都有卓越的贡献，是上世纪最伟大的计算机科学家之一。而这快速排序算法只是他众多贡献中的一个小发明而已。</p>
<p>更牛的是，我们现在要学习的这个快速排序算法，被列为20世纪十大算法之一。</p>
<p>希尔排序相当于直接插入排序的升级，它们同属于插入排序类，堆排序相当于简单选择排序的升级，它们同属于选择排序类。而快速排序其实就是我们前面认为最慢的冒泡排序的升级，它们都属于交换排序类。即它也是通过不断比较和移动交换来实现排序的，只不过它的实现，增大了记录的比较和移动的距离，将关键字较大的记录从前面直接移动到后面，关键字较小的记录从后面直接移动到前面，从而减少了总的比较次数和移动交换次数。</p>
<h3 id="9-9-1-快速排序算法">9.9.1 快速排序算法</h3>
<p><strong>快速排序（Quick Sort）的基本思想是：通过一趟排序将待排记录分割成独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序的目的。</strong></p>
<p>从字面上感觉不出它的好处来。假设现在要对数组{50，10，90，30，70，40，80，60，20}进行排序。我们通过代码的讲解来学习快速排序的精妙。我们来看代码。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作快速排序 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(SqList *L)</span>
</span>&#123;
    QSort(L, <span class="hljs-number">1</span>, L-&gt;length);
&#125;</code></pre></div>
<p>又是一句代码，和归并排序一样，由于需要递归调用，因此我们外封装了一个函数。现在我们来看QSort的实现。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L中的子序列L-&gt;r[low..high]作快速排序 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QSort</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> pivot;
    <span class="hljs-keyword">if</span> (low &lt; high)
    &#123;
        pivot = Partition(L, low, high); <span class="hljs-comment">/*  将L-&gt;r[low..high]一分为二，算出枢轴值pivot */</span>
        QSort(L, low, pivot - <span class="hljs-number">1</span>);        <span class="hljs-comment">/*  对低子表递归排序 */</span>
        QSort(L, pivot + <span class="hljs-number">1</span>, high);        <span class="hljs-comment">/*  对高子表递归排序 */</span>
    &#125;
&#125;</code></pre></div>
<p>从这里，你应该能理解前面代码<code>“QSort（L，1，L-&gt;length）；”</code>中1和L-&gt;length代码的意思了，它就是当前待排序的序列最小下标值low和最大下标值high。</p>
<p>这一段代码的核心是<code>“pivot=Partition（L，low,high）；”</code>在执行它之前，L.r的数组值为{50，10，90，30，70，40，80，60，20}。<strong>Partition函数要做的，就是先选取当中的一个关键字</strong>，比如选择第一个关键字50，然后<strong>想尽办法将它放到一个位置，使得它左边的值都比它小，右边的值比它大，我们将这样的关键字称为枢轴（pivot）。</strong></p>
<p>在经过Partition（L，1，9）的执行之后，数组变成{20，10，40，30，50,70，80，60，90}，并返回值5给pivot，数字5表明50放置在数组下标为5的位置。此时，计算机把原来的数组变成了两个位于50左和右小数组{20，10，40，30}和{70，80，60，90}，而后的递归调用<code>“QSort（L，1，5-1）；&quot;</code>和<code>“QSort（L，5+1，9）；&quot;</code>语句，其实就是在对{20，10，40，30}和{70，80，60，90}分别进行同样的Partition操作，直到顺序全部正确为止。</p>
<p>到了这里，应该说理解起来还不算困难。下面我们就来看看快速排序最关键的Partition 函数实现。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 交换顺序表L中子表的记录，使枢轴记录到位，并返回其所在位置 */</span>
<span class="hljs-comment">/* 此时在它之前(后)的记录均不大(小)于它。 */</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Partition</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> pivotkey;

    pivotkey = L-&gt;r[low]; <span class="hljs-comment">/* 用子表的第一个记录作枢轴记录 */</span>
    <span class="hljs-keyword">while</span> (low &lt; high) <span class="hljs-comment">/*  从表的两端交替地向中间扫描 */</span>
    &#123;
        <span class="hljs-keyword">while</span> (low &lt; high&amp;&amp;L-&gt;r[high] &gt;= pivotkey)
            high--;
        swap(L, low, high);<span class="hljs-comment">/* 将比枢轴记录小的记录交换到低端 */</span>
        <span class="hljs-keyword">while</span> (low &lt; high&amp;&amp;L-&gt;r[low] &lt;= pivotkey)
            low++;
        swap(L, low, high);<span class="hljs-comment">/* 将比枢轴记录大的记录交换到高端 */</span>
    &#125;
    <span class="hljs-keyword">return</span> low; <span class="hljs-comment">/* 返回枢轴所在位置 */</span>
&#125;</code></pre></div>
<p>Partition函数，其实就是将选取的pivotkey不断交换，将比它小的换到它的左边，比它大的换到它的右边，它也在交换中不断更改自己的位置，直到完全满足这个要求为止。</p>
<h3 id="9-9-2-快速排序复杂度分析">9.9.2 快速排序复杂度分析</h3>
<p>我们来分析一下快速排序法的性能。快速排序的时间性能取决于快速排序递归的深度，可以用递归树来描述递归算法的执行情况。如果是{50，10，90，30，70，40，80，60，20}在快速排序过程中的递归过程。由于我们的第一个关键字是50，正好是待排序的序列的中间值，因此递归树是平衡的，此时性能也比较好。</p>
<p>在最优情况下，Partition每次都划分得很均匀，如果排序n个关键字，其递归树的深度就为$[\log_{2}n]+1$（[x]表示不大于x的最大整数），即仅需递归$\log_{2}n$次，需要时间为T（n）的话，第一次Partiation应该是需要对整个数组扫描一遍，做n次比较。然后，获得的枢轴将数组一分为二，那么各自还需要T（n/2）的时间（注意是最好情况，所以平分两半）。于是不断地划分下去，我们就有了下面的不等式推断。<br>
$T(n)\leq 2T(n/2)+n , T(1)=0$<br>
$T(n)\leq 2(2T(n/4)+n/2) +n=4T(n/4)+2n$<br>
$T(n)\leq 4(2T(n/8)+n/4) +2n=8T(n/8)+3n$<br>
$…$<br>
$T(n)\leq nT(1)+(\log_{2}n)×n=O(n\log n)$</p>
<p>也就是说，在最优的情况下，快速排序算法的时间复杂度为$O(n\log n)$。</p>
<p>在最坏的情况下，待排序的序列为正序或者逆序，每次划分只得到一个比上一次划分少一个记录的子序列，注意另一个为空。如果递归树画出来，它就是一棵斜树。此时需要执行n-1次递归调用，且第i次划分需要经过n-i次关键字的比较才能找到第i个记录，也就是枢轴的位置，因此比较次数为$\sum_{i=1}^{n-1}(n-i)=n-1+n-2+…+1=\frac{n(n-1)}{2}$，最终其时间复杂度为O(n²)。</p>
<p>平均的情况，设枢轴的关键字应该在第k的位置（1≤k≤n），那么：<br>
$$T(n)=\frac{1}{n}\sum_{k=1}^{n}（T(k-1)+T(n-k)）+n=\frac{2}{n}\sum_{k=1}^{n}T(k)+n$$</p>
<p>由数学归纳法可证明，其数量级为$O(n\log n)$。</p>
<p>就空间复杂度来说，主要是递归造成的栈空间的使用，最好情况，递归树的深度为$\log_{2}n$，其空间复杂度也就为$O(\log n)$，最坏情况，需要进行n-1递归调用，其空间复杂度为$O(n)$，平均情况，空间复杂度也为$O(\log n)$。</p>
<p>可惜的是，由于关键字的比较和交换是跳跃进行的，因此，快速排序是一种不稳定的排序方法。</p>
<h3 id="9-9-3-快速排序优化">9.9.3 快速排序优化</h3>
<p>刚才讲的快速排序还是有不少可以改进的地方，我们来看一些优化的方案。</p>
<ol>
<li>优化选取枢轴<br>
<strong>三数取中（median-of-three）法。即取三个关键字先进行排序，将中间数作为枢轴，一般是取左端、右端和中间三个数</strong>，也可以随机选取。</li>
<li>优化不必要的交换<br>
采用替换而不是交换的方式进行操作</li>
<li>优化小数组时的排序方案<br>
我们增加了一个判断，当high-low不大于某个常数时（有资料认为7比较合适，也有认为50更合理，实际应用可适当调整），就用直接插入排序，这样就能保证最大化地利用两种排序的优势来完成排序工作。</li>
<li>优化递归操作<br>
对QSort实施尾递归优化。</li>
</ol>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 改进后快速排序******************************** */</span>

<span class="hljs-comment">/* 快速排序优化算法 */</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Partition1</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> pivotkey;

    <span class="hljs-keyword">int</span> m = low + (high - low) / <span class="hljs-number">2</span>; <span class="hljs-comment">/* 计算数组中间的元素的下标 */</span>
    <span class="hljs-keyword">if</span> (L-&gt;r[low] &gt; L-&gt;r[high])
        swap(L, low, high);    <span class="hljs-comment">/* 交换左端与右端数据，保证左端较小 */</span>
    <span class="hljs-keyword">if</span> (L-&gt;r[m] &gt; L-&gt;r[high])
        swap(L, high, m);        <span class="hljs-comment">/* 交换中间与右端数据，保证中间较小 */</span>
    <span class="hljs-keyword">if</span> (L-&gt;r[m] &gt; L-&gt;r[low])
        swap(L, m, low);        <span class="hljs-comment">/* 交换中间与左端数据，保证左端较小 */</span>

    pivotkey = L-&gt;r[low]; <span class="hljs-comment">/* 用子表的第一个记录作枢轴记录 */</span>
    L-&gt;r[<span class="hljs-number">0</span>] = pivotkey;  <span class="hljs-comment">/* 将枢轴关键字备份到L-&gt;r[0] */</span>
    <span class="hljs-keyword">while</span> (low &lt; high) <span class="hljs-comment">/*  从表的两端交替地向中间扫描 */</span>
    &#123;
        <span class="hljs-keyword">while</span> (low &lt; high&amp;&amp;L-&gt;r[high] &gt;= pivotkey)
            high--;
        L-&gt;r[low] = L-&gt;r[high];
        <span class="hljs-keyword">while</span> (low &lt; high&amp;&amp;L-&gt;r[low] &lt;= pivotkey)
            low++;
        L-&gt;r[high] = L-&gt;r[low];
    &#125;
    L-&gt;r[low] = L-&gt;r[<span class="hljs-number">0</span>];
    <span class="hljs-keyword">return</span> low; <span class="hljs-comment">/* 返回枢轴所在位置 */</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QSort1</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> pivot;
    <span class="hljs-keyword">if</span> ((high - low) &gt; MAX_LENGTH_INSERT_SORT)
    &#123;
        <span class="hljs-keyword">while</span> (low &lt; high)
        &#123;
            pivot = Partition1(L, low, high); <span class="hljs-comment">/*  将L-&gt;r[low..high]一分为二，算出枢轴值pivot */</span>
            QSort1(L, low, pivot - <span class="hljs-number">1</span>);        <span class="hljs-comment">/*  对低子表递归排序 */</span>
            <span class="hljs-comment">/* QSort(L,pivot+1,high);        /*  对高子表递归排序 */</span>
            low = pivot + <span class="hljs-number">1</span>;    <span class="hljs-comment">/* 尾递归 */</span>
        &#125;
    &#125;
    <span class="hljs-keyword">else</span>
        InsertSort(L);
&#125;

<span class="hljs-comment">/* 对顺序表L作快速排序 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QuickSort1</span><span class="hljs-params">(SqList *L)</span>
</span>&#123;
    QSort1(L, <span class="hljs-number">1</span>, L-&gt;length);
&#125;</code></pre></div>
<h2 id="9-10-总结回顾">9.10 总结回顾</h2>
<p>本章内容只是在讲排序，我们需要对已经提到的各个排序算法进行对比来总结回顾。</p>
<p>首先我们讲了排序的定义，并提到了排序的稳定性，排序稳定对于某些特殊需求来说是至关重要的，因此在排序算法中，我们需要关注此算法的稳定性如何。</p>
<p>我们根据将排序记录是否全部被放置在内存中，将排序分为内排序与外排序两种，外排序需要在内外存之间多次交换数据才能进行。我们本章主要讲的是内排序的算法。</p>
<p>根据排序过程中借助的主要操作，我们将内排序分为：插入排序、交换排序、选择排序和归并排序四类。之后介绍的7种排序法，就分别是各种分类的代表算法。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-10-1.JPG" srcset="/img/loading.gif" alt="9-10-1"></p>
<p>事实上，目前还没有十全十美的排序算法，有优点就会有缺点，即使是快速排序法，也只是在整体性能上优越，它也存在排序不稳定、需要大量辅助空间、对少量数据排序无优势等不足。因此我们就来从多个角度来剖析一下提到的各种排序的长与短。</p>
<p>我们将7种算法的各种指标进行对比，如表9-10-1所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-10-2.JPG" srcset="/img/loading.gif" alt="9-10-2"></p>
<p>从算法的简单性来看，我们将7种算法分为两类：</p>
<ul>
<li>简单算法：冒泡、简单选择、直接插入。</li>
<li>改进算法：希尔、堆、归并、快速。</li>
</ul>
<p>从平均情况来看，显然最后3种改进算法要胜过希尔排序，并远远胜过前3种简单算法。</p>
<p>从最好情况看，反而冒泡和直接插入排序要更胜一筹，也就是说，如果你的待排序序列总是基本有序，反而不应该考虑4种复杂的改进算法。</p>
<p>从最坏情况看，堆排序与归并排序又强过快速排序以及其他简单排序。</p>
<p>从这三组时间复杂度的数据对比中，我们可以得出这样一个认识。堆排序和归并排序就像两个参加奥数考试的优等生，心理素质强，发挥稳定。而快速排序像是很情绪化的天才，心情好时表现极佳，碰到较糟糕环境会变得差强人意。但是他们如果都来比赛计算个位数的加减法，它们反而算不过成绩极普通的冒泡和直接插入。</p>
<p>从空间复杂度来说，归并排序强调要马跑得快，就得给马吃个饱。快速排序也有相应的空间要求，反而堆排序等却都是少量索取，大量付出，对空间要求是O(1)。如果执行算法的软件所处的环境非常在乎内存使用量的多少时，选择归并排序和快速排序就不是一个较好的决策了。</p>
<p>从稳定性来看，归并排序独占鳌头，我们前面也说过，对于非常在乎排序稳定性的应用中，归并排序是个好算法。</p>
<p>从待排序记录的个数上来说，待排序的个数n越小，采用简单排序方法越合适。反之，n越大，采用改进排序方法越合适。这也就是我们为什么对快速排序优化时，增加了一个阀值，低于阀值时换作直接插入排序的原因。</p>
<p>从表9-10-1的数据中，似乎简单选择排序在3种简单排序中性能最差，其实也不完全是，比如，如果记录的关键字本身信息量比较大（例如，关键字都是数十位的数字），此时表明其占用存储空间很大，这样移动记录所花费的时间也就越多，我们给出3种简单排序算法的移动次数比较，如表9-10-2所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-10-3.JPG" srcset="/img/loading.gif" alt="9-10-3"></p>
<p>你会发现，此时简单选择排序就变得非常有优势，原因也就在于，它是通过大量比较后选择明确记录进行移动，有的放矢。因此对于数据量不是很大而记录的关键字信息量较大的排序要求，简单排序算法是占优的。另外，记录的关键字信息量大小对那四个改进算法影响不大。</p>
<p>总之，从综合各项指标来说，经过优化的快速排序是性能最好的排序算法，但是不同的场合我们也应该考虑使用不同的算法来应对它。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>大话数据结构</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构第八章 查找</title>
    <url>/2020/01/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC8%E7%AB%A0%20%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<p><strong>查找（Searching）就是根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素（或记录）。</strong></p>
<h2 id="8-1-8-2-查找概论">8.1-8.2 查找概论</h2>
<p>查找表（Search Table）是由同一类型的数据元素（或记录）构成的集合。例如图8-2-1就是一个查找表。</p>
<a id="more"></a>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-2-1.JPG?raw=true" srcset="/img/loading.gif" alt="8-2-1"><br>
关键字（Key）是数据元素中某个数据项的值，又称为键值，用它可以标识一个数据元素。也可以标识一个记录的某个数据项（字段），我们称为关键码，如图8-2-1中①和②所示。<br>
若此关键字可以唯一地标识一个记录，则称此关键字为主关键字（Primary Key）。注意这也就意味着，对不同的记录，其主关键字均不相同。主关键字所在的数据项称为主关键码，如图8-2-1中③和④所示。<br>
那么对于那些可以识别多个数据元素（或记录）的关键字，我们称为次关键字（Secondary Key），如图8-2-1中⑤所示。次关键字也可以理解为是不以唯一标识一个数据元素（或记录）的关键字，它对应的数据项就是次关键码。<br>
查找表按照操作方式来分有两大种：<strong>静态查找表和动态查找表</strong>。<br>
静态查找表（Static Search Table）：只作查找操作的查找表。它的主要操作有：</p>
<ol>
<li>查询某个“特定的”数据元素是否在查找表中。</li>
<li>检索某个“特定的”数据元素和各种属性。</li>
</ol>
<p>动态查找表（Dynamic Search Table）：在查找过程中同时插入查找表中不存在的数据元素，或者从查找表中删除已经存在的某个数据元素。显然动态查找表的操作就是两个：</p>
<ol>
<li>查找时插入数据元素。</li>
<li>查找时删除数据元素。</li>
</ol>
<p>为了提高查找的效率，我们需要专门为查找操作设置数据结构，这种<strong>面向查找操作的数据结构称为查找结构</strong>。<br>
从逻辑上来说，查找所基于的数据结构是集合，集合中的记录之间没有本质关系。可是要想获得较高的查找性能，我们就不能不改变数据元素之间的关系，在存储时可以将查找集合组织成表、树等结构。<br>
例如，对于静态查找表来说，我们不妨应用线性表结构来组织数据，这样可以使用顺序查找算法，如果再对主关键字排序，则可以应用折半查找等技术进行高效的查找。<br>
如果是需要动态查找，则会复杂一些，可以考虑二叉排序树的查找技术。</p>
<h2 id="8-3-顺序表查找">8.3 顺序表查找</h2>
<p><strong>顺序查找（Sequential Search）又叫线性查找，是最基本的查找技术，它的查找过程是：从表中第一个（或最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功，找到所查的记录；如果直到最后一个（或第一个）记录，其关键字和给定值比较都不等时，则表中没有所查的记录，查找不成功。</strong></p>
<h3 id="8-3-1-顺序表查找算法">8.3.1 顺序表查找算法</h3>
<p>顺序查找的算法实现如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 无哨兵顺序查找，a为数组，n为要查找的数组个数，key为要查找的关键字 */</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Sequential_Search</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> key)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i;
    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;
        <span class="hljs-keyword">if</span> (a[i]==key)
            <span class="hljs-keyword">return</span> i;
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>
<h3 id="8-3-2-顺序表查找优化">8.3.2 顺序表查找优化</h3>
<p>到这里并非足够完美，因为每次循环时都需要对i是否小于等于n作判断。事实上，设置一个哨兵，就不需要每次让i与n作比较。看下面的改进后的顺序查找算法代码。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 有哨兵顺序查找 */</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Sequential_Search2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> key)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i;
    a[<span class="hljs-number">0</span>]=key;
    i=n;
    <span class="hljs-keyword">while</span>(a[i]!=key)&#123;
        i--;
    &#125;
    <span class="hljs-keyword">return</span> i;
&#125;</code></pre></div>
<p>这种在查找方向的尽头放置“哨兵”免去了在查找过程中每一次比较后都要判断查找位置是否越界的小技巧，看似与原先差别不大，但在总数据较多时，效率提高很大，是非常好的编码技巧。当然，“哨兵”也不一定就一定要在数组开始，也可以在末端。<br>
对于这种顺序查找算法来说，平均查找次数为（n+1）/2，所以最终时间复杂度还是O（n）。<br>
很显然，顺序查找技术是有很大缺点的，n很大时，查找效率极为低下，不过优点也是有的，算法非常简单，对静态查找表的记录没有任何要求，在一些小型数据的查找时，是可以适用的。<br>
另外，也正由于查找概率的不同，我们完全可以将容易查找到的记录放在前面，而不常用的记录放置在后面，效率就可以有大幅提高。</p>
<h2 id="8-4-有序表查找">8.4 有序表查找</h2>
<h3 id="8-4-1-折半查找">8.4.1 折半查找</h3>
<p><strong>折半查找（Binary Search）技术，又称为二分查找。它的前提是线性表中的记录必须是关键码有序（通常从小到大有序），线性表必须采用顺序存储。折半查找的基本思想是：在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找。不断重复上述过程，直到查找成功，或所有查找区域无记录，查找失败为止。</strong><br>
折半查找代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 折半查找 */</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Binary_Search</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> key)</span></span>&#123;
    <span class="hljs-keyword">int</span> low,high,mid;
    low=<span class="hljs-number">1</span>;    <span class="hljs-comment">/* 定义最低下标为记录首位 */</span>
    high=n;    <span class="hljs-comment">/* 定义最高下标为记录末位 */</span>
    <span class="hljs-keyword">while</span>(low&lt;=high)&#123;
        mid=(low+high)/<span class="hljs-number">2</span>;    <span class="hljs-comment">/* 折半 */</span>
        <span class="hljs-keyword">if</span> (key&lt;a[mid])        <span class="hljs-comment">/* 若查找值比中值小 */</span>
            high=mid<span class="hljs-number">-1</span>;        <span class="hljs-comment">/* 最高下标调整到中位下标小一位 */</span>
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key&gt;a[mid])<span class="hljs-comment">/* 若查找值比中值大 */</span>
            low=mid+<span class="hljs-number">1</span>;        <span class="hljs-comment">/* 最低下标调整到中位下标大一位 */</span>
        <span class="hljs-keyword">else</span>
            <span class="hljs-keyword">return</span> mid;        <span class="hljs-comment">/* 若相等则说明mid即为查找到的位置 */</span>
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>
<p>折半算法的时间复杂度为O（㏒n），它显然远远好于顺序查找的O（n）时间复杂度。<br>
不过由于折半查找的前提条件是需要有序表顺序存储，对于静态查找表，一次排序后不再变化，这样的算法已经比较好了。但对于需要频繁执行插入或删除操作的数据集来说，维护有序的排序会带来不小的工作量，那就不建议使用。</p>
<h3 id="8-4-2-插值查找">8.4.2 插值查找</h3>
<p>折半查找代码的第6句，我们略微等式变换后得到：<br>
<code>mid=(low+high)/2=low+1/2(high-low);</code><br>
我们将在折半查找算法的代码中更改一下，第6行代码如下：<br>
<code>mid=low+ (high-low)*(key-a[low])/(a[high]-a[low]); /* 插值 */</code><br>
<strong>插值查找（Interpolation Search）是根据要查找的关键字key与查找表中最大最小记录的关键字比较后的查找方法，其核心就在于插值的计算公式<code>(key-a[low])/(a[high]-a[low])</code>。</strong><br>
应该说，从时间复杂度来看，它也是O（㏒n），但对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好得多。反之，数组中如果分布类似{0，1，2，2000，2001……，999998，999999}这种极端不均匀的数据，用插值查找未必是很合适的选择。</p>
<h3 id="8-4-3-斐波那契查找">8.4.3 斐波那契查找</h3>
<p>斐波那契查找（Fibonacci Search），它是利用了黄金分割原理来实现的。<br>
下面我们根据代码来看程序是如何运行的。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 斐波那契查找 */</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Fibonacci_Search</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> key)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> low,high,mid,i,k=<span class="hljs-number">0</span>;
    low=<span class="hljs-number">1</span>;    <span class="hljs-comment">/* 定义最低下标为记录首位 */</span>
    high=n;    <span class="hljs-comment">/* 定义最高下标为记录末位 */</span>
    <span class="hljs-keyword">while</span>(n&gt;F[k]<span class="hljs-number">-1</span>) <span class="hljs-comment">/* 计算n位于斐波那契数列的位置 */</span>
        k++;
    <span class="hljs-keyword">for</span> (i=n;i&lt;F[k]<span class="hljs-number">-1</span>;i++) <span class="hljs-comment">/* 将不满的数值补全 */</span>
        a[i]=a[n];
    <span class="hljs-keyword">while</span>(low&lt;=high)&#123;
        mid=low+F[k<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>;
        <span class="hljs-keyword">if</span> (key&lt;a[mid])&#123;
            high=mid<span class="hljs-number">-1</span>;
            k=k<span class="hljs-number">-1</span>;
        &#125;
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key&gt;a[mid])&#123;
            low=mid+<span class="hljs-number">1</span>;
            k=k<span class="hljs-number">-2</span>;
        &#125;
        <span class="hljs-keyword">else</span>&#123;
            <span class="hljs-keyword">if</span> (mid&lt;=n)
                <span class="hljs-keyword">return</span> mid;        <span class="hljs-comment">/* 若相等则说明mid即为查找到的位置 */</span>
            <span class="hljs-keyword">else</span>
                <span class="hljs-keyword">return</span> n;
        &#125;
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>
<p>斐波那契查找算法的核心在于：</p>
<ol>
<li>当<code>key=a[mid]</code>时，查找就成功；</li>
<li>当<code>key&lt;a[mid]</code>时，新范围是第low个到第mid-1个，此时范围个数为F[k-1]-1个；</li>
<li>当<code>key&gt;a[mid]</code>时，新范围是第m+1个到第high个，此时范围个数为F[k-2]-1个。</li>
</ol>
<p>也就是说，如果要查找的记录在右侧，则左侧的数据都不用再判断了，不断反复进行下去，对处于当中的大部分数据，其工作效率要高一些。所以尽管斐波那契查找的时间复杂也为O（㏒n），但就平均性能来说，斐波那契查找要优于折半查找。可惜如果是最坏情况，比如这里key=1，那么始终都处于左侧长半区在查找，则查找效率要低于折半查找。<br>
还有比较关键的一点，折半查找是进行加法与除法运算<code>（mid=（low+high）/2）</code>，插值查找进行复杂的四则运算<code>mid=low+ (high-low)*(key-a[low])/(a[high]-a[low])</code>，而斐波那契查找只是最简单加减法运算<code>（mid=low+F[k-1]-1）</code>，在海量数据的查找过程中，这种细微的差别可能会影响最终的查找效率。<br>
应该说，三种有序表的查找本质上是分隔点的选择不同，各有优劣，实际开发时可根据数据的特点综合考虑再做出选择。</p>
<h2 id="8-5-线性索引查找">8.5 线性索引查找</h2>
<p>数据结构的最终目的是提高数据的处理速度，索引是为了加快查找速度而设计的一种数据结构。<strong>索引就是把一个关键字与它对应的记录相关联的过程</strong>，一个索引由若干个索引项构成，每个索引项至少应包含关键字和其对应的记录在存储器中的位置等信息。索引技术是组织大型数据库以及磁盘文件的一种重要技术。<br>
索引按照结构可以分为线性索引、树形索引和多级索引。我们这里就只介绍线性索引技术。<strong>所谓线性索引就是将索引项集合组织为线性结构，也称为索引表</strong>。我们重点介绍三种线性索引：稠密索引、分块索引和倒排索引。</p>
<h3 id="8-5-1-稠密索引">8.5.1 稠密索引</h3>
<p>稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项。，如图8-5-2所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-5-2.JPG?raw=true" srcset="/img/loading.gif" alt="8-5-2"><br>
对于稠密索引这个索引表来说，索引项一定是按照关键码有序的排列。</p>
<h3 id="8-5-2-分块索引">8.5.2 分块索引</h3>
<p>稠密索引因为索引项与数据集的记录个数相同，所以空间代价很大。为了减少索引项的个数，我们可以对数据集进行分块，使其分块有序，然后再对每一块建立一个索引项，从而减少索引项的个数。</p>
<p><strong>分块有序，是把数据集的记录分成了若干块，并且这些块需要满足两个条件：</strong></p>
<ul>
<li><strong>块内无序</strong>，即每一块内的记录不要求有序。当然，你如果能够让块内有序对查找来说更理想，不过这就要付出大量时间和空间的代价，因此通常我们不要求块内有序。</li>
<li><strong>块间有序</strong>，例如，要求第二块所有记录的关键字均要大于第一块中所有记录的关键字，第三块的所有记录的关键字均要大于第二块的所有记录关键字……因为只有块间有序，才有可能在查找时带来效率。</li>
</ul>
<p>对于分块有序的数据集，将每块对应一个索引项，这种索引方法叫做分块索引。</p>
<p>如图8-5-4所示，我们定义的分块索引的索引项结构分三个数据项：</p>
<ul>
<li>最大关键码，它存储每一块中的最大关键字，这样的好处就是可以使得在它之后的下一块中的最小关键字也能比这一块最大的关键字要大；</li>
<li>存储了块中的记录个数，以便于循环时使用；</li>
<li>用于指向块首数据元素的指针，便于开始对这一块中记录进行遍历。</li>
</ul>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-5-4.JPG?raw=true" srcset="/img/loading.gif" alt="8-5-4"></p>
<p>在分块索引表中查找，就是分两步进行：</p>
<ol>
<li>在分块索引表中查找要查关键字所在的块。由于分块索引表是块间有序的，因此很容易利用折半、插值等算法得到结果。例如，在图8-5-4的数据集中查找62，我们可以很快可以从左上角的索引表中由<code>57&lt;62&lt;96</code>得到62在第三个块中。</li>
<li>根据块首指针找到相应的块，并在块中顺序查找关键码。因为块中可以是无序的，因此只能顺序查找。</li>
</ol>
<p>分块索引查找的平均查找长度为：（√n）+1。<br>
可见，分块索引的效率比之顺序查找的O（n）是高了不少，不过显然它与折半查找的O（㏒n）相比还有不小的差距。因此在确定所在块的过程中，由于块间有序，所以可以应用折半、插值等手段来提高效率。<br>
总的来说，分块索引在兼顾了对细分块不需要有序的情况下，大大增加了整体查找的速度，所以普遍被用于<strong>数据库表查找</strong>等技术的应用当中。</p>
<h3 id="8-5-3-倒排索引">8.5.3 倒排索引</h3>
<p>搜索引擎常用的最简单的，也算是最基础的搜索技术——倒排索引。<br>
比如不同的文章，将所有单词整理出一张单词表，并排序，出现该单词的则标记为后面的文章编号。</p>
<p>索引项的通用结构是：</p>
<ul>
<li>次关键码，例如“英文单词”；</li>
<li>记录号表，例如“文章编号”。</li>
</ul>
<p>**其中记录号表存储具有相同次关键字的所有记录的记录号（可以是指向记录的指针或者是该记录的主关键字）。这样的索引方法就是倒排索引（inverted index）。**倒排索引源于实际应用中需要根据属性（或字段、次关键码）的值来查找记录。这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引。<br>
倒排索引的优点显然就是查找记录非常快，基本等于生成索引表后，查找时都不用去读取记录，就可以得到结果。但它的缺点是这个记录号不定长，比如上例有7个单词的文章编号只有一个，而“book”、“friend”、“good”有两个文章编号，若是对多篇文章所有单词建立倒排索引，那每个单词都将对应相当多的文章编号，维护比较困难，插入和删除操作都需要作相应的处理。</p>
<h2 id="8-6-二叉排序树">8.6 二叉排序树</h2>
<p>二叉排序树（Binary Sort Tree），又称为二叉查找树。它或者是一棵空树，或者是具有下列性质的二叉树。</p>
<ul>
<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结构的值；</li>
<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>
<li>它的左、右子树也分别为二叉排序树。</li>
</ul>
<p>这样我们就得到了一棵二叉树，并且当我们对它进行中序遍历时，就可以得到一个有序的序列，所以我们通常称它为二叉排序树。</p>
<h3 id="8-6-1-二叉排序树查找操作">8.6.1 二叉排序树查找操作</h3>
<p>首先我们提供一个二叉树的结构。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 二叉树的二叉链表结点结构定义 */</span>
<span class="hljs-keyword">typedef</span>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span>    /* 结点结构 */
&#123;</span>
    <span class="hljs-keyword">int</span> data;    <span class="hljs-comment">/* 结点数据 */</span>
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span>    <span class="hljs-comment">/* 左右孩子指针 */</span>
&#125; BiTNode, *BiTree;</code></pre></div>
<p>然后我们来看看二叉排序树的查找是如何实现的。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 递归查找二叉排序树T中是否存在key, */</span>
<span class="hljs-comment">/* 指针f指向T的双亲，其初始调用值为NULL */</span>
<span class="hljs-comment">/* 若查找成功，则指针p指向该数据元素结点，并返回TRUE */</span>
<span class="hljs-comment">/* 否则指针p指向查找路径上访问的最后一个结点并返回FALSE */</span>
<span class="hljs-function">Status <span class="hljs-title">SearchBST</span><span class="hljs-params">(BiTree T, <span class="hljs-keyword">int</span> key, BiTree f, BiTree *p)</span>
</span>&#123;
    <span class="hljs-keyword">if</span> (!T)    <span class="hljs-comment">/*  查找不成功 */</span>
    &#123;
        *p = f;
        <span class="hljs-keyword">return</span> FALSE;
    &#125;
    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == T-&gt;data) <span class="hljs-comment">/*  查找成功 */</span>
    &#123;
        *p = T;
        <span class="hljs-keyword">return</span> TRUE;
    &#125;
    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &lt; T-&gt;data)
        <span class="hljs-keyword">return</span> SearchBST(T-&gt;lchild, key, T, p);  <span class="hljs-comment">/*  在左子树中继续查找 */</span>
    <span class="hljs-keyword">else</span>
        <span class="hljs-keyword">return</span> SearchBST(T-&gt;rchild, key, T, p);  <span class="hljs-comment">/*  在右子树中继续查找 */</span>
&#125;</code></pre></div>
<h3 id="8-6-2-二叉排序树插入操作">8.6.2 二叉排序树插入操作</h3>
<p>有了二叉排序树的查找函数，那么所谓的二叉排序树的插入，其实也就是将关键字放到树中的合适位置而已，来看代码。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/*  当二叉排序树T中不存在关键字等于key的数据元素时， */</span>
<span class="hljs-comment">/*  插入key并返回TRUE，否则返回FALSE */</span>
<span class="hljs-function">Status <span class="hljs-title">InsertBST</span><span class="hljs-params">(BiTree *T, <span class="hljs-keyword">int</span> key)</span>
</span>&#123;
    BiTree p, s;
    <span class="hljs-keyword">if</span> (!SearchBST(*T, key, <span class="hljs-literal">NULL</span>, &amp;p)) <span class="hljs-comment">/* 查找不成功 */</span>
    &#123;
        s = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));
        s-&gt;data = key;
        s-&gt;lchild = s-&gt;rchild = <span class="hljs-literal">NULL</span>;
        <span class="hljs-keyword">if</span> (!p) <span class="hljs-comment">/* 此时因为已经查找过了，所有p指向最后查找的根结点 */</span>
            *T = s;            <span class="hljs-comment">/*  插入s为新的根结点 */</span>
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &lt; p-&gt;data)
            p-&gt;lchild = s;    <span class="hljs-comment">/*  插入s为左孩子 */</span>
        <span class="hljs-keyword">else</span>
            p-&gt;rchild = s;  <span class="hljs-comment">/*  插入s为右孩子 */</span>
        <span class="hljs-keyword">return</span> TRUE;
    &#125;
    <span class="hljs-keyword">else</span>
        <span class="hljs-keyword">return</span> FALSE;  <span class="hljs-comment">/*  树中已有关键字相同的结点，不再插入 */</span>
&#125;</code></pre></div>
<p>有了二叉排序树的插入代码，我们要实现二叉排序树的构建就非常容易了。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">int</span> i;
    <span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">62</span>,<span class="hljs-number">88</span>,<span class="hljs-number">58</span>,<span class="hljs-number">47</span>,<span class="hljs-number">35</span>,<span class="hljs-number">73</span>,<span class="hljs-number">51</span>,<span class="hljs-number">99</span>,<span class="hljs-number">37</span>,<span class="hljs-number">93</span> &#125;;
    BiTree T = <span class="hljs-literal">NULL</span>;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)
        InsertBST(&amp;T, a[i]);</code></pre></div>
<h3 id="8-6-3-二叉排序树删除操作">8.6.3 二叉排序树删除操作</h3>
<p>对于要删除的结点只有左子树或只有右子树的情况，相对也比较好解决。那就是结点删除后，将它的左子树或右子树整个移动到删除结点的位置即可，可以理解为独子继承父业。最终，整个结构还是一个二叉排序树。<br>
但是对于要删除的结点既有左子树又有右子树的情况怎么办呢？<br>
比较好的办法就是，找到需要删除的结点p的直接前驱（或直接后继）s，用s来替换结点p，然后再删除此结点s。</p>
<p>根据我们对删除结点三种情况的分析：</p>
<ul>
<li>叶子结点；</li>
<li>仅有左或右子树的结点；</li>
<li>左右子树都有的结点。</li>
</ul>
<p>我们来看代码，下面这个算法是递归方式对二叉排序树T查找key，查找到时删除。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 若二叉排序树T中存在关键字等于key的数据元素时，则删除该数据元素结点, */</span>
<span class="hljs-comment">/* 并返回TRUE；否则返回FALSE。 */</span>
<span class="hljs-function">Status <span class="hljs-title">DeleteBST</span><span class="hljs-params">(BiTree *T, <span class="hljs-keyword">int</span> key)</span>
</span>&#123;
    <span class="hljs-keyword">if</span> (!*T) <span class="hljs-comment">/* 不存在关键字等于key的数据元素 */</span>
        <span class="hljs-keyword">return</span> FALSE;
    <span class="hljs-keyword">else</span>
    &#123;
        <span class="hljs-keyword">if</span> (key == (*T)-&gt;data) <span class="hljs-comment">/* 找到关键字等于key的数据元素 */</span>
            <span class="hljs-keyword">return</span> Delete(T);
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &lt; (*T)-&gt;data)
            <span class="hljs-keyword">return</span> DeleteBST(&amp;(*T)-&gt;lchild, key);
        <span class="hljs-keyword">else</span>
            <span class="hljs-keyword">return</span> DeleteBST(&amp;(*T)-&gt;rchild, key);
    &#125;
&#125;</code></pre></div>
<p>这段代码和前面的二叉排序树查找几乎完全相同，唯一的区别就在于第8行，此时执行的是Delete方法，对当前结点进行删除操作。我们来看Delete的代码。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 从二叉排序树中删除结点p，并重接它的左或右子树。 */</span>
<span class="hljs-function">Status <span class="hljs-title">Delete</span><span class="hljs-params">(BiTree *p)</span>
</span>&#123;
    BiTree q, s;<span class="hljs-comment">//q、s为临时结点</span>
    <span class="hljs-keyword">if</span> ((*p)-&gt;rchild == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">/* 右子树空则只需重接它的左子树(待删结点是叶子也走此分支) */</span>
    &#123;
        q = *p; *p = (*p)-&gt;lchild; <span class="hljs-built_in">free</span>(q);
    &#125;
    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((*p)-&gt;lchild == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">/* 只需重接它的右子树 */</span>
    &#123;
        q = *p; *p = (*p)-&gt;rchild; <span class="hljs-built_in">free</span>(q);
    &#125;
    <span class="hljs-keyword">else</span> <span class="hljs-comment">/* 左右子树均不空 */</span>
    &#123;
        q = *p; s = (*p)-&gt;lchild;
        <span class="hljs-keyword">while</span> (s-&gt;rchild) <span class="hljs-comment">/* 转左，然后向右到尽头（找待删结点NULL的前驱） */</span>
        &#123;<span class="hljs-comment">//根结点*p的左子树中最右的叶结点为直接前驱</span>
            q = s;
            s = s-&gt;rchild;
        &#125;
        (*p)-&gt;data = s-&gt;data; <span class="hljs-comment">/*  s指向被删结点的直接前驱（将被删结点前驱的值取代被删结点的值） */</span>
        <span class="hljs-keyword">if</span> (q != *p)
            q-&gt;rchild = s-&gt;lchild; <span class="hljs-comment">/*  重接q的右子树 */</span>
        <span class="hljs-keyword">else</span>
            q-&gt;lchild = s-&gt;lchild; <span class="hljs-comment">/*  重接q的左子树 */</span>
        <span class="hljs-built_in">free</span>(s);
    &#125;
    <span class="hljs-keyword">return</span> TRUE;
&#125;</code></pre></div>
<p>从这段代码也可以看出，我们其实是在找删除结点的前驱结点替换的方法，对于用后继结点来替换，方法上是一样的。</p>
<h3 id="8-6-4-二叉排序树总结">8.6.4 二叉排序树总结</h3>
<p>总之，二叉排序树是以链接的方式存储，保持了链接存储结构在执行插入或删除操作时不用移动元素的优点，只要找到合适的插入和删除位置后，仅需修改链接指针即可。插入删除的时间性能比较好。而对于二叉排序树的查找，走的就是从根结点到要查找的结点的路径，其比较次数等于给定值的结点在二叉排序树的层数。极端情况，最少为1次，即根结点就是要找的结点，最多也不会超过树的深度。也就是说，二叉排序树的查找性能取决于二叉排序树的形状。可问题就在于，二叉排序树的形状是不确定的。<br>
如果，数组元素的次序是从小到大有序，则二叉排序树就成了极端的右斜树，查找时间复杂度为O（n），等同于顺序查找。<br>
因此，如果我们希望对一个集合按二叉排序树查找，最好是把它构建成一棵平衡的二叉排序树。即其深度与完全二叉树相同，那么查找的时间复杂就为O（㏒n），近似于折半查找。</p>
<h2 id="8-7-平衡二叉树（AVL树）">8.7 平衡二叉树（AVL树）</h2>
<p><strong>平衡二叉树（Self-Balancing Binary Search Tree 或Height-Balanced Binary Search Tree），是一种二叉排序树，其中每一个节点的左子树和右子树的高度差至多等于1</strong>。<br>
从平衡二叉树的英文名字，你也可以体会到，它是<strong>一种高度平衡的二叉排序树。<strong>那什么叫做高度平衡呢？意思是说，要么它是一棵空树，要么它的左子树和右子树都是平衡二叉树，且左子树和右子树的深度之差的绝对值不超过1。我们</strong>将二叉树上结点的左子树深度减去右子树深度的值称为平衡因子BF（Balance Factor）</strong>，那么平衡二叉树上所有结点的平衡因子只可能是-1、0和1。只要二叉树上有一个结点的平衡因子的绝对值大于1，则该二叉树就是不平衡的。<br>
<strong>距离插入结点最近的，且平衡因子的绝对值大于1的结点为根的子树，我们称为最小不平衡子树。</strong></p>
<h3 id="8-7-1-平衡二叉树实现原理">8.7.1 平衡二叉树实现原理</h3>
<p>平衡二叉树构建的基本思想就是在构建二叉排序树的过程中，每当插入一个结点时，先检查是否因插入而破坏了树的平衡性，若是，则找出最小不平衡子树。在保持二叉排序树特性的前提下，调整最小不平衡子树中各结点之间的链接关系，进行相应的旋转，使之成为新的平衡子树。<br>
所谓的平衡二叉树，其实就是在二叉排序树创建过程中保证它的平衡性，一旦发现有不平衡的情况，马上处理，这样就不会造成不可收拾的情况出现。通过刚才这个例子，你会发现，<strong>当最小不平衡子树根结点的平衡因子BF是大于1时，就右旋，小于-1时就左旋。当插入结点后，最小不平衡子树的BF与它的子树的BF符号相反时，就需要对结点先进行一次旋转以使得符号相同后，再反向旋转一次才能够完成平衡操作。</strong></p>
<h3 id="8-7-2-平衡二叉树实现算法">8.7.2 平衡二叉树实现算法</h3>
<p>首先是需要改进二叉排序树的结点结构，增加一个bf，用来存储平衡因子。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 二叉树的二叉链表结点结构定义 */</span>
<span class="hljs-keyword">typedef</span>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span>    /* 结点结构 */
&#123;</span>
    <span class="hljs-keyword">int</span> data;    <span class="hljs-comment">/* 结点数据 */</span>
    <span class="hljs-keyword">int</span> bf; <span class="hljs-comment">/*  结点的平衡因子 */</span>
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span>    <span class="hljs-comment">/* 左右孩子指针 */</span>
&#125; BiTNode, *BiTree;</code></pre></div>
<p>然后，对于右旋操作，我们的代码如下。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 对以p为根的二叉排序树作右旋处理， */</span>
<span class="hljs-comment">/* 处理之后p指向新的树根结点，即旋转处理之前的左子树的根结点 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">R_Rotate</span><span class="hljs-params">(BiTree *P)</span>
</span>&#123;
    BiTree L;
    L = (*P)-&gt;lchild; <span class="hljs-comment">/*  L指向P的左子树根结点 */</span>
    (*P)-&gt;lchild = L-&gt;rchild; <span class="hljs-comment">/*  L的右子树挂接为P的左子树 */</span>
    L-&gt;rchild = (*P);
    *P = L; <span class="hljs-comment">/*  P指向新的根结点 */</span>
&#125;</code></pre></div>
<p>此函数代码的意思是说，当传入一个二叉排序树P，将它的左孩子结点定义为L，将L的右子树变成P的左子树，再将P改成L的右子树，最后将L替换P成为根结点。这样就完成了一次右旋操作，如图8-7-9所示。图中三角形代表子树，N代表新增结点。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-7-9.JPG?raw=true" srcset="/img/loading.gif" alt="8-7-9"></p>
<p>左旋操作代码如下。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 对以P为根的二叉排序树作左旋处理， */</span>
<span class="hljs-comment">/* 处理之后P指向新的树根结点，即旋转处理之前的右子树的根结点0  */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">L_Rotate</span><span class="hljs-params">(BiTree *P)</span>
</span>&#123;
    BiTree R;
    R = (*P)-&gt;rchild; <span class="hljs-comment">/*  R指向P的右子树根结点 */</span>
    (*P)-&gt;rchild = R-&gt;lchild; <span class="hljs-comment">/* R的左子树挂接为P的右子树 */</span>
    R-&gt;lchild = (*P);
    *P = R; <span class="hljs-comment">/*  P指向新的根结点 */</span>
&#125;</code></pre></div>
<p>这段代码与右旋代码是对称的，在此不做解释了。<br>
现在我们来看左平衡旋转处理的函数代码。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LH +1 <span class="hljs-comment">/*  左高 */</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EH 0  <span class="hljs-comment">/*  等高 */</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RH -1 <span class="hljs-comment">/*  右高 */</span></span>

<span class="hljs-comment">/*  对以指针T所指结点为根的二叉树作左平衡旋转处理 */</span>
<span class="hljs-comment">/*  本算法结束时，指针T指向新的根结点 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LeftBalance</span><span class="hljs-params">(BiTree *T)</span>
</span>&#123;
    BiTree L, Lr;
    L = (*T)-&gt;lchild; <span class="hljs-comment">/*  L指向T的左子树根结点 */</span>
    <span class="hljs-keyword">switch</span> (L-&gt;bf)
    &#123; <span class="hljs-comment">/*  检查T的左子树的平衡度，并作相应平衡处理 */</span>
    <span class="hljs-keyword">case</span> LH: <span class="hljs-comment">/*  新结点插入在T的左孩子的左子树上，要作单右旋处理 */</span>
        (*T)-&gt;bf = L-&gt;bf = EH;
        R_Rotate(T);
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> RH: <span class="hljs-comment">/*  新结点插入在T的左孩子的右子树上，要作双旋处理 */</span>
        Lr = L-&gt;rchild; <span class="hljs-comment">/*  Lr指向T的左孩子的右子树根 */</span>
        <span class="hljs-keyword">switch</span> (Lr-&gt;bf)
        &#123; <span class="hljs-comment">/*  修改T及其左孩子的平衡因子 */</span>
        <span class="hljs-keyword">case</span> LH: (*T)-&gt;bf = RH;
            L-&gt;bf = EH;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> EH: (*T)-&gt;bf = L-&gt;bf = EH;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> RH:
            (*T)-&gt;bf = EH;
            L-&gt;bf = LH;
            <span class="hljs-keyword">break</span>;
        &#125;
        Lr-&gt;bf = EH;
        L_Rotate(&amp;(*T)-&gt;lchild); <span class="hljs-comment">/*  对T的左子树作左旋平衡处理 */</span>
        R_Rotate(T); <span class="hljs-comment">/*  对T作右旋平衡处理 */</span>
    &#125;
&#125;</code></pre></div>
<p>首先，我们定义了三个常数变量，分别代表1、0、-1。</p>
<ol>
<li>函数被调用，传入一个需调整平衡性的子树T。由于LeftBalance 函数被调用时，其实是已经确认当前子树是不平衡状态，且左子树的高度大于右子树的高度。换句话说，此时T的根结点应该是平衡因子BF的值大于1的数。</li>
<li>第4行，我们将T的左孩子赋值给L。</li>
<li>第5~27行是分支判断。</li>
<li>当L的平衡因子为LH，即为1时，表明它与根结点的BF值符号相同，因此，第8行，将它们的BF值都改为0，并且第9行，进行右旋操作。操作的方式如图8-7-9所示。</li>
<li>当L的平衡因子为RH，即为-1时，表明它与根结点的BF值符号相反，此时需要做双旋处理。第13~22行，针对L的右孩子Lr的BF作判断，修改根结点T和L的BF值。第24行将当前Lr的BF改为0。</li>
<li>第25行，对根结点的左子树进行左旋，如图8-7-10第二图所示。</li>
<li>第26行，对根结点进行右旋，如图8-7-10的第三图所示，完成平衡操作。</li>
</ol>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-7-10.JPG?raw=true" srcset="/img/loading.gif" alt="8-7-10"></p>
<p>同样的，右平衡旋转处理的函数代码非常类似。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/*  对以指针T所指结点为根的二叉树作右平衡旋转处理， */</span>
<span class="hljs-comment">/*  本算法结束时，指针T指向新的根结点 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RightBalance</span><span class="hljs-params">(BiTree *T)</span>
</span>&#123;
    BiTree R, Rl;
    R = (*T)-&gt;rchild; <span class="hljs-comment">/*  R指向T的右子树根结点 */</span>
    <span class="hljs-keyword">switch</span> (R-&gt;bf)
    &#123; <span class="hljs-comment">/*  检查T的右子树的平衡度，并作相应平衡处理 */</span>
    <span class="hljs-keyword">case</span> RH: <span class="hljs-comment">/*  新结点插入在T的右孩子的右子树上，要作单左旋处理 */</span>
        (*T)-&gt;bf = R-&gt;bf = EH;
        L_Rotate(T);
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> LH: <span class="hljs-comment">/*  新结点插入在T的右孩子的左子树上，要作双旋处理 */</span>
        Rl = R-&gt;lchild; <span class="hljs-comment">/*  Rl指向T的右孩子的左子树根 */</span>
        <span class="hljs-keyword">switch</span> (Rl-&gt;bf)
        &#123; <span class="hljs-comment">/*  修改T及其右孩子的平衡因子 */</span>
        <span class="hljs-keyword">case</span> RH:
            (*T)-&gt;bf = LH; R-&gt;bf = EH; <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> EH:
            (*T)-&gt;bf = R-&gt;bf = EH; <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> LH:
            (*T)-&gt;bf = EH; R-&gt;bf = RH; <span class="hljs-keyword">break</span>;
        &#125;
        Rl-&gt;bf = EH;
        R_Rotate(&amp;(*T)-&gt;rchild); <span class="hljs-comment">/*  对T的右子树作右旋平衡处理 */</span>
        L_Rotate(T); <span class="hljs-comment">/*  对T作左旋平衡处理 */</span>
    &#125;
&#125;</code></pre></div>
<p>有了这些准备，我们的主函数才算是正式登场了。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/*  若在平衡的二叉排序树T中不存在和e有相同关键字的结点，则插入一个 */</span>
<span class="hljs-comment">/*  数据元素为e的新结点，并返回1，否则返回0。若因插入而使二叉排序树 */</span>
<span class="hljs-comment">/*  失去平衡，则作平衡旋转处理，布尔变量taller反映T长高与否。 */</span>
<span class="hljs-function">Status <span class="hljs-title">InsertAVL</span><span class="hljs-params">(BiTree *T, <span class="hljs-keyword">int</span> e, Status *taller)</span>
</span>&#123;
    <span class="hljs-keyword">if</span> (!*T)
    &#123; <span class="hljs-comment">/*  插入新结点，树“长高”，置taller为TRUE */</span>
        *T = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));
        (*T)-&gt;data = e; (*T)-&gt;lchild = (*T)-&gt;rchild = <span class="hljs-literal">NULL</span>; (*T)-&gt;bf = EH;
        *taller = TRUE;
    &#125;
    <span class="hljs-keyword">else</span>
    &#123;
        <span class="hljs-keyword">if</span> (e == (*T)-&gt;data)
        &#123; <span class="hljs-comment">/*  树中已存在和e有相同关键字的结点则不再插入 */</span>
            *taller = FALSE; <span class="hljs-keyword">return</span> FALSE;
        &#125;
        <span class="hljs-keyword">if</span> (e &lt; (*T)-&gt;data)
        &#123; <span class="hljs-comment">/*  应继续在T的左子树中进行搜索 */</span>
            <span class="hljs-keyword">if</span> (!InsertAVL(&amp;(*T)-&gt;lchild, e, taller)) <span class="hljs-comment">/*  未插入 */</span>
                <span class="hljs-keyword">return</span> FALSE;
            <span class="hljs-keyword">if</span> (*taller) <span class="hljs-comment">/*   已插入到T的左子树中且左子树“长高” */</span>
                <span class="hljs-keyword">switch</span> ((*T)-&gt;bf) <span class="hljs-comment">/*  检查T的平衡度 */</span>
                &#123;
                <span class="hljs-keyword">case</span> LH: <span class="hljs-comment">/*  原本左子树比右子树高，需要作左平衡处理 */</span>
                    LeftBalance(T);    *taller = FALSE; <span class="hljs-keyword">break</span>;
                <span class="hljs-keyword">case</span> EH: <span class="hljs-comment">/*  原本左、右子树等高，现因左子树增高而使树增高 */</span>
                    (*T)-&gt;bf = LH; *taller = TRUE; <span class="hljs-keyword">break</span>;
                <span class="hljs-keyword">case</span> RH: <span class="hljs-comment">/*  原本右子树比左子树高，现左、右子树等高 */</span>
                    (*T)-&gt;bf = EH; *taller = FALSE; <span class="hljs-keyword">break</span>;
                &#125;
        &#125;
        <span class="hljs-keyword">else</span>
        &#123; <span class="hljs-comment">/*  应继续在T的右子树中进行搜索 */</span>
            <span class="hljs-keyword">if</span> (!InsertAVL(&amp;(*T)-&gt;rchild, e, taller)) <span class="hljs-comment">/*  未插入 */</span>
                <span class="hljs-keyword">return</span> FALSE;
            <span class="hljs-keyword">if</span> (*taller) <span class="hljs-comment">/*  已插入到T的右子树且右子树“长高” */</span>
                <span class="hljs-keyword">switch</span> ((*T)-&gt;bf) <span class="hljs-comment">/*  检查T的平衡度 */</span>
                &#123;
                <span class="hljs-keyword">case</span> LH: <span class="hljs-comment">/*  原本左子树比右子树高，现左、右子树等高 */</span>
                    (*T)-&gt;bf = EH; *taller = FALSE;    <span class="hljs-keyword">break</span>;
                <span class="hljs-keyword">case</span> EH: <span class="hljs-comment">/*  原本左、右子树等高，现因右子树增高而使树增高  */</span>
                    (*T)-&gt;bf = RH; *taller = TRUE; <span class="hljs-keyword">break</span>;
                <span class="hljs-keyword">case</span> RH: <span class="hljs-comment">/*  原本右子树比左子树高，需要作右平衡处理 */</span>
                    RightBalance(T); *taller = FALSE; <span class="hljs-keyword">break</span>;
                &#125;
        &#125;
    &#125;
    <span class="hljs-keyword">return</span> TRUE;
&#125;</code></pre></div>
<p>不容易，终于讲完了，本算法代码很长，是有些复杂，编程中容易在很多细节上出错，要想真正掌握它，需要同学们自己多练习。不过其思想还是不难理解的，总之就是把不平衡消灭在最早时刻。<br>
如果我们需要查找的集合本身没有顺序，在频繁查找的同时也需要经常的插入和删除操作，显然我们需要构建一棵二叉排序树，但是不平衡的二叉排序树，查找效率是非常低的，因此我们需要在构建时，就让这棵二叉排序树是平衡二叉树，此时我们的查找时间复杂度就为O（㏒n），而插入和删除也为O（㏒n）。这显然是比较理想的一种动态查找表算法。</p>
<h2 id="8-8-多路查找树（B树）">8.8 多路查找树（B树）</h2>
<p><strong>多路查找树（muitl-way search tree），其每一个结点的孩子数可以多于两个，且每一个结点处可以存储多个元素</strong>。<br>
在这里，每一个结点可以存储多少个元素，以及它的孩子数的多少是非常关键的。为此，我们讲解它的4种特殊形式：2-3树、2-3-4树、B树和B+树。</p>
<h3 id="8-8-1-2-3树">8.8.1 2-3树</h3>
<p><strong>2-3树是这样的一棵多路查找树：其中的每一个结点都具有两个孩子（我们称它为2结点）或三个孩子（我们称它为3结点）。</strong><br>
<strong>一个2结点包含一个元素和两个孩子（或没有孩子）</strong>，且与二叉排序树类似，左子树包含的元素小于该元素，右子树包含的元素大于该元素。不过，与二叉排序树不同的是，这个2结点要么没有孩子，要有就有两个，不能只有一个孩子。<br>
<strong>一个3结点包含一小一大两个元素和三个孩子（或没有孩子）</strong>，一个3结点要么没有孩子，要么具有3个孩子。如果某个3结点有孩子的话，左子树包含小于较小元素的元素，右子树包含大于较大元素的元素，中间子树包含介于两元素之间的元素。<br>
并且2-3树中所有的叶子都在同一层次上。如图8-8-2所示，就是一棵有效的2-3树。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-8-2.JPG?raw=true" srcset="/img/loading.gif" alt="8-8-2"></p>
<p>一 2-3树的插入实现<br>
对于2-3树的插入来说，与二叉排序树相同，插入操作一定是发生在叶子结点上。可与二叉排序树不同的是，2-3树插入一个元素的过程有可能会对该树的其余结构产生连锁反应。<br>
2-3树插入可分为三种情况。</p>
<ol>
<li>对于空树，插入一个2结点即可，这很容易理解。</li>
<li>插入结点到一个2结点的叶子上。应该说，由于其本身就只有一个元素，所以只需要将其升级为3结点即可。如图8-8-3所示。我们希望从左图的2-3树中插入元素3，根据遍历可知，3比8小、比4小，于是就只能考虑插入到叶子结点1所在的位置，因此很自然的想法就是将此结点变成一个3结点，即右图这样完成插入操作。当然，要视插入的元素与当前叶子结点的元素比较大小后，决定谁在左谁在右。例如，若插入的是0，则此结点就是“0”在左“1”在右了。</li>
<li>要往3结点中插入一个新元素。因为3结点本身已经是2-3树的结点最大容量（已经有两个元素），因此就需要将其拆分，且将树中两元素或插入元素的三者中选择其一向上移动一层。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-8-3.JPG?raw=true" srcset="/img/loading.gif" alt="8-8-3"></li>
</ol>
<p>二 2-3树的删除实现<br>
删除情况较多，具体请见大话数据结构P348。</p>
<p>当然，如果对2-3树的插入和删除等所有的情况进行讲解，既占篇幅，又没必要，总的来说它是有规律的，需要你们在上面的这些例子中多去体会后掌握。</p>
<h3 id="8-8-2-2-3-4树">8.8.2 2-3-4树</h3>
<p>有了2-3树的讲解，2-3-4树就很好理解了，它其实就是2-3树的概念扩展，包括了4结点的使用。一个4结点包含小中大三个元素和四个孩子（或没有孩子），一个4结点要么没有孩子，要么具有4个孩子。如果某个4结点有孩子的话，左子树包含小于最小元素的元素；第二子树包含大于最小元素，小于第二元素的元素；第三子树包含大于第二元素，小于最大元素的元素；右子树包含大于最大元素的元素。<br>
由于2-3-4树和2-3树是类似的，我们这里就简单介绍一下，如果我们构建一个数组为{7，1，2，5，6，9，8，4，3}的2-3-4树的过程，如图8-8-15所示。图1是在分别插入7、1、2时的结果图，因为3个元素满足2-3-4树的单个4结点定义，因此此时不需要拆分，接着插入元素5，因为已经超过了4结点的定义，因此拆分为图2的形状。之后的图其实就是在元素不断插入时最后形成了图7的2-3-4树。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-8-15.JPG?raw=true" srcset="/img/loading.gif" alt="8-8-15"><br>
图8-8-16是对一个2-3-4树的删除结点的演变过程，删除顺序是1、6、3、4、5、2、9。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-8-16.JPG?raw=true" srcset="/img/loading.gif" alt="8-8-16"></p>
<h3 id="8-8-3-B树">8.8.3 B树</h3>
<p><strong>B树（B-tree）是一种平衡的多路查找树</strong>，2-3树和2-3-4树都是B树的特例。<strong>结点最大的孩子数目称为B树的阶（order）</strong>，因此，2-3树是3阶B树，2-3-4树是4阶B树。<br>
一个m阶的B树具有如下属性：<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-8-16.5.JPG?raw=true" srcset="/img/loading.gif" alt="8-8-16.5"><br>
在B树上查找的过程是一个顺指针查找结点和在结点中查找关键字的交叉过程。<br>
比方说，我们要查找数字7，首先从外存（比如硬盘中）读取得到根结点3、5、8三个元素，发现7不在当中，但在5和8之间，因此就通过Az再读取外存的6、7结点，查找到所要的元素。<br>
至于B树的插入和删除，方式是与2-3树和2-3-4树相类似的，只不过阶数可能会很大而已。<br>
我们在本节的开头提到，如果内存与外存交换数据次数频繁，会造成了时间效率上的瓶颈，那么B树结构怎么就可以做到减少次数呢？<br>
我们的外存，比如硬盘，是将所有的信息分割成相等大小的页面，每次硬盘读写的都是一个或多个完整的页面，对于一个硬盘来说，一页的长度可能是211到214个字节。<br>
在一个典型的B树应用中，要处理的硬盘数据量很大，因此无法一次全部装入内存。因此我们会对B树进行调整，使得B树的阶数（或结点的元素）与硬盘存储的页面大小相匹配。比如说一棵B树的阶为1001（即1个结点包含1000个关键字），高度为2，它可以储存超过10亿个关键字，我们只要让根结点持久地保留在内存中，那么在这棵树上，寻找某一个关键字至多需要两次硬盘的读取即可。<br>
通过这种方式，在有限内存的情况下，每一次磁盘的访问我们都可以获得最大数量的数据。由于B树每结点可以具有比二叉树多得多的元素，所以与二叉树的操作不同，它们减少了必须访问结点和数据块的数量，从而提高了性能。可以说，B树的数据结构就是为内外存的数据交互准备的。<br>
那么对于n个关键字的m阶B树，最坏情况是要查找几次呢？我们来作一分析。<br>
也就是说，在含有n个关键字的B树上查找时，从根结点到关键字结点的路径上涉及的结点数不超过$\log_\frac m2\left(\frac{n+1}2\right)+1$。</p>
<h3 id="8-8-4-B-树">8.8.4 B+树</h3>
<p>B+树是应文件系统所需而出的一种B树的变形树，注意严格意义上讲，它其实已经不是第六章定义的树了。在B树中，每一个元素在该树中只出现一次，有可能在叶子结点上，也有可能在分支结点上。而在B+树中，出现在分支结点中的元素会被当作它们在该分支结点位置的中序后继者（叶子结点）中再次列出。另外，每一个叶子结点都会保存一个指向后一叶子结点的指针。<br>
例如图8-8-19所示，就是一棵B+树的示意，灰色关键字即是根结点中的关键字在叶子结点再次列出，并且所有叶子结点都链接在一起。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-8-19.JPG?raw=true" srcset="/img/loading.gif" alt="8-8-19"><br>
一棵m阶的B+树和m阶的B树的差异在于：</p>
<ul>
<li>有n棵子树的结点中包含有n个关键字；</li>
<li>所有的叶子结点包含全部关键字的信息，及指向含这些关键字记录的指针，叶子结点本身依关键字的大小自小而大顺序链接；</li>
<li>所有分支结点可以看成是索引，结点中仅含有其子树中的最大（或最小）关键字。</li>
</ul>
<p>这样的数据结构最大的好处就在于，如果是要随机查找，我们就从根结点出发，与B树的查找方式相同，只不过即使在分支结点找到了待查找的关键字，它也只是用来索引的，不能提供实际记录的访问，还是需要到达包含此关键字的终端结点。如果我们是需要从最小关键字进行从小到大的顺序查找，我们就可以从最左侧的叶子结点出发，不经过分支结点，而是延着指向下一叶子的指针就可遍历所有的关键字。<br>
B+树的结构特别适合带有范围的查找。比如查找我们学校18~22岁的学生人数，我们可以通过从根结点出发找到第一个18岁的学生，然后再在叶子结点按顺序查找到符合范围的所有记录。<br>
B+树的插入、删除过程也都与B树类似，只不过插入和删除的元素都是在叶子结点上进行而已。</p>
<h2 id="8-9-散列表查找（哈希表）概述">8.9 散列表查找（哈希表）概述</h2>
<p>能否直接通过关键字key得到要查找的记录内存存储位置呢,而不是挨个查找下标，再通过顺序存储的存储位置计算内存地址？</p>
<h3 id="8-9-1-散列表查找定义">8.9.1 散列表查找定义</h3>
<p>我们只要通过某个函数f，使得<br>
<code>存储位置=f（关键字）</code><br>
那样我们可以通过查找关键字不需要比较就可获得需要的记录的存储位置。这就是一种新的存储技术——散列技术。<br>
<strong>散列技术是在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使得每个关键字key对应一个存储位置f（key）</strong>。查找时，根据这个确定的对应关系找到给定值key的映射f（key），若查找集合中存在这个记录，则必定在f（key）的位置上。<br>
这里我们把这种对应<strong>关系f称为散列函数，又称为哈希（Hash）函数</strong>。按这个思想，<strong>采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）</strong>。那么关键字对应的记录存储位置我们称为散列地址。</p>
<h3 id="8-9-2-散列表查找步骤">8.9.2 散列表查找步骤</h3>
<p>整个散列过程其实就是两步:</p>
<ol>
<li>在存储时，通过散列函数计算记录的散列地址，并按此散列地址存储该记录。不管什么记录，我们都需要用同一个散列函数计算出地址再存储。</li>
<li>当查找记录时，我们通过同样的散列函数计算记录的散列地址，按此散列地址访问该记录。说起来很简单，在哪存的，上哪去找，由于存取用的是同一个散列函数，因此结果当然也是相同的。</li>
</ol>
<p>**散列技术既是一种存储方法，也是一种查找方法。**然而它与线性表、树、图等结构不同的是，前面几种结构，数据元素之间都存在某种逻辑关系，可以用连线图示表示出来，而散列技术的记录之间不存在什么逻辑关系，它只与关键字有关联。因此，散列主要是面向查找的存储结构。<br>
**散列技术最适合的求解问题是查找与给定值相等的记录。**对于查找来说，简化了比较过程，效率就会大大提高。但万事有利就有弊，散列技术不具备很多常规数据结构的能力。<br>
比如那种同样的关键字，它能对应很多记录的情况，却不适合用散列技术；散列表也不适合范围查找，无法排序，无法计算最大值、最小值等结果。<br>
设计一个简单、均匀、存储利用率高的散列函数是散列技术中最关键的问题。<br>
另一个问题是冲突。在理想的情况下，每一个关键字，通过散列函数计算出来的地址都是不一样的，可现实中，这只是一个理想。我们时常会碰到两个关键字key1≠key2，但是却有f（key1）=f（key2），这种现象我们称为冲突（collsion），并把key1和key2称为这个散列函数的同义词（synonym）。出现了冲突当然非常糟糕，那将造成数据查找错误。尽管我们可以通过精心设计的散列函数让冲突尽可能的少，但是不能完全避免。于是如何处理冲突就成了一个很重要的课题，这在我们后面也需要详细讲解。</p>
<h2 id="8-10-散列函数的构造方法">8.10 散列函数的构造方法</h2>
<p>那么什么才算是好的散列函数呢？<br>
1.计算简单。  2.散列地址分布均匀</p>
<h3 id="8-10-1-直接定址法">8.10.1 直接定址法</h3>
<p>可以取关键字的某个线性函数值为散列地址，即<br>
<code>f（key）=a x key+b（a、b为常数）</code><br>
这样的散列函数优点就是简单、均匀，也不会产生冲突，但问题是这需要事先知道关键字的分布情况，适合查找表较小且连续的情况。由于这样的限制，在现实应用中，此方法虽然简单，但却并不常用。</p>
<h3 id="8-10-2-数字分析法">8.10.2 数字分析法</h3>
<p>比如手机号码作为关键字，那么我们抽取手机号码后面的四位成为散列地址。<br>
这里我们提到了一个关键词——抽取。抽取方法是使用关键字的一部分来计算散列存储位置的方法，这在散列函数中是常常用到的手段。<br>
数字分析法通常适合处理关键字位数比较大的情况，如果事先知道关键字的分布且关键字的若干位分布较均匀，就可以考虑用这个方法。</p>
<h3 id="8-10-3-平方取中法">8.10.3 平方取中法</h3>
<p>这个方法计算很简单，假设关键字是1234，那么它的平方就是1522756，再抽取中间的3位就是227，用做散列地址。再比如关键字是4321，那么它的平方就是18671041，抽取中间的3位就可以是671，也可以是710，用做散列地址。平方取中法比较适合于不知道关键字的分布，而位数又不是很大的情况。</p>
<h3 id="8-10-4-折叠法">8.10.4 折叠法</h3>
<p>折叠法是将关键字从左到右分割成位数相等的几部分（注意最后一部分位数不够时可以短些），然后将这几部分叠加求和，并按散列表表长，取后几位作为散列地址。<br>
比如我们的关键字是9876543210，散列表表长为三位，我们将它分为四组，987|654|321|0，然后将它们叠加求和987+654+321+0=1962，再取后3位得到散列地址为962。<br>
折叠法事先不需要知道关键字的分布，适合关键字位数较多的情况。</p>
<h3 id="8-10-5-除留余数法">8.10.5 除留余数法</h3>
<p>此方法为最常用的构造散列函数方法。对于散列表长为m的散列函数公式为：<br>
<code>f（key）=key mod p（p ≤ m）</code><br>
mod是取模（求余数）的意思。事实上，这方法不仅可以对关键字直接取模，也可在折叠、平方取中后再取模。<br>
很显然，本方法的关键就在于选择合适的p，p如果选得不好，就可能会容易产生同义词。<br>
根据前辈们的经验，若散列表表长为m，通常p为小于或等于表长（最好接近m）的最小质数或不包含小于20质因子的合数。</p>
<h3 id="8-10-6-随机数法">8.10.6 随机数法</h3>
<p>选择一个随机数，取关键字的随机函数值为它的散列地址。也就是<code>f（key）=random（key）</code>。这里random是随机函数。当关键字的长度不等时，采用这个方法构造散列函数是比较合适的。<br>
总之，现实中，应该视不同的情况采用不同的散列函数。我们只能给出一些考虑的因素来提供参考：</p>
<ol>
<li>计算散列地址所需的时间。</li>
<li>关键字的长度。</li>
<li>散列表的大小。</li>
<li>关键字的分布情况。</li>
<li>记录查找的频率。</li>
</ol>
<p>综合这些因素，才能决策选择哪种散列函数更合适。</p>
<h2 id="8-11-处理散列冲突的方法">8.11 处理散列冲突的方法</h2>
<h3 id="8-11-1-开放定址法">8.11.1 开放定址法</h3>
<p>所谓的<strong>开放定址法就是一旦发生了冲突，就代入公式去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。</strong><br>
公式是： <code>fi(key)=(f(key)+di) MOD m   (di=1,2,3,……,m-1)</code><br>
我们把这种解决冲突的开放定址法称为线性探测法。<br>
从这个例子我们也看到，我们在解决冲突的时候，还会碰到如48和37这种本来都不是同义词却需要<strong>争夺一个地址的情况，我们称这种现象为堆积</strong>。很显然，堆积的出现，使得我们需要不断处理冲突，无论是存入还是查找效率都会大大降低。<br>
我们可以把di该进为(di)²，增加平方运算的目的是<strong>为了不让关键字都聚集在某一块区域。我们称这种方法为二次探测法</strong>。<br>
<code>fi（key）=（f（key）+di）MOD m  （di=1²，(-1)²，2²,(-2)²,…，q²，(-q)²,q≤m/2）</code><br>
还有一种方法是，<strong>在冲突时，对于位移量d采用随机函数计算得到，我们称之为随机探测法。</strong><br>
<code>fi（key）=（f（key）+di）MOD m   （di是一个随机数列）</code></p>
<h3 id="8-11-2-再散列函数法">8.11.2 再散列函数法</h3>
<p>对于我们的散列表来说，我们事先准备多个散列函数。<br>
f$_i$（key）=RH$_i$（key）（i=1,2,…,k）<br>
这里RH$_i$，就是不同的散列函数，你可以把我们前面说的什么除留余数、折叠、平方取中全部用上。每当发生散列地址冲突时，就换一个散列函数计算，相信总会有一个可以把冲突解决掉。这种方法能够使得关键字不产生聚集，当然，相应地也增加了计算的时间。</p>
<h3 id="8-11-3-链地址法">8.11.3 链地址法</h3>
<p>将所有关键字为同义词的记录存储在一个单链表中，我们称这种表为同义词子表，在散列表中只存储所有同义词子表的头指针。对于关键字集合{12，67，56，16，25，37，22，29，15，47，48，34}，我们用前面同样的12为除数，进行除留余数法，可得到如图8-11-1结构，此时，已经不存在什么冲突换址的问题，无论有多少个冲突，都只是在当前位置给单链表增加结点的问题。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-11-1.JPG?raw=true" srcset="/img/loading.gif" alt="8-11-1"><br>
链地址法对于可能会造成很多冲突的散列函数来说，提供了绝不会出现找不到地址的保障。当然，这也就带来了查找时需要遍历单链表的性能损耗。</p>
<h3 id="8-11-4-公共溢出区法">8.11.4 公共溢出区法</h3>
<p>这个方法其实就更加好理解，你不是冲突吗？好吧，凡是冲突的都跟我走，我给你们这些冲突找个地儿待着。这就如同孤儿院收留所有无家可归的孩子一样，我们为所有冲突的关键字建立了一个公共的溢出区来存放。<br>
就前面的例子而言，我们共有三个关键字{37，48，34}与之前的关键字位置有冲突，那么就将它们存储到溢出表中，如图8-11-2所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-11-2.JPG?raw=true" srcset="/img/loading.gif" alt="8-11-2"><br>
图8-11-2在查找时，对给定值通过散列函数计算出散列地址后，先与基本表的相应位置进行比对，如果相等，则查找成功；如果不相等，则到溢出表去进行顺序查找。如果相对于基本表而言，有冲突的数据很少的情况下，公共溢出区的结构对查找性能来说还是非常高的。</p>
<h2 id="8-12-散列表查找实现">8.12 散列表查找实现</h2>
<h3 id="8-12-1-散列表查找算法实现">8.12.1 散列表查找算法实现</h3>
<p>首先是需要定义一个散列表的结构以及一些相关的常数。其中HashTable 就是散列表结构。结构当中的elem为一个动态数组。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUCCESS 1</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UNSUCCESS 0</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HASHSIZE 12 <span class="hljs-comment">/* 定义散列表长为数组的长度 */</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NULLKEY -32768</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>
    <span class="hljs-keyword">int</span> *elem; <span class="hljs-comment">/* 数据元素存储基址，动态分配数组 */</span>
    <span class="hljs-keyword">int</span> count; <span class="hljs-comment">/*  当前数据元素个数 */</span>
&#125;HashTable;
<span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 散列表表长，全局变量 */</span></code></pre></div>
<p>有了结构的定义，我们可以对散列表进行初始化。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 初始化散列表 */</span>
<span class="hljs-function">Status <span class="hljs-title">InitHashTable</span><span class="hljs-params">(HashTable *H)</span></span>&#123;
    <span class="hljs-keyword">int</span> i;
    m = HASHSIZE;
    H-&gt;count = m;
    H-&gt;elem = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(m * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m; i++)
        H-&gt;elem[i] = NULLKEY;
    <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<p>为了插入时计算地址，我们需要定义散列函数，散列函数可以根据不同情况更改算法。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 散列函数 */</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Hash</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span>
</span>&#123;
    <span class="hljs-keyword">return</span> key % m; <span class="hljs-comment">/* 除留余数法 */</span>
&#125;</code></pre></div>
<p>初始化完成后，我们可以对散列表进行插入操作。假设我们插入的关键字集合就是前面的{12，67，56，16，25，37，22，29，15，47，48，34}。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 插入关键字进散列表 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertHash</span><span class="hljs-params">(HashTable *H, <span class="hljs-keyword">int</span> key)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> addr = Hash(key); <span class="hljs-comment">/* 求散列地址 */</span>
    <span class="hljs-keyword">while</span> (H-&gt;elem[addr] != NULLKEY) <span class="hljs-comment">/* 如果不为空，则冲突 */</span>
        addr = (addr + <span class="hljs-number">1</span>) % m; <span class="hljs-comment">/* 开放定址法的线性探测 */</span>
    H-&gt;elem[addr] = key; <span class="hljs-comment">/* 直到有空位后插入关键字 */</span>
&#125;</code></pre></div>
<p>代码中插入关键字时，首先算出散列地址，如果当前地址不为空关键字，则说明有冲突。此时我们应用开放定址法的线性探测进行重新寻址，此处也可更改为链地址法等其他解决冲突的办法。<br>
散列表存在后，我们在需要时就可以通过散列表查找要的记录。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 散列表查找关键字 */</span>
<span class="hljs-function">Status <span class="hljs-title">SearchHash</span><span class="hljs-params">(HashTable H, <span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span> *addr)</span>
</span>&#123;
    *addr = Hash(key);  <span class="hljs-comment">/* 求散列地址 */</span>
    <span class="hljs-keyword">while</span> (H.elem[*addr] != key) <span class="hljs-comment">/* 如果不为空，则冲突 */</span>
    &#123;
        *addr = (*addr + <span class="hljs-number">1</span>) % m; <span class="hljs-comment">/* 开放定址法的线性探测 */</span>
        <span class="hljs-keyword">if</span> (H.elem[*addr] == NULLKEY || *addr == Hash(key)) <span class="hljs-comment">/* 如果循环回到原点 */</span>
            <span class="hljs-keyword">return</span> UNSUCCESS;    <span class="hljs-comment">/* 则说明关键字不存在 */</span>
    &#125;
    <span class="hljs-keyword">return</span> SUCCESS;
&#125;</code></pre></div>
<p>查找的代码与插入的代码非常类似，只需做一个不存在关键字的判断而已。</p>
<h3 id="8-12-2-散列表查找性能分析">8.12.2 散列表查找性能分析</h3>
<p>最后，我们对散列表查找的性能作一个简单分析。如果没有冲突，散列查找是我们本章介绍的所有查找中效率最高的，因为它的时间复杂度为O(1)。可惜，我说的只是“如果”，没有冲突的散列只是一种理想，在实际的应用中，冲突是不可避免的。那么散列查找的平均查找长度取决于哪些因素呢？</p>
<ol>
<li>散列函数是否均匀<br>
散列函数的好坏直接影响着出现冲突的频繁程度，不过，由于不同的散列函数对同一组随机的关键字，产生冲突的可能性是相同的，因此我们可以不考虑它对平均查找长度的影响。</li>
<li>处理冲突的方法<br>
相同的关键字、相同的散列函数，但处理冲突的方法不同，会使得平均查找长度不同。比如线性探测处理冲突可能会产生堆积，显然就没有二次探测法好，而链地址法处理冲突不会产生任何堆积，因而具有更佳的平均查找性能。</li>
<li>散列表的装填因子<br>
所谓的装填因子α=填入表中的记录个数/散列表长度。α标志着散列表的装满的程度。当填入表中的记录越多，α就越大，产生冲突的可能性就越大。比如我们前面的例子，如图8-11-5所示，如果你的散列表长度是12，而填入表中的记录个数为11，那么此时的装填因子α=11/12=0.9167，再填入最后一个关键字产生冲突的可能性就非常之大。也就是说，散列表的平均查找长度取决于装填因子，而不是取决于查找集合中的记录个数。</li>
</ol>
<p>不管记录个数n有多大，我们总可以选择一个合适的装填因子以便将平均查找长度限定在一个范围之内，此时我们散列查找的时间复杂度就真的是O(1)了。为了做到这一点，通常我们都是将散列表的空间设置得比查找集合大，此时虽然是浪费了一定的空间，但换来的是查找效率的大大提升，总的来说，还是非常值得的。</p>
<h2 id="8-13-总结回顾">8.13 总结回顾</h2>
<p>我们这一章全都是围绕一个主题“查找”来作文章的。<br>
首先我们要弄清楚查找表、记录、关键字、主关键字、静态查找表、动态查找表等这些概念。<br>
然后，对于顺序表查找来说，尽管很土（简单），但它却是后面很多查找的基础，注意设置“哨兵”的技巧，可以使得本已经很难提升的简单算法里还是提高了性能。<br>
有序查找，我们着重讲了折半查找的思想，它在性能上比原来的顺序查找有了质的飞跃，由O（n）变成了O（㏒n）。之后我们又讲解了另外两种优秀的有序查找：插值查找和斐波那契查找，三者各有优缺点，望大家要仔细体会。<br>
线性索引查找，我们讲解了稠密索引、分块索引和倒排索引。索引技术被广泛的用于文件检索、数据库和搜索引擎等技术领域，是进一步学习这些技术的基础。<br>
二叉排序树是动态查找最重要的数据结构，它可以在兼顾查找性能的基础上，让插入和删除也变得效率较高。不过为了达到最优的状态，二叉排序树最好是构造成平衡的二叉树才最佳。因此我们就需要再学习关于平衡二叉树（AVL树）的数据结构，了解AVL树是如何处理平衡性的问题。这部分是本章重点，需要认真学习掌握。<br>
B树这种数据结构是针对内存与外存之间的存取而专门设计的。由于内外存的查找性能更多取决于读取的次数，因此在设计中要考虑B树的平衡和层次。我们讲解时是先通过最最简单的B树（2-3树）来理解如何构建、插入、删除元素的操作，再通过2-3-4树的深化，最终来理解B树的原理。之后，我们还介绍了B+树的设计思想。<br>
散列表是一种非常高效的查找数据结构，在原理上也与前面的查找不尽相同，它回避了关键字之间反复比较的烦琐，而是直接一步到位查找结果。当然，这也就带来了记录之间没有任何关联的弊端。应该说，散列表对于那种查找性能要求高，记录之间关系无要求的数据有非常好的适用性。在学习中要注意的是散列函数的选择和处理冲突的方法。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>大话数据结构</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>缪雪峰MySQL教程</title>
    <url>/2020/01/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/%E7%BC%AA%E9%9B%AA%E5%B3%B0MySQL%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1>一： MySQL执行外部sql脚本文件的命令</h1>
<p>sql脚本是包含一到多个sql命令的sql语句，我们可以将这些sql脚本放在一个文本文件中（我们称之为“sql脚本文件”），然后通过相关的命令执行这个sql脚本文件。基本步骤如下：</p>
<h2 id="1-1-创建包含sql命令的sql脚本文件">1.1 创建包含sql命令的sql脚本文件</h2>
<p>文件中包含一些列的sql语句，每条语句最后以;结尾，文件内容示例如下：<br>
–创建表，使用“–”进行注释</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称
(
  Guid <span class="hljs-built_in">Varchar</span>(<span class="hljs-number">38</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> primary <span class="hljs-keyword">key</span>,  
  Title <span class="hljs-built_in">Varchar</span>(<span class="hljs-number">255</span>),

) <span class="hljs-keyword">TYPE</span>=<span class="hljs-keyword">InnoDB</span>;</code></pre></div>
<a id="more"></a>
<ul>
<li>在表A中增加字段Status<br>
<code>alter table A add Status TinyInt default '0';</code></li>
<li>在表A上创建索引<br>
<code>create index XX_TaskId_1 on A(Id_);</code></li>
<li>在A表中添加一条记录<br>
<code>Insert into A (Id,ParentId, Name) values(1,0,'名称');</code></li>
<li>添加、修改、删除数据后，有可能需要提交事务<br>
<code>Commit;</code></li>
</ul>
<h2 id="1-2-执行sql脚本文件">1.2 执行sql脚本文件</h2>
<h3 id="1-2-1-方法一-：使用cmd命令执行-windows下，unix或linux在的其控制台下">1.2.1 方法一 ：使用cmd命令执行(windows下，unix或linux在的其控制台下)</h3>
<p>【Mysql的bin目录】\mysql –u用户名 –p密码 –D数据库&lt;【sql脚本文件路径全名】，示例：<br>
<code>D:\mysql\bin\mysql –uroot –p123456 -Dtest&lt;d:\test\ss.sql</code><br>
注意：<br>
A、如果在sql脚本文件中使用了use 数据库，则-D数据库选项可以忽略<br>
B、如果【Mysql的bin目录】中包含空格，则需要使用“”包含，如：<code>“C:\Program Files\mysql\bin\mysql” –u用户名 –p密码 –D数据库&lt;【sql脚本文件路径全名】</code></p>
<h3 id="1-2-2-方法二-：进入mysql的控制台后，使用source命令执行">1.2.2 方法二 ：进入mysql的控制台后，使用source命令执行</h3>
<p>Mysql&gt;source 【sql脚本文件的路径全名】 或 Mysql&gt;. 【sql脚本文件的路径全名】，示例：<code>source d:\test\ss.sql</code> 或者 <code>\. d:\test\ss.sql</code></p>
<h1>二： 关系数据库概述</h1>
<p>数据库按照数据结构来组织、存储和管理数据，实际上，数据库一共有三种模型：</p>
<ul>
<li>层次模型</li>
<li>网状模型</li>
<li>关系模型</li>
</ul>
<p>随着时间的推移和市场竞争，最终，基于<strong>关系模型</strong>的关系数据库获得了绝对市场份额。</p>
<h2 id="2-1-数据类型">2.1 数据类型</h2>
<p>对于一个关系表，除了定义每一列的名称外，还需要定义每一列的数据类型。关系数据库支持的标准数据类型包括数值、字符串、时间等：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>INT</td>
<td>整型</td>
<td>4字节整数类型，范围约+/-21亿</td>
</tr>
<tr>
<td>BIGINT</td>
<td>长整型</td>
<td>8字节整数类型，范围约+/-922亿亿</td>
</tr>
<tr>
<td>REAL</td>
<td>浮点型</td>
<td>4字节浮点数，范围约+/-1038</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>浮点型</td>
<td>8字节浮点数，范围约+/-10308</td>
</tr>
<tr>
<td>DECIMAL(M,N)</td>
<td>高精度小数</td>
<td>由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算</td>
</tr>
<tr>
<td>CHAR(N)</td>
<td>定长字符串</td>
<td>存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串</td>
</tr>
<tr>
<td>VARCHAR(N)</td>
<td>变长字符串</td>
<td>存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串</td>
</tr>
<tr>
<td>BOOLEAN</td>
<td>布尔类型</td>
<td>存储True或者False</td>
</tr>
<tr>
<td>DATE</td>
<td>日期类型</td>
<td>存储日期，例如，2018-06-22</td>
</tr>
<tr>
<td>TIME</td>
<td>时间类型</td>
<td>存储时间，例如，12:20:59</td>
</tr>
<tr>
<td>DATETIME</td>
<td>日期和时间类型</td>
<td>存储日期+时间，例如，2018-06-22 12:20:59</td>
</tr>
</tbody>
</table>
<h2 id="2-2-SQL-DML-和-DDL">2.2 SQL DML 和 DDL</h2>
<p>总的来说，可以把 SQL 分为两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。<br>
SQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。<br>
查询和更新指令构成了 SQL 的 DML 部分：</p>
<ol>
<li>SELECT - 从数据库表中获取数据</li>
<li>UPDATE - 更新数据库表中的数据</li>
<li>DELETE - 从数据库表中删除数据</li>
<li>INSERT INTO - 向数据库表中插入数据</li>
</ol>
<p>SQL 的数据定义语言 (DDL) 部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。<br>
SQL 中最重要的 DDL 语句:</p>
<ol>
<li>CREATE DATABASE - 创建新数据库</li>
<li>ALTER DATABASE - 修改数据库</li>
<li>CREATE TABLE - 创建新表</li>
<li>ALTER TABLE - 变更（改变）数据库表</li>
<li>DROP TABLE - 删除表</li>
<li>CREATE INDEX - 创建索引（搜索键）</li>
<li>DROP INDEX - 删除索引</li>
</ol>
<h2 id="2-3-安装MySQL">2.3 安装MySQL</h2>
<p>要在Windows或Mac上安装MySQL，首先从MySQL官方网站下载最新的MySQL Community Server版本：<br>
<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MySQL官方网站</a><br>
选择对应的操作系统版本，下载安装即可。在安装过程中，MySQL会自动创建一个root用户，并提示输入root口令。<br>
要在Linux上安装MySQL，可以使用发行版的包管理器。例如，Debian和Ubuntu用户可以简单地通过命令<code>apt-get install mysql-server</code>安装最新的MySQL版本。</p>
<h2 id="2-4-运行MySQL">2.4 运行MySQL</h2>
<p>MySQL安装后会自动在后台运行。为了验证MySQL安装是否正确，我们需要通过mysql这个命令行程序来连接MySQL服务器。<br>
在命令提示符下输入mysql -u root -p，然后输入口令，如果一切正确，就会连接到MySQL服务器，同时提示符变为mysql&gt;。<br>
输入exit退出MySQL命令行。注意，MySQL服务器仍在后台运行。</p>
<h1>三： 关系模型</h1>
<p>我们已经知道，关系数据库是建立在关系模型上的。而关系模型本质上就是若干个存储数据的二维表，可以把它们看作很多Excel表。<br>
表的每一行称为记录（Record），记录是一个逻辑意义上的数据。<br>
表的每一列称为字段（Column），同一个表的每一行记录都拥有相同的若干字段。<br>
字段定义了数据类型（整型、浮点型、字符串、日期等），以及是否允许为NULL。注意NULL表示字段数据不存在。一个整型字段如果为NULL不表示它的值为0，同样的，一个字符串型字段为NULL也不表示它的值为空串’’。</p>
<blockquote>
<p>通常情况下，字段应该避免允许为NULL。不允许为NULL可以简化查询条件，加快查询速度，也利于应用程序读取数据后无需判断是否为NULL。</p>
</blockquote>
<p>在关系数据库中，关系是通过主键和外键来维护的。</p>
<h2 id="3-1-主键">3.1 主键</h2>
<p>在关系数据库中，一张表中的每一行数据被称为一条记录。一条记录就是由多个字段组成的。<br>
每一条记录都包含若干定义好的字段。同一个表的所有记录都有相同的字段定义。<br>
<strong>对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为主键。</strong><br>
对主键的要求，最关键的一点是：记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。<br>
由于主键的作用十分重要，如何选取主键会对业务开发产生重要影响。如果我们以学生的身份证号作为主键，似乎能唯一定位记录。然而，身份证号也是一种业务场景，如果身份证号升位了，或者需要变更，作为主键，不得不修改的时候，就会对业务产生严重影响。<br>
所以，选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。<br>
因此，身份证号、手机号、邮箱地址这些看上去可以唯一的字段，均不可用作主键。<br>
作为主键最好是完全业务无关的字段，我们一般把这个字段命名为id。常见的可作为id字段的类型有：</p>
<ul>
<li>自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；</li>
<li>全局唯一GUID类型：使用一种全局唯一的字符串作为主键，类似8f55d96b-8acc-4636-8cb8-76bf8abc2f57。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。</li>
</ul>
<p>对于大部分应用来说，通常自增类型的主键就能满足需求。</p>
<blockquote>
<p>PS:如果使用INT自增类型，那么当一张表的记录数超过2147483647（约21亿）时，会达到上限而出错。使用BIGINT自增类型则可以最多约922亿亿条记录。</p>
</blockquote>
<p>关系数据库实际上还允许通过多个字段唯一标识记录，即两个或更多的字段都设置为主键，这种主键被称为<strong>联合主键</strong>。<br>
对于联合主键，允许一列有重复，只要不是所有主键列都重复即可。<br>
没有必要的情况下，我们尽量不使用联合主键，因为它给关系表带来了复杂度的上升。</p>
<p><strong>小结</strong><br>
<strong>主键是关系表中记录的唯一标识。主键的选取非常重要：主键不要带有业务含义，而应该使用<code>BIGINT自增</code>或者<code>GUID类型</code>。主键也不应该允许<code>NULL</code>。可以使用多个列作为联合主键，但联合主键并不常用。</strong></p>
<h2 id="3-2-外键">3.2 外键</h2>
<p>由于一个班级可以有多个学生，在关系模型中，这两个表的关系可以称为“一对多”，即一个<code>classes</code>的记录可以对应多个<code>students</code>表的记录。<br>
为了表达这种一对多的关系，我们需要在<code>students</code>表中加入一列<code>class_id</code>，让它的值与<code>classes</code>表的某条记录相对应。<br>
这样，我们就可以根据<code>class_id</code>这个列直接定位出一个<code>students</code>表的记录应该对应到<code>classes</code>的哪条记录。<br>
在<code>students</code>表中，通过<code>class_id</code>的字段，可以把数据与另一张表关联起来，这种列称为外键。<br>
外键并不是通过列名实现的，而是通过定义外键约束实现的：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students
<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> fk_class_id
<span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (class_id)
<span class="hljs-keyword">REFERENCES</span> classes (<span class="hljs-keyword">id</span>);</code></pre></div>
<p>其中，外键约束的名称<code>fk_class_id</code>可以任意，<code>FOREIGN KEY (class_id)</code>指定了<code>class_id</code>作为外键，<code>REFERENCES classes (id)</code>指定了这个外键将关联到<code>classes</code>表的id列（即<code>classes</code>表的主键）。<br>
通过定义外键约束，关系数据库可以保证无法插入无效的数据。即如果<code>classes</code>表不存在id=99的记录，<code>students</code>表就无法插入<code>class_id=99</code>的记录。<br>
由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠应用程序自身来保证逻辑的正确性。这种情况下，<code>class_id</code>仅仅是一个普通的列，只是它起到了外键的作用而已。<br>
要删除一个外键约束，也是通过<code>ALTER TABLE</code>实现的：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> fk_class_id;</code></pre></div>
<blockquote>
<p>注意：删除外键约束并没有删除外键这一列。删除列是通过<code>DROP COLUMN ...</code>实现的。</p>
</blockquote>
<p>通过一个表的外键关联到另一个表，我们可以定义出一对多关系。有些时候，还需要定义“多对多”关系。例如，一个老师可以对应多个班级，一个班级也可以对应多个老师，因此，班级表和老师表存在多对多关系。<br>
多对多关系实际上是通过两个一对多关系实现的，即<strong>通过一个中间表，关联两个一对多关系，就形成了多对多关系</strong>。<br>
一对一关系是指，一个表的记录对应到另一个表的唯一一个记录。  目的是把经常读取和不经常读取的字段分开，提高查询速度，以获得更高的性能。</p>
<p><strong>小结</strong><br>
<strong>关系数据库通过外键可以实现一对多、多对多和一对一的关系。外键既可以通过数据库来约束，也可以不设置约束，仅依靠应用程序的逻辑来保证。</strong></p>
<h2 id="3-3-索引">3.3 索引</h2>
<p>在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。<br>
索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。<br>
如果要经常根据<code>score</code>列进行查询，就可以对<code>score</code>列创建索引：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students
<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> idx_score (score);</code></pre></div>
<p>使用<code>ADD INDEX idx_score (score)</code>就创建了一个名称为<code>idx_score</code>，使用列<code>score</code>的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students
<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> idx_name_score (<span class="hljs-keyword">name</span>, score);</code></pre></div>
<p>索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如<code>gender</code>列，大约一半的记录值是M，另一半是F，因此，对该列创建索引就没有意义。<br>
可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。<br>
对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。</p>
<p><strong>小结</strong><br>
<strong>通过对数据库表创建索引，可以提高查询速度。</strong><br>
<strong>通过创建唯一索引，可以保证某一列的值具有唯一性。</strong><br>
<strong>数据库索引对于用户和应用程序来说都是透明的。</strong></p>
<h1>四： 查询数据</h1>
<p>在关系数据库中，最常用的操作就是查询。</p>
<h2 id="4-1-基本查询">4.1 基本查询</h2>
<p>要查询数据库表的数据，我们使用如下的SQL语句：<br>
<code>SELECT * FROM &lt;表名&gt;</code><br>
假设表名是<code>students</code>，要查询<code>students</code>表的所有行，我们用如下SQL语句：<br>
<code>SELECT * FROM students;</code>。<br>
使用<code>SELECT * FROM students</code>时，<code>SELECT</code>是关键字，表示将要执行一个查询，<code>*</code>表示“所有列”，<code>FROM</code>表示将要从哪个表查询，本例中是<code>students</code>表。<br>
该SQL将查询出<code>students</code>表的所有数据。注意：查询结果也是一个二维表，它包含列名和每一行的数据。</p>
<p>在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同（distinct）的值。<br>
关键词 DISTINCT 用于返回唯一不同的值。语法：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 列名称 <span class="hljs-keyword">FROM</span> 表名称</code></pre></div>
<p><strong>小结</strong><br>
<strong>使用<code>SELECT(选择、挑选、选拔)</code>查询的基本语句<code>SELECT * FROM &lt;表名&gt;</code>可以查询一个表的所有行和所有列的数据。<code>SELECT</code>查询的结果是一个二维表。</strong></p>
<h2 id="4-2-条件查询">4.2 条件查询</h2>
<p><code>SELECT</code>语句可以通过<code>WHERE（到哪里）</code>条件来设定查询条件，查询结果是满足查询条件的记录。例如，要指定条件“分数在80分或以上的学生”，写成<code>WHERE</code>条件就是:<br>
<code>SELECT * FROM students WHERE score &gt;= 80;</code>。<br>
其中，<code>WHERE</code>关键字后面的<code>score &gt;= 80</code>就是条件。<code>score</code>是列名，该列存储了学生的成绩，因此，<code>score &gt;= 80</code>就筛选出了指定条件的记录：<br>
<code>SELECT * FROM students WHERE score &gt;= 80;</code>。<br>
因此，条件查询的语法就是：<br>
<code>SELECT * FROM &lt;表名&gt; WHERE &lt;条件表达式&gt;</code></p>
<p>条件表达式可以用<code>&lt;条件1&gt; AND &lt;条件2&gt;</code>表达满足条件1并且满足条件2。例如，符合条件“分数在80分或以上”，并且还符合条件“男生”，把这两个条件写出来：</p>
<ul>
<li>条件1：根据score列的数据判断：score &gt;= 80；</li>
<li>条件2：根据gender列的数据判断：gender = ‘M’，注意gender列存储的是字符串，需要用单引号括起来。</li>
</ul>
<p>就可以写出<code>WHERE</code>条件：<br>
<code>SELECT * FROM students WHERE score &gt;= 80 AND gender = 'M';</code>。<br>
第二种条件是&lt;条件1&gt; OR &lt;条件2&gt;，表示满足条件1或者满足条件2。例如：<br>
<code>SELECT * FROM students WHERE score &gt;= 80 OR gender = 'M';</code><br>
第三种条件是NOT &lt;条件&gt;，表示“不符合该条件”的记录。例如：<br>
<code>SELECT * FROM students WHERE NOT class_id = 2;</code>表示不是2班的学生。<br>
要组合三个或者更多的条件，就需要用小括号()表示如何进行条件运算。例如，编写一个复杂的条件：分数在80以下或者90以上，并且是男生：<br>
<code>SELECT * FROM students WHERE (score &lt; 80 OR score &gt; 90) AND gender = 'M';</code><br>
如果不加括号，条件运算按照<code>NOT、AND、OR</code>的优先级进行，即<code>NOT</code>优先级最高，其次是<code>AND</code>，最后是<code>OR</code>。加上括号可以改变优先级。</p>
<p>常用的条件表达式：</p>
<table>
<thead>
<tr>
<th>条件</th>
<th>表达式举例1</th>
<th>表达式举例2</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>使用=判断相等</td>
<td>score = 80</td>
<td>name = ‘abc’</td>
<td>字符串需要用单引号括起来</td>
</tr>
<tr>
<td>使用&gt;判断大于</td>
<td>score &gt; 80</td>
<td>name &gt; ‘abc’</td>
<td>字符串比较根据ASCII码，中文字符比较根据数据库设置</td>
</tr>
<tr>
<td>使用&gt;=判断大于或相等</td>
<td>score &gt;= 80</td>
<td>name &gt;= ‘abc’</td>
<td></td>
</tr>
<tr>
<td>使用&lt;判断小于</td>
<td>score &lt; 80</td>
<td>name &lt;= ‘abc’</td>
<td></td>
</tr>
<tr>
<td>使用&lt;=判断小于或相等</td>
<td>score &lt;= 80</td>
<td>name &lt;= ‘abc’</td>
<td></td>
</tr>
<tr>
<td>使用&lt;&gt;判断不相等</td>
<td>score &lt;&gt; 80</td>
<td>name &lt;&gt; ‘abc’</td>
<td></td>
</tr>
<tr>
<td>使用LIKE判断相似</td>
<td>name LIKE ‘ab%’</td>
<td>name LIKE ‘%bc%’</td>
<td>%表示任意字符，例如’ab%‘将匹配’ab’，‘abc’，‘abcd’</td>
</tr>
</tbody>
</table>
<p><strong>小结</strong><br>
<strong>通过WHERE条件查询，可以筛选出符合指定条件的记录，而不是整个表的所有记录。</strong></p>
<h2 id="4-3-投影查询">4.3 投影查询</h2>
<p>如果我们只希望返回某些列的数据，而不是所有列的数据，我们可以用<code>SELECT 列1, 列2, 列3 FROM ...</code>，让结果集仅包含指定列。这种操作称为投影查询。<br>
例如，从<code>students</code>表中返回<code>id、score和name</code>这三列：<br>
<code>SELECT id, score, name FROM students;</code><br>
这样返回的结果集就只包含了我们指定的列，并且，结果集的列的顺序和原表可以不一样。</p>
<p>使用<code>SELECT 列1, 列2, 列3 FROM ...</code>时，还可以给每一列起个别名，这样，结果集的列名就可以与原表的列名不同。它的语法是<code>SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM ...</code>。</p>
<p>例如，以下<code>SELECT</code>语句将列名<code>score</code>重命名为<code>points</code>，而<code>id</code>和<code>name</code>列名保持不变：<code>SELECT id, score points, name FROM students;</code><br>
投影查询同样可以接<code>WHERE</code>条件，实现复杂的查询：<br>
<code>SELECT id, score points, name FROM students WHERE gender = 'M';</code></p>
<p><strong>小结</strong><br>
<strong>使用<code>SELECT *</code>表示查询表的所有列，使用<code>SELECT 列1, 列2, 列3</code>则可以仅返回指定列，这种操作称为投影。<code>SELECT</code>语句可以对结果集的列进行重命名。</strong></p>
<h2 id="4-4-排序">4.4 排序</h2>
<p>可以加上<code>ORDER BY</code>子句。可以按照成绩从低到高进行排序：<br>
<code>SELECT id, name, gender, score FROM students ORDER BY score;</code><br>
如果要反过来，按照成绩从高到底排序，我们可以加上DESC表示“倒序”：<br>
<code>SELECT id, name, gender, score FROM students ORDER BY score DESC;</code><br>
如果score列有相同的数据，要进一步排序，可以继续添加列名。例如，使用ORDER BY score DESC, gender表示先按score列倒序，如果有相同分数的，再按gender列排序：<br>
<code>SELECT id, name, gender, score FROM students ORDER BY score DESC, gender;</code><br>
默认的排序规则是<code>ASC</code>：“升序”，即从小到大。<code>ASC</code>可以省略，即<code>ORDER BY score ASC</code>和<code>ORDER BY score</code>效果一样。<br>
如果有<code>WHERE</code>子句，那么<code>ORDER BY</code>子句要放到<code>WHERE</code>子句后面。例如，查询一班的学生成绩，并按照倒序排序：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span>, <span class="hljs-keyword">name</span>, gender, score
<span class="hljs-keyword">FROM</span> students
<span class="hljs-keyword">WHERE</span> class_id = <span class="hljs-number">1</span>
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span>;</code></pre></div>
<p>这样，结果集仅包含符合WHERE条件的记录，并按照ORDER BY的设定排序。<br>
<strong>小结</strong><br>
<strong>使用ORDER BY可以对结果集进行排序；可以对多列进行升序、倒序排序。</strong></p>
<h2 id="4-5-分页查询">4.5 分页查询</h2>
<p>要实现分页功能，实际上就是从结果集中显示第1~100条记录作为第1页，显示第101~200条记录作为第2页，以此类推。<br>
因此，分页实际上就是从结果集中“截取”出第M~N条记录。这个查询可以通过<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>子句实现。我们先把所有学生按照成绩从高到低进行排序，我们把结果集分页，每页3条记录。要获取第1页的记录，可以使用<code>LIMIT 3 OFFSET 0</code>：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span>, <span class="hljs-keyword">name</span>, gender, score
<span class="hljs-keyword">FROM</span> students
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span>
<span class="hljs-keyword">LIMIT</span> <span class="hljs-number">3</span> <span class="hljs-keyword">OFFSET</span> <span class="hljs-number">0</span>;</code></pre></div>
<p>上述查询<code>LIMIT 3 OFFSET 0</code>表示，对结果集从0号记录开始，最多取3条。注意SQL记录集的索引从0开始。<br>
如果要查询第2页，那么我们只需要“跳过”头3条记录，也就是对结果集从3号记录开始查询，把OFFSET设定为3：<code>LIMIT 3 OFFSET 3;</code><br>
LIMIT 3表示的意思是“最多3条记录”。</p>
<p>可见，分页查询的关键在于，首先要确定每页需要显示的结果数量pageSize（这里是3），然后根据当前页的索引pageIndex（从1开始），确定LIMIT和OFFSET应该设定的值：</p>
<ul>
<li>LIMIT总是设定为pageSize；</li>
<li>OFFSET计算公式为pageSize * (pageIndex - 1)。</li>
</ul>
<p>这样就能正确查询出第N页的记录集。</p>
<blockquote>
<p>PS:OFFSET超过了查询的最大数量并不会报错，而是得到一个空的结果集。<br>
OFFSET是可选的，如果只写LIMIT 15，那么相当于LIMIT 15 OFFSET 0。<br>
在MySQL中，<code>LIMIT 15 OFFSET 30</code>还可以简写成<code>LIMIT 30, 15</code>。<br>
使用<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>分页时，随着N越来越大，查询效率也会越来越低。</p>
</blockquote>
<p><strong>小结</strong><br>
<strong>使用<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>可以对结果集进行分页，每次查询返回结果集的一部分；分页查询需要先确定每页的数量和当前页数，然后确定LIMIT和OFFSET的值。</strong></p>
<h2 id="4-6-聚合查询">4.6 聚合查询</h2>
<h3 id="4-6-1-聚合函数">4.6.1 聚合函数</h3>
<p>对于统计总数、平均数这类计算，SQL提供了专门的聚合函数，使用聚合函数进行查询，就是聚合查询，它可以快速获得结果。<br>
仍然以查询students表一共有多少条记录为例，我们可以使用SQL内置的COUNT()函数查询：<br>
<code>SELECT COUNT(*) FROM students;</code><br>
<code>COUNT(*)</code>表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是<code>COUNT(*)</code>。<br>
通常，使用聚合查询时，我们应该给列名设置一个别名，便于处理结果：<br>
<code>SELECT COUNT(*) num FROM students;</code><br>
<code>COUNT(*)</code>和<code>COUNT(id)</code>实际上是一样的效果。另外注意，聚合查询同样可以使用WHERE条件，因此我们可以方便地统计出有多少男生、多少女生、多少80分以上的学生等：<br>
<code>SELECT COUNT(*) boys FROM students WHERE gender = 'M';</code><br>
除了COUNT()函数外，SQL还提供了如下聚合函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>SUM</td>
<td>计算某一列的合计值，该列必须为数值类型</td>
</tr>
<tr>
<td>AVG</td>
<td>计算某一列的平均值，该列必须为数值类型</td>
</tr>
<tr>
<td>MAX</td>
<td>计算某一列的最大值</td>
</tr>
<tr>
<td>MIN</td>
<td>计算某一列的最小值</td>
</tr>
</tbody>
</table>
<p>注意，MAX()和MIN()函数并不限于数值类型。如果是字符类型，MAX()和MIN()会返回排序最后和排序最前的字符。<br>
要统计男生的平均成绩，我们用下面的聚合查询：<br>
<code>SELECT AVG(score) average FROM students WHERE gender = 'M';</code><br>
要特别注意：如果聚合查询的WHERE条件没有匹配到任何行，COUNT()会返回0，而SUM()、AVG()、MAX()和MIN()会返回NULL。<br>
通过聚合查询获得总页数:<br>
<code>SELECT CEILING(COUNT(*) / 3) FROM students;</code></p>
<h3 id="4-6-2-分组聚合">4.6.2 分组聚合</h3>
<p>对于聚合查询，SQL还提供了“分组聚合”的功能。我们观察下面的聚合查询：<br>
<code>SELECT COUNT(*) num FROM students GROUP BY class_id;</code><br>
执行这个查询，COUNT()的结果不再是一个，而是3个，这是因为，<code>GROUP(组) BY</code>子句指定了按class_id分组，因此，执行该SELECT语句时，会把class_id相同的列先分组，再分别计算，因此，得到了3行结果。<br>
但是这3行结果分别是哪三个班级的，不好看出来，所以我们可以把class_id列也放入结果集中：<br>
<code>SELECT class_id, COUNT(*) num FROM students GROUP BY class_id;</code>这下结果集就可以一目了然地看出各个班级的学生人数。<br>
也可以使用多个列进行分组。例如，我们想统计各班的男生和女生人数：<br>
<code>SELECT class_id, gender, COUNT(*) num FROM students GROUP BY class_id, gender;</code><br>
<strong>小结</strong><br>
<strong>使用SQL提供的聚合查询，我们可以方便地计算总数、合计值、平均值、最大值和最小值；聚合查询也可以添加WHERE条件。</strong></p>
<h2 id="4-7-多表查询">4.7 多表查询</h2>
<p>SELECT查询不但可以从一张表查询数据，还可以从多张表同时查询数据。查询多张表的语法是：<code>SELECT * FROM &lt;表1&gt; &lt;表2&gt;</code>。<br>
例如，同时从students表和classes表的“乘积”，即查询数据，可以这么写：<code>SELECT * FROM students, classes;</code><br>
这种一次查询两个表的数据，查询的结果也是一个二维表，它是students表和classes表的“乘积”，即students表的每一行与classes表的每一行都两两拼在一起返回。结果集的列数是students表和classes表的列数之和，行数是students表和classes表的行数之积。<br>
这种多表查询又称<strong>笛卡尔查询</strong>，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有100行记录的表进行笛卡尔查询将返回1万条记录，对两个各自有1万行记录的表进行笛卡尔查询将返回1亿条记录。</p>
<p>上述查询的结果集有两列id和两列name，两列id是因为其中一列是students表的id，而另一列是classes表的id，但是在结果集中，不好区分。两列name同理。要解决这个问题，我们仍然可以利用投影查询的“设置列的别名”来给两个表各自的id和name列起别名：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>
    students.id <span class="hljs-keyword">sid</span>,
    students.name,
    students.gender,
    students.score,
    classes.id cid,
    classes.name cname
<span class="hljs-keyword">FROM</span> students, classes;</code></pre></div>
<p>注意，多表查询时，要使用<code>表名.列名</code>这样的方式来引用列和设置别名，这样就避免了结果集的列名重复问题。但是，用<code>表名.列名</code>这种方式列举两个表的所有列实在是很麻烦，所以SQL还允许给表设置一个别名，让我们在投影查询中引用起来稍微简洁一点：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>
    s.id <span class="hljs-keyword">sid</span>,
    s.name,
    s.gender,
    s.score,
    c.id cid,
    c.name cname
<span class="hljs-keyword">FROM</span> students s, classes c;</code></pre></div>
<p>注意到FROM子句给表设置别名的语法是<code>FROM &lt;表名1&gt; &lt;别名1&gt;, &lt;表名2&gt; &lt;别名2&gt;</code>。这样我们用别名s和c分别表示students表和classes表。<br>
多表查询也是可以添加WHERE条件的：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>
    s.id <span class="hljs-keyword">sid</span>,
    s.name,
    s.gender,
    s.score,
    c.id cid,
    c.name cname
<span class="hljs-keyword">FROM</span> students s, classes c
<span class="hljs-keyword">WHERE</span> s.gender = <span class="hljs-string">'M'</span> <span class="hljs-keyword">AND</span> c.id = <span class="hljs-number">1</span>;</code></pre></div>
<p><strong>小结</strong><br>
<strong>使用多表查询可以获取M x N行记录；多表查询的结果集可能非常巨大，要小心使用。</strong></p>
<h2 id="4-8-连接查询">4.8 连接查询</h2>
<p>连接查询是另一种类型的多表查询。连接查询对多个表进行JOIN运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。<br>
例如，我们想要选出students表的所有学生信息，可以用一条简单的SELECT语句完成：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.id, s.name, s.class_id, s.gender, s.score <span class="hljs-keyword">FROM</span> students s;</code></pre></div>
<p>但是，假设我们希望结果集同时包含所在班级的名称，上面的结果集只有class_id列，缺少对应班级的name列。<br>
现在问题来了，存放班级名称的name列存储在classes表中，只有根据students表的class_id，找到classes表对应的行，再取出name列，就可以获得班级名称。<br>
这时，连接查询就派上了用场。我们先使用最常用的一种内连接——INNER JOIN来实现：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score
<span class="hljs-keyword">FROM</span> students s
<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> classes c
<span class="hljs-keyword">ON</span> s.class_id = c.id;</code></pre></div>
<p>注意INNER JOIN查询的写法是：</p>
<ol>
<li>先确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；</li>
<li>再确定需要连接的表，使用<code>INNER(里面的) JOIN &lt;表2&gt;</code>的语法；</li>
<li>然后确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class_id = c.id</code>，表示students表的class_id列与classes表的id列相同的行需要连接；</li>
<li>可选：加上WHERE子句、ORDER BY等子句。</li>
</ol>
<p>那什么是内连接（INNER JOIN）呢？先别着急，有内连接（INNER JOIN）就有外连接（OUTER JOIN）。我们把内连接查询改成外连接查询，看看效果：</p>
<div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score
<span class="hljs-keyword">FROM</span> students s
<span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> classes c
<span class="hljs-keyword">ON</span> s.class_id = c.id;</code></pre></div>
<p>执行上述RIGHT OUTER JOIN可以看到，和INNER JOIN相比，RIGHT OUTER JOIN多了一行，多出来的一行是“四班”，但是，学生相关的列如name、gender、score都为NULL。<br>
这也容易理解，因为根据ON条件<code>s.class_id = c.id</code>，classes表的id=4的行正是“四班”，但是，students表中并不存在class_id=4的行。<br>
有RIGHT OUTER JOIN，就有LEFT OUTER JOIN，以及FULL OUTER JOIN。它们的区别是：</p>
<ul>
<li>INNER JOIN只返回同时存在于两张表的行数据，由于students表的class_id包含1，2，3，classes表的id包含1，2，3，4，所以，INNER JOIN根据条件<code>s.class_id = c.id</code>返回的结果集仅包含1，2，3。</li>
<li>RIGHT OUTER JOIN返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以NULL填充剩下的字段。</li>
<li>LEFT OUTER JOIN则返回左表都存在的行。如果我们给students表增加一行，并添加class_id=5，由于classes表并不存在id=5的行，所以，LEFT OUTER JOIN的结果会增加一行，对应的class_name是NULL。</li>
</ul>
<p>对于这么多种JOIN查询，到底什么使用应该用哪种呢？其实我们用图来表示结果集就一目了然了。假设查询语句是：<br>
<code>SELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;</code><br>
我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：<br>
<img src="https://www.liaoxuefeng.com/files/attachments/1246892164662976/l" srcset="/img/loading.gif" alt="inner-join"><br>
LEFT OUTER JOIN是选出左表存在的记录：<br>
<img src="https://www.liaoxuefeng.com/files/attachments/1246893588481376/l" srcset="/img/loading.gif" alt="left-outer-join"><br>
RIGHT OUTER JOIN是选出右表存在的记录：<br>
<img src="https://www.liaoxuefeng.com/files/attachments/1246893609222688/l" srcset="/img/loading.gif" alt="right-outer-join"><br>
FULL OUTER JOIN则是选出左右表都存在的记录：<br>
<img src="https://www.liaoxuefeng.com/files/attachments/1246893632359424/l" srcset="/img/loading.gif" alt="full-outer-join"></p>
<p><strong>小结</strong><br>
<strong>JOIN查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；  INNER JOIN是最常用的一种JOIN查询，它的语法是<code>SELECT ... FROM &lt;表1&gt; INNER JOIN &lt;表2&gt; ON &lt;条件...&gt;</code>；  JOIN查询仍然可以使用WHERE条件和ORDER BY排序。</strong></p>
<h1>五： 修改数据</h1>
<p>关系数据库的基本操作就是增删改查，即CRUD：Create、Retrieve、Update、Delete。其中，对于查询，我们已经详细讲述了SELECT语句的详细用法。<br>
而对于增、删、改，对应的SQL语句分别是：</p>
<ul>
<li>INSERT：插入新记录；</li>
<li>UPDATE：更新已有记录；</li>
<li>DELETE：删除已有记录。</li>
</ul>
<h2 id="5-1-INSERT">5.1 INSERT</h2>
<p>当我们需要向数据库表中插入一条新记录时，就必须使用<code>INSERT</code>语句。<br>
INSERT语句的基本语法是：<br>
<code>INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...);</code><br>
例如，我们向students表插入一条新记录，先列举出需要插入的字段名称，然后在VALUES子句中依次写出对应字段的值：<br>
<code>INSERT INTO students (class_id, name, gender, score) VALUES (2, '大牛', 'M', 80);</code><br>
注意到我们并没有列出id字段，也没有列出id字段对应的值，这是因为id字段是一个自增主键，它的值可以由数据库自己推算出来。此外，如果一个字段有默认值，那么在INSERT语句中也可以不出现。<br>
要注意，字段顺序不必和数据库表的字段顺序一致，但值的顺序必须和字段顺序一致。也就是说，可以写:<br>
<code>INSERT INTO students (score, gender, name, class_id) ...</code>，但是对应的VALUES就得变成<code>(80, 'M', '大牛', 2)</code>。<br>
还可以一次性添加多条记录，只需要在VALUES子句中指定多个记录值，每个记录是由(…)包含的一组值：</p>
<div class="hljs"><pre><code class="hljs sql">INSERT INTO students (class_id, name, gender, score) VALUES
  (1, '大宝', 'M', 87),
  (2, '二宝', 'M', 81);
--
SELECT * FROM students;
```  

**小结**
**使用INSERT，我们就可以一次向一个表中插入一条或多条记录。**

## 5.2 UPDATE

如果要更新数据库表中的记录，我们就必须使用UPDATE语句。  
UPDATE语句的基本语法是：  
`UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...;`  
例如，我们想更新students表id=1的记录的name和score这两个字段：  
`UPDATE students SET name='大牛', score=66 WHERE id=1;`  
注意到UPDATE语句的WHERE条件和SELECT语句的WHERE条件其实是一样的，因此完全可以一次更新多条记录：  
`UPDATE students SET name='小牛', score=77 WHERE id&gt;=5 AND id&lt;=7;`  
在UPDATE语句中，更新字段时可以使用表达式。例如，把所有80分以下的同学的成绩加10分：  
`UPDATE students SET score=score+10 WHERE score&lt;80;`  
其中，SET score=score+10就是给当前行的score字段的值加上了10。  
如果WHERE条件没有匹配到任何记录，UPDATE语句不会报错，也不会有任何记录被更新。  
最后，要特别小心的是，UPDATE语句可以没有WHERE条件，例如：  
`UPDATE students SET score=60;`  
这时，整个表的所有记录都会被更新。所以，在执行UPDATE语句时要非常小心，最好先用SELECT语句来测试WHERE条件是否筛选出了期望的记录集，然后再用UPDATE更新。  
在使用MySQL这类真正的关系数据库时，UPDATE语句会返回更新的行数以及WHERE条件匹配的行数。  

**小结**
**使用UPDATE，我们就可以一次更新表中的一条或多条记录。**

## 5.3 DELETE

如果要删除数据库表中的记录，我们可以使用DELETE语句。  
DELETE语句的基本语法是：  
`DELETE FROM &lt;表名&gt; WHERE ...;`
例如，我们想删除students表中id=1的记录，就需要这么写：  
`DELETE FROM students WHERE id=1;`  
注意到DELETE语句的WHERE条件也是用来筛选需要删除的行，因此和UPDATE类似，DELETE语句也可以一次删除多条记录：  
`DELETE FROM students WHERE id&gt;=5 AND id&lt;=7;`  
如果WHERE条件没有匹配到任何记录，DELETE语句不会报错，也不会有任何记录被删除。  
最后，要特别小心的是，和UPDATE类似，不带WHERE条件的DELETE语句会删除整个表的数据：  
`DELETE FROM students;`  
这时，整个表的所有记录都会被删除。所以，在执行DELETE语句时也要非常小心，最好先用SELECT语句来测试WHERE条件是否筛选出了期望的记录集，然后再用DELETE删除。  
在使用MySQL这类真正的关系数据库时，DELETE语句也会返回删除的行数以及WHERE条件匹配的行数。  

**小结**
**使用DELETE，我们就可以一次删除表中的一条或多条记录。**

# 六： MySQL

安装完MySQL后，除了MySQL Server，即真正的MySQL服务器外，还附赠一个MySQL Client程序。MySQL Client是一个命令行客户端，可以通过MySQL Client登录MySQL，然后，输入SQL语句并执行。  
打开命令提示符，输入命令`mysql -u root -p`，提示输入口令。填入MySQL的root口令，如果正确，就连上了MySQL Server，同时提示符变为mysql&gt;：  
输入exit断开与MySQL Server的连接并返回到命令提示符。
&gt;MySQL Client的可执行程序是mysql，MySQL Server的可执行程序是mysqld。

在MySQL Client中输入的SQL语句通过TCP连接发送到MySQL Server。默认端口号是3306，即如果发送到本机MySQL Server，地址就是127.0.0.1:3306。  
也可以只安装MySQL Client，然后连接到远程MySQL Server。假设远程MySQL Server的IP地址是10.0.1.99，那么就使用-h指定IP或域名：  
`mysql -h 10.0.1.99 -u root -p 密码`  

**小结**
**命令行程序mysql实际上是MySQL客户端，真正的MySQL服务器程序是mysqld，在后台运行。**

## 6.1 管理MySQL

要管理MySQL，可以使用可视化图形界面[MySQL Workbench](https://dev.mysql.com/downloads/workbench/)。  
MySQL Workbench可以用可视化的方式查询、创建和修改数据库表，但是，归根到底，MySQL Workbench是一个图形客户端，它对MySQL的操作仍然是发送SQL语句并执行。因此，本质上，MySQL Workbench和MySQL Client命令行都是客户端，和MySQL交互，唯一的接口就是SQL。  
因此，MySQL提供了大量的SQL语句用于管理。虽然可以使用MySQL Workbench图形界面来直接管理MySQL，但是，很多时候，通过SSH远程连接时，只能使用SQL命令，所以，了解并掌握常用的SQL管理操作是必须的。  

### 6.1.1 数据库

在一个运行MySQL的服务器上，实际上可以创建多个数据库（Database）。要列出所有数据库，使用命令：  

```sql
SHOW DATABASES;</code></pre></div>
<p>其中，<code>information_schema</code>、<code>mysql</code>、<code>performance_schema</code>和<code>sys</code>四个是系统库，不要去改动它们。其他的是用户创建的数据库。<br>
要创建一个新数据库，使用命令：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">test</span>;</code></pre></div>
<p>要删除一个数据库，使用命令：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">test</span>;</code></pre></div>
<p><em>注意：删除一个数据库将导致该数据库的所有表全部被删除。</em><br>
对一个数据库进行操作时，要首先将其切换为当前数据库：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">USE</span> <span class="hljs-keyword">test</span>;
```  

<span class="hljs-comment">### 6.1.2 表</span>

列出当前数据库的所有表，使用命令：  

```sql
<span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLES</span>;
```  

要查看一个表的结构，使用命令：  

```sql
DESC students;</code></pre></div>
<p>还可以使用以下命令查看创建表的SQL语句：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> students;
```  

创建表使用<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span>语句，而删除表使用<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span>语句：  

<span class="hljs-string">``</span><span class="hljs-string">`sql
DROP TABLE students;
`</span><span class="hljs-string">``</span>  

修改表就比较复杂。如果要给students表新增一列birth，使用：  

<span class="hljs-string">``</span><span class="hljs-string">`sql
ALTER TABLE students ADD COLUMN birth VARCHAR(10) NOT NULL;
`</span><span class="hljs-string">``</span>  

要修改birth列，例如把列名改为birthday，类型改为<span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">20</span>)：

<span class="hljs-string">``</span><span class="hljs-string">`sql
ALTER TABLE students CHANGE COLUMN birth birthday VARCHAR(20) NOT NULL;</span></code></pre></div>
<p>要删除列，使用：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> birthday;</code></pre></div>
<h3 id="6-1-3-退出MySQL">6.1.3 退出MySQL</h3>
<p>使用EXIT命令退出MySQL：<br>
<code>EXIT</code><br>
注意EXIT仅仅断开了客户端和服务器的连接，MySQL服务器仍然继续运行。</p>
<h2 id="6-2-实用SQL语句">6.2 实用SQL语句</h2>
<p>在编写SQL时，灵活运用一些技巧，可以大大简化程序逻辑。</p>
<p><strong>一. 插入或替换</strong><br>
如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就先删除原记录，再插入新记录。此时，可以使用<code>REPLACE</code>语句，这样就不必先查询，再决定是否先删除再插入：<br>
<code>REPLACE INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99);</code><br>
若id=1的记录不存在，REPLACE语句将插入新记录，否则，当前id=1的记录将被删除，然后再插入新记录。</p>
<p><strong>二. 插入或更新</strong><br>
如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就更新该记录，此时，可以使用<code>INSERT INTO ... ON DUPLICATE KEY UPDATE ...</code>语句：<br>
<code>INSERT INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99) ON DUPLICATE KEY UPDATE name='小明', gender='F', score=99;</code><br>
若id=1的记录不存在，INSERT语句将插入新记录，否则，当前id=1的记录将被更新，更新的字段由UPDATE指定。</p>
<p><strong>三. 插入或忽略</strong><br>
如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就啥事也不干直接忽略，此时，可以使用<code>INSERT IGNORE INTO ...</code>语句：<br>
<code>INSERT IGNORE INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99);</code><br>
若id=1的记录不存在，INSERT语句将插入新记录，否则，不执行任何操作。</p>
<p><strong>四. 快照</strong><br>
如果想要对一个表进行快照，即复制一份当前表的数据到一个新表，可以结合CREATE TABLE和SELECT：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-comment">-- 对class_id=1的记录进行快照，并存储为新表students_of_class1:  </span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> students_of_class1 <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> class_id=<span class="hljs-number">1</span>;</code></pre></div>
<p>新创建的表结构和SELECT使用的表结构完全一致。</p>
<p><strong>五. 写入查询结果集</strong><br>
如果查询结果集需要写入到表中，可以结合INSERT和SELECT，将SELECT语句的结果集直接插入到指定表中。<br>
例如，创建一个统计成绩的表statistics，记录各班的平均成绩：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">statistics</span> (
    <span class="hljs-keyword">id</span> <span class="hljs-built_in">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,
    class_id <span class="hljs-built_in">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    average <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-keyword">id</span>)
);</code></pre></div>
<p>然后，我们就可以用一条语句写入各班的平均成绩：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">statistics</span> (class_id, average) <span class="hljs-keyword">SELECT</span> class_id, <span class="hljs-keyword">AVG</span>(score) <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> class_id;</code></pre></div>
<p>确保INSERT语句的列和SELECT语句的列能一一对应，就可以在statistics表中直接保存查询的结果：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">statistics</span>;</code></pre></div>
<p><strong>六. 强制使用指定索引</strong><br>
在查询的时候，数据库系统会自动分析查询语句，并选择一个最合适的索引。但是很多时候，数据库系统的查询优化器并不一定总是能使用最优索引。如果我们知道如何选择索引，可以使用FORCE INDEX强制查询使用指定的索引。例如：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">FORCE</span> <span class="hljs-keyword">INDEX</span> (idx_class_id) <span class="hljs-keyword">WHERE</span> class_id = <span class="hljs-number">1</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">DESC</span>;</code></pre></div>
<p>指定索引的前提是索引idx_class_id必须存在。</p>
<h1>七： 事务</h1>
<p>在执行SQL语句的时候，某些业务要求，一系列操作必须全部执行，而不能仅执行一部分。例如，一个转账操作：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-comment">-- 从id=1的账户给id=2的账户转账100元</span>
<span class="hljs-comment">-- 第一步：将id=1的A账户余额减去100</span>
<span class="hljs-keyword">UPDATE</span> accounts <span class="hljs-keyword">SET</span> balance = balance - <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">1</span>;
<span class="hljs-comment">-- 第二步：将id=2的B账户余额加上100</span>
<span class="hljs-keyword">UPDATE</span> accounts <span class="hljs-keyword">SET</span> balance = balance + <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">2</span>;</code></pre></div>
<p>这两条SQL语句必须全部执行，或者，由于某些原因，如果第一条语句成功，第二条语句失败，就必须全部撤销。<br>
这种把<strong>多条语句作为一个整体进行操作的功能，被称为数据库事务</strong>。数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。如果事务失败，那么效果就和没有执行这些SQL一样，不会对数据库数据有任何改动。<br>
可见，数据库事务具有ACID这4个特性：</p>
<ol>
<li>A：Atomic，原子性，将所有SQL作为原子工作单元执行，要么全部执行，要么全部不执行；</li>
<li>C：Consistent，一致性，事务完成后，所有数据的状态都是一致的，即A账户只要减去了100，B账户则必定加上了100；</li>
<li>I：Isolation，隔离性，如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离；</li>
<li>D：Duration，持久性，即事务完成后，对数据库数据的修改被持久化存储。</li>
</ol>
<p>对于单条SQL语句，数据库系统自动将其作为一个事务执行，这种事务被称为隐式事务。<br>
要手动把多条SQL语句作为一个事务执行，使用<code>BEGIN</code>开启一个事务，使用<code>COMMIT</code>提交一个事务，这种事务被称为<strong>显式事务</strong>，例如，把上述的转账操作作为一个显式事务：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span>;
<span class="hljs-keyword">UPDATE</span> accounts <span class="hljs-keyword">SET</span> balance = balance - <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">1</span>;
<span class="hljs-keyword">UPDATE</span> accounts <span class="hljs-keyword">SET</span> balance = balance + <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">2</span>;
<span class="hljs-keyword">COMMIT</span>;</code></pre></div>
<p>很显然多条SQL语句要想作为一个事务执行，就必须使用显式事务。<br>
COMMIT是指提交事务，即试图把事务内的所有SQL所做的修改永久保存。如果COMMIT语句执行失败了，整个事务也会失败。<br>
有些时候，我们希望主动让事务失败，这时，可以用ROLLBACK回滚事务，整个事务会失败：</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span>;
<span class="hljs-keyword">UPDATE</span> accounts <span class="hljs-keyword">SET</span> balance = balance - <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">1</span>;
<span class="hljs-keyword">UPDATE</span> accounts <span class="hljs-keyword">SET</span> balance = balance + <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">2</span>;
<span class="hljs-keyword">ROLLBACK</span>;</code></pre></div>
<p>数据库事务是由数据库系统保证的，我们只需要根据业务逻辑使用它就可以。</p>
<p><strong>隔离级别</strong></p>
<p>对于两个并发执行的事务，如果涉及到操作同一条记录的时候，可能会发生问题。因为并发操作会带来数据的不一致性，包括脏读、不可重复读、幻读等。数据库系统提供了隔离级别来让我们有针对性地选择事务的隔离级别，避免数据不一致的问题。<br>
SQL标准定义了4种隔离级别，分别对应可能出现的数据不一致的情况：</p>
<table>
<thead>
<tr>
<th>Isolation Level</th>
<th>脏读（Dirty Read）</th>
<th>不可重复读（Non Repeatable Read）</th>
<th>幻读（Phantom Read）</th>
</tr>
</thead>
<tbody>
<tr>
<td>Read Uncommitted</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Read Committed</td>
<td>-</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Repeatable Read</td>
<td>-</td>
<td>-</td>
<td>Yes</td>
</tr>
<tr>
<td>Serializable</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>我们会依次介绍4种隔离级别的数据一致性问题。</p>
<p><strong>小结</strong><br>
<strong>数据库事务具有ACID特性，用来保证多条SQL的全部执行。</strong></p>
<h2 id="7-1-Read-Uncommitted">7.1 Read Uncommitted</h2>
<p>Read Uncommitted是隔离级别最低的一种事务级别。在这种隔离级别下，一个事务会读到另一个事务更新后但未提交的数据，如果另一个事务回滚，那么当前事务读到的数据就是脏数据，这就是脏读（Dirty Read）。<br>
我们来看一个例子。首先，我们准备好students表的数据，该表仅一行记录。<br>
然后，分别开启两个MySQL客户端连接，按顺序依次执行事务A和事务B：</p>
<table>
<thead>
<tr>
<th>时刻</th>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td>
<td>SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td>
</tr>
<tr>
<td>2</td>
<td>BEGIN;</td>
<td>BEGIN;</td>
</tr>
<tr>
<td>3</td>
<td>UPDATE students SET name = ‘Bob’ WHERE id = 1;</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td></td>
<td>SELECT * FROM students WHERE id = 1;</td>
</tr>
<tr>
<td>5</td>
<td>ROLLBACK;</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td></td>
<td>SELECT * FROM students WHERE id = 1;</td>
</tr>
<tr>
<td>7</td>
<td></td>
<td>COMMIT;</td>
</tr>
</tbody>
</table>
<p>当事务A执行完第3步时，它更新了id=1的记录，但并未提交，而事务B在第4步读取到的数据就是未提交的数据。<br>
随后，事务A在第5步进行了回滚，事务B再次读取id=1的记录，发现和上一次读取到的数据不一致，这就是脏读。<br>
可见，在Read Uncommitted隔离级别下，一个事务可能读取到另一个事务更新但未提交的数据，这个数据有可能是脏数据。</p>
<h2 id="7-2-Read-Committed">7.2 Read Committed</h2>
<p>在Read Committed隔离级别下，一个事务可能会遇到不可重复读（Non Repeatable Read）的问题。<br>
不可重复读是指，在一个事务内，多次读同一数据，在这个事务还没有结束时，如果另一个事务恰好修改了这个数据，那么，在第一个事务中，两次读取的数据就可能不一致。<br>
我们仍然先准备好students表的数据，然后，分别开启两个MySQL客户端连接，按顺序依次执行事务A和事务B：</p>
<table>
<thead>
<tr>
<th>时刻</th>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</td>
<td>SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</td>
</tr>
<tr>
<td>2</td>
<td>BEGIN;</td>
<td>BEGIN;</td>
</tr>
<tr>
<td>3</td>
<td></td>
<td>SELECT * FROM students WHERE id = 1;</td>
</tr>
<tr>
<td>4</td>
<td>UPDATE students SET name = ‘Bob’ WHERE id = 1;</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>COMMIT;</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td></td>
<td>SELECT * FROM students WHERE id = 1;</td>
</tr>
<tr>
<td>7</td>
<td></td>
<td>COMMIT;</td>
</tr>
</tbody>
</table>
<p>当事务B第一次执行第3步的查询时，得到的结果是Alice，随后，由于事务A在第4步更新了这条记录并提交，所以，事务B在第6步再次执行同样的查询时，得到的结果就变成了Bob，因此，在Read Committed隔离级别下，事务不可重复读同一条记录，因为很可能读到的结果不一致。</p>
<h2 id="7-3-Repeatable-Read">7.3 Repeatable Read</h2>
<p>在Repeatable Read隔离级别下，一个事务可能会遇到幻读（Phantom Read）的问题。<br>
幻读是指，在一个事务中，第一次查询某条记录，发现没有，但是，当试图更新这条不存在的记录时，竟然能成功，并且，再次读取同一条记录，它就神奇地出现了。<br>
我们仍然先准备好students表的数据，然后，分别开启两个MySQL客户端连接，按顺序依次执行事务A和事务B：</p>
<table>
<thead>
<tr>
<th>时刻</th>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</td>
<td>SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</td>
</tr>
<tr>
<td>2</td>
<td>BEGIN;</td>
<td>BEGIN;</td>
</tr>
<tr>
<td>3</td>
<td></td>
<td>SELECT * FROM students WHERE id = 99;</td>
</tr>
<tr>
<td>4</td>
<td>INSERT INTO students (id, name) VALUES (99, ‘Bob’);</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>COMMIT;</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td></td>
<td>SELECT * FROM students WHERE id = 99;</td>
</tr>
<tr>
<td>7</td>
<td></td>
<td>UPDATE students SET name = ‘Alice’ WHERE id = 99;</td>
</tr>
<tr>
<td>8</td>
<td></td>
<td>SELECT * FROM students WHERE id = 99;</td>
</tr>
<tr>
<td>9</td>
<td></td>
<td>COMMIT;</td>
</tr>
</tbody>
</table>
<p>事务B在第3步第一次读取id=99的记录时，读到的记录为空，说明不存在id=99的记录。随后，事务A在第4步插入了一条id=99的记录并提交。事务B在第6步再次读取id=99的记录时，读到的记录仍然为空，但是，事务B在第7步试图更新这条不存在的记录时，竟然成功了，并且，事务B在第8步再次读取id=99的记录时，记录出现了。<br>
可见，幻读就是没有读到的记录，以为不存在，但其实是可以更新成功的，并且，更新成功后，再次读取，就出现了。</p>
<h2 id="7-4-Serializable">7.4 Serializable</h2>
<p>Serializable是最严格的隔离级别。在Serializable隔离级别下，所有事务按照次序依次执行，因此，脏读、不可重复读、幻读都不会出现。<br>
虽然Serializable隔离级别下的事务具有最高的安全性，但是，由于事务是串行执行，所以效率会大大下降，应用程序的性能会急剧降低。如果没有特别重要的情景，一般都不会使用Serializable隔离级别。</p>
<p><strong>默认隔离级别</strong><br>
<strong>如果没有指定隔离级别，数据库就会使用默认的隔离级别。在MySQL中，如果使用InnoDB，默认的隔离级别是Repeatable Read。</strong></p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>MYSQL</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构第七章 图</title>
    <url>/2020/01/08/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC7%E7%AB%A0%20%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="7-1-7-2-图的定义">7.1-7.2 图的定义</h2>
<p>图（Graph）是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G（V，E），其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。<br>
对于图的定义，我们需要明确几个注意的地方。</p>
<a id="more"></a>
<ul>
<li>线性表中我们把数据元素叫元素，树中将数据元素叫结点，<strong>在图中数据元素，我们则称之为顶点（Vertex）</strong>。</li>
<li>线性表中可以没有数据元素，称为空表。树中可以没有结点，叫做空树。我们根本不认为一张空白纸算作画的。同样，在图结构中，不允许没有顶点。在定义中，若V是顶点的集合，则强调了顶点集合V有穷非空。</li>
<li>线性表中，相邻的数据元素之间具有线性关系，树结构中，相邻两层的结点具有层次关系，而图中，任意两个顶点之间都可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的。</li>
</ul>
<h3 id="7-2-1-各种图定义">7.2.1 各种图定义</h3>
<p><strong>无向边：若顶点vi到vj之间的边没有方向，则称这条边为无向边（Edge），用无序偶对（ViVj）来表示</strong>。<br>
如果图中任意两个顶点之间的边都是无向边，则称该图为无向图（Undirected graphs）。<br>
有向边：若从顶点Vi到Vj的边有方向，则称这条边为有向边，也称为弧（Arc）。<br>
用有序偶&lt;vi，vj&gt;来表示，vi称为弧尾（Tail），vj称为弧头（Head）。如果图中任意两个顶点之间的边都是有向边，则称该图为有向图（Directed graphs）。图7-2-3就是一个有向图。连接顶点A到D的有向边就是弧，A是弧尾，D是弧头，&lt;A，D&gt;表示弧，注意不能写成&lt;D，A&gt;。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-2-3.JPG?raw=true" srcset="/img/loading.gif" alt="7-2-3"><br>
对于图7-2-3中的有向图G2来说，G2=(V2,{E2})，其中顶点集合V2={A.B，C，D}；弧集合E2={&lt;A，D&gt;，&lt;B，A&gt;，&lt;C，A&gt;，&lt;B，C&gt;}。<br>
看清楚了，无向边用小括号“（）”表示，而有向边则是用尖括号“&lt;&gt;”表示。<br>
在图中，若不存在顶点到其自身的边，且同一条边不重复出现，则称这样的图为简单图。<br>
<strong>在无向图中，如果任意两个顶点之间都存在边，则称该图为无向完全图</strong>。含有n个顶点的无向完全图有（nx(n-1)）/2条边。<br>
<strong>在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧，则称该图为有向完全图</strong>。含有n个顶点的有向完全图有n×（n-1）条边。<br>
<strong>有很少条边或弧的图称为稀疏图，反之称为稠密图</strong>。<br>
有些图的边或弧具有与它相关的数字，这种<strong>与图的边或弧相关的数叫做权（Weight）</strong>。这些权可以表示从一个顶点到另一个顶点的距离或耗费。<strong>这种带权的图通常称为网（Network）</strong>。图7-2-7就是一张带权的图，即标识中国四大城市的直线距离的网，此图中的权就是两地的距离。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-2-7.JPG?raw=true" srcset="/img/loading.gif" alt="7-2-7"><br>
假设有两个图G=（V，{E}）和G’=（V’,{E’}），如果V’⊆V且E’⊆E，则称G’为G的子图（SubGraph）。</p>
<h3 id="7-2-2-图的顶点与边间关系">7.2.2 图的顶点与边间关系</h3>
<p>对于无向图G=（V,{E}），如果边（v,v’）∈E，则称顶点v和v’互为邻接点（Adjacent），即v和v’相邻接。边（v，v’）依附（incident）于顶点v和v’，或者说（v,v’）与顶点v和v’相关联。顶点v的度（Degree）是和v相关联的边的数目，记为TD（v）。<br>
对于有向图G=（V,{E}），如果弧&lt;v,v’&gt;∈E，则称顶点v邻接到顶点v’，顶点v’邻接自顶点v。弧&lt;v，v’&gt;和顶点v，v’相关联。以顶点v为头的弧的数目称为v的入度（InDegree），记为ID（v）；以v为尾的弧的数目称为v的出度（OutDegree），记为OD（v）；顶点v的度为TD（v）=ID（v）+OD（v）。<br>
无向图G=（V，{E}）中从顶点v到顶点v’的路径（Path）是一个顶点序列（v=$v_{i,0}$,$v_{i,1}$,…,$v_{i,m}$=v’），其中（$v_{i,j-1}$，$v_{i,j}$）∈E，1≤j≤m。<br>
树中根结点到任意结点的路径是唯一的，但是图中顶点与顶点之间的路径却是不唯一的。<br>
<strong>路径的长度是路径上的边或弧的数目。</strong><br>
第一个顶点到最后一个顶点相同的路径称为回路或环（Cycle）。序列中顶点不重复出现的路径称为简单路径。除了第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路，称为简单回路或简单环。</p>
<h3 id="7-2-3-连通图相关术语">7.2.3 连通图相关术语</h3>
<p>在无向图G中，如果从顶点v到顶点v’有路径，则称v和v’是连通的。如果对于图中任意两个顶点$v_i$、$v_j$∈E，$v_i$和$v_j$都是连通的，则称G是连通图（Connected Graph）。<br>
<strong>无向图中的极大连通子图称为连通分量</strong>。注意连通分量的概念，它强调：</p>
<ul>
<li>要是子图；</li>
<li>子图要是连通的；</li>
<li>连通子图含有极大顶点数；</li>
<li>具有极大顶点数的连通子图包含依附于这些顶点的所有边。</li>
</ul>
<p><strong>在有向图G中，如果对于每一对$v_i$、$v_j$∈V、$v_i$≠$v_j$，从$v_i$到$v_j$和从$v_j$到$v_i$都存在路径，则称G是强连通图。有向图中的极大强连通子图称做有向图的强连通分量</strong>。<br>
<strong>所谓的一个连通图的生成树是一个极小的连通子图，它含有图中全部的n个顶点，但只有足以构成一棵树的n-1条边</strong>。<br>
如果一个有向图恰有一个顶点的入度为0，其余顶点的入度均为1，则是一棵有向树。<br>
一个有向图的生成森林由若干棵有向树组成，含有图中全部顶点，但只有足以构成若干棵不相交的有向树的弧。</p>
<h3 id="7-2-4-图的定义与术语总结">7.2.4 图的定义与术语总结</h3>
<p>术语终于介绍得差不多了，可能有不少同学有些头晕，我们再来整理一下。<br>
图按照有无方向分为无向图和有向图。无向图由顶点和边构成，有向图由顶点和弧构成。弧有弧尾和弧头之分。<br>
图按照边或弧的多少分稀疏图和稠密图。如果任意两个顶点之间都存在边叫完全图，有向的叫有向完全图。若无重复的边或顶点到自身的边则叫简单图。<br>
图中顶点之间有邻接点、依附的概念。无向图顶点的边数叫做度，有向图顶点分为入度和出度。<br>
图上的边或弧上带权则称为网。<br>
图中顶点间存在路径，两顶点存在路径则说明是连通的，如果路径最终回到起始点则称为环，当中不重复叫简单路径。若任意两顶点都是连通的，则图就是连通图，有向则称强连通图。图中有子图，若子图极大连通则就是连通分量，有向的则称强连通分量。<br>
无向图中连通且n个顶点n-1条边叫生成树。有向图中一顶点入度为0其余顶点入度为1的叫有向树。一个有向图由若干棵有向树构成生成森林。</p>
<h2 id="7-3-图的抽象数据类型">7.3 图的抽象数据类型</h2>
<div class="hljs"><pre><code class="hljs c">ADT图（Graph）
Data
  顶点的有穷非空集合和边的集合。
Operation
  CreateGraph（*G，V，VR）：按照顶点集V和边弧集VR的定义构造图G。
  DestroyGraph（*G）：图G存在则销毁。
  LocateVex（G，u）：若图G中存在顶点u，则返回图中的位置。
  GetVex（G，v）：返回图G中顶点v的值。
  PutVex（G，v，value）：将图G中顶点v赋值value。
  FirstAdjVex（G，*v）：返回顶点v的一个邻接顶点，若顶点在G中无邻接顶点返回空。
  NextAdjVex（G，v，*w）：返回顶点v相对于顶点w的下一个邻接顶点，若w是v的最后一个邻接点则返回“空”。
  InsertVex（*G，v）：在图G中增添新顶点v。
  DeleteVex（*G，v）：删除图G中顶点v及其相关的弧。
  InsertArc（*G，V，w）：在图G中增添弧&lt;v，w&gt;，若G是无向图，还需要增添对称弧&lt;w，v&gt;。
  DeleteArc（*G，V，w）：在图G中删除弧&lt;v，w&gt;，若G是无向图，则还删除对称弧&lt;w，v&gt;。
  DFSTraverse（G）：对图G中进行深度优先遍历，在遍历过程对每个顶点调用。
  HFSTraverse（G）：对图G中进行广度优先遍历，在遍历过程对每个顶点调用。
endADT</code></pre></div>
<h2 id="7-4-图的存储结构">7.4 图的存储结构</h2>
<p>前辈们提供了五种不同的存储结构。</p>
<h3 id="7-4-1-邻接矩阵">7.4.1 邻接矩阵</h3>
<p><strong>图的邻接矩阵（Adjacency Matrix）存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组（称为邻接矩阵）存储图中的边或弧的信息</strong>。<br>
无向图的边数组构成的是一个对称矩阵。<br>
有了这个矩阵，我们就可以很容易地知道图中的信息。</p>
<ol>
<li>我们要判定任意两顶点是否有边无边就非常容易了。</li>
<li>我们要知道某个顶点的度，其实就是这个顶点vi在邻接矩阵中第i行（或第i列）的元素之和。比如顶点v1的度就是1+0+1+0=2。</li>
<li>求顶点vi的所有邻接点就是将矩阵中第i行元素扫描一遍，arc[i][j]为1就是邻接点。</li>
</ol>
<p>在图的术语中，我们提到了网的概念，也就是每条边上带有权的图叫做网。那么这些权值就需要存下来，如何处理这个矩阵来适应这个需求呢？我们有办法。<br>
设图G是网图，有n个顶点，则邻接矩阵是一个n×n的方阵，定义为：<br>
arc[i][j]=</p>
<ol>
<li>$W_{ij}$,若（$v_i$，$v_j$）∈E或&lt;$v_i$,$v_j$&gt;∈E</li>
<li>0,若i=j</li>
<li>∞，反之</li>
</ol>
<p>这里$W_{ij}$表示（$v_i$，$v_j$）或&lt;$v_i$,$v_j$&gt;上的权值。∞表示一个计算机允许的、大于所有边上权值的值，也就是一个不可能的极限值。<br>
如图7-4-4左图就是一个有向网图，右图就是它的邻接矩阵。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-4-4.JPG?raw=true" srcset="/img/loading.gif" alt="7-4-4"></p>
<p>图的邻接矩阵存储的结构，代码如下。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> VertexType; <span class="hljs-comment">/* 顶点类型应由用户定义  */</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> EdgeType; <span class="hljs-comment">/* 边上的权值类型应由用户定义 */</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXVEX 100 <span class="hljs-comment">/* 最大顶点数，应由用户定义 */</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INFINITY 65535</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>
&#123;</span>
    VertexType vexs[MAXVEX]; <span class="hljs-comment">/* 顶点表 */</span>
    EdgeType arc[MAXVEX][MAXVEX];<span class="hljs-comment">/* 邻接矩阵，可看作边表 */</span>
    <span class="hljs-keyword">int</span> numVertexes, numEdges; <span class="hljs-comment">/* 图中当前的顶点数和边数  */</span>
&#125;MGraph;</code></pre></div>
<p>有了这个结构定义，我们构造一个图，其实就是给顶点表和边表输入数据的过程。我们来看看无向网图的创建代码。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 建立无向网图的邻接矩阵表示 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateMGraph</span><span class="hljs-params">(MGraph *G)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i, j, k, w;
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入顶点数和边数:\n"</span>);
    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d,%d"</span>, &amp;G-&gt;numVertexes, &amp;G-&gt;numEdges); <span class="hljs-comment">/* 输入顶点数和边数 */</span>
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G-&gt;numVertexes; i++) <span class="hljs-comment">/* 读入顶点信息,建立顶点表 */</span>
        <span class="hljs-built_in">scanf</span>(&amp;G-&gt;vexs[i]);
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G-&gt;numVertexes; i++)
        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; G-&gt;numVertexes; j++)
            G-&gt;arc[i][j] = INFINITY;    <span class="hljs-comment">/* 邻接矩阵初始化 */</span>
    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; G-&gt;numEdges; k++) <span class="hljs-comment">/* 读入numEdges条边，建立邻接矩阵 */</span>
    &#123;
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入边(vi,vj)上的下标i，下标j和权w:\n"</span>);
        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d,%d,%d"</span>, &amp;i, &amp;j, &amp;w); <span class="hljs-comment">/* 输入边(vi,vj)上的权w */</span>
        G-&gt;arc[i][j] = w;
        G-&gt;arc[j][i] = G-&gt;arc[i][j]; <span class="hljs-comment">/* 因为是无向图，矩阵对称 */</span>
    &#125;
&#125;</code></pre></div>
<p>从代码中也可以得到，n个顶点和e条边的无向网图的创建，时间复杂度为O（n+n²+e），其中对邻接矩阵Garc的初始化耗费了O（n²）的时间。</p>
<h3 id="7-4-2-邻接表">7.4.2 邻接表</h3>
<p>将结点存入数组，并对结点的数组进行链式存储，不管有多少结点，也不会存在空间浪费问题。我们把这种数组与链表相结合的存储方法称为邻接表（Adjacency List）。<br>
邻接表的处理办法是这样。</p>
<ol>
<li>图中顶点用一个一维数组存储，当然，顶点也可以用单链表来存储，不过数组可以较容易地读取顶点信息，更加方便。另外，对于顶点数组中，每个数据元素还需要存储指向第一个邻接点的指针，以便于查找该顶点的边信息。</li>
<li>图中每个顶点vi的所有邻接点构成一个线性表，由于邻接点的个数不定，所以用单链表存储，无向图称为顶点vi的边表，有向图则称为顶点vi作为弧尾的出边表。</li>
</ol>
<p>例如图7-4-6所示的就是一个无向图的邻接表结构。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-4-6.JPG?raw=true" srcset="/img/loading.gif" alt="7-4-6"><br>
从图中我们知道，顶点表的各个结点由data和firstedge两个域表示，data是数据域，存储顶点的信息，firstedge是指针域，指向边表的第一个结点，即此顶点的第一个邻接点。边表结点由adjvex和next两个域组成。adjvex是邻接点域，存储某顶点的邻接点在顶点表中的下标，next则存储指向边表中下一个结点的指针。比如v1顶点与v0、v2互为邻接点，则在v1的边表中，adjvex分别为v0的0和v2的2。<br>
若是有向图，邻接表结构是类似的，比如图7-4-7中第一幅图的邻接表就是第二幅图。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-4-7.JPG?raw=true" srcset="/img/loading.gif" alt="7-4-7"><br>
但要注意的是有向图由于有方向，我们是以顶点为弧尾来存储边表的，这样很容易就可以得到每个顶点的出度。但也有时为了便于确定顶点的入度或以顶点为弧头的弧，我们可以建立一个有向图的逆邻接表，即对每个顶点vi都建立一个链接为vi为弧头的表。如图7-4-7的第三幅图所示。<br>
对于带权值的网图，可以在边表结点定义中再增加一个weight的数据域，存储权值信息即可。<br>
有了这些结构的图，下面关于结点定义的代码就很好理解了。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> VertexType; <span class="hljs-comment">/* 顶点类型应由用户定义 */</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> EdgeType; <span class="hljs-comment">/* 边上的权值类型应由用户定义 */</span>

<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> /* 边表结点  */
&#123;</span>
    <span class="hljs-keyword">int</span> adjvex;    <span class="hljs-comment">/* 邻接点域,存储该顶点对应的下标 */</span>
    EdgeType info;        <span class="hljs-comment">/* 用于存储权值,对于非网图可以不需要 */</span>
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">/* 链域,指向下一个邻接点 */</span>
&#125;EdgeNode;

<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VertexNode</span> /* 顶点表结点 */
&#123;</span>
    VertexType data; <span class="hljs-comment">/* 顶点域,存储顶点信息 */</span>
    EdgeNode *firstedge;<span class="hljs-comment">/* 边表头指针 */</span>
&#125;VertexNode, AdjList[MAXVEX];

<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>
&#123;</span>
    AdjList adjList;
    <span class="hljs-keyword">int</span> numNodes,numEdges; <span class="hljs-comment">/* 图中当前顶点数和边数 */</span>
&#125;GraphAdjList;</code></pre></div>
<p>对于邻接表的创建，也就是顺理成章之事。无向图的邻接表创建代码如下。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 建立图的邻接表结构 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">CreateALGraph</span><span class="hljs-params">(GraphAdjList *G)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i,j,k;
    EdgeNode *e;
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入顶点数和边数:\n"</span>);
    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d,%d"</span>,&amp;G-&gt;numNodes,&amp;G-&gt;numEdges); <span class="hljs-comment">/* 输入顶点数和边数 */</span>
    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; G-&gt;numNodes;i++) <span class="hljs-comment">/* 读入顶点信息,建立顶点表 */</span>
    &#123;
        <span class="hljs-built_in">scanf</span>(&amp;G-&gt;adjList[i].data);     <span class="hljs-comment">/* 输入顶点信息 */</span>
        G-&gt;adjList[i].firstedge=<span class="hljs-literal">NULL</span>;     <span class="hljs-comment">/* 将边表置为空表 */</span>
    &#125;
    <span class="hljs-keyword">for</span>(k = <span class="hljs-number">0</span>;k &lt; G-&gt;numEdges;k++)<span class="hljs-comment">/* 建立边表 */</span>
    &#123;
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入边(vi,vj)上的顶点序号:\n"</span>);
        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d,%d"</span>,&amp;i,&amp;j); <span class="hljs-comment">/* 输入边(vi,vj)上的顶点序号 */</span>
        e=(EdgeNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode)); <span class="hljs-comment">/* 向内存申请空间,生成边表结点 */</span>
        e-&gt;adjvex=j;                    <span class="hljs-comment">/* 邻接序号为j */</span>
        e-&gt;next=G-&gt;adjList[i].firstedge;    <span class="hljs-comment">/* 将e的指针指向当前顶点上指向的结点 */</span>
        G-&gt;adjList[i].firstedge=e;        <span class="hljs-comment">/* 将当前顶点的指针指向e */</span>
        e=(EdgeNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode)); <span class="hljs-comment">/* 向内存申请空间,生成边表结点 */</span>
        e-&gt;adjvex=i;                    <span class="hljs-comment">/* 邻接序号为i */</span>
        e-&gt;next=G-&gt;adjList[j].firstedge;    <span class="hljs-comment">/* 将e的指针指向当前顶点上指向的结点 */</span>
        G-&gt;adjList[j].firstedge=e;        <span class="hljs-comment">/* 将当前顶点的指针指向e */</span>
    &#125;
&#125;</code></pre></div>
<p>这里代码，是应用了我们在单链表创建中讲解到的头插法，由于对于无向图，一条边对应都是两个顶点，所以在循环中，一次就针对i和j分别进行了插入。本算法的时间复杂度，对于n个顶点e条边来说，很容易得出是O（n+e）。</p>
<h3 id="7-4-3-十字链表">7.4.3 十字链表</h3>
<p>有向图的一种存储方法：十字链表是邻接表与逆邻接表的结合。<br>
我们重新定义顶点表结点结构如表7-4-1所示。<br>
表7-4-1</p>
<table>
<thead>
<tr>
<th>data</th>
<th>firstin</th>
<th>firstout</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p>其中firstin表示入边表头指针，指向该顶点的入边表中第一个结点，firstout表示出边表头指针，指向该顶点的出边表中的第一个结点。<br>
重新定义的边表结点结构如表7-4-2所示。<br>
表7-4-2</p>
<table>
<thead>
<tr>
<th>tailvex</th>
<th>headvex</th>
<th>headlink</th>
<th>taillink</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p>其中tailvex是指弧起点在顶点表的下标，headvex是指弧终点在顶点表中的下标，headlink是指入边表指针域，指向终点相同的下一条边，taillink是指边表指针域，指向起点相同的下一条边。如果是网，还可以再增加一个weight域来存储权值。<br>
比如图7-4-10，顶点依然是存入一个一维数组{v0，v1，v2，v3}，实线箭头指针的图示完全与图7-4-7的邻接表相同。就以顶点v0来说，firstout 指向的是出边表中的第一个结点v3。所以v0边表结点的headvex=3，而tailvex其实就是当前顶点v0的下标0，由于v0只有一个出边顶点，所以headlink和taillink都是空。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-4-10.JPG?raw=true" srcset="/img/loading.gif" alt="7-4-10"><br>
我们重点需要来解释虚线箭头的含义，它其实就是此图的逆邻接表的表示。对于v0来说，它有两个顶点v1和v2的入边。因此v0的firstin指向顶点v1的边表结点中headvex为0的结点，如图7-4-10右图中的①。接着由入边结点的headlink指向下一个入边顶点v2，如图中的②。对于顶点v1，它有一个入边顶点v2，所以它的firstin指向顶点v2的边表结点中headvex为1的结点，如图中的③。顶点v2和v3也是同样有一个入边顶点，如图中④和⑤。<br>
十字链表的好处就是因为把邻接表和逆邻接表整合在了一起，这样既容易找到以vi为尾的弧，也容易找到以vi为头的弧，因而容易求得顶点的出度和入度。而且它除了结构复杂一点外，其实创建图算法的时间复杂度是和邻接表相同的，因此，在有向图的应用中，十字链表是非常好的数据结构模型。</p>
<h3 id="7-4-4-邻接多重表">7.4.4 邻接多重表</h3>
<p>仿照十字链表的方式，对边表结点的结构进行一些改造，可以优化无向图的邻接表的便操作。<br>
重新定义的边表结点结构如表7-4-3所示。</p>
<table>
<thead>
<tr>
<th>ivex</th>
<th>ilink</th>
<th>jvex</th>
<th>jlink</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p>其中<strong>ivex和jvex是与某条边依附的两个顶点在顶点表中下标。ilink 指向依附顶点ivex的下一条边，jlink 指向依附顶点jvex的下一条边。这就是邻接多重表结构</strong>。<br>
我们来看结构示意图的绘制过程，理解了它是如何连线的，也就理解邻接多重表构造原理了。如图7-4-12所示，左图告诉我们它有4个顶点和5条边，显然，我们就应该先将4个顶点和5条边的边表结点画出来。由于是无向图，所以ivex是0、jvex是1还是反过来都是无所谓的，不过为了绘图方便，都将ivex值设置得与一旁的顶点下标相同。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-4-12.JPG?raw=true" srcset="/img/loading.gif" alt="7-4-12"><br>
我们开始连线，如图7-4-13。首先连线的①②③④就是将顶点的firstedge指向一条边，顶点下标要与ivex的值相同，这很好理解。接着，由于顶点v0的（v0，v1）边的邻边有（v0，v3）和（v0，v2）。因此⑤⑥的连线就是满足指向下一条依附于顶点v0的边的目标，注意ilink指向的结点的jvex一定要和它本身的ivex的值相同。同样的道理，连线⑦就是指（v1,v0）这条边，它是相当于顶点v1指向（v1，v2）边后的下一条。v2有三条边依附，所以在③之后就有了⑧⑨。连线⑩的就是顶点v3在连线④之后的下一条边。左图一共有5条边，所以右图有10条连线，完全符合预期。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-4-13.JPG?raw=true" srcset="/img/loading.gif" alt="7-4-13"><br>
到这里，大家应该可以明白，邻接多重表与邻接表的差别，仅仅是在于同一条边在邻接表中用两个结点表示，而在邻接多重表中只有一个结点。这样对边的操作就方便多了，若要删除左图的（v0，v2）这条边，只需要将右图的⑥⑨的链接指向改为^即可。由于各种基本操作的实现也和邻接表是相似的，这里我们就不讲解代码了。</p>
<h3 id="7-4-5-边集数组">7.4.5 边集数组</h3>
<p>边集数组是由两个一维数组构成。一个是存储顶点的信息；另一个是存储边的信息，这个边数组每个数据元素由一条边的起点下标（begin）、终点下标（end）和权（weight）组成。</p>
<h2 id="7-5-图的遍历">7.5 图的遍历</h2>
<p>从图中某一顶点出发访遍图中其余顶点，且使每一个顶点仅被访问一次，这一过程就叫做图的遍历（Traversing Graph）。<br>
对于图的遍历来说，如何避免因回路陷入死循环，就需要科学地设计遍历方案，通常有两种遍历次序方案：它们是深度优先遍历和广度优先遍历。</p>
<h3 id="7-5-1-深度优先遍历">7.5.1 深度优先遍历</h3>
<p>深度优先遍历（Depth_FirstSearch），也有称为深度优先搜索，简称为DFS。<br>
深度优先遍历其实就是一个递归的过程，就像是一棵树的前序遍历，从图中某个顶点v出发，访问此顶点，然后从v的未被访问的邻接点出发深度优先遍历图，直至图中所有和v有路径相通的顶点都被访问到。<br>
若图中尚有顶点未被访问，则另选图中一个未曾被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。<br>
如果我们用的是邻接矩阵的方式，则代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Boolean; <span class="hljs-comment">/* Boolean是布尔类型,其值是TRUE或FALSE */</span>
Boolean visited[MAXVEX]; <span class="hljs-comment">/* 访问标志的数组 */</span>
<span class="hljs-comment">/* 邻接矩阵的深度优先递归算法 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(MGraph G, <span class="hljs-keyword">int</span> i)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> j;
    visited[i] = TRUE;
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c "</span>, G.vexs[i]);<span class="hljs-comment">/* 打印顶点，也可以其它操作 */</span>
    <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; G.numVertexes; j++)
        <span class="hljs-keyword">if</span>(G.arc[i][j] == <span class="hljs-number">1</span> &amp;&amp; !visited[j])
            DFS(G, j);<span class="hljs-comment">/* 对为访问的邻接顶点递归调用 */</span>
&#125;

<span class="hljs-comment">/* 邻接矩阵的深度遍历操作 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">(MGraph G)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i;
    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; i++)
        visited[i] = FALSE; <span class="hljs-comment">/* 初始所有顶点状态都是未访问过状态 */</span>
    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; i++)
        <span class="hljs-keyword">if</span>(!visited[i]) <span class="hljs-comment">/* 对未访问过的顶点调用DFS，若是连通图，只会执行一次 */</span>
            DFS(G, i);
&#125;</code></pre></div>
<p>代码的执行过程，其实就是我们刚才迷宫找寻所有顶点的过程。<br>
如果图结构是邻接表结构，其DFSTraverse函数的代码是几乎相同的，只是在递归函数中因为将数组换成了链表而有不同，代码如下。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 邻接表的深度优先递归算法 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(GraphAdjList GL, <span class="hljs-keyword">int</span> i)</span>
</span>&#123;
    EdgeNode *p;
    visited[i] = TRUE;
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c "</span>,GL-&gt;adjList[i].data);<span class="hljs-comment">/* 打印顶点,也可以其它操作 */</span>
    p = GL-&gt;adjList[i].firstedge;
    <span class="hljs-keyword">while</span>(p)
    &#123;
        <span class="hljs-keyword">if</span>(!visited[p-&gt;adjvex])
            DFS(GL, p-&gt;adjvex);<span class="hljs-comment">/* 对为访问的邻接顶点递归调用 */</span>
        p = p-&gt;next;
    &#125;
&#125;

<span class="hljs-comment">/* 邻接表的深度遍历操作 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">(GraphAdjList GL)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i;
    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; GL-&gt;numVertexes; i++)
        visited[i] = FALSE; <span class="hljs-comment">/* 初始所有顶点状态都是未访问过状态 */</span>
    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; GL-&gt;numVertexes; i++)
        <span class="hljs-keyword">if</span>(!visited[i]) <span class="hljs-comment">/* 对未访问过的顶点调用DFS,若是连通图,只会执行一次 */</span> 
            DFS(GL, i);
&#125;</code></pre></div>
<p>对比两个不同存储结构的深度优先遍历算法，对于n个顶点e条边的图来说，邻接矩阵由于是二维数组，要查找每个顶点的邻接点需要访问矩阵中的所有元素，因此都需要O(n²)的时间。而邻接表做存储结构时，找邻接点所需的时间取决于顶点和边的数量，所以是O（n+e）。显然对于点多边少的稀疏图来说，邻接表结构使得算法在时间效率上大大提高。</p>
<h3 id="7-5-2-广度优先遍历">7.5.2 广度优先遍历</h3>
<p>广度优先遍历（Breadth_First_Search），又称为广度优先搜索，简称BFS。<br>
如果说图的深度优先遍历类似树的前序遍历，那么图的广度优先遍历就类似于树的层序遍历了。我们将图7-5-3的第一幅图稍微变形，变形原则是顶点A放置在最上第一层，让与它有边的顶点B、F为第二层，再让与B和F有边的顶点C、I、G、E为第三层，再将这四个顶点有边的D、H放在第四层，如图7-5-3的第二幅图所示。<br>
此时在视觉上感觉图的形状发生了变化，其实顶点和边的关系还是完全相同的。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-5-3.JPG?raw=true" srcset="/img/loading.gif" alt="7-5-3"><br>
有了这个讲解，我们来看代码就非常容易了。以下是邻接矩阵结构的广度优先遍历算法。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 邻接矩阵的广度遍历算法 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFSTraverse</span><span class="hljs-params">(MGraph G)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i, j;
    Queue Q;
    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; i++)
        visited[i] = FALSE;
    InitQueue(&amp;Q);        <span class="hljs-comment">/* 初始化一辅助用的队列 */</span>
    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; i++)  <span class="hljs-comment">/* 对每一个顶点做循环 */</span>
    &#123;
        <span class="hljs-keyword">if</span> (!visited[i])    <span class="hljs-comment">/* 若是未访问过就处理 */</span>
        &#123;
            visited[i]=TRUE;        <span class="hljs-comment">/* 设置当前顶点访问过 */</span>
            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c "</span>, G.vexs[i]);<span class="hljs-comment">/* 打印顶点，也可以其它操作 */</span>
            EnQueue(&amp;Q,i);        <span class="hljs-comment">/* 将此顶点入队列 */</span>
            <span class="hljs-keyword">while</span>(!QueueEmpty(Q))    <span class="hljs-comment">/* 若当前队列不为空 */</span>
            &#123;
                DeQueue(&amp;Q,&amp;i);<span class="hljs-comment">/* 将队对元素出队列，赋值给i */</span>
                <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;G.numVertexes;j++) 
                &#123;
                    <span class="hljs-comment">/* 判断其它顶点若与当前顶点存在边且未访问过  */</span>
                    <span class="hljs-keyword">if</span>(G.arc[i][j] == <span class="hljs-number">1</span> &amp;&amp; !visited[j])
                    &#123;
                        visited[j]=TRUE;            <span class="hljs-comment">/* 将找到的此顶点标记为已访问 */</span>
                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c "</span>, G.vexs[j]);    <span class="hljs-comment">/* 打印顶点 */</span>
                        EnQueue(&amp;Q,j);                <span class="hljs-comment">/* 将找到的此顶点入队列  */</span>
                    &#125;
                &#125;
            &#125;
        &#125;
    &#125;
&#125;</code></pre></div>
<p>对于邻接表的广度优先遍历，代码与邻接矩阵差异不大，代码如下。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 邻接表的广度遍历算法 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFSTraverse</span><span class="hljs-params">(GraphAdjList GL)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i;
    EdgeNode *p;
    Queue Q;
    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; GL-&gt;numVertexes; i++)
        visited[i] = FALSE;
    InitQueue(&amp;Q);
    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; GL-&gt;numVertexes; i++)
    &#123;
        <span class="hljs-keyword">if</span> (!visited[i])
        &#123;
            visited[i]=TRUE;
            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c "</span>,GL-&gt;adjList[i].data);<span class="hljs-comment">/* 打印顶点,也可以其它操作 */</span>
            EnQueue(&amp;Q,i);
            <span class="hljs-keyword">while</span>(!QueueEmpty(Q))
            &#123;
                DeQueue(&amp;Q,&amp;i);
                p = GL-&gt;adjList[i].firstedge;    <span class="hljs-comment">/* 找到当前顶点的边表链表头指针 */</span>
                <span class="hljs-keyword">while</span>(p)
                &#123;
                    <span class="hljs-keyword">if</span>(!visited[p-&gt;adjvex])    <span class="hljs-comment">/* 若此顶点未被访问 */</span>
                     &#123;
                        visited[p-&gt;adjvex]=TRUE;
                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c "</span>,GL-&gt;adjList[p-&gt;adjvex].data);
                        EnQueue(&amp;Q,p-&gt;adjvex);    <span class="hljs-comment">/* 将此顶点入队列 */</span>
                    &#125;
                    p = p-&gt;next;    <span class="hljs-comment">/* 指针指向下一个邻接点 */</span>
                &#125;
            &#125;
        &#125;
    &#125;
&#125;</code></pre></div>
<p>对比图的深度优先遍历与广度优先遍历算法，你会发现，它们在时间复杂度上是一样的，不同之处仅仅在于对顶点访问的顺序不同。可见两者在全图遍历上是没有优劣之分的，只是视不同的情况选择不同的算法。<br>
不过如果图顶点和边非常多，不能在短时间内遍历完成，遍历的目的是为了寻找合适的顶点，那么选择哪种遍历就要仔细斟酌了。深度优先更适合目标比较明确，以找到目标为主要目的的情况，而广度优先更适合在不断扩大遍历范围时找到相对最优解的情况。</p>
<h2 id="7-6-最小生成树">7.6 最小生成树</h2>
<p>我们把构造连通网的最小代价生成树称为最小生成树（Minimum Cost Spanning Tree）。</p>
<h3 id="7-6-1-普里姆（Prim）算法">7.6.1 普里姆（Prim）算法</h3>
<p>普里姆（Prim）算法代码如下，左侧数字为行号。其中INFINITY为权值极大值，不妨是65535，MAXVEX为顶点个数最大值，此处大于等于9即可。现在假设我们自己就是计算机，在调用MiniSpanTree_Prim函数，输入上述的邻接矩阵后，看看它是如何运行并打印出最小生成树的。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* Prim算法生成最小生成树  */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MiniSpanTree_Prim</span><span class="hljs-params">(MGraph G)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> <span class="hljs-built_in">min</span>, i, j, k;
    <span class="hljs-keyword">int</span> adjvex[MAXVEX];        <span class="hljs-comment">/* 保存相关顶点下标 */</span>
    <span class="hljs-keyword">int</span> lowcost[MAXVEX];    <span class="hljs-comment">/* 保存相关顶点间边的权值 */</span>
    lowcost[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<span class="hljs-comment">/* 初始化第一个权值为0，即v0加入生成树 */</span>
            <span class="hljs-comment">/* lowcost的值为0，在这里就是此下标的顶点已经加入生成树 */</span>
    adjvex[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;            <span class="hljs-comment">/* 初始化第一个顶点下标为0 */</span>
    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; G.numVertexes; i++)    <span class="hljs-comment">/* 循环除下标为0外的全部顶点 */</span>
    &#123;
        lowcost[i] = G.arc[<span class="hljs-number">0</span>][i];    <span class="hljs-comment">/* 将v0顶点与之有边的权值存入数组 */</span>
        adjvex[i] = <span class="hljs-number">0</span>;                    <span class="hljs-comment">/* 初始化都为v0的下标 */</span>
    &#125;
    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; G.numVertexes; i++)
    &#123;
        <span class="hljs-built_in">min</span> = INFINITY;    <span class="hljs-comment">/* 初始化最小权值为∞， */</span>
                        <span class="hljs-comment">/* 通常设置为不可能的大数字如32767、65535等 */</span>
        j = <span class="hljs-number">1</span>;k = <span class="hljs-number">0</span>;
        <span class="hljs-keyword">while</span>(j &lt; G.numVertexes)    <span class="hljs-comment">/* 循环全部顶点 */</span>
        &#123;
            <span class="hljs-keyword">if</span>(lowcost[j]!=<span class="hljs-number">0</span> &amp;&amp; lowcost[j] &lt; <span class="hljs-built_in">min</span>)<span class="hljs-comment">/* 如果权值不为0且权值小于min */</span>
            &#123;
                <span class="hljs-built_in">min</span> = lowcost[j];    <span class="hljs-comment">/* 则让当前权值成为最小值 */</span>
                k = j;            <span class="hljs-comment">/* 将当前最小值的下标存入k */</span>
            &#125;
            j++;
        &#125;
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"(%d, %d)\n"</span>, adjvex[k], k);<span class="hljs-comment">/* 打印当前顶点边中权值最小的边 */</span>
        lowcost[k] = <span class="hljs-number">0</span>;<span class="hljs-comment">/* 将当前顶点的权值设置为0,表示此顶点已经完成任务 */</span>
        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">1</span>; j &lt; G.numVertexes; j++)    <span class="hljs-comment">/* 循环所有顶点 */</span>
        &#123;
            <span class="hljs-keyword">if</span>(lowcost[j]!=<span class="hljs-number">0</span> &amp;&amp; G.arc[k][j] &lt; lowcost[j])
            &#123;<span class="hljs-comment">/* 如果下标为k顶点各边权值小于此前这些顶点未被加入生成树权值 */</span>
                lowcost[j] = G.arc[k][j];<span class="hljs-comment">/* 将较小的权值存入lowcost相应位置 */</span>
                adjvex[j] = k;                <span class="hljs-comment">/* 将下标为k的顶点存入adjvex */</span>
            &#125;
        &#125;
    &#125;
&#125;</code></pre></div>
<p>假设N=（P,{E}）是连通网，TE是N上最小生成树中边的集合。算法从U={u0}（u0∈V），TE={}开始。重复执行下述操作：在所有u∈U，v∈V-U的边（u，v）∈E中找一条代价最小的边（u0，v0）并入集合TE，同时v0并入U，直至U=V为止。此时TE中必有n-1条边，则T=（V.{TE}）为N的最小生成树。<br>
由算法代码中的循环嵌套可得知此算法的时间复杂度为O(n²)。</p>
<h3 id="7-6-2-克鲁斯卡尔（Kruskal）算法">7.6.2 克鲁斯卡尔（Kruskal）算法</h3>
<p>现在我们来换一种思考方式，普里姆（Prim）算法是以某顶点为起点，逐步找各顶点上最小权值的边来构建最小生成树的。<br>
同样的思路，我们也可以直接就以边为目标去构建，因为权值是在边上，直接去找最小权值的边来构建生成树也是很自然的想法，只不过构建时要考虑是否会形成环路而已。此时我们就用到了图的存储结构中的边集数组结构。以下是edge边集数组结构的定义代码：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>
&#123;</span>
    <span class="hljs-keyword">int</span> <span class="hljs-built_in">begin</span>;
    <span class="hljs-keyword">int</span> <span class="hljs-built_in">end</span>;
    <span class="hljs-keyword">int</span> weight;
&#125;Edge;   <span class="hljs-comment">/* 对边集数组Edge结构的定义 */</span></code></pre></div>
<p>我们将图7-6-3的邻接矩阵通过程序转化为图7-6-7的右图的边集数组，并且对它们按权值从小到大排序。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-6-7.JPG?raw=true" srcset="/img/loading.gif" alt="7-6-7"><br>
于是克鲁斯卡尔（Kruskal）算法代码如下，左侧数字为行号。其中MAXEDGE为边数量的极大值，此处大于等于15即可，MAXVEX为顶点个数最大值，此处大于等于9即可。现在假设我们自己就是计算机，在调用MiniSpanTree_Kruskal函数，输入图7-6-3右图的邻接矩阵后，看看它是如何运行并打印出最小生成树的。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 查找连线顶点的尾部下标 */</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *parent, <span class="hljs-keyword">int</span> f)</span>
</span>&#123;
    <span class="hljs-keyword">while</span> ( parent[f] &gt; <span class="hljs-number">0</span>)
    &#123;
        f = parent[f];
    &#125;
    <span class="hljs-keyword">return</span> f;
&#125;

<span class="hljs-comment">/* Kruskal算法生成最小生成树 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MiniSpanTree_Kruskal</span><span class="hljs-params">(MGraph G)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i, j, n, m;
    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">int</span> parent[MAXVEX];<span class="hljs-comment">/* 定义一数组用来判断边与边是否形成环路 */</span>
    Edge edges[MAXEDGE];<span class="hljs-comment">/* 定义边集数组,edge的结构为begin,end,weight,均为整型 */</span>

    <span class="hljs-comment">/* 用来构建边集数组并排序********************* */</span>
    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; G.numVertexes<span class="hljs-number">-1</span>; i++)
    &#123;
        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; G.numVertexes; j++)
        &#123;
            <span class="hljs-keyword">if</span> (G.arc[i][j]&lt;INFINITY)
            &#123;
                edges[k].<span class="hljs-built_in">begin</span> = i;
                edges[k].<span class="hljs-built_in">end</span> = j;
                edges[k].weight = G.arc[i][j];
                k++;
            &#125;
        &#125;
    &#125;
    sort(edges, &amp;G);
    <span class="hljs-comment">/* ******************************************* */</span>
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; i++)
        parent[i] = <span class="hljs-number">0</span>;    <span class="hljs-comment">/* 初始化数组值为0 */</span>
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"打印最小生成树：\n"</span>);
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.numEdges; i++)    <span class="hljs-comment">/* 循环每一条边 */</span>
    &#123;
        n = Find(parent,edges[i].<span class="hljs-built_in">begin</span>);
        m = Find(parent,edges[i].<span class="hljs-built_in">end</span>);
        <span class="hljs-keyword">if</span> (n != m) <span class="hljs-comment">/* 假如n与m不等，说明此边没有与现有的生成树形成环路 */</span>
        &#123;
            parent[n] = m;    <span class="hljs-comment">/* 将此边的结尾顶点放入下标为起点的parent中。 */</span>
                            <span class="hljs-comment">/* 表示此顶点已经在生成树集合中 */</span>
            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"(%d, %d) %d\n"</span>, edges[i].<span class="hljs-built_in">begin</span>, edges[i].<span class="hljs-built_in">end</span>, edges[i].weight);
        &#125;
    &#125;
&#125;</code></pre></div>
<p>好了，我们来把克鲁斯卡尔（Kruskal）算法的实现定义归纳一下结束这一节的讲解。<br>
假设N=（V,{E}）是连通网，则令最小生成树的初始状态为只有n个顶点而无边的非连通图T={V，{}}，图中每个顶点自成一个连通分量。在E中选择代价最小的边，若该边依附的顶点落在T中不同的连通分量上，则将此边加入到T中，否则舍去此边而选择下一条代价最小的边。依次类推，直至T中所有顶点都在同一连通分量上为止。<br>
此算法的Find函数由边数e决定，时间复杂度为O（㏒e），而外面有一个for 循环e次。所以克鲁斯卡尔算法的时间复杂度为O（e㏒e）。<br>
对比两个算法，克鲁斯卡尔算法主要是针对边来展开，边数少时效率会非常高，所以对于稀疏图有很大的优势；而普里姆算法对于稠密图，即边数非常多的情况会更好一些。</p>
<h2 id="7-7-最短路径">7.7 最短路径</h2>
<p>对于网图来说，最短路径，是指两顶点之间经过的边上权值之和最少的路径，并且我们称路径上的第一个顶点是源点，最后一个顶点是终点。</p>
<h3 id="7-7-1-迪杰斯特拉（Djkstra）算法">7.7.1 迪杰斯特拉（Djkstra）算法</h3>
<p>迪杰斯特拉（Dijkstra）算法并不是一下子就求出了v0到Vn的最短路径，而是一步步求出它们之间顶点的最短路径，过程中都是基于已经求出的最短路径的基础上，求得更远顶点的最短路径，最终得到你要的结果。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXVEX 20</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INFINITY 65535</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Patharc[MAXVEX];    <span class="hljs-comment">/* 用于存储最短路径下标的数组 */</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ShortPathTable[MAXVEX]; <span class="hljs-comment">/* 用于存储到各点最短路径的权值和 */</span>
<span class="hljs-comment">/* Dijkstra算法，求有向网G的v0顶点到其余顶点v的最短路径P[v]及带权长度D[v] */</span>
<span class="hljs-comment">/* P[v]的值为前驱顶点下标,D[v]表示v0到v的最短路径长度和 */</span>  
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShortestPath_Dijkstra</span><span class="hljs-params">(MGraph G, <span class="hljs-keyword">int</span> v0, Patharc *P, ShortPathTable *D)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> v,w,k,<span class="hljs-built_in">min</span>;
    <span class="hljs-keyword">int</span> final[MAXVEX];<span class="hljs-comment">/* final[w]=1表示求得顶点v0至vw的最短路径 */</span>
    <span class="hljs-keyword">for</span>(v=<span class="hljs-number">0</span>; v&lt;G.numVertexes; v++)    <span class="hljs-comment">/* 初始化数据 */</span>
    &#123;
        final[v] = <span class="hljs-number">0</span>;            <span class="hljs-comment">/* 全部顶点初始化为未知最短路径状态 */</span>
        (*D)[v] = G.arc[v0][v];<span class="hljs-comment">/* 将与v0点有连线的顶点加上权值 */</span>
        (*P)[v] = <span class="hljs-number">-1</span>;                <span class="hljs-comment">/* 初始化路径数组P为-1  */</span>
    &#125;
    (*D)[v0] = <span class="hljs-number">0</span>;  <span class="hljs-comment">/* v0至v0路径为0 */</span>  
    final[v0] = <span class="hljs-number">1</span>;    <span class="hljs-comment">/* v0至v0不需要求路径 */</span>
    <span class="hljs-comment">/* 开始主循环，每次求得v0到某个v顶点的最短路径 */</span>
    <span class="hljs-keyword">for</span>(v=<span class="hljs-number">1</span>; v&lt;G.numVertexes; v++)
    &#123;
        <span class="hljs-built_in">min</span>=INFINITY;    <span class="hljs-comment">/* 当前所知离v0顶点的最近距离 */</span>
        <span class="hljs-keyword">for</span>(w=<span class="hljs-number">0</span>; w&lt;G.numVertexes; w++) <span class="hljs-comment">/* 寻找离v0最近的顶点 */</span>
        &#123;
            <span class="hljs-keyword">if</span>(!final[w] &amp;&amp; (*D)[w]&lt;<span class="hljs-built_in">min</span>)
            &#123;
                k=w;
                <span class="hljs-built_in">min</span> = (*D)[w];    <span class="hljs-comment">/* w顶点离v0顶点更近 */</span>
            &#125;
        &#125;
        final[k] = <span class="hljs-number">1</span>;    <span class="hljs-comment">/* 将目前找到的最近的顶点置为1 */</span>
        <span class="hljs-keyword">for</span>(w=<span class="hljs-number">0</span>; w&lt;G.numVertexes; w++) <span class="hljs-comment">/* 修正当前最短路径及距离 */</span>
        &#123;
            <span class="hljs-comment">/* 如果经过v顶点的路径比现在这条路径的长度短的话 */</span>
            <span class="hljs-keyword">if</span>(!final[w] &amp;&amp; (<span class="hljs-built_in">min</span>+G.arc[k][w]&lt;(*D)[w]))
            &#123; <span class="hljs-comment">/*  说明找到了更短的路径，修改D[w]和P[w] */</span>
                (*D)[w] = <span class="hljs-built_in">min</span> + G.arc[k][w];  <span class="hljs-comment">/* 修改当前路径长度 */</span>
                (*P)[w]=k;
            &#125;
        &#125;
    &#125;
&#125;</code></pre></div>
<p>此算法的时间复杂度为O（n²）。</p>
<h3 id="7-7-2-弗洛伊德（Floyd）算法">7.7.2 弗洛伊德（Floyd）算法</h3>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Patharc[MAXVEX][MAXVEX];
<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ShortPathTable[MAXVEX][MAXVEX];
<span class="hljs-comment">/* Floyd算法，求网图G中各顶点v到其余顶点w的最短路径P[v][w]及带权长度D[v][w]。 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShortestPath_Floyd</span><span class="hljs-params">(MGraph G, Patharc *P, ShortPathTable *D)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> v,w,k;
    <span class="hljs-keyword">for</span>(v=<span class="hljs-number">0</span>; v&lt;G.numVertexes; ++v) <span class="hljs-comment">/* 初始化D与P */</span>  
    &#123;
        <span class="hljs-keyword">for</span>(w=<span class="hljs-number">0</span>; w&lt;G.numVertexes; ++w)  
        &#123;
            (*D)[v][w]=G.arc[v][w];    <span class="hljs-comment">/* D[v][w]值即为对应点间的权值 */</span>
            (*P)[v][w]=w;                <span class="hljs-comment">/* 初始化P */</span>
        &#125;
    &#125;
    <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>; k&lt;G.numVertexes; ++k)
    &#123;
        <span class="hljs-keyword">for</span>(v=<span class="hljs-number">0</span>; v&lt;G.numVertexes; ++v)  
        &#123;
            <span class="hljs-keyword">for</span>(w=<span class="hljs-number">0</span>; w&lt;G.numVertexes; ++w)
            &#123;
                <span class="hljs-keyword">if</span> ((*D)[v][w]&gt;(*D)[v][k]+(*D)[k][w])
                &#123;<span class="hljs-comment">/* 如果经过下标为k顶点路径比原两点间路径更短 */</span>
                    (*D)[v][w]=(*D)[v][k]+(*D)[k][w];<span class="hljs-comment">/* 将当前两点间权值设为更小的一个 */</span>
                    (*P)[v][w]=(*P)[v][k];<span class="hljs-comment">/* 路径设置为经过下标为k的顶点 */</span>
                &#125;
            &#125;
        &#125;
    &#125;
&#125;</code></pre></div>
<p>求最短路径的显示代码可以这样写：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(v=<span class="hljs-number">0</span>; v&lt;G.numVertexes; ++v)
&#123;
    <span class="hljs-keyword">for</span>(w=v+<span class="hljs-number">1</span>; w&lt;G.numVertexes; w++)  
    &#123;
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"v%d-v%d weight: %d "</span>,v,w,D[v][w]);
        k=P[v][w];                <span class="hljs-comment">/* 获得第一个路径顶点下标 */</span>
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">" path: %d"</span>,v);    <span class="hljs-comment">/* 打印源点 */</span>
        <span class="hljs-keyword">while</span>(k!=w)                <span class="hljs-comment">/* 如果路径顶点下标不是终点 */</span>
        &#123;
            <span class="hljs-built_in">printf</span>(<span class="hljs-string">" -&gt; %d"</span>,k);    <span class="hljs-comment">/* 打印路径顶点 */</span>
            k=P[k][w];            <span class="hljs-comment">/* 获得下一个路径顶点下标 */</span>
        &#125;
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">" -&gt; %d\n"</span>,w);    <span class="hljs-comment">/* 打印终点 */</span>
    &#125;
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);
&#125;</code></pre></div>
<p>再次回过头来看看弗洛伊德（Floyd）算法，它的代码简洁到就是一个二重循环初始化加一个三重循环权值修正，就完成了所有顶点到所有顶点的最短路径计算。几乎就如同是我们在学习C语言循环嵌套的样例代码而已。如此简单的实现，真是巧妙之极，在我看来，这是非常漂亮的算法，不知道你们是否喜欢？很可惜由于它的三重循环，因此也是O（n³）时间复杂度。如果你面临需要求所有顶点至所有顶点的最短路径问题时，弗洛伊德（Floyd）算法应该是不错的选择。</p>
<h2 id="7-8-拓扑排序">7.8 拓扑排序</h2>
<p>说了两个有环的图应用，现在我们来谈谈无环的图应用。无环，即是图中没有回路的意思。</p>
<h3 id="7-8-1-拓扑排序介绍">7.8.1 拓扑排序介绍</h3>
<p>在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系，这样的有向图为顶点表示活动的网，我们称为AOV网（Activity On Vertex Network）。<br>
设G=（V，E）是一个具有n个顶点的有向图，V中的顶点序列v1，V2，……，Vn，满足若从顶点vi到vj有一条路径，则在顶点序列中顶点vi必在顶点vj之前。则我们称这样的顶点序列为一个拓扑序列。<br>
**所谓拓扑排序，其实就是对一个有向图构造拓扑序列的过程。**构造时会有两个结果，如果此网的全部顶点都被输出，则说明它是不存在环（回路）的AOV网；如果输出顶点数少了，哪怕是少了一个，也说明这个网存在环（回路），不是AOV网。</p>
<h3 id="7-8-2-拓扑排序算法">7.8.2 拓扑排序算法</h3>
<p>对AOV网进行拓扑排序的基本思路是：从AOV网中选择一个入度为0的顶点输出，然后删去此顶点，并删除以此顶点为尾的弧，继续重复此步骤，直到输出全部顶点或者AOV网中不存在入度为0的顶点为止。<br>
首先我们需要确定一下这个图需要使用的数据结构。前面求最小生成树和最短路径时，我们用的都是邻接矩阵，但由于拓扑排序的过程中，需要删除顶点，显然用邻接表会更加方便。因此我们需要为AOV网建立一个邻接表。考虑到算法过程中始终要查找入度为0的顶点，我们在原来顶点表结点结构中，增加一个入度域in，结构如表7-8-1所示，其中in就是入度的数字。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-8-1.JPG?raw=true" srcset="/img/loading.gif" alt="7-8-1"><br>
因此对于图7-8-2的第一幅图AOV网，我们可以得到如第二幅图的邻接表数据结构。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-8-2.JPG?raw=true" srcset="/img/loading.gif" alt="7-8-2"><br>
在拓扑排序算法中，涉及的结构代码如下:</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> /* 边表结点  */
&#123;</span>
    <span class="hljs-keyword">int</span> adjvex;    <span class="hljs-comment">/* 邻接点域，存储该顶点对应的下标 */</span>
    <span class="hljs-keyword">int</span> weight;        <span class="hljs-comment">/* 用于存储权值，对于非网图可以不需要 */</span>
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">/* 链域，指向下一个邻接点 */</span>
&#125;EdgeNode;

<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VertexNode</span> /* 顶点表结点 */
&#123;</span>
    <span class="hljs-keyword">int</span> in;    <span class="hljs-comment">/* 顶点入度 */</span>
    <span class="hljs-keyword">int</span> data; <span class="hljs-comment">/* 顶点域，存储顶点信息 */</span>
    EdgeNode *firstedge;<span class="hljs-comment">/* 边表头指针 */</span>
&#125;VertexNode, AdjList[MAXVEX];

<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>
&#123;</span>
    AdjList adjList;
    <span class="hljs-keyword">int</span> numVertexes,numEdges; <span class="hljs-comment">/* 图中当前顶点数和边数 */</span>
&#125;graphAdjList,*GraphAdjList;</code></pre></div>
<p>在算法中，我还需要辅助的数据结构一栈，用来存储处理过程中入度为0的顶点，目的是为了避免每个查找时都要去遍历顶点表找有没有入度为0的顶点。<br>
现在我们来看代码:</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 拓扑排序，若GL无回路，则输出拓扑排序序列并返回1，若有回路返回0。 */</span>
<span class="hljs-function">Status <span class="hljs-title">TopologicalSort</span><span class="hljs-params">(GraphAdjList GL)</span>
</span>&#123;
    EdgeNode *e;
    <span class="hljs-keyword">int</span> i,k,gettop;
    <span class="hljs-keyword">int</span> top=<span class="hljs-number">0</span>;  <span class="hljs-comment">/* 用于栈指针下标  */</span>
    <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<span class="hljs-comment">/* 用于统计输出顶点的个数  */</span>
    <span class="hljs-keyword">int</span> *<span class="hljs-built_in">stack</span>;    <span class="hljs-comment">/* 建栈将入度为0的顶点入栈  */</span>
    <span class="hljs-built_in">stack</span>=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(GL-&gt;numVertexes * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) );

    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i&lt;GL-&gt;numVertexes; i++)
        <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == GL-&gt;adjList[i].in) <span class="hljs-comment">/* 将入度为0的顶点入栈 */</span>
            <span class="hljs-built_in">stack</span>[++top]=i;
    <span class="hljs-keyword">while</span>(top!=<span class="hljs-number">0</span>)
    &#123;
        gettop=<span class="hljs-built_in">stack</span>[top--];  <span class="hljs-comment">/* 出栈 */</span>
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d -&gt; "</span>,GL-&gt;adjList[gettop].data);
        count++;        <span class="hljs-comment">/* 输出i号顶点，并计数 */</span>
        <span class="hljs-keyword">for</span>(e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next)
        &#123;<span class="hljs-comment">/* 对此顶点弧表遍历 */</span>
            k=e-&gt;adjvex;
            <span class="hljs-keyword">if</span>( !(--GL-&gt;adjList[k].in) )  <span class="hljs-comment">/* 将k号顶点的邻接点的入度减1，如果减1后为0，则入栈 */</span>
                <span class="hljs-built_in">stack</span>[++top]=k;
        &#125;
    &#125;
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);
    <span class="hljs-keyword">if</span>(count &lt; GL-&gt;numVertexes)<span class="hljs-comment">/* 如果 count小于顶点数，说明存在环 */</span>
        <span class="hljs-keyword">return</span> ERROR;
    <span class="hljs-keyword">else</span>
        <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<p>分析整个算法，对一个具有n个顶点e条弧的AOV网来说，扫描顶点表，将入度为0的顶点入栈的时间复杂为O（n），而之后的while循环中，每个顶点进一次栈，出一次栈，入度减1的操作共执行了e次，所以整个算法的时间复杂度为O（n+e）。</p>
<h2 id="7-9-关键路径">7.9 关键路径</h2>
<p>在前面讲了AOV网的基础上，我们来介绍一个新的概念。在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，用边上的权值表示活动的持续时间，这种有向图的边表示活动的网，我们称之为AOE网（Activity On Edge Network）。<br>
我们把AOE网中没有入边的顶点称为始点或源点，没有出边的顶点称为终点或汇点。<br>
我们把路径上各个活动所持续的时间之和称为路径长度，从源点到汇点具有最大长度的路径叫关键路径，在关键路径上的活动叫关键活动。<br>
如果我们需要缩短整个工期，去改进轮子的生产效率，哪怕改动成0.1也是无益于整个工期的变化，只有缩短关键路径上的关键活动时间才可以减少整个工期长度。<br>
那么现在的问题就是如何找出关键路径。</p>
<h3 id="7-9-1-关键路径算法原理">7.9.1 关键路径算法原理</h3>
<p>我们只需要找到所有活动的最早开始时间和最晚开始时间，并且比较它们，如果相等就意味着此活动是关键活动，活动间的路径为关键路径。如果不等，则就不是。<br>
为此，我们需要定义如下几个参数。</p>
<ol>
<li>事件的最早发生时间etv（earliest time of vertex）：即顶点vk的最早发生时间。</li>
<li>事件的最晚发生时间ltv（latest time of vertex）：即顶点Vk的最晚发生时间，也就是每个顶点对应的事件最晚需要开始的时间，超出此时间将会延误整个工期。</li>
<li>活动的最早开工时间ete（earliest time ofedge）：即弧ak的最早发生时间。</li>
<li>活动的最晚开工时间lte（latest time of edge）：即弧ak的最晚发生时间，也就是不推迟工期的最晚开工时间。</li>
</ol>
<p>我们是由1和2可以求得3和4，然后再根据ete[k]是否与lte[k]相等来判断ak是否是关键活动。</p>
<h3 id="7-9-2-关键路径算法">7.9.2 关键路径算法</h3>
<p>我们将图7-9-2的AOE网转化为邻接表结构如图7-9-4所示，注意与拓扑排序时邻接表结构不同的地方在于，这里弧链表增加了weight域，用来存储弧的权值。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-9-4.JPG?raw=true" srcset="/img/loading.gif" alt="7-9-4"><br>
求事件的最早发生时间etv的过程，就是我们从头至尾找拓扑序列的过程，因此，在求关键路径之前，需要先调用一次拓扑序列算法的代码来计算etv和拓扑序列列表。为此，我们首先在程序开始处声明几个全局变量。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">int</span> *etv,*ltv; <span class="hljs-comment">/* 事件最早发生时间和最迟发生时间数组，全局变量 */</span>
<span class="hljs-keyword">int</span> *stack2;   <span class="hljs-comment">/* 用于存储拓扑序列的栈 */</span>
<span class="hljs-keyword">int</span> top2;      <span class="hljs-comment">/* 用于stack2的指针 */</span></code></pre></div>
<p>其中stack2用来存储拓扑序列，以便后面求关键路径时使用。<br>
下面是改进过的求拓扑序列算法。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 拓扑排序,用于关键路径计算 */</span>
<span class="hljs-function">Status <span class="hljs-title">TopologicalSort</span><span class="hljs-params">(GraphAdjList GL)</span>
</span>&#123;    <span class="hljs-comment">/* 若GL无回路，则输出拓扑排序序列并返回1，若有回路返回0。 */</span>
    EdgeNode *e;
    <span class="hljs-keyword">int</span> i,k,gettop;
    <span class="hljs-keyword">int</span> top=<span class="hljs-number">0</span>;  <span class="hljs-comment">/* 用于栈指针下标  */</span>
    <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<span class="hljs-comment">/* 用于统计输出顶点的个数 */</span>
    <span class="hljs-keyword">int</span> *<span class="hljs-built_in">stack</span>;    <span class="hljs-comment">/* 建栈将入度为0的顶点入栈  */</span>
    <span class="hljs-built_in">stack</span>=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(GL-&gt;numVertexes * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) );
    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i&lt;GL-&gt;numVertexes; i++)
        <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == GL-&gt;adjList[i].in) <span class="hljs-comment">/* 将入度为0的顶点入栈 */</span>
            <span class="hljs-built_in">stack</span>[++top]=i;

    top2=<span class="hljs-number">0</span>;         <span class="hljs-comment">/* 初始化为0 */</span>
    etv=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(GL-&gt;numVertexes * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) ); <span class="hljs-comment">/* 事件最早发生时间数组 */</span>
    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;GL-&gt;numVertexes; i++)
        etv[i]=<span class="hljs-number">0</span>;    <span class="hljs-comment">/* 初始化为0 */</span>
    stack2=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(GL-&gt;numVertexes * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) );<span class="hljs-comment">/* 初始化拓扑序列栈 */</span>

    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"TopologicalSort:\t"</span>);
    <span class="hljs-keyword">while</span>(top!=<span class="hljs-number">0</span>)
    &#123;
        gettop=<span class="hljs-built_in">stack</span>[top--];
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d -&gt; "</span>,GL-&gt;adjList[gettop].data);
        count++;        <span class="hljs-comment">/* 输出i号顶点，并计数 */</span>

        stack2[++top2]=gettop;        <span class="hljs-comment">/* 将弹出的顶点序号压入拓扑序列的栈 */</span>

        <span class="hljs-keyword">for</span>(e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next)
        &#123;
            k=e-&gt;adjvex;
            <span class="hljs-keyword">if</span>( !(--GL-&gt;adjList[k].in) )        <span class="hljs-comment">/* 将i号顶点的邻接点的入度减1，如果减1后为0，则入栈 */</span>
                <span class="hljs-built_in">stack</span>[++top]=k;

            <span class="hljs-keyword">if</span>((etv[gettop] + e-&gt;weight)&gt;etv[k])    <span class="hljs-comment">/* 求各顶点事件的最早发生时间etv值 */</span>
                etv[k] = etv[gettop] + e-&gt;weight;
        &#125;
    &#125;
    <span class="hljs-keyword">if</span>(count &lt; GL-&gt;numVertexes)
        <span class="hljs-keyword">return</span> ERROR;
    <span class="hljs-keyword">else</span>
        <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<p>下面我们来看求关键路径的算法代码。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 求关键路径,GL为有向网，输出G的各项关键活动 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CriticalPath</span><span class="hljs-params">(GraphAdjList GL)</span>
</span>&#123;
    EdgeNode *e;
    <span class="hljs-keyword">int</span> i,gettop,k,j;
    <span class="hljs-keyword">int</span> ete,lte;  <span class="hljs-comment">/* 声明活动最早发生时间和最迟发生时间变量 */</span>
    TopologicalSort(GL);   <span class="hljs-comment">/* 求拓扑序列，计算数组etv和stack2的值 */</span>
    ltv=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(GL-&gt;numVertexes*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<span class="hljs-comment">/* 事件最早发生时间数组 */</span>
    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;GL-&gt;numVertexes; i++)
        ltv[i]=etv[GL-&gt;numVertexes<span class="hljs-number">-1</span>];    <span class="hljs-comment">/* 初始化 */</span>
    <span class="hljs-keyword">while</span>(top2!=<span class="hljs-number">0</span>)    <span class="hljs-comment">/* 出栈是求ltv */</span>
    &#123;
        gettop=stack2[top2--];
        <span class="hljs-keyword">for</span>(e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next)
        &#123;<span class="hljs-comment">/* 求各顶点事件的最迟发生时间ltv值 */</span>
            k=e-&gt;adjvex;
            <span class="hljs-keyword">if</span>(ltv[k] - e-&gt;weight &lt; ltv[gettop])
                ltv[gettop] = ltv[k] - e-&gt;weight;
        &#125;
    &#125;
    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;GL-&gt;numVertexes; j++)        <span class="hljs-comment">/* 求ete,lte和关键活动 */</span>
    &#123;
        <span class="hljs-keyword">for</span>(e = GL-&gt;adjList[j].firstedge; e; e = e-&gt;next)
        &#123;
            k=e-&gt;adjvex;
            ete = etv[j];        <span class="hljs-comment">/* 活动最早发生时间 */</span>
            lte = ltv[k] - e-&gt;weight; <span class="hljs-comment">/* 活动最迟发生时间 */</span>
            <span class="hljs-keyword">if</span>(ete == lte)    <span class="hljs-comment">/* 两者相等即在关键路径上 */</span>
                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"&lt;v%d - v%d&gt; length: %d \n"</span>,GL-&gt;adjList[j].data,GL-&gt;adjList[k].data,e-&gt;weight);
        &#125;
    &#125;
&#125;</code></pre></div>
<p>最终求关键路径算法的时间复杂度依然是O（n+e）。<br>
实践证明，通过这样的算法对于工程的前期工期估算和中期的计划调整都有很大的帮助。不过注意，本例是唯一一条关键路径，这并不等于不存在多条关键路径的有向无环图。如果是多条关键路径，则单是提高一条关键路径上的关键活动的速度并不能导致整个工程缩短工期，而必须提高同时在几条关键路径上的活动的速度。这就像仅仅是有事业的成功，而没有健康的身体以及快乐的生活，是根本谈不上幸福的人生一样，三者缺一不可。</p>
<h2 id="7-10-总结回顾">7.10 总结回顾</h2>
<p>图是计算机科学中非常常用的一类数据结构，有许许多多的计算问题都是用图来定义的。由于图也是最复杂的数据结构，对它讲解时，涉及到数组、链表、栈、队列、树等之前学的几乎所有数据结构。因此从某种角度来说，学好了图，基本就等于理解了数据结构这门课的精神。<br>
我们在图的定义这一节，介绍了一大堆定义和术语，一开始可能会有些迷茫，不过一回生二回熟，多读几遍，基本都可以理解并记住它们的特征，在图的定义这一节的末尾，我们已经有所总结，这里就不再赘述了。<br>
图的存储结构我们一共讲了五种，如图7-10-1所示，其中比较重要的是邻接矩阵和邻接表，它们分别代表着边集是用数组还是链表的方式存储。十字链表是邻接矩阵的一种升级，而邻接多重表则是邻接表的升级。边集数组更多考虑的是对边的关注。用什么存储结构需要具体问题具体分析，通常稠密图，或读存数据较多，结构修改较少的图，用邻接矩阵要更合适，反之则应该考虑邻接表。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-10-1.JPG?raw=true" srcset="/img/loading.gif" alt="7-10-1"><br>
图的遍历分为深度和广度两种，各有优缺点，就像人在追求卓越时，是着重深度还是看重广度，总是很难说得清楚。<br>
图的应用是我们这一章浓墨重彩的一部分，一共谈了三种应用：最小生成树、最短路径和有向无环图的应用。<br>
最小生成树，我们讲了两种算法：普里姆（Prim）算法和克鲁斯卡尔（Kruskal）算法。普里姆算法像是走一步看一步的思维方式，逐步生成最小生成树。而克鲁斯卡尔算法则更有全局意识，直接从图中最短权值的边入手，找寻最后的答案。<br>
最短路径的现实应用非常多，我们也介绍了两种算法。迪杰斯特拉（Dijkstra）算法更强调单源顶点查找路径的方式，比较符合我们正常的思路，容易理解原理，但算法代码相对复杂。而弗洛伊德（Floyd）算法则完全抛开了单点的局限思维方式，巧妙地应用矩阵的变换，用最清爽的代码实现了多顶点间最短路径求解的方案，原理理解有难度，但算法编写很简洁。<br>
有向无环图时常应用于工程规划中，对于整个工程或系统来说，我们一方面关心的是工程能否顺利进行的问题，通过拓扑排序的方式，我们可以有效地分析出一个有向图是否存在环，如果不存在，那它的拓扑序列是什么？另一方面关心的是整个工程完成所必须的最短时间问题，利用求关键路径的算法，可以得到最短完成工程的工期以及关键的活动有哪些。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>大话数据结构</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构第六章 树</title>
    <url>/2019/12/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC6%E7%AB%A0%20%E6%A0%91/</url>
    <content><![CDATA[<h2 id="6-1-6-2-树的定义">6.1-6.2 树的定义</h2>
<p><strong>树(Tree)是n(n≥0)个结点的有限集。n=0时称为空树。在任意一棵非空树中：1)有且仅有一个特定的称为根(Root)的结点；2)当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集T1、T2、……、Tm，其中每一个集合本身又是一棵树，并且称为根的子树(SubTree)。</strong></p>
<a id="more"></a>
<p>对于树的定义还需要强调两点：</p>
<ol>
<li>n&gt;0时根结点是唯一的，不可能存在多个根结点，数据结构中的树是只能有一个根结点。</li>
<li>m&gt;0时，子树的个数没有限制，但它们一定是互不相交的。</li>
</ol>
<h3 id="6-2-1-结点分类">6.2.1 结点分类</h3>
<p>树的结点包含一个数据元素及若干指向其子树的分支。结点拥有的子树数称为结点的度（Degree）。度为0的结点称为叶结点（Leaf）或终端结点；度不为0的结点称为非终端结点或分支结点。除根结点之外，分支结点也称为内部结点。树的度是树内各结点的度的最大值。如图6-2-4所示，因为这棵树结点的度的最大值是结点D的度为3，所以树的度也为3。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-2-4.JPG?raw=true" srcset="/img/loading.gif" alt="6-2-4"></p>
<h3 id="6-2-2-结点间关系">6.2.2 结点间关系</h3>
<p>结点的子树的根称为该结点的孩子（Child），相应地，该结点称为孩子的双亲（Parent）。同一个双亲的孩子之间互称兄弟（Sibling）。结点的祖先是从根到该结点所经分支上的所有结点。反之，以某结点为根的子树中的任一结点都称为该结点的子孙。</p>
<h3 id="6-2-3-树的其他相关概念">6.2.3 树的其他相关概念</h3>
<p>结点的层次（Level）从根开始定义起，根为第一层，根的孩子为第二层。其双亲在同一层的结点互为堂兄弟。树中结点的最大层次称为树的深度（Depth）或高度。<br>
如果将树中结点的各子树看成从左至右是有次序的，不能互换的，则称该树为有序树，否则称为无序树。<br>
森林（Forest）是m（m&gt;0）棵互不相交的树的集合。<br>
对比线性表与树的结构，它们有很大的不同，如图6-2-7所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-2-7.JPG?raw=true" srcset="/img/loading.gif" alt="6-2-7"></p>
<h2 id="6-3-树的抽象数据类型">6.3 树的抽象数据类型</h2>
<div class="hljs"><pre><code class="hljs c">ADT 树（tree）
Data
  树是由一个根结点和若干棵子树构成。树中结点具有相同数据类型及层次关系。
Operation
  InitTree（*T）：构造空树T。
  DestroyTree（*T）：销毁树T。
  CreateTree（*T，definition）：按definition中给出树的定义来构造树。
  ClearTree（*T）：若树T存在，则将树T清为空树。
  TreeEmpty（T）：若T为空树，返回<span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span>。
  TreeDepth（T）：返回T的深度。
  Root（T）：返回T的根结点。
  Value（T，cur_e）：cur_e是树T中一个结点，返回此结点的值。
  Assign（T，cur_e，value）：给树T的结点cur_e赋值为value。
  Parent（T，cur_e）：若cur_e是树T的非根结点，则返回它的双亲，否则返回空。
  LeftChild（T，cure）：若cur_e是树T的非叶结点，则返回它的最左孩子，否则返回空。
  RightSibling（T，cur_e）：若cur_e有右兄弟，则返回它的右兄弟，否则返回空。
  InsertChild（*T，*p，i，c）：其中p指向树T的某个结点，i为所指结点p的度加上<span class="hljs-number">1</span>，非空树c与T不相交，操作结果为插入c为树T中p指结点的第i棵子树。
  DeleteChild（*T，*p，i）：其中p指向树T的某个结点，i为所指结点p的度，操作结果为删除T中p所指结点的第i棵子树。
endADT</code></pre></div>
<h2 id="6-4-树的存储结构">6.4 树的存储结构</h2>
<p>充分利用顺序存储和链式存储结构的特点，可以实现对树的存储结构的表示。我们这里要介绍三种不同的表示法：双亲表示法、孩子表示法、孩子兄弟表示法。</p>
<h3 id="6-4-1-双亲表示法">6.4.1 双亲表示法</h3>
<p>树除了根结点外，其余每个结点，它不一定有孩子，但是一定有且仅有一个双亲。<br>
我们假设以一组连续空间存储树的结点，同时在每个结点中，附设一个指示器指示其双亲结点到链表中的位置。也就是说，每个结点除了知道自己是谁以外，还知道它的双亲在哪里。<br>
data数据域，存储结点的数据信息。而parent指针域，存储该结点的双亲在数组中的下标。<br>
以下是我们的双亲表示法的结点结构定义代码:</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 树的双亲表示法结点结构定义 */</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_TREE_SIZE 100 <span class="hljs-comment">/* 二叉树的最大结点数 */</span></span>
<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> TElemType;  <span class="hljs-comment">/* 树结点的数据类型，目前暂定为整型 */</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PTNode</span>/*结点结构*/
&#123;</span>
  TElemType data;<span class="hljs-comment">/*结点数据*/</span>
  <span class="hljs-keyword">int</span> parent;<span class="hljs-comment">/*双亲位置*/</span>
&#125;PTNode;
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> /* 树结构 */
&#123;</span>
  PTNode nodes[MAX_TREE_SI2E];<span class="hljs-comment">/* 结点数组 */</span>
  <span class="hljs-keyword">int</span> r，n;<span class="hljs-comment">/* 根的位置和结点数 */</span>
&#125;PTree;</code></pre></div>
<p>有了这样的结构定义，我们就可以来实现双亲表示法了。由于根结点是没有双亲的，所以我们约定根结点的位置域设置为-1，这也就意味着，我们所有的结点都存有它双亲的位置。如图6-4-1中的树结构和表6-4-2中的树双亲表示所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-1.JPG?raw=true" srcset="/img/loading.gif" alt="6-4-1"></p>
<p>这样的存储结构，我们可以根据结点的parent指针很容易找到它的双亲结点，所用的时间复杂度为O(1)，直到parent为-1时，表示找到了树结点的根。可如果我们要知道结点的孩子是什么，请遍历整个结构才行。如何改进呢？<br>
我们增加一个结点最左边孩子的域，不妨叫它长子域，这样就可以很容易得到结点的孩子。如果没有孩子的结点，这个长子域就设置为-1，如表6-4-3所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-3.JPG?raw=true" srcset="/img/loading.gif" alt="6-4-3"></p>
<p>对于有0个或1个孩子结点来说，这样的结构是解决了要找结点孩子的问题了。甚至是有2个孩子，知道了长子是谁，另一个当然就是次子了。<br>
另外一个问题是，我们很关注各兄弟之间的关系，双亲表示法无法体现这样的关系，那我们怎么办？嗯，可以增加一个右兄弟域来体现兄弟关系，也就是说，每一个结点如果它存在右兄弟，则记录下右兄弟的下标。同样的，如果右兄弟不存在，则赋值为-1。<br>
但如果结点的孩子很多，超过了2个。我们又关注结点的双亲、又关注结点的孩子、还关注结点的兄弟，而且对时间遍历要求还比较高，那么我们还可以把此结构扩展为有双亲域、长子域、再有右兄弟域。存储结构的设计是一个非常灵活的过程。一个存储结构设计得是否合理，取决于基于该存储结构的运算是否适合、是否方便，时间复杂度好不好等。注意也不是越多越好，有需要时再设计相应的结构。</p>
<h3 id="6-4-2-孩子表示法">6.4.2 孩子表示法</h3>
<p>换一种完全不同的考虑方法。由于树中每个结点可能有多棵子树，可以考虑用多重链表，即每个结点有多个指针域，其中每个指针指向一棵子树的根结点，我们把这种方法叫做多重链表表示法。不过，树的每个结点的度，也就是它的孩子个数是不同的。所以可以设计两种方案来解决。</p>
<h4 id="6-4-2-1-方案一">6.4.2.1 方案一</h4>
<p>一种是指针域的个数就等于树的度，复习一下，树的度是树各个结点度的最大值。其结构如表6-4-5所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-5.JPG?raw=true" srcset="/img/loading.gif" alt="6-4-5"><br>
其中data是数据域。child1到child d是指针域，用来指向该结点的孩子结点。<br>
对于图6-4-1的树来说，树的度是3，所以我们的指针域的个数是3，这种方法实现如图6-4-2所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-2.JPG?raw=true" srcset="/img/loading.gif" alt="6-4-2"><br>
这种方法对于树中各结点的度相差很大时，显然是很浪费空间的，因为有很多的结点，它的指针域都是空的。不过如果树的各结点度相差很小时，那就意味着开辟的空间被充分利用了，这时存储结构的缺点反而变成了优点。<br>
既然很多指针域都可能为空，那么我们可以按需分配空间。</p>
<h4 id="6-4-2-2-方案二">6.4.2.2 方案二</h4>
<p>第二种方案每个结点指针域的个数等于该结点的度，我们专门取一个位置来存储结点指针域的个数，其结构如表6-4-6所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-6.JPG?raw=true" srcset="/img/loading.gif" alt="6-4-6"><br>
其中data为数据域，degree为度域，也就是存储该结点的孩子结点的个数，child1到child d为指针域，指向该结点的各个孩子的结点。<br>
对于图6-4-2的树来说，这种方法实现如图6-4-3所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-7.JPG?raw=true" srcset="/img/loading.gif" alt="6-4-7"><br>
这种方法克服了浪费空间的缺点，对空间利用率是很高了，但是由于各个结点的链表是不相同的结构，加上要维护结点的度的数值，在运算上就会带来时间上的损耗。</p>
<p>孩子表示法。具体办法是，<strong>把每个结点的孩子结点排列起来，以单链表作存储结构，则n个结点有n个孩子链表，如果是叶子结点则此单链表为空。然后n个头指针又组成一个线性表，采用顺序存储结构，存放进一个一维数组中</strong>，如图6-4-4所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-8.JPG?raw=true" srcset="/img/loading.gif" alt="6-4-8"><br>
以下是我们的孩子表示法的结构定义代码:</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/*树的孩子表示法结构定义*/</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_TREE_SIZE 100</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cTNode</span>/* 孩子结点 */
&#123;</span>
  <span class="hljs-keyword">int</span> child;
  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CTNode</span> *<span class="hljs-title">next</span>;</span>
&#125;*ChildPtr;
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>  /* 表头结构 */
&#123;</span>
  TElemType data;
  ChildPtr firstChild;
&#125;CTBox;
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>  /* 树结构 */
&#123;</span>
  CTBox nodes[MAX_TREE_SIZE];  <span class="hljs-comment">/* 结点数组 */</span>
  <span class="hljs-keyword">int</span> r，n;  <span class="hljs-comment">/* 根的位置和结点数 */</span>
&#125;CTree;</code></pre></div>
<p>这样的结构对于我们要查找某个结点的某个孩子，或者找某个结点的兄弟，只需要查找这个结点的孩子单链表即可。对于遍历整棵树也是很方便的，对头结点的数组循环即可。<br>
但是，这也存在着问题，我如何知道某个结点的双亲是谁呢？比较麻烦，需要整棵树遍历才行，难道就不可以把双亲表示法和孩子表示法综合一下吗？当然是可以。如图6-4-5所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-9.JPG?raw=true" srcset="/img/loading.gif" alt="6-4-9"><br>
我们把这种方法称为双亲孩子表示法。</p>
<h3 id="6-4-3-孩子兄弟表示法">6.4.3 孩子兄弟表示法</h3>
<p><strong>我们观察后发现，任意一棵树，它的结点的第一个孩子如果存在就是唯一的，它的右兄弟如果存在也是唯一的。因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟。</strong><br>
结点结构如下所示。</p>
<table>
<thead>
<tr>
<th>data</th>
<th>firstChild</th>
<th>rightSib</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p>其中data是数据域，firstChild为指针域，存储该结点的第一个孩子结点的存储地址，rightSib是指针域，存储该结点的右兄弟结点的存储地址。<br>
结构定义代码如下:</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/*树的孩子兄弟表示法结构定义*/</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CSNode</span>
&#123;</span>
  TElemType data;
  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CSNode</span> *<span class="hljs-title">firstChild</span>， *<span class="hljs-title">rightSib</span>;</span>
&#125;CSNode,*CSTree;</code></pre></div>
<p>对于图6-4-1的树来说，这种方法实现的示意图如图6-4-6所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-10.JPG?raw=true" srcset="/img/loading.gif" alt="6-4-10"><br>
这种表示法，给查找某个结点的某个孩子带来了方便，只需要通过firstChild找到此结点的长子，然后再通过长子结点的rightSib找到它的二弟，接着一直下去，直到找到具体的孩子。</p>
<h2 id="6-5-二叉树的定义">6.5 二叉树的定义</h2>
<p><strong>二叉树（Binary Tree）是n（n≥0）个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。</strong></p>
<h3 id="6-5-1-二叉树特点">6.5.1 二叉树特点</h3>
<p>二叉树的特点有：</p>
<ul>
<li>每个结点最多有两棵子树，所以二叉树中不存在度大于2的结点。注意不是只有两棵子树，而是最多有。没有子树或者有一棵子树都是可以的。</li>
<li>左子树和右子树是有顺序的，次序不能任意颠倒。</li>
<li>即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。</li>
</ul>
<p>二叉树具有五种基本形态：</p>
<ol>
<li>空二叉树。</li>
<li>只有一个根结点。</li>
<li>根结点只有左子树。</li>
<li>根结点只有右子树。</li>
<li>根结点既有左子树又有右子树。</li>
</ol>
<h3 id="6-5-2-特殊二叉树">6.5.2 特殊二叉树</h3>
<p>一、斜树:所有的结点都只有左子树的二叉树叫左斜树。所有结点都是只有右子树的二叉树叫右斜树。这两者统称为斜树。</p>
<p>二、满二叉树：在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。<br>
满二叉树的特点有：</p>
<ul>
<li>叶子只能出现在最下一层。出现在其他层就不可能达成平衡。</li>
<li>非叶子结点的度一定是2。否则就是“缺胳膊少腿”了。</li>
<li>在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。</li>
</ul>
<p>三、完全二叉树：对一棵具有n个结点的二叉树按层序编号，如果编号为i（1≤i≤n）的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。<br>
完全二叉树的特点：</p>
<ol>
<li>叶子结点只能出现在最下两层。</li>
<li>最下层的叶子一定集中在左部连续位置。</li>
<li>倒数二层，若有叶子结点，一定都在右部连续位置。</li>
<li>如果结点度为1，则该结点只有左孩子，即不存在只有右子树的情况。</li>
<li>同样结点数的二叉树，完全二叉树的深度最小。</li>
</ol>
<h2 id="6-6-二叉树的性质">6.6 二叉树的性质</h2>
<p>二叉树有一些需要理解并记住的特性，以便于我们更好地使用它。</p>
<h3 id="6-6-1-二叉树性质1">6.6.1 二叉树性质1</h3>
<p>性质1：在二叉树的第i层上至多有$2^{i-1}$个结点（i≥1）。</p>
<h3 id="6-6-2-二叉树性质2">6.6.2 二叉树性质2</h3>
<p>性质2：深度为k的二叉树至多有$2^k-1$个结点（k≥1）。</p>
<h3 id="6-6-3-二叉树性质3">6.6.3 二叉树性质3</h3>
<p>性质3：对任何一棵二叉树T，如果其叶子结点数为$n_0$，度为2的结点数为$n_2$，则$n_0=n_2+1$。</p>
<h3 id="6-6-4-二叉树性质4">6.6.4 二叉树性质4</h3>
<p>性质4：具有n个结点的完全二叉树的深度为[㏒$_2$n]+1（[x]表示不大于x的最大整数）。</p>
<h3 id="6-6-5-二叉树性质5">6.6.5 二叉树性质5</h3>
<p>性质5：如果对一棵有n个结点的完全二叉树（其深度为[㏒$_2$n]+1）的结点按层序编号（从第1层到第[㏒$_2$n]+1层，每层从左到右），对任一结点i（1≤i≤n）有：</p>
<ol>
<li>如果i=1，则结点i是二叉树的根，无双亲；如果i&gt;1，则其双亲是结点[i/2]。</li>
<li>如果2i&gt;n，则结点i无左孩子（结点i为叶子结点）；否则其左孩子是结点2i。</li>
<li>如果2i+1&gt;n，则结点i无右孩子；否则其右孩子是结点2i+1。</li>
</ol>
<h2 id="6-7-二叉树的存储结构">6.7 二叉树的存储结构</h2>
<h3 id="6-7-1-二叉树顺序存储结构">6.7.1 二叉树顺序存储结构</h3>
<p>二叉树的顺序存储结构就是用一维数组存储二叉树中的结点，并且结点的存储位置，也就是数组的下标要能体现结点之间的逻辑关系。<br>
所以用来表示完全二叉树比较好。由于它定义的严格，所以用顺序结构也可以表现出二叉树的结构来。<br>
当然对于一般的二叉树，尽管层序编号不能反映逻辑关系，但是可以将其按完全二叉树编号，只不过，把不存在的结点设置为“^”而已。如图6-7-3所示，浅色结点表示不存在。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-7-3.JPG?raw=true" srcset="/img/loading.gif" alt="6-7-3"><br>
但是对于一般二叉树，一棵深度为k的右斜树，它只有k个结点，却需要分配$2^k$-1个存储单元空间，这显然是对存储空间的浪费。<br>
所以，顺序存储结构一般只用于完全二叉树。</p>
<h3 id="6-7-2-二叉链表">6.7.2 二叉链表</h3>
<p>链式存储结构中。二叉树每个结点最多有两个孩子，所以为它设计一个数据域和两个指针域是比较自然的想法，我们称这样的链表叫做二叉链表。结点结构图如表格6-7-1所示。</p>
<table>
<thead>
<tr>
<th>lChild</th>
<th>data</th>
<th>rChild</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p>其中data是数据域，lChild和rChild都是指针域，分别存放指向左孩子和右孩子的指针。<br>
以下是我们的二叉链表的结点结构定义代码。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span>  /* 结点结构 */
&#123;</span>
   TElemType data;    <span class="hljs-comment">/* 结点数据 */</span>
   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>,*<span class="hljs-title">rchild</span>;</span> <span class="hljs-comment">/* 左右孩子指针 */</span>
&#125;BiTNode,*BiTree;</code></pre></div>
<p>就如同树的存储结构中讨论的一样，如果有需要，还可以再增加一个指向其双亲的指针域，那样就称之为三叉链表。</p>
<h2 id="6-8遍历二叉树">6.8遍历二叉树</h2>
<h3 id="6-8-1二叉树遍历原理">6.8.1二叉树遍历原理</h3>
<p>二叉树的遍历（traversing binary tree）是指从根结点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。</p>
<h3 id="6-8-2二叉树遍历方法">6.8.2二叉树遍历方法</h3>
<p>二叉树的遍历方式可以很多，如果我们限制了从左到右的习惯方式，那么主要就分为四种：</p>
<ol>
<li>
<p>前序遍历-根左右<br>
规则是若二叉树为空，则空操作返回，否则先访问根结点，然后前序遍历左子树，再前序遍历右子树。</p>
</li>
<li>
<p>中序遍历-左根右<br>
规则是若树为空，则空操作返回，否则从根结点开始（注意并不是先访问根结点），中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树。</p>
</li>
<li>
<p>后序遍历-左右根<br>
规则是若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后是访问根结点。</p>
</li>
<li>
<p>层序遍历<br>
规则是若树为空，则空操作返回，否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。</p>
</li>
</ol>
<p>技巧：每个结点单独看。比如后序遍历，每个右结点的左边是该结点的左节点，右边必然是对应的根结点。</p>
<h3 id="6-8-3-前序遍历算法">6.8.3 前序遍历算法</h3>
<p>二叉树的定义是用递归的方式，所以，实现遍历算法也可以采用递归，而且极其简洁明了。先来看看二叉树的前序遍历算法。代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 二叉树的前序遍历递归算法 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreOrderTraverse</span><span class="hljs-params">(BiTree T)</span>
</span>&#123;
    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)
        <span class="hljs-keyword">return</span>;
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>, T-&gt;data); <span class="hljs-comment">/* 显示结点数据，可以更改为其它对结点操作 */</span>
    PreOrderTraverse(T-&gt;lchild); <span class="hljs-comment">/* 再先序遍历左子树 */</span>
    PreOrderTraverse(T-&gt;rchild); <span class="hljs-comment">/* 最后先序遍历右子树 */</span>
&#125;</code></pre></div>
<h3 id="6-8-4-中序遍历算法">6.8.4 中序遍历算法</h3>
<p>二叉树的中序遍历算法和前序遍历算法仅仅只是代码的顺序上的差异。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 二叉树的中序遍历递归算法 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrderTraverse</span><span class="hljs-params">(BiTree T)</span>
</span>&#123;
    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)
        <span class="hljs-keyword">return</span>;
    InOrderTraverse(T-&gt;lchild); <span class="hljs-comment">/* 中序遍历左子树 */</span>
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>, T-&gt;data);<span class="hljs-comment">/* 显示结点数据，可以更改为其它对结点操作 */</span>
    InOrderTraverse(T-&gt;rchild); <span class="hljs-comment">/* 最后中序遍历右子树 */</span>
&#125;</code></pre></div>
<h3 id="6-8-5后序遍历算法">6.8.5后序遍历算法</h3>
<p>那么同样的，后序遍历也就很容易想到应该如何写代码了。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 二叉树的后序遍历递归算法 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrderTraverse</span><span class="hljs-params">(BiTree T)</span>
</span>&#123;
    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)
        <span class="hljs-keyword">return</span>;
    PostOrderTraverse(T-&gt;lchild); <span class="hljs-comment">/* 先后序遍历左子树  */</span>
    PostOrderTraverse(T-&gt;rchild); <span class="hljs-comment">/* 再后序遍历右子树  */</span>
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>, T-&gt;data);<span class="hljs-comment">/* 显示结点数据，可以更改为其它对结点操作 */</span>
&#125;</code></pre></div>
<h3 id="6-8-6-推导遍历结果">6.8.6 推导遍历结果</h3>
<p>题目是这样：二叉树的中序序列是ABCDEFG，后序序列是BDCAFGE，求前序序列。<br>
这次简单点，由后序的BDCAFG E，得到E是根结点，因此前序首字母是E。<br>
于是根据中序序列分为两棵树ABCD和FG，由后序序列的BDCA FGE，知道A是E的左孩子，前序序列目前分析为EA。<br>
再由中序序列的A BCDEFG，知道BCD是A结点的右子孙，再由后序序列的BDC AFGE知道C结点是A结点的右孩子，前序序列目前分析得到EAC。<br>
中序序列AB C DEFG，得到B是C的左孩子，D是C的右孩子，所以前序序列目前分析结果为EACBD。<br>
由后序序列BDCAF G E，得到G是E的右孩子，于是F就是G的孩子。前序遍历序列的最终结果就是EACBDGF。</p>
<p>两个二叉树遍历的性质。</p>
<ul>
<li>已知前序遍历序列和中序遍历序列，可以唯一确定一棵二叉树。</li>
<li>已知后序遍历序列和中序遍历序列，可以唯一确定一棵二叉树。</li>
</ul>
<p>但要注意了，已知前序和后序遍历，是不能确定一棵二叉树的，原因也很简单，比如前序序列是ABC，后序序列是CBA。我们可以确定A一定是根结点，但接下来，我们无法知道，哪个结点是左子树，哪个是右子树。这棵树可能有如图6-8-24所示的四种可能。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-8-24.JPG?raw=true" srcset="/img/loading.gif" alt="6-8-24"></p>
<h2 id="6-9-二叉树的建立">6.9 二叉树的建立</h2>
<p>如果我们要在内存中建立一个二叉树，为了能让每个结点确认是否有左右孩子，我们对它进行了扩展，也就是将二叉树中每个结点的空指针引出一个虚结点，其值为一特定值，比如“#”。我们称这种处理后的二叉树为原二叉树的扩展二叉树。扩展二叉树就可以做到一个遍历序列确定一棵二叉树了。<br>
前序遍历序列生成二叉树的代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 按前序输入二叉树中结点的值（一个字符） */</span>
<span class="hljs-comment">/* #表示空树，构造二叉链表表示二叉树T。 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateBiTree</span><span class="hljs-params">(BiTree *T)</span>
</span>&#123;
    TElemType ch;
    <span class="hljs-comment">/* scanf("%c",&amp;ch); */</span>
    ch = str[index++];
    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'#'</span>)
        *T = <span class="hljs-literal">NULL</span>;
    <span class="hljs-keyword">else</span>
    &#123;
        *T = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));
        <span class="hljs-keyword">if</span> (!*T)
            <span class="hljs-built_in">exit</span>(OVERFLOW);
        (*T)-&gt;data = ch; <span class="hljs-comment">/* 生成根结点 */</span>
        CreateBiTree(&amp;(*T)-&gt;lchild); <span class="hljs-comment">/* 构造左子树 */</span>
        CreateBiTree(&amp;(*T)-&gt;rchild); <span class="hljs-comment">/* 构造右子树 */</span>
    &#125;
&#125;</code></pre></div>
<p>当然，你完全也可以用中序或后序遍历的方式实现二叉树的建立，只不过代码里生成结点和构造左右子树的代码顺序交换一下。另外，输入的字符也要做相应的更改。</p>
<h2 id="6-10-线索二叉树">6.10 线索二叉树</h2>
<h3 id="6-10-1-线索二叉树原理">6.10.1 线索二叉树原理</h3>
<p><strong>指向前驱和后继的指针称为线索，加上线索的二叉链表称为线索链表，相应的二叉树就称为线索二叉树（Threaded Binary Tree）。</strong><br>
其实线索二叉树，等于是把一棵二叉树转变成了一个双向链表，这样对我们的插入删除结点、查找某个结点都带来了方便。所以<strong>我们对二叉树以某种次序遍历使其变为线索二叉树的过程称做是线索化</strong>。<br>
但是变为线索二叉树，我们并不知道某个结点的lChild是指向它的左孩子还是指向前驱…<br>
因此，我们在每个结点再增设两个标志域lTag和rTag，注意lTag和rTag只是存放0或1数字的布尔型变量，其占用的内存空间要小于像lchild和rchild的指针变量。结点结构如下表所示。</p>
<table>
<thead>
<tr>
<th>lChild</th>
<th>lTag</th>
<th>data</th>
<th>rTag</th>
<th>rChild</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p>其中：</p>
<ul>
<li>lTag为0时指向该结点的左孩子，为1时指向该结点的前驱。</li>
<li>rTag为0时指向该结点的右孩子，为1时指向该结点的后继。</li>
</ul>
<h3 id="6-10-2-线索二叉树结构实现">6.10.2 线索二叉树结构实现</h3>
<p>由此二叉树的线索存储结构定义代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 二叉树的二叉线索存储结构定义 */</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123; Link, Thread &#125; PointerTag; <span class="hljs-comment">/* Link==0表示指向左右孩子指针, */</span>
                                          <span class="hljs-comment">/* Thread==1表示指向前驱或后继的线索 */</span>
<span class="hljs-keyword">typedef</span>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiThrNode</span>                 /* 二叉线索存储结点结构 */
&#123;</span>
    TElemType data;    <span class="hljs-comment">/* 结点数据 */</span>
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiThrNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span>    <span class="hljs-comment">/* 左右孩子指针 */</span>
    PointerTag LTag;
    PointerTag RTag;        <span class="hljs-comment">/* 左右标志 */</span>
&#125; BiThrNode, *BiThrTree;</code></pre></div>
<p>线索化的实质就是将二叉链表中的空指针改为指向前驱或后继的线索。由于前驱和后继的信息只有在遍历该二叉树时才能得到，所以<strong>线索化的过程就是在遍历的过程中修改空指针的过程</strong>。<br>
中序遍历线索化的递归函数代码如下：</p>
<div class="hljs"><pre><code class="hljs c">BiThrTree pre; <span class="hljs-comment">/* 全局变量,始终指向刚刚访问过的结点 */</span>
<span class="hljs-comment">/* 中序遍历进行中序线索化 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InThreading</span><span class="hljs-params">(BiThrTree p)</span>
</span>&#123;
    <span class="hljs-keyword">if</span> (p)
    &#123;
        InThreading(p-&gt;lchild); <span class="hljs-comment">/* 递归左子树线索化 */</span>
        <span class="hljs-keyword">if</span> (!p-&gt;lchild) <span class="hljs-comment">/* 没有左孩子 */</span>
        &#123;
            p-&gt;LTag = Thread; <span class="hljs-comment">/* 前驱线索 */</span>
            p-&gt;lchild = pre; <span class="hljs-comment">/* 左孩子指针指向前驱 */</span>
        &#125;
        <span class="hljs-keyword">if</span> (!pre-&gt;rchild) <span class="hljs-comment">/* 前驱没有右孩子 */</span>
        &#123;
            pre-&gt;RTag = Thread; <span class="hljs-comment">/* 后继线索 */</span>
            pre-&gt;rchild = p; <span class="hljs-comment">/* 前驱右孩子指针指向后继(当前结点p) */</span>
        &#125;
        pre = p; <span class="hljs-comment">/* 保持pre指向p的前驱 */</span>
        InThreading(p-&gt;rchild); <span class="hljs-comment">/* 递归右子树线索化 */</span>
    &#125;
&#125;</code></pre></div>
<p>if（!p-&gt;lChild）表示如果某结点的左指针域为空，因为其前驱结点刚刚访问过，赋值给了pre，所以可以将pre赋值给p-&gt;lChild，并修改p-&gt;LTag=Thread（也就是定义为1）以完成前驱结点的线索化。<br>
后继就要稍稍麻烦一些。因为此时p结点的后继还没有访问到，因此只能对它的前驱结点pre的右指针rchild做判断，if（!pre-&gt;rchild）表示如果为空，则p就是pre的后继，于是pre-&gt;rchild=p，并且设置pre-&gt;RTag=Thread，完成后继结点的线素化。<br>
完成前驱和后继的判断后，别忘记将当前的结点p赋值给pre，以便于下一次使用。<br>
有了线索二叉树后，我们对它进行遍历时发现，其实就等于是操作一个双向链表结构。<br>
和双向链表结构一样，在二叉树线素链表上添加一个头结点，如图6-10-6所示，并令其lchild域的指针指向二叉树的根结点（图中的①），其rchild域的指针指向中序遍历时访问的最后一个结点（图中的②）。反之，令二叉树的中序序列中的第一个结点中，lchild 域指针和最后一个结点的rchild 域指针均指向头结点（图中的③和④）。这样定义的好处就是我们既可以从第一个结点起顺后继进行遍历，也可以从最后一个结点起顺前驱进行遍历。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-10-6.JPG?raw=true" srcset="/img/loading.gif" alt="6-10-6"></p>
<p>遍历的代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/*T指向头结点，头结点左链lchild指向根结点，头结点右链rchild指向中序遍历的*/</span>
<span class="hljs-comment">/*最后一个结点。中序遍历二叉线索链表表示的二叉树T*/</span>
<span class="hljs-function">Status <span class="hljs-title">InOrderTraverse_Thr</span><span class="hljs-params">(BiThrTree T)</span>
</span>&#123;
    BiThrTree p;
    p = T-&gt;lchild; <span class="hljs-comment">/* p指向根结点 */</span>
    <span class="hljs-keyword">while</span> (p != T) <span class="hljs-comment">/* 空树或遍历结束时，p==T */</span>
    &#123; <span class="hljs-comment">/* 空树或遍历结束时,p==T */</span>
        <span class="hljs-keyword">while</span> (p-&gt;LTag == Link) <span class="hljs-comment">/*当LTag==0时循环到中序序列第一个结点 */</span>
            p = p-&gt;lchild;
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>,p-&gt;data); <span class="hljs-comment">/* 显示结点数据，可以更改为其他对结点操作 */</span>
        <span class="hljs-keyword">while</span> (p-&gt;RTag == Thread &amp;&amp; p-&gt;rchild != T)
        &#123;
            p = p-&gt;rchild;
            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>,p-&gt;data);
        &#125;
        p = p-&gt;rchild; <span class="hljs-comment">/* p进至其右子树根 */</span>
    &#125;
    <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<p>从这段代码也可以看出，它等于是一个链表的扫描，所以时间复杂度为O(n)。<br>
由于它充分利用了空指针域的空间（这等于节省了空间），又保证了创建时的一次遍历就可以终生受用前驱后继的信息（这意味着节省了时间）。所以在实际问题中，<strong>如果所用的二叉树需经常遍历或查找结点时需要某种遍历序列中的前驱和后继，那么采用线索二叉链表的存储结构就是非常不错的选择</strong>。</p>
<h2 id="6-11-树、森林与二叉树的转换">6.11 树、森林与二叉树的转换</h2>
<h3 id="6-11-1-树转换为二叉树">6.11.1 树转换为二叉树</h3>
<p>将树转换为二叉树的步骤如下</p>
<ol>
<li>加线。在所有兄弟结点之间加一条连线。</li>
<li>去线。对树中每个结点，只保留它与第一个孩子结点的连线，删除它与其他孩子结点之间的连线。</li>
<li>层次调整。以树的根结点为轴心，将整棵树顺时针旋转一定的角度，使之结构层次分明。注意第一个孩子是二叉树结点的左孩子，兄弟转换过来的孩子是结点的右孩子。</li>
</ol>
<h3 id="6-11-2-森林转换为二叉树">6.11.2 森林转换为二叉树</h3>
<p>森林是由若干棵树组成的，所以完全可以理解为，森林中的每一棵树都是兄弟，可以按照兄弟的处理办法来操作。步骤如下：</p>
<ol>
<li>把每个树转换为二叉树。</li>
<li>第一棵二叉树不动，从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树的根结点的右孩子，用线连接起来。当所有的二叉树连接起来后就得到了由森林转换来的二叉树。</li>
</ol>
<h3 id="6-11-3-二叉树转换为树">6.11.3 二叉树转换为树</h3>
<p>二叉树转换为树是树转换为二叉树的逆过程，也就是反过来做而已。如图6-11-4所示。步骤如下：</p>
<ol>
<li>加线。若某结点的左孩子结点存在，则将这个左孩子的右孩子结点、右孩子的右孩子结点、右孩子的右孩子的右孩子结点……哈，反正就是左孩子的n个右孩子结点都作为此结点的孩子。将该结点与这些右孩子结点用线连接起来。</li>
<li>去线。删除原二叉树中所有结点与其右孩子结点的连线。</li>
<li>层次调整。使之结构层次分明。</li>
</ol>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-11-4.JPG?raw=true" srcset="/img/loading.gif" alt="6-11-4"></p>
<h3 id="6-11-4-二叉树转换为森林">6.11.4 二叉树转换为森林</h3>
<p>判断一棵二叉树能够转换成一棵树还是森林，标准很简单，那就是只要看这棵二叉树的根结点有没有右孩子，有就是森林，没有就是一棵树。<br>
那么如果是转换成森林，步骤如下：</p>
<ol>
<li>从根结点开始，若右孩子存在，则把与右孩子结点的连线删除，再查看分离后的二叉树，若右孩子存在，则连线删除……，直到所有右孩子连线都删除为止，得到分离的二叉树。</li>
<li>再将每棵分离后的二叉树转换为树即可。</li>
</ol>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-11-5.JPG?raw=true" srcset="/img/loading.gif" alt="6-11-5"></p>
<h3 id="6-11-5-树与森林的遍历">6.11.5 树与森林的遍历</h3>
<p>树的遍历分为两种方式。</p>
<ol>
<li>一种是先根遍历树，即先访问树的根结点，然后依次先根遍历根的每棵子树。</li>
<li>另一种是后根遍历，即先依次后根遍历每棵子树，然后再访问根结点。比如图6-11-4中最右侧的树，它的先根遍历序列为ABEFCDG，后根遍历序列为EFBCGDA。</li>
</ol>
<p>森林的遍历也分为两种方式：</p>
<ol>
<li>前序遍历：先访问森林中第一棵树的根结点，然后再依次先根遍历根的每棵子树，再依次用同样方式遍历除去第一棵树的剩余树构成的森林。比如图6-11-5右侧三棵树的森林，前序遍历序列的结果就是ABCDEFGHJI。</li>
<li>后序遍历：是先访问森林中第一棵树，后根遍历的方式遍历每棵子树，然后再访问根结点，再依次同样方式遍历除去第一棵树的剩余树构成的森林。比如图6-11-5右侧三棵树的森林，后序遍历序列的结果就是BCDAFEJHIG。</li>
</ol>
<p>可如果我们对二叉树进行分析就会发现，森林的前序遍历和二叉树的前序遍历结果相同，森林的后序遍历和二叉树的中序遍历结果相同。<br>
这也就告诉我们，当以二叉链表作树的存储结构时，树的先根遍历和后根遍历完全可以借用二叉树的前序遍历和中序遍历的算法来实现。这其实也就证实，我们找到了对树和森林这种复杂问题的简单解决办法。</p>
<h2 id="6-12-赫夫曼树及其应用">6.12 赫夫曼树及其应用</h2>
<h3 id="6-12-1-赫夫曼树">6.12.1 赫夫曼树</h3>
<p>压缩软件如何做到压缩而不出错的呢？简单说，就是把我们要压缩的文本进行重新编码，以减少不必要的空间。我们今天就来介绍一下最基本的压缩编码方法——赫夫曼编码。<br>
由美国数学家赫夫曼（David Huffman）在1952年发明了赫夫曼编码。他在编码中用到的特殊的二叉树称之为赫夫曼树，他的编码方法称为赫夫曼编码。</p>
<h3 id="6-12-2-赫夫曼树定义与原理">6.12.2 赫夫曼树定义与原理</h3>
<p><strong>从树中一个结点到另一个结点之间的分支构成两个结点之间的路径，路径上的分支数目称做路径长度。</strong><br>
<strong>树的路径长度就是从树根到每一结点的路径长度之和。</strong><br>
如果考虑到带权的结点，结点的带权的路径长度为从该结点到树根之间的路径长度与结点上权的乘积。树的带权路径长度为树中所有叶子结点的带权路径长度之和。假设有n个权值{w1，w2，…，Wn}，构造一棵有n个叶子结点的二叉树，每个叶子结点带权Wk，每个叶子的路径长度为lk，我们通常记作，则其中<strong>带权路径长度WPL最小的二叉树称做赫夫曼树</strong>。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-12-4.JPG?raw=true" srcset="/img/loading.gif" alt="6-12-4"><br>
有了赫夫曼对带权路径长度的定义，我们来计算一下图6-12-4这两棵树的WPL值。<br>
二叉树a的WPL=5×1+15×2+40×3+30×4+10×4=315<br>
注意：这里5是A结点的权，1是A结点的路径长度，其他同理。<br>
二叉树b的WPL=5×3+15×3+40×2+30×2+10×2=220<br>
参考图6-12-4的二叉树b，最优赫夫曼树的解法如下：</p>
<ol>
<li>先把有权值的叶子结点按照从小到大的顺序排列成一个有序序列，即：A5，E10，B15，D30，C40。</li>
<li>取头两个最小权值的结点作为一个新节点N1的两个子结点，注意相对较小的是左孩子，这里就是A为N1的左孩子，E为N1的右孩子，如图6-12-5所示。新结点的权值为两个叶子权值的和5+10=15。</li>
<li>将N1替换A与E，插入有序序列中，保持从小到大排列。即：N1 15，B15，D30，C40。</li>
<li>重复步骤2。将N1与B作为一个新节点N2的两个子结点。如图6-12-6所示。N2的权值=15+15=30。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-12-5.JPG?raw=true" srcset="/img/loading.gif" alt="6-12-5"></li>
<li>将N2替换N1与B，插入有序序列中，保持从小到大排列。即：N2 30，D30，C40。</li>
<li>重复步骤2。将N2与D作为一个新节点N3的两个子结点。如图6-12-7所示。N3的权值=30+30=60。</li>
<li>将N3替换N2与D，插入有序序列中，保持从小到大排列。即：C40，N3 60。</li>
<li>重复步骤2。将C与N3作为一个新节点T的两个子结点，如图6-12-8所示。由于T即是根结点，完成赫夫曼树的构造。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-12-7.JPG?raw=true" srcset="/img/loading.gif" alt="6-12-7"></li>
</ol>
<p>此时的图6-12-8二叉树的带权路径长度WPL=40×1+30×2+15×3+10×4+5×4=205。与图6-12-4的二叉树b的WPL值220相比，还少了15。显然此时构造出来的二叉树才是最优的赫夫曼树。<br>
通过刚才的步骤，我们可以得出构造赫夫曼树的赫夫曼算法描述。</p>
<ol>
<li>根据给定的n个权值{w1，W2，…，Wn}构成n棵二叉树的集合F={T1，T2，…，Tn}，其中每棵二叉树Ti中只有一个带权为wi根结点，其左右子树均为空。</li>
<li>在F中选取两棵根结点的权值最小的树作为左右子树构造一棵新的二叉树，且置新的二叉树的根结点的权值为其左右子树上根结点的权值之和。</li>
<li>在F中删除这两棵树，同时将新得到的二叉树加入F中。</li>
<li>重复2和3步骤，直到F只含一棵树为止。这棵树便是赫夫曼树。</li>
</ol>
<h3 id="6-12-3-赫夫曼编码">6.12.3 赫夫曼编码</h3>
<p>按照不同字母出现的频率重新按照赫夫曼树来规划它们。将规划出来的树权值左分支改为0，右分支改为1后。对字母从树根到叶子所经过路径的0或1来编码，可以看出结果串变小了，编码得到了压缩，节约了存储和传输成本。<br>
当我们接收到压缩过的新编码时，我们应该如何把它解码出来呢？<br>
编码中非0即1，长短不等的话其实是很容易混淆的，所以<strong>若要设计长短不等的编码，则必须是任一字符的编码都不是另一个字符的编码的前缀，这种编码称做前缀编码</strong>。<br>
可仅仅是这样不足以让我们去方便地解码的，因此在解码时，还是要用到赫夫曼树，即发送方和接收方必须要约定好同样的赫夫曼编码规则。<br>
<strong>一般地，设需要编码的字符集为{d1，d2，…，dn}，各个字符在电文中出现的次数或频率集合为{W1，w2，…，Wn}，以d1，d2，…，dn作为叶子结点，以w1，W2，Wn作为相应叶子结点的权值来构造一棵赫夫曼树。规定赫夫曼树的左分支代表0，右分支代表1，则从根结点到叶子结点所经过的路径分支组成的0和1的序列便为该结点对应字符的编码，这就是赫夫曼编码</strong>。</p>
<h2 id="6-13-总结回顾">6.13 总结回顾</h2>
<p>终于到了总结的时间，这一章与前面章节相比，显得过于庞大了些，原因也就在于树的复杂性和变化丰富度是前面的线性表所不可比拟的。即使在本章之后，我们还要讲解关于树这一数据结构的相关知识，可见它的重要性。<br>
开头我们提到了树的定义，讲到了递归在树定义中的应用。提到了如子树、结点、度、叶子、分支结点、双亲、孩子、层次、深度、森林等诸多概念，这些都是需要在理解的基础上去记忆的。<br>
我们谈到了树的存储结构时，讲了双亲表示法、孩子表示法、孩子兄弟表示法等不同的存储结构。<br>
并由孩子兄弟表示法引出了我们这章中最重要一种树，二叉树。<br>
二叉树每个结点最多两棵子树，有左右之分。提到了斜树，满二叉树、完全二叉树等特殊二叉树的概念。<br>
我们接着谈到它的各种性质，这些性质给我们研究二叉树带来了方便。<br>
二叉树的存储结构由于其特殊性使得既可以用顺序存储结构又可以用链式存储结构表示。<br>
遍历是二叉树最重要的一门学问，前序、中序、后序以及层序遍历都是需要熟练掌握的知识。要让自己要学会用计算机的运行思维去模拟递归的实现，可以加深我们对递归的理解。不过，并非二叉树遍历就一定要用到递归，只不过递归的实现比较优雅而已。这点需要明确。<br>
二叉树的建立自然也是可以通过递归来实现。<br>
研究中也发现，二叉链表有很多浪费的空指针可以利用，查找某个结点的前驱和后继为什么非要每次遍历才可以得到，这就引出了如何构造一棵线索二叉树的问题。<br>
线索二叉树给二叉树的结点查找和遍历带来了高效率。<br>
树、森林看似复杂，其实它们都可以转化为简单的二叉树来处理，我们提供了树、森林与二叉树的互相转换的办法，这样就使得面对树和森林的数据结构时，编码实现成为了可能。<br>
最后，我们提到了关于二叉树的一个应用，赫夫曼树和赫夫曼编码，对于带权路径的二叉树做了详尽地讲述，让你初步理解数据压缩的原理，并明白其是如何做到无损编码和无错解码的。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>大话数据结构</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构第五章 串</title>
    <url>/2019/12/25/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC5%E7%AB%A0%20%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="5-1-5-2-串的定义">5.1-5.2 串的定义</h2>
<p>串(string)是由零个或多个字符组成的有限序列，又名叫字符串。<br>
一般记为s=“a1a2……an”(n&gt;0)，其中，s是串的名称，用双引号(有些书中也用单引号)括起来的字符序列是串的值，注意单引号不属于串的内容。ai(1≤i≤n)可以是字母、数字或其他字符，i就是该字符在串中的位置。串中的字符数目n称为串的长度，定义中谈到“有限”是指长度n是一个有限的数值。零个字符的串称为空串(null string)，它的长度为零，可以直接用两双引号“”””表示，也可以用希腊字母“Φ”来表示。所谓的序列，说明串的相邻字符之间具有前驱和后继的关系。</p>
<a id="more"></a>
<p>还有一些概念需要解释：</p>
<ul>
<li>空格串，是只包含空格的串。注意它与空串的区别，空格串是有内容有长度的，而且可以不止一个空格。</li>
<li>子串与主串，串中任意个数的连续字符组成的子序列称为该串的子串，相应地，包含子串的串称为主串。</li>
<li>子串在主串中的位置就是子串的第一个字符在主串中的序号。</li>
</ul>
<p>开头我所提到的“over”、“end”、“lie”其实可以认为是“over”、“friend”、“believe”这些单词字符串的子串。</p>
<h2 id="5-3-串的比较">5.3 串的比较</h2>
<p>两个字符串的长度以及它们每个位置各个对应位置的字符都相等时，才算是相等。<br>
那么对于两个串不相等时，如何判定它们的大小呢。我们这样定义：<br>
给定两个串：s=“a1a2……an&quot;，t=“b1b2……bm”，当满足以下条件之一时，<code>s&lt;t</code>。</p>
<ol>
<li><code>n&lt;m</code>，且ai=bi(i=1，2，…，n)。<br>
例如当s=“hap”，t=“happy”，就有sst。因为t比s多出了两个字母。</li>
<li>存在某个<code>k&lt;min(m，n)</code>，使得ai=bi；(i=1，2，……，k-1)，<code>ak&lt;bk</code>。<br>
例如当s=“happen&quot;，t=“happy&quot;，因为两串的前4个子母均相同，间内串第5个字母(k值)，字母e的ASCII码是101，而字母y的ASCII码是121，显然<code>e&lt;y</code>，所以<code>s&lt;t</code>。</li>
</ol>
<h2 id="5-4-串的抽象数据类型">5.4 串的抽象数据类型</h2>
<div class="hljs"><pre><code class="hljs c">ADT 串(string)
Data
  串中元素仅由一个字符组成，相邻元素具有前驱和后继关系。
Operation
  strAssign(T，*chars)：生成一个其值等于字符串常量chars的串T。
  StrCopy(T，S)：串S存在，由串S复制得串T。
  ClearString(S)：串S存在，将串清空。
  StringEmpty(S)；若串S为空，返回true，否则返回false。
  StrLength(S)：返回串S的元素个数，即串的长度。
  StrCompare(S，T)：若S&gt;T，返回值&gt;0，若S=T，返回0，若S&lt;T，返回值&lt;0。
  Concat(T，S1，S2)：用T返回由S1和S2联接而成的新串。
  SubString(Sub，S，pos，len)：串S存在，1≤pos≤StrLength(S)，且0≤len≤StrLength(S)-pos+1，用Sub返回串S的第pos个字符起长度为len的子串。
  Index(S，T，pos)：串S和T存在，T是非空串，1≤pos≤StrLength(S)。若主串S中存在和串T值相同的子串，则返回它在主串S中第pos个字符之后第一次出现的位置，否则返回0。
  Replace(S，T，V)：串S、T和v存在，T是非空串。用V替换主串S中出现的所有与T相等的不重叠的子串。
  StrInsert(S，pos，T)：串s和T存在，1≤pos≤StrLength(S)+1。在串S的第pos个字符之前插入串T。
  StrDelete(S，pos，len)：串S存在，1≤pos≤StrLength(S)-len+1。从串S中删除第pos个字符起长度为len的子串。
endADT</code></pre></div>
<h2 id="5-5-串的存储结构">5.5 串的存储结构</h2>
<p>串的存储结构与线性表相同，分为两种。</p>
<h3 id="5-5-1-串的顺序存储结构">5.5.1 串的顺序存储结构</h3>
<p>串的顺序存储结构是用一组地址连续的存储单元来存储串中的字符序列的。按照预定义的大小，为每个定义的串变量分配一个固定长度的存储区。一般是用定长数组来定义。<br>
既然是定长数组，就存在一个预定义的最大串长度，一般可以将实际的串长度值保存在数组的0下标位置，有的书中也会定义存储在数组的最后一个下标位置。但也有些编程语言不想这么干，觉得存个数字占个空间麻烦。它规定在串值后面加一个不计入串长度的结束标记字符，比如“\0”来表示串值的终结，这个时候，你要想知道此时的串长度，就需要遍历计算一下才知道了，其实这还是需要占用一个空间，何必呢。</p>
<h3 id="5-5-2-串的链式存储结构">5.5.2 串的链式存储结构</h3>
<p>对于串的链式存储结构，与线性表是相似的，但由于串结构的特殊性，结构中的每个元素数据是一个字符，如果也简单的应用链表存储串值，一个结点对应一个字符，就会存在很大的空间浪费。因此，一个结点可以存放一个字符，也可以考虑存放多个字符，最后一个结点若是未被占满时，可以用“#”或其他非串值字符补全，如图5-5-3所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%BA%94%E7%AB%A0/5-5-3.JPG?raw=true" srcset="/img/loading.gif" alt="5-5-3"><br>
当然，这里一个结点存多少个字符才合适就变得很重要，这会直接影响着串处理的效率，需要根据实际情况做出选择。<br>
但串的链式存储结构除了在连接串与串操作时有一定方便之外，总的来说不如顺序存储灵活，性能也不如顺序存储结构好。</p>
<h2 id="5-6-朴素的模式匹配算法-暴力算法匹配">5.6 朴素的模式匹配算法(暴力算法匹配)</h2>
<p>子串的定位操作通常称做串的模式匹配，也算是串中最重要的操作之一。<br>
用基本的数组来实现朴素的模式匹配算法。我们假设主串S和要匹配的子串T的长度存在S[0]与T[0]中。实现代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 返回子串T在主串S中第pos个字符之后的位置。若不存在,则函数返回值为0。 */</span>
<span class="hljs-comment">/* 其中,T非空,1≤pos≤StrLength(S)。 */</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Index</span><span class="hljs-params">(<span class="hljs-keyword">String</span> S, <span class="hljs-keyword">String</span> T, <span class="hljs-keyword">int</span> pos)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i = pos;    <span class="hljs-comment">/* i用于主串S中当前位置下标值，若pos不为1，则从pos位置开始匹配 */</span>
    <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;                <span class="hljs-comment">/* j用于子串T中当前位置下标值 */</span>
    <span class="hljs-keyword">while</span> (i &lt;= S[<span class="hljs-number">0</span>] &amp;&amp; j &lt;= T[<span class="hljs-number">0</span>]) <span class="hljs-comment">/* 若i小于S的长度并且j小于T的长度时，循环继续 */</span>
    &#123;
        <span class="hljs-keyword">if</span> (S[i] == T[j])     <span class="hljs-comment">/* 两字母相等则继续 */</span>
          &#123;
            ++i;
            ++j;
          &#125;
          <span class="hljs-keyword">else</span>                 <span class="hljs-comment">/* 指针后退重新开始匹配 */</span>
          &#123;  
             i = i-j+<span class="hljs-number">2</span>;        <span class="hljs-comment">/* i退回到上次匹配首位的下一位 */</span>
             j = <span class="hljs-number">1</span>;             <span class="hljs-comment">/* j退回到子串T的首位 */</span>
          &#125;
    &#125;
    <span class="hljs-keyword">if</span> (j &gt; T[<span class="hljs-number">0</span>])
        <span class="hljs-keyword">return</span> i-T[<span class="hljs-number">0</span>];
    <span class="hljs-keyword">else</span>
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>
<p>非最坏情况下，只需要匹配2个串的首字母，所以根据等概率原则，平均是(n+m)/2次查找，时间复杂度为O(n+m)。<br>
而最坏情况就是0000000000000000001，此时时间复杂度为O((n-m+1)*m)。</p>
<h2 id="5-7-KMP-模式匹配算法">5.7 KMP 模式匹配算法</h2>
<p>有三位前辈，D.E.Knuth、J.H.Morris 和V.R.Pratt（其中Knuth和Pratt 共同研究，Morris独立研究）发表一个模式匹配算法，可以大大避免重复遍历的情况，我们把它称之为克努特一莫里斯一普拉特算法，简称KMP算法。</p>
<h3 id="5-7-1-KMP模式匹配算法原理">5.7.1 KMP模式匹配算法原理</h3>
<p>首先要理解上面的朴素模式的匹配算法，主串设为S，要匹配的模式串设为T。<br>
对于在子串中有与首字符相等的字符，也是可以省略一部分不必要的判断步骤。<br>
我们在朴素的模式匹配算法中，主串的i值是不断地回溯来完成的。而我们的分析发现，这种回溯其实是可以不需要的，我们的KMP模式匹配算法就是为了让这没必要的回溯不发生。<br>
既然i值不回溯，也就是不可以变小，那么要考虑的变化就是j(j在模式串中所在的位置)值了。通过观察也可发现，我们屡屡提到了T串的首字符与自身后面字符的比较，发现如果有相等字符，j(j在模式串中所在的位置)值的变化就会不相同。也就是说，这个j(j在模式串中所在的位置)值的变化与主串其实没什么关系，关键就取决于T串的结构中是否有重复的问题。<br>
我们可以得出规律，j(j在模式串中所在的位置)值的多少取决于当前字符之前的串的前后缀的相似度。<br>
我们把T串各个位置的j(j在模式串中所在的位置)值的变化定义为一个数组next，那么next的长度就是T串的长度。于是我们可以得到下面的函数定义：<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%BA%94%E7%AB%A0/5-7-6.JPG?raw=true" srcset="/img/loading.gif" alt="5-7-6"></p>
<h3 id="5-7-2-next数组值推导">5.7.2 next数组值推导</h3>
<p>&quot;前缀&quot;指除了最后一个字符以外，一个字符串的全部头部组合；<br>
&quot;后缀&quot;指除了第一个字符以外，一个字符串的全部尾部组合。<br>
&quot;部分匹配值&quot;就是&quot;前缀&quot;和&quot;后缀&quot;的最长的共有元素的长度。以&quot;ABCDABD&quot;为例，</p>
<ul>
<li>&quot;A&quot;的前缀和后缀都为空集，共有元素的长度为0；</li>
<li>&quot;AB&quot;的前缀为[A]，后缀为[B]，共有元素的长度为0；</li>
<li>&quot;ABC&quot;的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；</li>
<li>&quot;ABCD&quot;的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；</li>
<li>“ABCDA&quot;的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为&quot;A”，长度为1；</li>
<li>“ABCDAB&quot;的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为&quot;AB”，长度为2；</li>
<li>&quot;ABCDABD&quot;的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。</li>
</ul>
<p>我们可以根据经验得到:如果前缀后缀最长共有元素的长度为1，k值是2，最长的共有元素的长度为2，k值是3。<br>
<strong>最长的共有元素的长度为n，k值就是n+1</strong>。</p>
<h3 id="5-7-3KMP模式匹配算法实现">5.7.3KMP模式匹配算法实现</h3>
<p>next代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 通过计算返回子串T的next数组。 */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_next</span><span class="hljs-params">(<span class="hljs-keyword">String</span> T, <span class="hljs-keyword">int</span> *next)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i, j;
    i = <span class="hljs-number">1</span>;
    j = <span class="hljs-number">0</span>;
    next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span> (i &lt; T[<span class="hljs-number">0</span>])  <span class="hljs-comment">/* 此处T[0]表示串T的长度 */</span>
    &#123;
        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || T[i] == T[j])     <span class="hljs-comment">/* T[i]表示后缀的单个字符，T[j]表示前缀的单个字符 */</span>
        &#123;
            ++i;
            ++j;
            next[i] = j;
        &#125;
        <span class="hljs-keyword">else</span>
            j = next[j];    <span class="hljs-comment">/* 若字符不相同，则j值回溯 */</span>
    &#125;
&#125;</code></pre></div>
<p>这段代码的目的就是为了计算出当前要匹配的串T的next数组。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 返回子串T在主串S中第pos个字符之后的位置。若不存在，则函数返回值为0。 */</span>
<span class="hljs-comment">/*  T非空，1≤pos≤StrLength(S)。 */</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Index_KMP</span><span class="hljs-params">(<span class="hljs-keyword">String</span> S, <span class="hljs-keyword">String</span> T, <span class="hljs-keyword">int</span> pos)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i = pos;        <span class="hljs-comment">/* i用于主串S中当前位置下标值，若pos不为1，则从pos位置开始匹配 */</span>
    <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;            <span class="hljs-comment">/* j用于子串T中当前位置下标值 */</span>
    <span class="hljs-keyword">int</span> next[<span class="hljs-number">255</span>];        <span class="hljs-comment">/* 定义一next数组 */</span>
    get_next(T, next);    <span class="hljs-comment">/* 对串T作分析，得到next数组 */</span>
    <span class="hljs-keyword">while</span> (i &lt;= S[<span class="hljs-number">0</span>] &amp;&amp; j &lt;= T[<span class="hljs-number">0</span>]) <span class="hljs-comment">/* 若i小于S的长度并且j小于T的长度时，循环继续 */</span>
    &#123;
        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || S[i] == T[j])     <span class="hljs-comment">/* 两字母相等则继续，与朴素算法增加了j=0判断 */</span>
        &#123;
            ++i;
            ++j;
        &#125;
        <span class="hljs-keyword">else</span>             <span class="hljs-comment">/* 指针后退重新开始匹配 */</span>
            j = next[j];<span class="hljs-comment">/* j退回合适的位置，i值不变 */</span>
    &#125;
    <span class="hljs-keyword">if</span> (j &gt; T[<span class="hljs-number">0</span>])
        <span class="hljs-keyword">return</span> i - T[<span class="hljs-number">0</span>];
    <span class="hljs-keyword">else</span>
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>
<p>对于get_next函数来说，若模式串的长度为m，因只涉及到简单的单循环，其时间复杂度为O(m)，而由于i值的不回溯，使得indexKMP算法效率得到了提高，while 循环的时间复杂度为O(n)。因此，整个算法的时间复杂度为O(n+m)。相较于朴素模式匹配算法的O((n-m+1)*m)来说，是要好一些。</p>
<h3 id="5-7-4-KMP模式匹配算法改进">5.7.4 KMP模式匹配算法改进</h3>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 求模式串T的next函数修正值并存入数组nextval */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_nextval</span><span class="hljs-params">(<span class="hljs-keyword">String</span> T, <span class="hljs-keyword">int</span> *nextval)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> i, j;
    i = <span class="hljs-number">1</span>;
    j = <span class="hljs-number">0</span>;
    nextval[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span> (i &lt; T[<span class="hljs-number">0</span>])  <span class="hljs-comment">/* 此处T[0]表示串T的长度 */</span>
    &#123;
        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || T[i] == T[j])     <span class="hljs-comment">/* T[i]表示后缀的单个字符，T[j]表示前缀的单个字符 */</span>
        &#123;
            ++i;
            ++j;
            <span class="hljs-keyword">if</span> (T[i] != T[j])      <span class="hljs-comment">/* 若当前字符与前缀字符不同 */</span>
                nextval[i] = j;    <span class="hljs-comment">/* 则当前的j为nextval在i位置的值 */</span>
            <span class="hljs-keyword">else</span>
                nextval[i] = nextval[j];    <span class="hljs-comment">/* 如果与前缀字符相同，则将前缀字符的 */</span>
                                            <span class="hljs-comment">/* nextval值赋值给nextval在i位置的值 */</span>
        &#125;
        <span class="hljs-keyword">else</span>
            j = nextval[j];            <span class="hljs-comment">/* 若字符不相同，则j值回溯 */</span>
    &#125;
&#125;</code></pre></div>
<h3 id="5-7-5-nextval-数组值推导">5.7.5 nextval 数组值推导</h3>
<p>总结改进过的KMP算法，它是在计算出next值的同时，如果a位字符与它next值指向的b位字符相等，则该a位的nextval就指向b位的nextval值，如果不等，则该a位的nextval值就是它自己a位的next的值。</p>
<h2 id="5-8-总结回顾">5.8 总结回顾</h2>
<p>这一章节我们重点讲了“串”这样的数据结构，串（string）是由零个或多个字符组成的有限序列，又名叫字符串。本质上，它是一种线性表的扩展，但相对于线性表关注一个个元素来说，我们对串这种结构更多的是关注它子串的应用问题，如查找、替换等操作。现在的高级语言都有针对串的函数可以调用。我们在使用这些函数的时候，同时也应该要理解它当中的原理，以便于在碰到复杂的问题时，可以更加灵活的使用，比如KMP模式匹配算法的学习，就是更有效地去理解index函数当中的实现细节。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>大话数据结构</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next主题导航栏图标显示问号解决方案</title>
    <url>/2019/12/10/hexo/hexo-next%E4%B8%BB%E9%A2%98%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E9%97%AE%E5%8F%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="问题描述">问题描述</h2>
<p>导航栏图标显示问号，当修改<code>hexo\themes\next\_config.yml</code>主题配置文件后，图标显示正常，但是点击链接不能打开相应主页、标签页、归档页…<br>
经研究，应该把menu下面的不同页面的/后面的空格删掉，即可。<br>
具体配置如下：</p>
<a id="more"></a>
<div class="hljs"><pre><code class="hljs yml"><span class="hljs-attr">menu:</span>
  <span class="hljs-attr">home:</span> <span class="hljs-string">/||</span> <span class="hljs-string">home</span>                  <span class="hljs-comment">#主页</span>
  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/||</span> <span class="hljs-string">archive</span>  <span class="hljs-comment">#归档</span>
  <span class="hljs-attr">categories:</span> <span class="hljs-string">/categories/||</span> <span class="hljs-string">th</span>   <span class="hljs-comment">#分类</span>
  <span class="hljs-attr">tags:</span> <span class="hljs-string">/tags/||</span> <span class="hljs-string">tags</span>             <span class="hljs-comment">#标签</span>
  <span class="hljs-attr">about:</span> <span class="hljs-string">/about/||</span> <span class="hljs-string">user</span>           <span class="hljs-comment">#关于我</span>
  <span class="hljs-comment">#search: /search</span>
  <span class="hljs-comment">#schedule: /schedule/ || calendar</span>
  <span class="hljs-comment">#sitemap: /sitemap.xml || sitemap</span>
  <span class="hljs-comment">#commonweal: /404.html</span>

<span class="hljs-comment"># Enable/Disable menu icons.</span>
<span class="hljs-attr">menu_icons:</span>
  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>
  <span class="hljs-comment"># Icon Mapping.</span>
  <span class="hljs-attr">home:</span> <span class="hljs-string">home</span>
  <span class="hljs-attr">archives:</span> <span class="hljs-string">archive</span>
  <span class="hljs-attr">categories:</span> <span class="hljs-string">th</span>
  <span class="hljs-attr">tags:</span> <span class="hljs-string">tags</span>
  <span class="hljs-attr">about:</span> <span class="hljs-string">user</span>
  <span class="hljs-comment">#commonweal: heartbeat</span>
  <span class="hljs-comment">#search: search</span></code></pre></div>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 多客户端上更新博客</title>
    <url>/2019/12/09/hexo/hexo%20%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8A%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><code>git add source/ &amp;&amp; git commit -m &quot;blog update&quot; &amp;&amp; git push githuborigin hexo &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; exit</code></p>
<h2 id="原理">原理</h2>
<p>静态网页文件存放在<code>master主分支</code>，个人文件存放在<code>hexo分支</code>。</p>
<a id="more"></a>
<h2 id="一、本地电脑设置">一、本地电脑设置</h2>
<p>先新建一个hexo文件夹，在git bash下cd进入hexo文件夹。</p>
<p>1.<code>git init</code></p>
<p>2.<code>git checkout -b hexo</code> //新建hexo分支并切换到hexo</p>
<p>3.将原来博客文件夹里面的<code>_config.yml</code>，<code>theme/</code>，<code>source/</code>，<code>scaffolds/</code>，<code>package.json</code>，<code>.gitignore</code>，共6个文件/文件夹 拷贝到hexo文件夹下面。</p>
<p>需要拷贝的文件如下:</p>
<ul>
<li>_config.yml（站点配置）；</li>
<li>theme文件夹里面的主题；</li>
<li>source文件夹；</li>
<li>scaffolds文件夹（文章的模板）；</li>
<li>package.json（说明使用哪些包）；</li>
<li>.gitignore（限定在提交的时候哪些文件可以忽略）；</li>
<li><strong>注意：不要<code>hexo init</code>去整体初始化，因为需要的文件我们已经拷贝过来了。</strong></li>
</ul>
<p>4.将theme文件夹里面的你的主题文件夹下的.git文件夹删除。</p>
<p>5.<code>git add scaffolds/ source/ themes/ .gitignore _config.yml package.json</code><br>
<code>git commit -m &quot;init&quot;</code></p>
<p>6.<code>git remote add githuborigin git@github.com:你的ID/你的仓库名字</code>  //添加本地hexo和远程仓库的关联</p>
<p>7.登录github，将分支仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为hexo，Update保存。</p>
<p>8.<code>git push githuborigin hexo</code>  //上传更新</p>
<h2 id="二、另外一台电脑上配置">二、另外一台电脑上配置</h2>
<ol>
<li>官网下载安装：</li>
</ol>
<ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">安装 Node.js；</a></li>
<li><a href="https://git-scm.com/" target="_blank" rel="noopener">安装 Git。</a></li>
</ul>
<ol start="2">
<li>新建hexo目录，cd进入。</li>
<li><code>git clone https://github.com/你的ID/你的ID.github.io.git</code>  //克隆到本地</li>
<li>将新电脑生成的ssh key添加到gitHub账户上。<br>
需要配置 git。</li>
</ol>
<ul>
<li><code>git config --global user.email &quot;xxx@qq.com&quot;</code> 引号内的xxx@qq.com改为你github注册并且验证的邮箱；</li>
<li><code>git config --global user.name &quot;xxxx&quot;</code>   引号内的xxxx改为你的 github 用户名；</li>
<li><code>ssh-keygen</code> 会出现下面的内容，一直按Enter键就行；</li>
<li>打开用户目录下的 <code>.ssh</code>目录下面生成 <code>id_rsa(私钥)id_rsa.pub(公钥)</code>两个文件，打开<code>id_rsa.pub</code>，复制里面的内容,到 github: <code>Settings -&gt; SSH and GPG keys -&gt; SSH keys -&gt; New SSH key -&gt; (填写)Title -&gt; (粘贴)Key -&gt; Add SSH Key</code>；</li>
<li>测试 <code>ssh -T git@github.com</code>，输出 <strong>You’ve successfully authenticated</strong> 表示添加key 成功。</li>
</ul>
<ol start="5">
<li><code>npm install hexo-cli -g</code> //安装hexo</li>
<li><code>npm install</code> //安装依赖包</li>
</ol>
<ul>
<li>如果出现报错<code>ERROR Try runing: 'npm install hexo --save</code>则执行命令<code>npm install hexo --save</code>，如果没有，则忽略。</li>
</ul>
<ol start="7">
<li><code>git remote remove origin</code> //和origin远程库解除关联</li>
<li><code>git remote add githuborigin git@github.com:你的ID/你的ID.github.io.git</code> //和GitHuborigin库添加关联</li>
</ol>
<h2 id="三、发布博客">三、发布博客</h2>
<ol>
<li>cd进入博客目录</li>
<li><code>git pull githuborigin hexo</code> //保证和分支同步</li>
<li><code>hexo n &quot;新建博客&quot;</code></li>
<li><code>git add source/</code>      //因为博客文件是在source文件夹下面的</li>
<li><code>git commit -m &quot;博客更新&quot;</code></li>
<li><code>git push githuborigin hexo</code>//上传更新</li>
<li><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>//部署博客</li>
</ol>
<p>至此，多终端发布博客已经配置完成。</p>
<h2 id="四、更新主题">四、更新主题</h2>
<p>配置好主题文件后，执行：<br>
<code>git add scaffolds/ source/ themes/ .gitignore _config.yml package.json</code><br>
<code>git commit -m &quot;更新主题&quot;</code><br>
<code>git push githuborigin hexo</code>  //上传更新</p>
<h2 id="五、快速上传部署命令">五、快速上传部署命令</h2>
<p>只更新博客内容，可以从上述第 三 大步第 4 步后可以这样子发布：<br>
<code>git add source/ &amp;&amp; git commit -m &quot;blog update&quot; &amp;&amp; git push githuborigin hexo &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; exit</code><br>
把所有命令用<code>&amp;&amp;</code>串起来，有一个失败就会停止；成功，最后一条命令就会退出终端。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>多客户端</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo配置文件设置</title>
    <url>/2019/12/09/hexo/hexo%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="hexo配置文件设置">hexo配置文件设置</h2>
<p>hexo配置文件<code>_config.yml</code>基本配置</p>
<a id="more"></a>
<div class="hljs"><pre><code class="hljs yml"><span class="hljs-comment"># Hexo Configuration</span>
<span class="hljs-comment">## Docs: https://hexo.io/docs/configuration.html</span>
<span class="hljs-comment">## Source: https://github.com/hexojs/hexo/</span>

<span class="hljs-comment"># Site 网站</span>
<span class="hljs-attr">title:</span> <span class="hljs-string">closer的个人博客</span>
<span class="hljs-attr">subtitle:</span> <span class="hljs-string">welcome!</span>
<span class="hljs-attr">description:</span> <span class="hljs-string">up</span> <span class="hljs-string">up</span> <span class="hljs-string">up</span>
<span class="hljs-attr">keywords:</span>
<span class="hljs-attr">author:</span> <span class="hljs-string">closer</span>
<span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment">#语言</span>
<span class="hljs-attr">timezone:</span> <span class="hljs-string">''</span>

<span class="hljs-comment"># URL 网址</span>
<span class="hljs-comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span>
<span class="hljs-attr">url:</span> <span class="hljs-string">https://closer_laps.gitee.io/</span>
<span class="hljs-attr">root:</span> <span class="hljs-string">/</span> <span class="hljs-comment">#根目录位置，如果只是github pages的子目录需要更改</span>
<span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span>
<span class="hljs-attr">permalink_defaults:</span>
<span class="hljs-attr">pretty_urls:</span>
  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing 'index.html' from permalinks</span>
  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing '.html' from permalinks</span>

<span class="hljs-comment"># Directory #文件结构 默认即可</span>
<span class="hljs-attr">source_dir:</span> <span class="hljs-string">source</span>
<span class="hljs-attr">public_dir:</span> <span class="hljs-string">public</span>
<span class="hljs-attr">tag_dir:</span> <span class="hljs-string">tags</span>
<span class="hljs-attr">archive_dir:</span> <span class="hljs-string">archives</span>
<span class="hljs-attr">category_dir:</span> <span class="hljs-string">categories</span>
<span class="hljs-attr">code_dir:</span> <span class="hljs-string">downloads/code</span>
<span class="hljs-attr">i18n_dir:</span> <span class="hljs-string">lang</span>
<span class="hljs-attr">skip_render:</span>

<span class="hljs-comment"># Writing #编辑博文的选项</span>
<span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span> <span class="hljs-comment"># File name of new posts</span>
<span class="hljs-attr">default_layout:</span> <span class="hljs-string">post</span>
<span class="hljs-attr">auto_spacing:</span> <span class="hljs-literal">false</span>
<span class="hljs-attr">titlecase:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 把标题转换为 title case</span>
<span class="hljs-attr">external_link:</span>
  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Open external links in new tab</span>
  <span class="hljs-attr">field:</span> <span class="hljs-string">site</span> <span class="hljs-comment"># Apply to the whole site</span>
  <span class="hljs-attr">exclude:</span> <span class="hljs-string">''</span>
<span class="hljs-attr">filename_case:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#把文件名称转换为 (1) 小写或 (2) 大写 </span>
<span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#显示草稿</span>
<span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#启动 Asset 文件夹 </span>
<span class="hljs-attr">relative_link:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#把链接改为与根目录的相对位址 </span>
<span class="hljs-attr">future:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#显示未来的文章 </span>
<span class="hljs-attr">highlight:</span>  <span class="hljs-comment">#代码块的设置 </span>
 <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment">#开启代码块高亮 </span>
 <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#如果未指定语言，则启用自动检测 </span>
 <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#显示行数 </span>
 <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">''</span> <span class="hljs-comment">#用 n 个空格替换 tabs；如果值为空，则不会替换 tabs </span>
 <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span>
 <span class="hljs-attr">hljs:</span> <span class="hljs-literal">false</span>

<span class="hljs-comment"># Home page setting</span>
<span class="hljs-comment"># path: Root path for your blogs index page. (default = '')</span>
<span class="hljs-comment"># per_page: Posts displayed per page. (0 = disable pagination)</span>
<span class="hljs-comment"># order_by: Posts order. (Order by date descending by default)</span>
<span class="hljs-attr">index_generator:</span>
  <span class="hljs-attr">path:</span> <span class="hljs-string">''</span>
  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span>
  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span>

<span class="hljs-comment"># Category &amp; Tag #分类 &amp; 标签</span>
<span class="hljs-attr">default_category:</span> <span class="hljs-string">uncategorized</span>
<span class="hljs-attr">category_map:</span>
<span class="hljs-attr">tag_map:</span>

<span class="hljs-comment"># Metadata elements</span>
<span class="hljs-comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span>
<span class="hljs-attr">meta_generator:</span> <span class="hljs-literal">true</span>

<span class="hljs-comment"># Date / Time format #日期显示格式</span>
<span class="hljs-comment">## Hexo uses Moment.js to parse and display date</span>
<span class="hljs-comment">## You can customize the date format as defined in</span>
<span class="hljs-comment">## http://momentjs.com/docs/#/displaying/format/</span>
<span class="hljs-attr">date_format:</span> <span class="hljs-string">YYYY-MM-DD</span> <span class="hljs-comment">#日期格式 </span>
<span class="hljs-attr">time_format:</span> <span class="hljs-string">HH:mm:ss</span> <span class="hljs-comment">#时间格式</span>
<span class="hljs-comment">## Use post's date for updated date unless set in front-matter</span>
<span class="hljs-attr">use_date_for_updated:</span> <span class="hljs-literal">false</span>

<span class="hljs-comment"># Pagination #分页器</span>
<span class="hljs-comment">## Set per_page to 0 to disable pagination</span>
<span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span> <span class="hljs-comment">#每页显示的文章量 (0 = 关闭分页功能) 10</span>
<span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span> <span class="hljs-comment">#分页目录 </span>

<span class="hljs-comment"># Include / Exclude file(s)</span>
<span class="hljs-comment">## include:/exclude: options only apply to the 'source/' folder</span>
<span class="hljs-attr">include:</span>
<span class="hljs-attr">exclude:</span>
<span class="hljs-attr">ignore:</span>

<span class="hljs-comment"># Extensions #拓展</span>
<span class="hljs-comment">## Plugins: http://hexo.io/plugins/</span>
<span class="hljs-comment">## Themes: http://hexo.io/themes/</span>
<span class="hljs-attr">theme:</span> <span class="hljs-string">hexo-theme-next-7.7.0</span> <span class="hljs-comment">#主题更换</span>

<span class="hljs-comment"># Deployment #部署参数</span>
<span class="hljs-comment">## Docs: http://hexo.io/docs/deployment.html</span>
<span class="hljs-attr">deploy:</span>
  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>
  <span class="hljs-attr">repo:</span>
        <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:closer2018/closer2018.github.io.git</span>
        <span class="hljs-attr">gitee:</span> <span class="hljs-string">git@gitee.com:closer_laps/closer_laps.git</span>
        <span class="hljs-attr">coding:</span> <span class="hljs-string">git@e.coding.net:closer2018/closer2018.coding.me.git</span>
  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span>

<span class="hljs-comment"># 搜索设置</span>
<span class="hljs-attr">search:</span>
  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span>
  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span>
  <span class="hljs-attr">format:</span> <span class="hljs-string">html</span>
  <span class="hljs-attr">limit:</span> <span class="hljs-number">10000</span>

<span class="hljs-comment"># 发布字数统计</span>
<span class="hljs-attr">symbols_count_time:</span>
    <span class="hljs-attr">symbols:</span> <span class="hljs-literal">true</span>
    <span class="hljs-attr">time:</span> <span class="hljs-literal">true</span>
    <span class="hljs-attr">total_symbols:</span> <span class="hljs-literal">true</span>
    <span class="hljs-attr">total_time:</span> <span class="hljs-literal">true</span>

<span class="hljs-comment"># Security</span>
<span class="hljs-attr">encrypt:</span> <span class="hljs-comment"># hexo-blog-encrypt</span>
  <span class="hljs-attr">abstract:</span> <span class="hljs-string">有东西被加密了,</span> <span class="hljs-string">请输入密码查看.</span>
  <span class="hljs-attr">message:</span> <span class="hljs-string">您好,</span> <span class="hljs-string">这里需要密码.</span>
  <span class="hljs-attr">tags:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">&#123;name:</span> <span class="hljs-string">tagName,</span> <span class="hljs-attr">password:</span> <span class="hljs-string">密码A&#125;</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">&#123;name:</span> <span class="hljs-string">tagName,</span> <span class="hljs-attr">password:</span> <span class="hljs-string">密码B&#125;</span>
  <span class="hljs-attr">template:</span> <span class="hljs-string">&lt;div</span> <span class="hljs-string">id="hexo-blog-encrypt"</span> <span class="hljs-string">data-wpm="&#123;&#123;hbeWrongPassMessage&#125;&#125;"</span> <span class="hljs-string">data-whm="&#123;&#123;hbeWrongHashMessage&#125;&#125;"&gt;&lt;div</span> <span class="hljs-string">class="hbe-input-container"&gt;&lt;input</span> <span class="hljs-string">type="password"</span> <span class="hljs-string">id="hbePass"</span> <span class="hljs-string">placeholder="&#123;&#123;hbeMessage&#125;&#125;"</span> <span class="hljs-string">/&gt;&lt;label&gt;&#123;&#123;hbeMessage&#125;&#125;&lt;/label&gt;&lt;div</span> <span class="hljs-string">class="bottom-line"&gt;&lt;/div&gt;&lt;/div&gt;&lt;script</span> <span class="hljs-string">id="hbeData"</span> <span class="hljs-string">type="hbeData"</span> <span class="hljs-string">data-hmacdigest="&#123;&#123;hbeHmacDigest&#125;&#125;"&gt;&#123;&#123;hbeEncryptedData&#125;&#125;&lt;/script&gt;&lt;/div&gt;</span>
  <span class="hljs-attr">wrong_pass_message:</span> <span class="hljs-string">这个密码看着不太对,</span> <span class="hljs-string">请再试试.</span>
  <span class="hljs-attr">wrong_hash_message:</span> <span class="hljs-string">抱歉,</span> <span class="hljs-string">这个文章不能被校验,</span> <span class="hljs-string">不过您还是能看看解密后的内容.</span></code></pre></div>
<p>以上就是配置文件的基础设置。</p>
<h2 id="更换主题NexT">更换主题NexT</h2>
<p>Hexo安装主题的方式非常简单，只需要将主题文件放置于站点目录的themes下，然后修改下配置文件即可。这里我以NexT主题为例。<br>
在git bash操作下cd至博客根目录，执行如下代码：</p>
<p><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p>
<p>等待下载完成后，修改根目录下_config.yml文件的theme字段为next即可启用NexT主题，十分简单便捷。<br>
其它具体设置可参照<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT官方文档</a>。</p>
<h2 id="安装插件">安装插件</h2>
<p>cd至blog根目录。</p>
<div class="hljs"><pre><code class="hljs yml"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-generator-searchdb</span> <span class="hljs-string">--save</span>  <span class="hljs-comment">#搜索插件</span>
<span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">--save</span> <span class="hljs-string">hexo-generator-feed</span>   <span class="hljs-comment">#RSS插件</span>
<span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-wordcount</span> <span class="hljs-string">--save</span>   <span class="hljs-comment">#字符统计及阅读时长估计</span>
<span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-generator-sitemap</span> <span class="hljs-string">--save</span>  <span class="hljs-comment">#博客添加网站地图sitemap</span>
<span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-generator-index-pin-top</span> <span class="hljs-string">--save</span>   <span class="hljs-comment">#置顶插件</span>
<span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">--save</span> <span class="hljs-string">hexo-blog-encrypt</span>   <span class="hljs-comment">#添加密码访问</span></code></pre></div>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo配置文件</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo上传部署命令</title>
    <url>/2019/12/01/hexo/hexo%E4%B8%8A%E4%BC%A0%E9%83%A8%E7%BD%B2%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="hexo上传部署三连杀命令-先cd进入git目录">hexo上传部署三连杀命令(先<code>cd</code>进入git目录)</h2>
<div class="hljs"><pre><code class="language-bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d
</code></pre></div>
<a id="more"></a>
<h2 id="我们运行测试时，经常用到的有三个命令">我们运行测试时，经常用到的有三个命令</h2>
<div class="hljs"><pre><code class="language-bash">hexo clean #用来清理缓存文件
hexo g      #生成文件
hexo  d   #上传到服务器
</code></pre></div>
<h2 id="本地检测时运行">本地检测时运行</h2>
<div class="hljs"><pre><code class="language-bash">hexo s
</code></pre></div>
<p>然后打开浏览器，输入localhost:4000，就能看到博客了。<br>
这样说明本地环境搭建完成。</p>
<h2 id="特别感谢B站up主CodeSheep的帮助和细心指导">特别感谢<a href="https://space.bilibili.com/384068749/" target="_blank" rel="noopener">B站up主CodeSheep</a>的帮助和细心指导</h2>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构第三章 线性表</title>
    <url>/2019/11/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC3%E7%AB%A0%20%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[<p>线性表：零个或多个数据元素的有限序列。</p>
<h2 id="3-1-3-2线性表的定义">3.1-3.2线性表的定义</h2>
<p>线性表（List）：零个或多个数据元素的有限序列。</p>
<p>若将线性表记为（a_1，…，a_(i−1)，a_i，a_(i+1)，…，a_n），则表中a_(i−1) 领先于a_i，a_i 领先于a_(i+1)，称a_(i−1) 是a_i 的直接前驱元素，a_(i+1) 是a_i 的直接后继元素。当i=1，2，…，n-1时，a_i 有且仅有一个直接后继，当i=2，3，…，n时，a_i 有且仅有一个直接前驱。<br>
如图3-2-1所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.2.1.GIF?raw=true" srcset="/img/loading.gif" alt="3-2-1"></p>
<p>所以线性表元素的个数n（n&gt;0）定义为线性表的长度，当n=0时，称为空表。</p>
<a id="more"></a>
<p>在较复杂的线性表中，一个数据元素可以由若干个数据项组成。</p>
<h2 id="3-3线性表的抽象数据类型">3.3线性表的抽象数据类型</h2>
<p>线性表的抽象数据类型定义如下：</p>
<div class="hljs"><pre><code class="hljs c">ADT线性表（List）
Data
    线性表的数据对象集合为&#123;a1，a2…，an），每个元素的类型均为DataType。其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，除了最后一个元素an外，每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。
Operation
    InitList（*L）；初始化操作，建立一个空的线性表L。
    ListEmpty（L）；若线性表为空，返回<span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span>。
    ClearList（*L）；将线性表清空。
    GetElem（L，i，*e）；将线性表L中的第i个位置元素值返回给e。
    LocateElem（L，e）；在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回<span class="hljs-number">0</span>表示失败。
    ListInsert（*L，i，e）；在线性表L中的第i个位置插入新元素e。
    ListDelete（*L，i，*e）；删除线性表L中第i个位置元素，并用e返回其值。
    ListLength（L）；返回线性表L的元素个数。
endADT</code></pre></div>
<h3 id="3-3-1两个线性表集合的并集操作">3.3.1两个线性表集合的并集操作</h3>
<p>要使得集合A=AUB。说白了，就是把存在集合B中但并不存在A中的数据元素插入到A中即可。<br>
仔细分析一下这个操作，发现我们只要循环集合B中的每个元素，判断当前元素是否存在A中，若不存在，则插入到A中即可。思路应该是很容易想到的。<br>
我们假设La表示集合A，Lb表示集合B，则实现的代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/*将所有的在线性表Lb中但不在La中的数据元素插入到La中*/</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unionL</span><span class="hljs-params">(SqList *La, SqList Lb)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> La_len, Lb_len, i;
    ElemType e;                          <span class="hljs-comment">/*声明与La和Lb相同的数据元素e*/</span>
    La_len = ListLength(*La);                <span class="hljs-comment">/*求线性表的长度*/</span>
    Lb_len = ListLength(Lb);
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= Lb_len; i++)
    &#123;
        GetElem(Lb, i, &amp;e);           <span class="hljs-comment">/*取Lb中第i个数据元素赋给e*/</span>
        <span class="hljs-keyword">if</span> (!LocateElem(*La, e))           <span class="hljs-comment">/*La中不存在和e相同数据元素*/</span>
            ListInsert(La, ++La_len, e);          <span class="hljs-comment">/*插入*/</span>
    &#125;
&#125;</code></pre></div>
<h2 id="3-4线性表的顺序存储结构">3.4线性表的顺序存储结构</h2>
<h3 id="3-4-1顺序存储定义">3.4.1顺序存储定义</h3>
<p>线性表的两种物理结构的第一种——顺序存储结构。<br>
线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。</p>
<h3 id="3-4-2顺序存储方式">3.4.2顺序存储方式</h3>
<p>可以用C语言（其他语言也相同）的一维数组来实现顺序存储结构。<br>
线性表的顺序存储的结构代码如下</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXSIZE 20<span class="hljs-comment">/*存储空间初始分配量*/</span></span>
<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;  <span class="hljs-comment">/*ElemType 类型根据实际情况而定，这里假设为int*/</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>
&#123;</span>
    ElemType data[MAXSIZE];<span class="hljs-comment">/*数组存储数据元素，最大值为MAXSIZE*/</span>
    <span class="hljs-keyword">int</span> length;  <span class="hljs-comment">/*线性表当前长度*/</span>
&#125;SqList;</code></pre></div>
<p>这里，我们就发现描述顺序存储结构需要三个属性：<br>
• 存储空间的起始位置：数组data，它的存储位置就是存储空间的存储位置。<br>
• 线性表的最大存储容量：数组长度MaxSize。<br>
• 线性表的当前长度：length。</p>
<h3 id="3-4-3数据长度与线性表长度区别">3.4.3数据长度与线性表长度区别</h3>
<p>数组的长度是存放线性表的存储空间的长度，存储分配后这个量是一般是不变的。<br>
线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。<br>
在任意时刻，线性表的长度应该小于等于数组的长度。</p>
<h3 id="3-4-4地址计算方法">3.4.4地址计算方法</h3>
<p>存储器中的每个存储单元都有自己的编号，这个编号称为地址。<br>
假设占用的是c个存储单元，那么线性表中第i+1个数据元素的存储位置和第i个数据元素的存储位置满足下列关系（LOC表示获得存储位置的函数）。<br>
LOC（a_(i+1)）=LOC（a_i）+c<br>
所以对于第i个数据元素ai的存储位置可以由a1推算得出：<br>
LOC（a_i）=LOC（a_1）+（i-1）*c</p>
<h2 id="3-5顺序存储结构的插入与删除">3.5顺序存储结构的插入与删除</h2>
<h3 id="3-5-1获得元素操作">3.5.1获得元素操作</h3>
<p>我们要实现GetElem操作，即将线性表L中的第i个位置元素值返回。只要i的数值在数组下标范围内，就是把数组第i-1下标的值返回即可。</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> OK 1</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ERROR 0</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TRUE 1</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FALSE 0</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Status;          <span class="hljs-comment">/* Status是函数的类型,其值是函数结果状态代码，如OK等 */</span>
<span class="hljs-comment">/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */</span>
<span class="hljs-comment">/* 操作结果：用e返回L中第i个数据元素的值,注意i是指位置，第1个位置的数组是从0开始 */</span>
<span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList L, <span class="hljs-keyword">int</span> i, ElemType *e)</span>
</span>&#123;
    <span class="hljs-keyword">if</span> (L.length == <span class="hljs-number">0</span> || i&lt;<span class="hljs-number">1</span> || i&gt;L.length)
        <span class="hljs-keyword">return</span> ERROR;
    *e = L.data[i - <span class="hljs-number">1</span>];
    <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<h3 id="3-5-2插入操作">3.5.2插入操作</h3>
<p>插入算法的思路：<br>
• 如果插入位置不合理，抛出异常；<br>
• 如果线性表长度大于等于数组长度，则抛出异常或动态增加容量；<br>
• 从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；<br>
• 将要插入元素填入位置i处；<br>
• 表长加1。<br>
实现代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 初始条件：顺序线性表L已存在,1≤i≤ListLength(L)， */</span>
<span class="hljs-comment">/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */</span>
<span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> i, ElemType e)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> k;
    <span class="hljs-keyword">if</span> (L-&gt;length == MAXSIZE)  <span class="hljs-comment">/* 顺序线性表已经满 */</span>
        <span class="hljs-keyword">return</span> ERROR;
    <span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span> || i&gt;L-&gt;length + <span class="hljs-number">1</span>)<span class="hljs-comment">/* 当i比第一位置小或者比最后一位置后一位置还要大时 */</span>
        <span class="hljs-keyword">return</span> ERROR;
    <span class="hljs-keyword">if</span> (i &lt;= L-&gt;length)        <span class="hljs-comment">/* 若插入数据位置不在表尾 */</span>
    &#123;
        <span class="hljs-keyword">for</span> (k = L-&gt;length - <span class="hljs-number">1</span>; k &gt;= i - <span class="hljs-number">1</span>; k--)  <span class="hljs-comment">/* 将要插入位置之后的数据元素向后移动一位 */</span>
            L-&gt;data[k + <span class="hljs-number">1</span>] = L-&gt;data[k];
    &#125;
    L-&gt;data[i - <span class="hljs-number">1</span>] = e;          <span class="hljs-comment">/* 将新元素插入 */</span>
    L-&gt;length++;
    <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<h3 id="3-5-3删除操作">3.5.3删除操作</h3>
<p>删除算法的思路：<br>
• 如果删除位置不合理，抛出异常；<br>
• 取出删除元素；<br>
• 从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；<br>
• 表长减1。<br>
实现代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */</span>
<span class="hljs-comment">/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1 */</span>
<span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> i, ElemType *e)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> k;
    <span class="hljs-keyword">if</span> (L-&gt;length == <span class="hljs-number">0</span>)               <span class="hljs-comment">/* 线性表为空 */</span>
        <span class="hljs-keyword">return</span> ERROR;
    <span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span> || i&gt;L-&gt;length)         <span class="hljs-comment">/* 删除位置不正确 */</span>
        <span class="hljs-keyword">return</span> ERROR;
    *e = L-&gt;data[i - <span class="hljs-number">1</span>];
    <span class="hljs-keyword">if</span> (i &lt; L-&gt;length)                <span class="hljs-comment">/* 如果删除不是最后位置 */</span>
    &#123;
        <span class="hljs-keyword">for</span> (k = i; k &lt; L-&gt;length; k++)<span class="hljs-comment">/* 将删除位置后继元素前移 */</span>
            L-&gt;data[k - <span class="hljs-number">1</span>] = L-&gt;data[k];
    &#125;
    L-&gt;length--;
    <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<p>线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是O（1）；而插入或删除时，时间复杂度都是O（n）。</p>
<h3 id="3-5-4线性表顺序存储结构的优缺点">3.5.4线性表顺序存储结构的优缺点</h3>
<p>线性表的顺序存储结构的优缺点如图3-5-3所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.5.3.GIF?raw=true" srcset="/img/loading.gif" alt="3-5-3"></p>
<h3 id="3-6线性表的链式存储结构">3.6线性表的链式存储结构</h3>
<h3 id="3-6-2线性表链式存储结构定义">3.6.2线性表链式存储结构定义</h3>
<p>为了表示每个数据元素a_i 与其直接后继数据元素a_(i+1) 之间的逻辑关系，对数据元素a1来说，除了存储其本身的信息之外，还需存储一个指示其直接后继的信息（即直接后继的存储位置）。我们把存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素a_i 的存储映像，称为结点（Node）。<br>
n个结点（a_i 的存储映像）链结成一个链表，即为线性表（a_1，a_2，…，a_n）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。<br>
我们把链表中第一个结点的存储位置叫做头指针,线性链表的最后一个结点指针为“空”（通常用NULL或“^”符号表示）。<br>
有时，我们为了更加方便地对链表进行操作，会在单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息。</p>
<h3 id="3-6-3头指针与头结点的异同">3.6.3头指针与头结点的异同</h3>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.6.3.GIF?raw=true" srcset="/img/loading.gif" alt="3-6-3"></p>
<h3 id="3-6-4线性表链式存储结构代码描述">3.6.4线性表链式存储结构代码描述</h3>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">//线性表的单链表存储结构</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>
&#123;</span>
    ElemType data;
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span>
&#125;Node;
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">LinkList</span>;</span><span class="hljs-comment">/* 定义LinkList */</span></code></pre></div>
<p>节点Node是由存放数据元素的数据域和存放后继节点地址的指针域组成。</p>
<h2 id="3-7单链表的读取">3.7单链表的读取</h2>
<p>获得链表第i个的数据的算法思路：</p>
<ol>
<li>声明一个结点p指向链表第一个结点，初始化j从1开始;</li>
<li>当<code>j&lt;i</code>时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1;</li>
<li>若到链表末尾p为空，则说明第i个元素不存在;</li>
<li>否则查找成功，返回结点p的数据。</li>
</ol>
<p>实现代码算法如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */</span>
<span class="hljs-comment">/* 操作结果：用e返回L中第i个数据元素的值 */</span>
<span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L,<span class="hljs-keyword">int</span> i,ElemType *e)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> j;
    LinkList p;  <span class="hljs-comment">/* 声明一结点p */</span>
    p = L-&gt;next;  <span class="hljs-comment">/* 让p指向链表L的第一个结点 */</span>
    j = <span class="hljs-number">1</span>;        <span class="hljs-comment">/*  j为计数器 */</span>
    <span class="hljs-keyword">while</span> (p &amp;&amp; j&lt;i)  <span class="hljs-comment">/* p不为空或者计数器j还没有等于i时，循环继续 */</span>
    &#123;
        p = p-&gt;next;  <span class="hljs-comment">/* 让p指向下一个结点 */</span>
        ++j;
    &#125;
    <span class="hljs-keyword">if</span> ( !p || j&gt;i )
        <span class="hljs-keyword">return</span> ERROR;  <span class="hljs-comment">/*  第i个元素不存在 */</span>
    *e = p-&gt;data;   <span class="hljs-comment">/*  取第i个元素的数据 */</span>
    <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<p>这个算法的最坏情况时间复杂度为O(n)。</p>
<h2 id="3-8-单链表的插入和删除">3.8 单链表的插入和删除</h2>
<h3 id="3-8-1-单链表的插入">3.8.1 单链表的插入</h3>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.8.1.GIF?raw=true" srcset="/img/loading.gif" alt="图3-8-1"><br>
假设上一个结点是p，下一个结点是p-&gt;next,现在要把结点s插入这两个结点中去。只需要2行代码：<br>
<code>s-&gt;next=p-&gt;next;//先让s的指针域指向p-&gt;next</code><br>
<code>p-&gt;next=s;//把s的地址赋给p的指针域</code></p>
<p>ps:这两句顺序不能交换。<br>
如果先<code>p-&gt;next=s</code>;再<code>s-&gt;next=p-&gt;next</code>;就等于<code>s-&gt;next=s</code>;<br>
所以这2句如论如何都不能反，这点初学者一定要注意。</p>
<p>单链表第i个数据插入结点的算法思路：</p>
<ol>
<li>声明一结点p指向链表第一个结点，初始化j从1开始;</li>
<li>当j&lt;1时，就遍历链表，让p的指针向后移动，不断指向下一个结点，j累加1;</li>
<li>若到链表末尾p为空，则说明第i个元素不存在;</li>
<li>否则查找成功，在系统中生成一个空结点s;</li>
<li>将数据元素e赋值给<code>s-&gt;data</code>;</li>
<li>单链表的插入标准语句<code>s-&gt;next=p-&gt;next;p-&gt;next=s;</code>;</li>
<li>返回成功;</li>
</ol>
<p>实现代码算法如下:</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 初始条件：顺序线性表L已存在,1≤i≤ListLength(L)， */</span>
<span class="hljs-comment">/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */</span>
<span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList *L,<span class="hljs-keyword">int</span> i,ElemType e)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> j;
    LinkList p,s;
    p = *L;
    j = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">while</span> (p &amp;&amp; j &lt; i)     <span class="hljs-comment">/* 寻找第i个结点 */</span>
    &#123;
        p = p-&gt;next;
        ++j;
    &#125;
    <span class="hljs-keyword">if</span> (!p || j &gt; i)
        <span class="hljs-keyword">return</span> ERROR;   <span class="hljs-comment">/* 第i个元素不存在 */</span>
    s = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));  <span class="hljs-comment">/*  生成新结点(C语言标准函数) */</span>
    s-&gt;data = e;  
    s-&gt;next = p-&gt;next;      <span class="hljs-comment">/* 将p的后继结点赋值给s的后继  */</span>
    p-&gt;next = s;          <span class="hljs-comment">/* 将s赋值给p的后继 */</span>
    <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<h3 id="3-8-2-单链表的删除">3.8.2 单链表的删除</h3>
<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.8.5.GIF?raw=true" srcset="/img/loading.gif" alt="3-8-5"><br>
要删除节点q，其实就是要让<code>p-&gt;next=q-&gt;next</code>;<br>
单链表第i个数据删除结点的算法思路：</p>
<ol>
<li>声明一结点p指向链表第一个结点，初始化j从1开始</li>
<li>当<code>j&lt;i</code>时，就遍历链表，让p的指针向后移动，不断指向下一个结点，j累加1；</li>
<li>若到链表末尾p为空，则说明第i个元素不存在；</li>
<li>否则查找成功，将欲删除的结点<code>p-&gt;next</code>赋值给q；</li>
<li>单链表的删除标准语句<code>p-&gt;next=q-&gt;next</code>；</li>
<li>将q结点中的数据赋值给e，作为返回；</li>
<li>释放q结点；</li>
<li>返回成功。</li>
</ol>
<p>实现代码算法如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */</span>
<span class="hljs-comment">/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1 */</span>
<span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList *L,<span class="hljs-keyword">int</span> i,ElemType *e)</span>
</span>&#123;
    <span class="hljs-keyword">int</span> j;
    LinkList p,q;
    p = *L;
    j = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i)    <span class="hljs-comment">/* 遍历寻找第i个元素 */</span>
    &#123;
        p = p-&gt;next;
        ++j;
    &#125;
    <span class="hljs-keyword">if</span> (!(p-&gt;next) || j &gt; i)
        <span class="hljs-keyword">return</span> ERROR;           <span class="hljs-comment">/* 第i个元素不存在 */</span>
    q = p-&gt;next;              <span class="hljs-comment">//q结点指向要删除的结点（即要删除的结点地址赋值给q）</span>
    p-&gt;next = q-&gt;next;            <span class="hljs-comment">/* 将q的后继(第三个结点)赋值给p的后继 */</span>
    *e = q-&gt;data;               <span class="hljs-comment">/* 将q结点中的数据给e */</span>
    <span class="hljs-built_in">free</span>(q);                    <span class="hljs-comment">/* 让系统回收此结点，释放内存 */</span>
    <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<p>分析一下刚才我们讲解的单链表插入和删除算法，我们很容易推导出：它们的时间复杂度都是O（n）。<br>
显然，对于<strong>插入或删除数据越频繁的操作，单链表的效率优势就越是明显</strong>。</p>
<h2 id="3-9单链表的整表创建">3.9单链表的整表创建</h2>
<p>单链表整表创建的算法思路：</p>
<ol>
<li>声明一结点p和计数器变量i；</li>
<li>初始化一空链表L；</li>
<li>让L的头结点的指针指向NULL，即建立一个带头结点的单链表；</li>
<li>循环：
<ul>
<li>生成一新结点赋值给p；</li>
<li>随机生成一数字赋值给p的数据域p&gt;data；</li>
<li>将p插入到头结点与前一新结点之间。</li>
</ul>
</li>
</ol>
<p>实现头插法的代码算法如下(这段算法代码里,我们用插队的办法，始终让新结点在第一的位置。这种算法简称为头插法)：</p>
<div class="hljs"><pre><code class="language-c">/*  随机产生n个元素的值，建立带表头结点的单链线性表L（头插法） */
void CreateListHead(LinkList *L, int n)
{
    LinkList p;
    int i;
    srand(time(0));                         /* 初始化随机数种子 */
    *L = (LinkList)malloc(sizeof(Node));
    (*L)-&gt;next = NULL;                      /*  先建立一个带头结点的单链表 */
    for (i=0; i&lt;n; i++)
    {
        p = (LinkList)malloc(sizeof(Node)); /*  生成新结点 */
        p-&gt;data = rand()%100+1;             /*  随机生成100以内的数字 */
        p-&gt;next = (*L)-&gt;next;
        (*L)-&gt;next = p;                        /*  插入到表头 */
    }
}
</code></pre></div>
<p>事实上，我们一般插队都是放在最后的。如果我们把每次的新结点都插在终端结点的后面，这种算法称之为尾插法。</p>
<p>实现尾插法代码算法如下：</p>
<div class="hljs"><pre><code class="language-c">/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */
void CreateListTail(LinkList *L, int n)
{
    LinkList p,r;
    int i;
    srand(time(0));                      /* 初始化随机数种子 */
    *L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */
    r=*L;                                /* r为指向尾部的结点 */
    for (i=0; i&lt;n; i++)
    {
        p = (Node *)malloc(sizeof(Node)); /*  生成新结点 */
        p-&gt;data = rand()%100+1;           /*  随机生成100以内的数字 */
        r-&gt;next=p;                        /* 将表尾终端结点的指针指向新结点 */
        r = p;                            /* 将当前的新结点定义为表尾终端结点 */
    }
    r-&gt;next = NULL;                       /* 表示当前链表结束 */
}
</code></pre></div>
<p>PS：这里需解释一下，<code>r-&gt;next=p</code>的意思，其实就是将刚才的表尾终端结点r的指针指向新结点p，如图3-9-2所示，当中①位置的连线就是表示这个意思。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.9.2.GIF?raw=true" srcset="/img/loading.gif" alt="3-9-2"><br>
<code>r=p</code>的意思请看图3-9-3，就是本来r是a_(i-1)元素的结点，现在它已经不是最后的结点了，现在最后的结点是a_i，所以应该将p结点这个最后的结点赋值给r。此时r又是最终的尾结点了。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.9.3.GIF?raw=true" srcset="/img/loading.gif" alt="3-9-3"></p>
<p>循环结束后，那么应该让这个链表的指针域置空，因此有了<code>r-&gt;next=NULL</code>，以便以后遍历时可以确认其是尾部。</p>
<h2 id="3-10单链表的整表删除">3.10单链表的整表删除</h2>
<p>单链表整表删除的算法思路如下：</p>
<ol>
<li>声明一结点p和q；</li>
<li>将第一个结点赋值给p；</li>
<li>循环：
<ul>
<li>将下一结点赋值给q；</li>
<li>释放p；将q赋值给p。</li>
</ul>
</li>
</ol>
<p>实现代码算法如下：</p>
<div class="hljs"><pre><code class="language-c">/* 初始条件：顺序线性表L已存在。操作结果：将L重置为空表 */
Status ClearList(LinkList *L)
{
    LinkList p,q;
    p=(*L)-&gt;next;           /*  p指向第一个结点 */
    while(p)                /*  没到表尾 */
    {
        q=p-&gt;next;   //下一个结点地址赋值给临时结点q
        free(p);     //释放p结点内存
        p=q;         //临时结点q的地址赋值给p，使p能够指向继续指向下一个结点
    }
    (*L)-&gt;next=NULL;        /* 头结点指针域为空 */
    return OK;
}
</code></pre></div>
<h2 id="3-11单链表结构与顺序存储结构优缺点">3.11单链表结构与顺序存储结构优缺点</h2>
<p>简单地对单链表结构和顺序存储结构做对比,如图3-11-1：<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.11.1.GIF?raw=true" srcset="/img/loading.gif" alt="3-11-1"></p>
<p>通过上面的对比，我们可以得出一些经验性的结论：</p>
<ul>
<li>若线性表需要频繁查找，很少进行插入和删除操作时，宜采用顺序存储结构。若需要频繁插入和删除时，宜采用单链表结构。</li>
<li>当线性表中的元素个数变化较大或者根本不知道有多大时，最好用单链表结构，这样可以不需要考虑存储空间的大小问题。</li>
</ul>
<p>总之，线性表的顺序存储结构和单链表结构各有其优缺点，不能简单的说哪个好，哪个不好，需要根据实际情况，来综合平衡采用哪种数据结构更能满足和达到需求和性能。</p>
<h2 id="3-12静态链表">3.12静态链表</h2>
<p>静态链表是由数组组成。<br>
我们让数组的元素都是由两个数据域组成，data和cur。也就是说，数组的每个下标都对应一个data和一个cur。数据域data，用来存放数据元素，也就是通常我们要处理的数据；而游标cur相当于单链表中的next 指针，存放该元素的后继在数组中的下标。<br>
我们把这种用数组描述的链表叫做静态链表，这种描述方法还有起名叫做游标实现法。<br>
静态链表的结构定义如下：</p>
<div class="hljs"><pre><code class="language-c">/* 线性表的静态链表存储结构 */
typedef struct
{
    ElemType data;
    int cur;  /* 游标(Cursor) ，为0时表示无指向 */
} Component,StaticLinkList[MAXSIZE];
</code></pre></div>
<p>另外我们对数组第一个和最后一个元素作为特殊元素处理，不存数据。我们通常把未被使用的数组元素称为备用链表。而数组第一个元素，即<strong>下标为0的元素的cur就存放备用链表的第一个结点的下标；而数组的最后一个元素的cur则存放第一个有数值的元素的下标</strong>，相当于单链表中的头结点作用，当整个链表为空时，则为0。如图3-12-1所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.12.1.GIF?raw=true" srcset="/img/loading.gif" alt="3-12-1"></p>
<p>初始化数组状态，代码如下：</p>
<div class="hljs"><pre><code class="language-c">/* 将一维数组space中各分量链成一个备用链表，space[0].cur为头指针，&quot;0&quot;表示空指针 */
Status InitList(StaticLinkList space)
{
    int i;
    for (i=0; i&lt;MAXSIZE-1; i++)  
        space[i].cur = i+1;
    space[MAXSIZE-1].cur = 0; /* 目前静态链表为空，最后一个元素的cur为0 */
    return OK;
}
</code></pre></div>
<h3 id="3-12-1静态链表的插入操作">3.12.1静态链表的插入操作</h3>
<p>在静态链表中，需要我们自己实现结点的申请和释放这2个函数，才可以做插入和删除的操作。<br>
为了辨明数组中哪些分量未被使用，解决的办法是将所有未被使用过的及已被删除的分量用游标链成一个备用的链表，每当进行插入时，便可以从备用链表上取得第一个结点作为待插入的新结点。</p>
<div class="hljs"><pre><code class="language-c">/* 若备用空间链表非空，则返回分配的结点下标，否则返回0 */
int Malloc_SSL(StaticLinkList space)
{
    int i = space[0].cur;                   /* 当前数组第一个元素的cur存的值 */
                                            /* 就是要返回的第一个备用空闲的下标 */
    if (space[0]. cur)
        space[0]. cur = space[i].cur;       /* 由于要拿出一个分量来使用了， */
                               ll             /* 所以我们就得把它的下一个 */
                                            /* 分量用来做备用 */
    return i;
}
</code></pre></div>
<p>这段代码有意思，它的作用就是返回一个下标值，这个值就是数组头元素的cur存的第一个空闲的下标,同时把这个空闲的下标给<code>space[0].cur</code>，之后就可以继续分配新的空闲分量，实现类似mallbc（）函数的作用。<br>
插入操作的实现代码如下：</p>
<div class="hljs"><pre><code class="language-c">/*  在L中第i个元素之前插入新的数据元素e   */
Status ListInsert(StaticLinkList L, int i, ElemType e)
{  
    int j, k, l;
    k = MAXSIZE - 1;   /* 注意k首先是最后一个元素的下标 */
    if (i &lt; 1 || i &gt; ListLength(L) + 1)
        return ERROR;
    j = Malloc_SSL(L);   /* 获得空闲分量的下标 */
    if (j)
    {
        L[j].data = e;   /* 将数据赋值给此分量的data */
        for(l = 1; l &lt;= i - 1; l++)   /* 找到第i个元素之前的位置 */
           k = L[k].cur;
        L[j].cur = L[k].cur;    /* 把第i个元素之前的cur赋值给新元素的cur */
        L[k].cur = j;           /* 把新元素的下标赋值给第i个元素之前元素的ur */
        return OK;
    }
    return ERROR;
}
</code></pre></div>
<h3 id="3-12-2静态链表的删除操作">3.12.2静态链表的删除操作</h3>
<p>删除元素时，实现的代码如下：</p>
<div class="hljs"><pre><code class="language-c">/*  删除在L中第i个数据元素   */
Status ListDelete(StaticLinkList L, int i)
{
    int j, k;
    if (i &lt; 1 || i &gt; ListLength(L))
        return ERROR;
    k = MAXSIZE - 1;
    for (j = 1; j &lt;= i - 1; j++)
        k = L[k].cur;
    j = L[k].cur;
    L[k].cur = L[j].cur;
    Free_SSL(L, j);
    return OK;
}
</code></pre></div>
<p>释放结点的函数代码如下：</p>
<div class="hljs"><pre><code class="language-c">/*  将下标为k的空闲结点回收到备用链表 */
void Free_SSL(StaticLinkList space, int k)
{  
    space[k].cur = space[0].cur;    /* 把第一个元素的cur值赋给要删除的分量cur */
    space[0].cur = k;               /* 把要删除的分量下标赋值给第一个元素的cur */
}
</code></pre></div>
<p>返回静态链表长度的代码实现如下：</p>
<div class="hljs"><pre><code class="language-c">/* 初始条件：静态链表L已存在。操作结果：返回L中数据元素个数 */
int ListLength(StaticLinkList L)
{
    int j=0;
    int i=L[MAXSIZE-1].cur;
    while(i)
    {
        i=L[i].cur;
        j++;
    }
    return j;
}
</code></pre></div>
<h3 id="3-12-3静态链表优缺点">3.12.3静态链表优缺点</h3>
<p>总结一下静态链表的优缺点（见图3-12-5）：<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.12.5.GIF?raw=true" srcset="/img/loading.gif" alt="3-12-5"><br>
总的来说，静态链表其实是为了给没有指针的高级语言设计的一种实现单链表能力的方法。尽管大家不一定会用得上，但这样的思考方式是非常巧妙的，应该理解其思想，以备不时之需。</p>
<h2 id="3-13循环链表">3.13循环链表</h2>
<p>将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表（circular linked list）。<br>
其实循环链表和单链表的主要差异就在于循环的判断条件上，原来是判断<code>p-&gt;next</code>是否为空，现在则是<code>p-&gt;next</code>不等于头结点，则循环未结束。<br>
在单链表中，我们有了头结点时，我们可以用O（1）的时间访问第一个结点，但如果想要用O（1）的时间访问到最后一个结点，则需要改造一下这个循环链表，不用头指针，而是用指向终端结点的尾指针来表示循环链表（如图3-13-5）。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.13.5.GIF?raw=true" srcset="/img/loading.gif" alt="3-13-5"><br>
从上图可以看出，终端结点用尾指针rear指示，则查找终端结点是O（1），而开始结点，其实就是<code>rear-&gt;next-&gt;next</code>，其时间复杂也为O（1）。<br>
举个程序的例子，要将两个循环链表合并成一个表时，有了尾指针就非常简单了。比如下面的这两个循环链表，它们的尾指针分别是rearA和rearB，如图3-13-6所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.13.6.GIF?raw=true" srcset="/img/loading.gif" alt="3-13-6"><br>
要想把它们合并，只需要如下的操作即可，如图3-13-7所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.13.7.GIF?raw=true" srcset="/img/loading.gif" alt="3-13-7"><br>
具体代码如下：</p>
<div class="hljs"><pre><code class="language-c">p=rearA-&gt;next;     /*保存A表的头结点，即①*/
rearA-&gt;next=rearB-&gt;next-&gt;next;     /*将本是指向B表的第一个结点（不是头结点）赋值给reaA-&gt;next,即②*/
rearB-&gt;next=p;/*将原A表的头结点赋值给rearB-&gt;next，即③**/
free(p);/*释放p*/
</code></pre></div>
<h2 id="3-14双向链表">3.14双向链表</h2>
<p>双向链表（double linked list）是在单链表的每个结点中，再设置一个指向其前驱结点的指针域。<br>
所以在双向链表中的结点都有两个指针域，一个指向直接后继，另一个指向直接前驱。</p>
<div class="hljs"><pre><code class="language-c">/*线性表的双向链表存储结构*/
typedef struct DulNode
{
    ElemType data；
    struct DuLNode *prior；/*直接前驱指针*/
    struct DuLNode *next；/*直接后继指针*/
}DulNode，*DuLinkList；
</code></pre></div>
<p>既然单链表也可以有循环链表，那么双向链表当然也可以是循环表。<br>
双向链表的循环带头结点的空链表如图3-14-3所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.14.3.GIF?raw=true" srcset="/img/loading.gif" alt="3-14-3"><br>
非空的循环的带头结点的双向链表如图3-14-4所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.14.4.GIF?raw=true" srcset="/img/loading.gif" alt="3-14-4"><br>
PS：双向链表在插入和删除时，需要更改两个指针变量。<br>
插入操作时，其实并不复杂，不过<strong>顺序很重要，千万不能写反了</strong>。<br>
我们现在假设存储元素e的结点为s，要实现将结点s插入到结点p和<code>p-&gt;next</code>之间需要下面几步，如图3-14-5所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.14.5.GIF?raw=true" srcset="/img/loading.gif" alt="3-14-5"></p>
<div class="hljs"><pre><code class="language-c">s-&gt;prior=p;/*把p赋值给s的前驱，如图中①*/
s-&gt;next=p-&gt;next;/*把p-&gt;next赋值给s的后继，如图中②*/
p-&gt;next-&gt;prior=s;/*把s赋值给p-&gt;next的前驱，如图中③*/
p-&gt;next=s;/*把s赋值给p的后继，如图中④*/
</code></pre></div>
<p>关键在于它们的顺序，由于第2步和第3步都用到了<code>p-&gt;next</code>。如果第4步先执行，则会使得<code>p-&gt;next</code>提前变成了s，使得插入的工作完不成。所以我们不妨把上面这张图在理解的基础上记忆，顺序是先搞定s的前驱和后继，再搞定后结点的前驱，最后解决前结点的后继。</p>
<p>若要删除结点p，只需要下面两步骤，如图3-14-6所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.14.6.GIF?raw=true" srcset="/img/loading.gif" alt="3-14-6"></p>
<div class="hljs"><pre><code class="language-c">p-&gt;prior-&gt;next=p-&gt;next；/*把p-&gt;next赋值给p-&gt;prior的后继，如图中①*/
p-&gt;next-&gt;prior=p-&gt;prior；/*把p-&gt;prior 赋值给p-&gt;next的前驱，如图中②*/
free（p）；/*释放结点*/
</code></pre></div>
<h2 id="3-15总结回顾">3.15总结回顾</h2>
<p>这一章，主要讲的是线性表。<br>
先谈了它的定义，线性表是零个或多个具有相同类型的数据元素的有限序列。然后谈了线性表的抽象数据类型，如它的一些基本操作。<br>
之后我们就线性表的两大结构做了讲述，先讲的是比较容易的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。通常我们都是用数组来实现这一结构。<br>
后来是我们的重点，由顺序存储结构的插入和删除操作不方便，引出了链式存储结构。它具有不受固定的存储空间限制，可以比较快捷的插入和删除操作的特点。然后我们分别就链式存储结构的不同形式，如单链表、循环链表和双向链表做了讲解，另外我们还讲了若不使用指针如何处理链表结构的静态链表方法。<br>
总的来说，线性表的这两种结构（如图3-15-1所示）是后面其他数据结构的基础，把它们学明白了，对后面的学习有着至关重要的作用。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.15.1.GIF?raw=true" srcset="/img/loading.gif" alt="3-15-1"></p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>大话数据结构</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>数据结构</tag>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构第四章 栈与队列</title>
    <url>/2019/11/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC4%E7%AB%A0%20%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h2 id="4-1-4-2-栈的定义">4.1-4.2 栈的定义</h2>
<h3 id="4-2-1-栈的定义">4.2.1 栈的定义</h3>
<p><strong>栈是限定仅在表尾进行插入和删除操作的线性表。</strong><br>
我们把允许插入和删除的一端称为栈顶(top)，另一端称为栈底(bottom)，不含任何数据元素的栈称为空栈。栈又称为后进先出(Last In First Out)的线性表，简尔LIFO结构。<br>
它的特殊之处就在于限制了这个线性表的插入和删除位置，它始终只在栈顶进行。这也就使得：栈底是固定的，最先进栈的只能在栈底。<br>
栈的插入操作，叫作进栈，也称压栈、入栈(push)。</p>
<a id="more"></a>
<p>栈的删除操作，叫作出栈，也有的叫作弹栈(pop)。</p>
<h2 id="4-3-栈的抽象数据类型">4.3 栈的抽象数据类型</h2>
<div class="hljs"><pre><code class="hljs c">ADT 栈(stack)
Data
    同线性表。元素具有相同的类型，相邻元素具有前驱和后继关系。
Operation
    InitStack(*s)：初始化操作，建立一个空栈s。
    DestroyStack(*s)：若楼存在，则销毁它。
    ClearStack(*s)：将栽清空。
    StackEmpty(S)：若为空，返回true，否则返回false。
    GetTop(s，*e)：若栽存在且非空，用e返回s的栽顶元素。
    Push(*s，e)：若栈S存在，插入新元素e到栈S中并成为栈顶元素。
    Pop(*S，*e)：删除栈S中栈顶元素，并用e返回其值。
    StackLength(s)：返回栈s的元素个数。
endADT</code></pre></div>
<h2 id="4-4-栈的顺序存储结构及实现">4.4 栈的顺序存储结构及实现</h2>
<h3 id="4-4-1-栈的顺序存储结构">4.4.1 栈的顺序存储结构</h3>
<p>栈是线性表的特例，那么栈的顺序存储其实也是线性表顺序存储的简化，我们简称为顺序栈。线性表是用数组来实现的。<br>
我们定义一个top变量来指示栈顶元素在数组中的位置，它可以来回移动，意味着栈顶的top可以变大变小，但无论如何游标不能超出栈的长度。同理，若存储栈的长度为StackSize，则栈顶位置top必须小于StackSize。当栈存在一个元素时，top等于0，因此通常把空栈的判定条件定为top等于-1。</p>
<p>栈的结构定义：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> SElemType; <span class="hljs-comment">/* SElemType类型根据实际情况而定，这里假设为int */</span>
<span class="hljs-comment">/* 顺序栈结构 */</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>
&#123;</span>
        SElemType data[MAXSIZE];
        <span class="hljs-keyword">int</span> top; <span class="hljs-comment">/* 用于栈顶指针 */</span>
&#125;SqStack;</code></pre></div>
<p>若现在有一个栈，StackSize是5，则栈普通情况、空栈和栈满的情况示意图如图4-4-2所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-4-2.JPG?raw=true" srcset="/img/loading.gif" alt="4-4-2"></p>
<h3 id="4-4-2-栈的顺序存储结构——进栈操作">4.4.2 栈的顺序存储结构——进栈操作</h3>
<p>对于栈的插入，即进栈操作，其实就是在栈顶插入一个元素。<br>
进栈操作push，其代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 插入元素e为新的栈顶元素 */</span>
<span class="hljs-function">Status <span class="hljs-title">Push</span><span class="hljs-params">(SqStack *S,SElemType e)</span>
</span>&#123;
        <span class="hljs-keyword">if</span>(S-&gt;top == MAXSIZE <span class="hljs-number">-1</span>) <span class="hljs-comment">/* 栈满 */</span>
        &#123;
            <span class="hljs-keyword">return</span> ERROR;
        &#125;
        S-&gt;top++;   <span class="hljs-comment">/* 栈顶指针增加一 */</span>
        S-&gt;data[S-&gt;top]=e;  <span class="hljs-comment">/* 将新插入元素赋值给栈顶空间 */</span>
        <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<h3 id="4-4-3-栈的顺序存储结构——出栈操作">4.4.3 栈的顺序存储结构——出栈操作</h3>
<p>出栈操作pop，代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR */</span>
<span class="hljs-function">Status <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack *S,SElemType *e)</span>
</span>&#123;
        <span class="hljs-keyword">if</span>(S-&gt;top==<span class="hljs-number">-1</span>)
                <span class="hljs-keyword">return</span> ERROR;
        *e=S-&gt;data[S-&gt;top]; <span class="hljs-comment">/* 将要删除的栈顶元素赋值给e */</span>
        S-&gt;top--;   <span class="hljs-comment">/* 栈顶指针减一 */</span>
        <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<p>两者没有涉及到任何循环语句，因此时间复杂度均是O(1)。</p>
<h2 id="4-5-两栈共享空间">4.5 两栈共享空间</h2>
<p>如果我们有两个相同类型的栈，我们为它们各自开辟了数组空间，极有可能是第一个栈已经满了，再进栈就溢出了，而另一个栈还有很多存储空间空闲。这又何必呢？我们完全可以用一个数组来存储两个栈，只不过需要点小技巧。<br>
数组有两个端点，两个栈有两个栈底，让一个栈的栈底为数组的始端，即下标为0处，另一个栈为栈的末端，即下标为数组长度n-1处。这样，两个栈如果增加元素，就是两端点向中间延伸。<br>
其实关键思路是：它们是在数组的两端，向中间靠拢。top1和top2是栈1和栈2的栈顶指针，可以想象，只要它们俩不见面，两个栈就可以一直使用。<br>
从这里也就可以分析出来，栈1为空时，就是top1等于-1时；而当top2等于n时，即是栈2为空时，那什么时候栈满呢？<br>
想想极端的情况，若栈2是空栈，栈1的top1等于n-1时，就是栈1满了。反之，当栈1为空栈时，top2等于0时，为栈2满。但更多的情况，其实就是我刚才说的，两个栈见面之时，也就是两个指针之间相差1时，即top1+1==top2为栈满。<br>
两栈共享空间的结构的代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 两栈共享空间结构 */</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>
&#123;</span>
    SElemType data[MAXSIZE];
    <span class="hljs-keyword">int</span> top1;    <span class="hljs-comment">/* 栈1栈顶指针 */</span>
    <span class="hljs-keyword">int</span> top2;    <span class="hljs-comment">/* 栈2栈顶指针 */</span>
&#125;SqDoubleStack;</code></pre></div>
<p>对于两栈共享空间的push方法，我们除了要插入元素值参数外，还需要有一个判断是栈1还是栈2的栈号参数stackNumber。插入元素的代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 插入元素e为新的栈顶元素 */</span>
<span class="hljs-function">Status <span class="hljs-title">Push</span><span class="hljs-params">(SqDoubleStack *S, SElemType e, <span class="hljs-keyword">int</span> stackNumber)</span>
</span>&#123;
    <span class="hljs-keyword">if</span> (S-&gt;top1 + <span class="hljs-number">1</span> == S-&gt;top2)    <span class="hljs-comment">/* 栈已满，不能再push新元素了 */</span>
        <span class="hljs-keyword">return</span> ERROR;
    <span class="hljs-keyword">if</span> (stackNumber == <span class="hljs-number">1</span>)            <span class="hljs-comment">/* 栈1有元素进栈 */</span>
        S-&gt;data[++S-&gt;top1] = e; <span class="hljs-comment">/* 若是栈1则先top1+1后给数组元素赋值。 */</span>
    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stackNumber == <span class="hljs-number">2</span>)    <span class="hljs-comment">/* 栈2有元素进栈 */</span>
        S-&gt;data[--S-&gt;top2] = e; <span class="hljs-comment">/* 若是栈2则先top2-1后给数组元素赋值。 */</span>
    <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<p>因为在开始已经判断了是否有栈满的情况，所以后面的top1+1或top2-1是不担心溢出问题的。<br>
对于两栈共享空间的pop方法，参数就只是判断栈1栈2的参数stackNumber，代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR */</span>
<span class="hljs-function">Status <span class="hljs-title">Pop</span><span class="hljs-params">(SqDoubleStack *S, SElemType *e, <span class="hljs-keyword">int</span> stackNumber)</span>
</span>&#123;
    <span class="hljs-keyword">if</span> (stackNumber == <span class="hljs-number">1</span>)
    &#123;
        <span class="hljs-keyword">if</span> (S-&gt;top1 == <span class="hljs-number">-1</span>)
            <span class="hljs-keyword">return</span> ERROR; <span class="hljs-comment">/* 说明栈1已经是空栈，溢出 */</span>
        *e = S-&gt;data[S-&gt;top1--]; <span class="hljs-comment">/* 将栈1的栈顶元素出栈 */</span>
    &#125;
    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stackNumber == <span class="hljs-number">2</span>)
    &#123;
        <span class="hljs-keyword">if</span> (S-&gt;top2 == MAXSIZE)
            <span class="hljs-keyword">return</span> ERROR; <span class="hljs-comment">/* 说明栈2已经是空栈，溢出 */</span>
        *e = S-&gt;data[S-&gt;top2++]; <span class="hljs-comment">/* 将栈2的栈顶元素出栈 */</span>
    &#125;
    <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<p>事实上，使用这样的数据结构，通常都是当两个栈的空间需求有相反关系时，也就是一个栈增长时另一个栈在缩短的情况。就像买卖股票一样，你买入时，一定是有一个你不知道的人在做卖出操作。有人赚钱，就一定是有人赔钱。这样使用两栈共享空间存储方法才有比较大的意义。否则两个栈都在不停地增长，那很快就会因栈满而溢出了。</p>
<h2 id="4-6-栈的链式存储结构及实现">4.6 栈的链式存储结构及实现</h2>
<h3 id="4-6-1-栈的链式存储结构">4.6.1 栈的链式存储结构</h3>
<p>栈的链式存储结构，简称为链栈。<br>
链栈的结构代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 链栈结构 */</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span>
&#123;</span>
    SElemType data;
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span> *<span class="hljs-title">next</span>;</span>
&#125;StackNode,*LinkStackPtr;

<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkStack</span>
&#123;</span>
    LinkStackPtr top;
    <span class="hljs-keyword">int</span> count;
&#125;LinkStack;</code></pre></div>
<h3 id="4-6-2-栈的链式存储结构-进栈操作">4.6.2 栈的链式存储结构-进栈操作</h3>
<p>对于链栈的进栈push操作，假设元素值为e的新结点是s，top为栈顶指针，示意图如图4-6-2所示代码如下。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-6-2.JPG?raw=true" srcset="/img/loading.gif" alt="4-6-2"></p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 插入元素e为新的栈顶元素 */</span>
<span class="hljs-function">Status <span class="hljs-title">Push</span><span class="hljs-params">(LinkStack *S,SElemType e)</span>
</span>&#123;
    LinkStackPtr s=(LinkStackPtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(StackNode));
    s-&gt;data=e;
    s-&gt;next=S-&gt;top;<span class="hljs-comment">/* 把当前的栈顶元素赋值给新结点的直接后继，见图中① */</span>
    S-&gt;top=s;         <span class="hljs-comment">/* 将新的结点s赋值给栈顶指针，见图中② */</span>
    S-&gt;count++;
    <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<h3 id="4-6-3-栈的链式存储结构——出栈操作">4.6.3 栈的链式存储结构——出栈操作</h3>
<p>至于链栈的出栈pop操作，也是很简单的三句操作。假设变量p用来存储要删除的栈顶结点，将栈顶指针下移一位，最后释放p即可，如图4-6-3所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-6-3.JPG?raw=true" srcset="/img/loading.gif" alt="4-6-3"></p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR */</span>
<span class="hljs-function">Status <span class="hljs-title">Pop</span><span class="hljs-params">(LinkStack *S,SElemType *e)</span>
</span>&#123;
        LinkStackPtr p;
        <span class="hljs-keyword">if</span>(StackEmpty(*S))
                <span class="hljs-keyword">return</span> ERROR;
        *e=S-&gt;top-&gt;data;
        p=S-&gt;top;               <span class="hljs-comment">/* 将栈顶结点赋值给p，见图中③ */</span>
        S-&gt;top=S-&gt;top-&gt;next;    <span class="hljs-comment">/* 使得栈顶指针下移一位，指向后一结点，见图中④ */</span>
        <span class="hljs-built_in">free</span>(p);                    <span class="hljs-comment">/* 释放结点p */</span>
        S-&gt;count--;
        <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<p>链栈的进栈push和出栈pop操作都很简单，时间复杂度均是O(1)。<br>
对比一下顺序栈与链栈，它们在时间复杂度上是一样的，均为O(1)。对于空间性能，顺序栈需要事先确定一个固定的长度，可能会存在内存空间浪费的问题，但它的优势是存取时定位很方便，而链栈则要求每个元素都有指针域，这同时也增加了一些内存开销，但对于栈的长度无限制。所以它们的区别是如果栈的使用过程中元素变化不可预料，有时很小，有时非常大，那么最好是用链栈，反之，如果它的变化在可控范围内，建议使用顺序栈会更好一些。</p>
<h2 id="4-7-栈的作用">4.7 栈的作用</h2>
<p>栈的引入简化了程序设计的问题，划分了不同关注层次，使得思考范围缩小，更加聚焦于我们要解决的问题核心。反之，像数组等，因为要分散精力去考虑数组的下标增减等细节问题，反而掩盖了问题的本质。</p>
<h2 id="4-8-栈的应用——递归">4.8 栈的应用——递归</h2>
<h3 id="4-8-1-4-8-2递归定义">4.8.1-4.8.2递归定义</h3>
<p>我们<strong>把一个直接调用自己或通过一系列的调用语句间接地调用自己的函数，称做递归函数</strong>。<br>
当然，写递归程序最怕的就是陷入永不结束的无穷递归中，所以，<strong>每个递归定义必须至少有一个条件，满足时递归不再进行，即不再引用自身而是返回值退出</strong>。</p>
<h2 id="4-9-栈的应用——四则运算表达式求值">4.9 栈的应用——四则运算表达式求值</h2>
<h3 id="4-9-1-后缀-逆波兰-表示法定义">4.9.1 后缀(逆波兰)表示法定义</h3>
<p>栈的现实应用也很多，我们再来重点讲一个比较常见的应用：数学表达式的求值。<br>
一种不需要括号的后缀表达法，我们也把它称为逆波兰(Reverse Polish Notation，RPN)表示。<br>
我们先来看看，对于“<code>9+(3-1)×3+10÷2</code>”，如果要用后缀表示法应该是：“<code>9 3 1-3*+10 2/+</code>”，这样的表达式称为后缀表达式，叫后缀的原因在于<strong>所有的符号都是在要运算数字的后面出现</strong>。</p>
<h3 id="4-9-2-后缀表达式计算结果">4.9.2 后缀表达式计算结果</h3>
<p>后缀表达式：<code>9 3 1-3*+10 2/+</code><br>
规则：<strong>从左到右遍历表达式的每个数字和符号，遇到是数字就进栈，遇到是符号，就将处于栈顶两个数字出栈，进行运算，运算结果进栈，一直到最终获得结果。</strong></p>
<h3 id="4-9-3-中缀表达式转后缀表达式">4.9.3 中缀表达式转后缀表达式</h3>
<p>我们把平时所用的标准四则运算表达式，即“<code>9+(3-1)×3+10÷2</code>”叫做中缀表达式。因为所有的运算符号都在两数字的中间。<br>
中缀表达式“<code>9+(3-1)×3+10÷2</code>”转化为后缀表达式“<code>9 3 1-3*+10 2/+</code>”。<br>
规则：<strong>从左到右遍历中缀表达式的每个数字和符号，若是数字就输出，即成为后缀表达式的一部分；若是符号，则判断其与栈顶符号的优先级，是右括号或优先级低于栈顶符号(乘除优先加减)则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终输出后缀表达式为止。</strong></p>
<h2 id="4-10-队列的定义">4.10 队列的定义</h2>
<p>队列(queue)是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。<br>
队列是一种先进先出(First In First Out)的线性表，简称FIFO。允许插入的一端称为队尾，允许删除的一端称为队头。</p>
<h2 id="4-11-队列的抽象数据类型">4.11 队列的抽象数据类型</h2>
<div class="hljs"><pre><code class="hljs c">ADT 队列(Queue)
Data
    同线性表。元素具有相同的类型，相邻元素具有前驱和后继关系。
Operation
    InitQueue(*Q)：初始化操作，建立一个空队列Q。
    DestroyQueue(*Q)：若队列Q存在，则销毁它。
    ClearQueue(*Q)：将队列Q清空。
    QueueEmpty(Q)：若队列Q为空，返回true，否则返回false。
    GetHead(Q，*e)：若队列Q存在且非空，用e返回队列Q的队头元素。
    EnQueue(*Q，e)：若队列Q存在，插入新元素e到队列Q中并成为队尾元素。
    DeQueue(*Q，*e)：删除队列Q中队头元素，并用e返回其值。
    QueueLength(Q)：返回队列Q的元素个数
endADT</code></pre></div>
<h2 id="4-12-循环队列">4.12 循环队列</h2>
<h3 id="4-12-1-队列顺序存储的不足">4.12.1 队列顺序存储的不足</h3>
<p>入队的时间复杂度为O(1)。<br>
与栈不同的是，队列元素的出列是在队头，即下标为0的位置，那也就意味着，队列中的所有元素都得向前移动，以保证队列的队头，也就是下标为0的位置不为空，此时时间复杂度为出队的时间复杂度为O(n)，效率太低。<br>
如果队列前面的位置空的，后面的位置排满了，那么新进的元素可以排到前面，这就引进了循环队列的概念。<br>
为了避免当只有一个元素时，队头和队尾重合使处理变得麻烦，所以引入两个指针，front指针指向队头元素，rear指针指向队尾元素的下一个位置，这样当front等于rear时，此队列是空队列。</p>
<h3 id="4-12-2-循环队列定义">4.12.2 循环队列定义</h3>
<p>队列中头尾相接的顺序存储结构称为循环队列。<br>
此时问题又出来了，空队列时，front等于rear，现在当队列满时，也是front等于rear，那么如何判断此时的队列究竟是空还是满呢？</p>
<ol>
<li>办法一是设置一个标志变量flag，当<code>front==rear</code>，且flag=0时为队列空，当<code>front==rear</code>，且flag=1时为队列满。</li>
<li>办法二是当队列空时，条件就是<code>front=rear</code>，当队列满时，我们修改其条件，保留一个元素空间。也就是说，队列满时，数组中还有一个空闲单元。<br>
我们重点来讨论第二种方法，由于rear可能比front大，也可能比front小，所以尽管它们只相差一个位置时就是满的情况，但也可能是相差整整一圈。所以若队列的最大尺寸为QueueSize，那么队列满的条件是“<code>(rear+1)%QueueSize==front</code>”(取模“%”的目的就是为了整合rear与front大小为一个问题)。<br>
通用的计算队列长度公式为：<code>(rear-front+QueueSize)%QueueSize</code>。<br>
循环队列的顺序存储结构代码如下：</li>
</ol>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> QElemType; <span class="hljs-comment">/* QElemType类型根据实际情况而定，这里假设为int */</span>
<span class="hljs-comment">/* 循环队列的顺序存储结构 */</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>
&#123;</span>
    QElemType data[MAXSIZE];
    <span class="hljs-keyword">int</span> front;      <span class="hljs-comment">/* 头指针 */</span>
    <span class="hljs-keyword">int</span> rear;       <span class="hljs-comment">/* 尾指针，若队列不空，指向队列尾元素的下一个位置 */</span>
&#125;SqQueue;</code></pre></div>
<p>循环队列的初始化代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 初始化一个空队列Q */</span>
<span class="hljs-function">Status <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue *Q)</span>
</span>&#123;
    Q-&gt;front = <span class="hljs-number">0</span>;
    Q-&gt;rear = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">return</span>  OK;
&#125;</code></pre></div>
<p>循环队列求队列长度代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 返回Q的元素个数，也就是队列的当前长度 */</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">QueueLength</span><span class="hljs-params">(SqQueue Q)</span>
</span>&#123;
    <span class="hljs-keyword">return</span>  (Q.rear - Q.front + MAXSIZE) % MAXSIZE;
&#125;</code></pre></div>
<p>循环队列的入队列操作代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 若队列未满，则插入元素e为Q新的队尾元素 */</span>
<span class="hljs-function">Status <span class="hljs-title">EnQueue</span><span class="hljs-params">(SqQueue *Q, QElemType e)</span>
</span>&#123;
    <span class="hljs-keyword">if</span> ((Q-&gt;rear + <span class="hljs-number">1</span>) % MAXSIZE == Q-&gt;front)    <span class="hljs-comment">/* 队列满的判断 */</span>
        <span class="hljs-keyword">return</span> ERROR;
    Q-&gt;data[Q-&gt;rear] = e;               <span class="hljs-comment">/* 将元素e赋值给队尾 */</span>
    Q-&gt;rear = (Q-&gt;rear + <span class="hljs-number">1</span>) % MAXSIZE;<span class="hljs-comment">/* rear指针向后移一位置， */</span>
                                      <span class="hljs-comment">/* 若到最后则转到数组头部 */</span>
    <span class="hljs-keyword">return</span>  OK;
&#125;</code></pre></div>
<p>循环队列的出队列操作代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 若队列不空，则删除Q中队头元素，用e返回其值 */</span>
<span class="hljs-function">Status <span class="hljs-title">DeQueue</span><span class="hljs-params">(SqQueue *Q, QElemType *e)</span>
</span>&#123;
    <span class="hljs-keyword">if</span> (Q-&gt;front == Q-&gt;rear)            <span class="hljs-comment">/* 队列空的判断 */</span>
        <span class="hljs-keyword">return</span> ERROR;
    *e = Q-&gt;data[Q-&gt;front];                <span class="hljs-comment">/* 将队头元素赋值给e */</span>
    Q-&gt;front = (Q-&gt;front + <span class="hljs-number">1</span>) % MAXSIZE;    <span class="hljs-comment">/* front指针向后移一位置 */</span>
                                    <span class="hljs-comment">/* 若到最后则转到数组头部 */</span>
    <span class="hljs-keyword">return</span>  OK;
&#125;</code></pre></div>
<h2 id="4-13-队列的链式存储结构及实现">4.13 队列的链式存储结构及实现</h2>
<p>队列的链式存储结构，其实就是线性表的单链表，只不过它只能尾进头出而已，我们把它简称为链队列。<br>
为了操作上的方便，我们将队头指针指向链队列的头结点，而队尾指针指向终端结点，如图4-13-1所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-13-1.JPG?raw=true" srcset="/img/loading.gif" alt="4-13-1"><br>
空队列时，front和rear都指向头结点，如图4-13-2所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-13-2.JPG?raw=true" srcset="/img/loading.gif" alt="4-13-2"><br>
链队列的结构为：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> QElemType; <span class="hljs-comment">/* QElemType类型根据实际情况而定，这里假设为int */</span>

<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span>    /* 结点结构 */
&#123;</span>
    QElemType data;
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> *<span class="hljs-title">next</span>;</span>
&#125;QNode, *QueuePtr;

<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>            /* 队列的链表结构 */
&#123;</span>
    QueuePtr front, rear; <span class="hljs-comment">/* 队头、队尾指针 */</span>
&#125;LinkQueue;</code></pre></div>
<h3 id="4-13-1-队列的链式存储结构——入队操作">4.13.1 队列的链式存储结构——入队操作</h3>
<p>入队操作时，其实就是在链表尾部插入结点，如图4-13-3所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-13-3.JPG?raw=true" srcset="/img/loading.gif" alt="4-13-3"><br>
入队代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 插入元素e为Q的新的队尾元素 */</span>
<span class="hljs-function">Status <span class="hljs-title">EnQueue</span><span class="hljs-params">(LinkQueue *Q, QElemType e)</span>
</span>&#123;
    QueuePtr s = (QueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));
    <span class="hljs-keyword">if</span> (!s) <span class="hljs-comment">/* 存储分配失败 */</span>
        <span class="hljs-built_in">exit</span>(OVERFLOW);
    s-&gt;data = e;
    s-&gt;next = <span class="hljs-literal">NULL</span>;
    Q-&gt;rear-&gt;next = s;    <span class="hljs-comment">/* 把拥有元素e的新结点s赋值给原队尾结点的后继，见图中① */</span>
    Q-&gt;rear = s;        <span class="hljs-comment">/* 把当前的s设置为队尾结点，rear指向s，见图中② */</span>
    <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<h3 id="4-13-2-队列的链式存储结构——出队操作">4.13.2 队列的链式存储结构——出队操作</h3>
<p>出队操作时，就是头结点的后继结点出队，将头结点的后继改为它后面的结点，若链表除头结点外只剩一个元素时，则需将rear指向头结点，如图4-13-4所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-13-4.JPG?raw=true" srcset="/img/loading.gif" alt="4-13-4"></p>
<p>出队代码如下：</p>
<div class="hljs"><pre><code class="hljs c"><span class="hljs-comment">/* 若队列不空,删除Q的队头元素,用e返回其值,并返回OK,否则返回ERROR */</span>
<span class="hljs-function">Status <span class="hljs-title">DeQueue</span><span class="hljs-params">(LinkQueue *Q, QElemType *e)</span>
</span>&#123;
    QueuePtr p;
    <span class="hljs-keyword">if</span> (Q-&gt;front == Q-&gt;rear)
        <span class="hljs-keyword">return</span> ERROR;
    p = Q-&gt;front-&gt;next;        <span class="hljs-comment">/* 将欲删除的队头结点暂存给p，见图中① */</span>
    *e = p-&gt;data;                <span class="hljs-comment">/* 将欲删除的队头结点的值赋值给e */</span>
    Q-&gt;front-&gt;next = p-&gt;next;<span class="hljs-comment">/* 将原队头结点的后继p-&gt;next赋值给头结点后继，见图中② */</span>
    <span class="hljs-keyword">if</span> (Q-&gt;rear == p)<span class="hljs-comment">/* 空队列的时候 */</span> <span class="hljs-comment">/* 若队头就是队尾，则删除后将rear指向头结点，见图中③ */</span>
        Q-&gt;rear = Q-&gt;front;
    <span class="hljs-built_in">free</span>(p);
    <span class="hljs-keyword">return</span> OK;
&#125;</code></pre></div>
<p>对于循环队列与链队列的比较，可以从两方面来考虑，从时间上，其实它们的基本操作都是常数时间，即都为O（1）的，不过循环队列是事先申请好空间，使用期间不释放，而对于链队列，每次申请和释放结点也会存在一些时间开销，如果入队出队频繁，则两者还是有细微差异。对于空间上来说，循环队列必须有一个固定的长度，所以就有了存储元素个数和空间浪费的问题。而链队列不存在这个问题，尽管它需要一个指针域，会产生一些空间上的开销，但也可以接受。所以在空间上，链队列更加灵活。<br>
总的来说，在可以确定队列长度最大值的情况下，建议用循环队列，如果你无法预估队列的长度时，则用链队列。</p>
<h2 id="4-14-总结回顾">4.14 总结回顾</h2>
<p>这一章讲的是栈和队列，它们都是特殊的线性表，只不过对插入和删除操作做了限制。<br>
栈(stack)是限定仅在表尾进行插入和删除操作的线性表。<br>
队列(queue)是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。<br>
它们均可以用线性表的顺序存储结构来实现，但都存在着顺序存储的一些弊端。因此它们各自有各自的技巧来解决这个问题。<br>
对于栈来说，如果是两个相同数据类型的栈，则可以用数组的两端作栈底的方法来让两个栈共享数据，这就可以最大化地利用数组的空间。<br>
对于队列来说，为了避免数组插入和删除时需要移动数据，于是就引入了循环队列，使得队头和队尾可以在数组中循环变化。解决了移动数据的时间损耗，使得本来插入和删除是O(n)的时间复杂度变成了O(1)。<br>
它们也都可以通过链式存储结构来实现，实现原则上与线性表基本相同如图4-14-1所示。<br>
<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-14-1.JPG?raw=true" srcset="/img/loading.gif" alt="4-14-1"></p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>大话数据结构</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>数据结构</tag>
        <tag>栈和队列</tag>
      </tags>
  </entry>
</search>
