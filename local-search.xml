<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/2021/10/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/10/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="二、-操作系统运行环境"><a href="#二、-操作系统运行环境" class="headerlink" title="二、 操作系统运行环境"></a>二、 操作系统运行环境</h2><h3 id="2-1-处理器"><a href="#2-1-处理器" class="headerlink" title="2.1 处理器"></a>2.1 处理器</h3><h4 id="2-1-1-处理器的构成与基本工作方式"><a href="#2-1-1-处理器的构成与基本工作方式" class="headerlink" title="2.1.1 处理器的构成与基本工作方式"></a>2.1.1 处理器的构成与基本工作方式</h4><p>处理器一般由运算器、控制器、一系列的寄存器以及高速缓存构成。</p><span id="more"></span><h5 id="2-1-1-1-寄存器"><a href="#2-1-1-1-寄存器" class="headerlink" title="2.1.1.1 寄存器"></a>2.1.1.1 寄存器</h5><p>处理器中通常有两类寄存器：用户可见寄存器、控制和状态寄存器。</p><p>其中用户可见寄存器一般包括：数据寄存器、地址寄存器、条件码寄存器。</p><p>常见的控制和状态寄存器有：程序计数器(Program Counter，PC)、指令寄存器（Instruction Register，IR）、程序状态字（Program Status Word，PSW）。</p><h4 id="2-1-2-特权指令和非特权指令"><a href="#2-1-2-特权指令和非特权指令" class="headerlink" title="2.1.2 特权指令和非特权指令"></a>2.1.2 特权指令和非特权指令</h4><p>特权指令是指那些只能由操作系统使用的指令。用户只能使用非特权指令。</p><p>如果一个用户程序需要使用特权指令，一般将引起一次处理器状态的切换，通过移交处理权给操作系统中一段特殊代码，这个过程称为陷入（Trap）。</p><h4 id="2-1-3-处理器工作状态"><a href="#2-1-3-处理器工作状态" class="headerlink" title="2.1.3 处理器工作状态"></a>2.1.3 处理器工作状态</h4><h5 id="2-1-3-1-分为管态和目态"><a href="#2-1-3-1-分为管态和目态" class="headerlink" title="2.1.3.1 分为管态和目态"></a>2.1.3.1 分为管态和目态</h5><p>处理器处于管态时可以使用全部指令（包括特权和非特权）。目态又称用户态，只有非特权指令能执行。</p><h5 id="2-1-3-2-处理器工作状态的转换"><a href="#2-1-3-2-处理器工作状态的转换" class="headerlink" title="2.1.3.2 处理器工作状态的转换"></a>2.1.3.2 处理器工作状态的转换</h5><ol><li>唯一的途径是通过中断</li><li>通过设置PSW指令（修改程序状态字），实现从操作系统向用户程序的转换。</li></ol><h4 id="2-1-4-程序状态字（PSW）"><a href="#2-1-4-程序状态字（PSW）" class="headerlink" title="2.1.4 程序状态字（PSW）"></a>2.1.4 程序状态字（PSW）</h4><p>用一个专门的寄存器来指示处理器状态，成为程序状态字（PSW）；用程序计数器（PC）这个专门的寄存器来指示下一条要执行的指令。</p><h3 id="2-2-计算机系统硬件部件"><a href="#2-2-计算机系统硬件部件" class="headerlink" title="2.2 计算机系统硬件部件"></a>2.2 计算机系统硬件部件</h3><p>中央处理器（CPU）能直接访问的唯一的存储空间是内存储器，操作系统本身也存储在内存中并运行。</p><h4 id="2-2-1-存储系统"><a href="#2-2-1-存储系统" class="headerlink" title="2.2.1  存储系统"></a>2.2.1  存储系统</h4><h5 id="2-2-1-1-存储器的类型"><a href="#2-2-1-1-存储器的类型" class="headerlink" title="2.2.1.1 存储器的类型"></a>2.2.1.1 存储器的类型</h5><p>可分为两类：一种是读写型的存储器，另一种是只读型的存储器。</p><p>读写型的存储器常被称为随机访问存储器（Random Access Memory，RAM）。RAM主要用作存储随机存取的程序的数据。</p><p>只读存储器（Read-Only Memory，ROM）使用特殊的方法写入数据。有些也可以用特殊的方法擦去，重新写入。</p><p>存储的最小单位成为“二进位”。存储器的最小编址单位是字节，一个字节包含8个二进位，而2个字节一般称为一个字，4个字节称为双字。</p><h5 id="2-2-1-2-存储器的层次结构"><a href="#2-2-1-2-存储器的层次结构" class="headerlink" title="2.2.1.2 存储器的层次结构"></a>2.2.1.2 存储器的层次结构</h5><p>计算机存储系统的设计主要考虑三个问题：容量、速度和成本。</p><p>从整个系统来看，在计算机系统中的层次化的存储体系是由寄存器、高速缓存、内存储器、硬盘存储器、磁带机和光盘存储器等装置构成的，他们的速度如下：寄存器&gt;高速缓存&gt;内存储器&gt;硬盘存储器&gt;磁带机和光盘存储器。</p><h5 id="2-2-1-3-存储器保护"><a href="#2-2-1-3-存储器保护" class="headerlink" title="2.2.1.3 存储器保护"></a>2.2.1.3 存储器保护</h5><p>界地址寄存器是被广泛使用的一种存储保护技术。</p><p>其方法是在处理器种设置一对界限寄存器来存储用户作业在内存中的上限和下限地址，分别为下限寄存器和上限寄存器。每当处理器访问内存时，硬件自动进行比较，判断是否越界。如果未越界，则按此地址访问内存，否则产生程序中断-越界中断或称为存储保护中断。</p><h4 id="2-2-2-I-O部件"><a href="#2-2-2-I-O部件" class="headerlink" title="2.2.2 I/O部件"></a>2.2.2 I/O部件</h4><h5 id="2-1-2-1-I-O结构"><a href="#2-1-2-1-I-O结构" class="headerlink" title="2.1.2.1 I/O结构"></a>2.1.2.1 I/O结构</h5><p>早期的I/O设备控制器连接CPU，CPU定期轮询各个I/O设备控制器，效率太低，已经淘汰了。</p><h5 id="2-2-2-2-通道"><a href="#2-2-2-2-通道" class="headerlink" title="2.2.2.2 通道"></a>2.2.2.2 通道</h5><p>通道对外部设备实行统一的管理，它代替处理器对I/O操作进行控制，从而使处理器和外部设备可以并行工作。所以通道又称为I/O处理器。</p><p>采用通道这种I/O结构的最大优点是，可以实现中央处理器和各种外部设备并行工作。</p><h5 id="2-2-2-3-DMA技术"><a href="#2-2-2-3-DMA技术" class="headerlink" title="2.2.2.3 DMA技术"></a>2.2.2.3 DMA技术</h5><p>直接存储器访问（Direct Memory Access，DMA）技术通过系统总线中的一个独立控制单元-DMA控制器，自动地控制成块数据在内存和I/O单元之间的传送。</p><p>DMA技术大大提高了处理I/O的效能。</p><h5 id="2-2-2-4-缓冲技术"><a href="#2-2-2-4-缓冲技术" class="headerlink" title="2.2.2.4 缓冲技术"></a>2.2.2.4 缓冲技术</h5><p>缓冲技术是用在外部设备与其他硬件部件之间的一种数据暂存技术，通过设置数据的一个存储区域，称为缓冲区。</p><p>采用缓冲技术最根本的原因是，处理器处理数据速度与设备传输数据速度不相匹配，需要缓冲区缓解其间的速度矛盾。为了提高设备利用率，通常使用单个缓冲区是不够的，可以设置双缓冲区，甚至多缓冲区。</p><h4 id="2-2-3-时钟部件"><a href="#2-2-3-时钟部件" class="headerlink" title="2.2.3 时钟部件"></a>2.2.3 时钟部件</h4><p>时钟一般分成硬件时钟和软件时钟。</p><p>硬件提供的时钟比较少，不能满足要求，所以软件时钟是经常需要的。软件时钟与硬件时钟的同步工作由操作系统负责维护。</p><p>时钟的用途可分为绝对时钟和相对时钟。</p><h3 id="2-3-中断机制"><a href="#2-3-中断机制" class="headerlink" title="2.3 中断机制"></a>2.3 中断机制</h3><p>中断机制是操作系统中极为重要的一个部分。</p><p>由于中断机制的实现必须依靠相关的硬件支持，所有硬件中断装置是操作系统运行环境中一个极为重要的组成部分。</p><p>中断的实现是硬件中断装置和相应的中断处理软件共同完成的。</p><h4 id="2-3-1-中断与异常的概念"><a href="#2-3-1-中断与异常的概念" class="headerlink" title="2.3.1 中断与异常的概念"></a>2.3.1 中断与异常的概念</h4><p>中断是所有要打断处理器的正常工作次序，并要求其去处理某一事件的常用手段。</p><p>中断是由外部事件引发的，而异常则是由正在执行的指令引发的。</p><p>典型的中断包括：时钟中断、输入输出（I/O）中断、控制台中断、硬件故障中断。</p><p>典型的异常包括：程序性中断、访管指令异常（要求操作系统提供系统服务）。</p><h4 id="2-3-2-中断系统"><a href="#2-3-2-中断系统" class="headerlink" title="2.3.2 中断系统"></a>2.3.2 中断系统</h4><p>中断系统分为两大组成部分：中断系统中的硬件中断装置和软件中断处理程序。</p><p>在中断逻辑线路中有若干个专门接受中断信号的触发器，每个触发器称为一个中断位，这些触发器的全体称为中断寄存器，所以中断寄存器是由若干个中断位组成的。</p><p>中断请求的响应机制如下。处理器的控制部件中设有中断信号扫描结构，它在每条指令执行周期的最后时刻扫描中断寄存器，有中断则接受硬件中断装置发来的中断向量代号。</p><p>保存中断点的程序执行上下文环境又称保护现场。</p><p>处理器根据中断向量代号查询中断向量表，获得与该中断源相联系的中断处理程序的入口地址，并将PC置成该地址。随后控制权转移到中断处理程序。</p><p>中断信号的处理可以简单地归纳为：接受和响应中断，保护中断断点现场，分析中断向量，调用中断处理程序，中断处理结束恢复现场，原有程序继续执行。</p><h4 id="2-3-3-中断优先级、中断屏蔽与中断嵌套"><a href="#2-3-3-中断优先级、中断屏蔽与中断嵌套" class="headerlink" title="2.3.3 中断优先级、中断屏蔽与中断嵌套"></a>2.3.3 中断优先级、中断屏蔽与中断嵌套</h4><p>现代的微处理器都提供有多级中断系统，中断信号的级别代表了该中断信号是否具有被优先处理的特权，以及特权的大小。</p><p>属于机器故障中断这一类中断信号是不可屏蔽的。</p><p>中断嵌套即中断按照优先度分级，允许优先级较高的中断打断优先级较低的中断处理过程，于是引起中断处理的嵌套。在中断嵌套中，保护现场的次序，与恢复现场的次序正好相反，应采用堆栈作为现场保护区域。</p><h3 id="2-4-系统调用"><a href="#2-4-系统调用" class="headerlink" title="2.4 系统调用"></a>2.4 系统调用</h3><p>为了从操作系统中获得服务，用户程序必须使用系统调用（System Call）。</p><h4 id="2-4-1-系统调用简介"><a href="#2-4-1-系统调用简介" class="headerlink" title="2.4.1 系统调用简介"></a>2.4.1 系统调用简介</h4><p>所谓系统调用，就是用户在程序中调用操作系统所提供的一些子能力。</p><p>系统调用和函数调用的区别：①不同的系统状态，在系统调用中调用程序运行在目态，而被调用程序运行在管态。②状态转换：通过软中断机制由目态转换为管态。③返回问题。优先级高的进程优先执行。④嵌套调用，系统对嵌套深度有一定限制。</p><p>系统调用的分类：①进程控制类系统调用；②文件操作类系统调用；③进程通信类系统调用；④设备管理类系统调用；⑤信息维护类系统调用。</p><p>系统调用命令又称“广义指令”，它扩大了机器的指令系统，增强了处理器功能，为了区别于真实的物理处理器，我们称它为“虚处理器”。</p><p>应用程序接口（Application Programming Interface，API），又称应用编程接口，它是提供给应用程序调用使用的代码。</p><h4 id="2-4-2-系统调用的处理过程"><a href="#2-4-2-系统调用的处理过程" class="headerlink" title="2.4.2 系统调用的处理过程"></a>2.4.2 系统调用的处理过程</h4><p>系统中为控制系统调用服务的机构称为陷入（Trap）或异常处理机构。</p><p>因为是通过陷入来使用系统调用，将CPU由目态切换为管态，所以在管态唯一不能执行的指令就是陷入。</p><p>如何实现用户程序和系统程序之间的参数传递？①陷入指令自带参数，指令长度有限，只能带几个参数。②通过通用寄存器传递参数，UNIX类操作系统常用这个办法。③内存中开辟专用堆栈区传递参数。</p><h3 id="2-5-本章小结"><a href="#2-5-本章小结" class="headerlink" title="2.5 本章小结"></a>2.5 本章小结</h3><p>​        操作系统需要硬件运行环境的支持。可以把计算机系统看成一个层次式的结构，硬件系统位于计算机系统中的底层，软件系统分为系统软件、支撑软件和应用软件三个层次，其中操作系统在软件系统的最下层。</p><p>​        处理器由运算器、控制器以及一系列的寄存器构成。最常见的控制寄存器有程序状态字(PSW)。在多用户或多任务的多道程序设计环境中，指令必须区分成特权指令和非特权指令，特权指令是指只能由操作系统使用的指令，用户只能使用非特权指令。操作系统管理程序运行的状态称为管态，一般用户程序运行时的状态称为目态。</p><p>​        半导体存储器可划分为读写型和只读型的存储器。为了简化管理，以块为最小单位分配存储空间。存储系统主要考虑三个问题，容量、速度和成本。提高存储系统效能的关键在于程序的存储访问局部性原理。操作系统必须对内存中的信息加以严格的保护，存储保护机构是操作系统运行环境中的重要部分。在界地址寄存器方法中，设置了一对界地址寄存器存储作业在内存中的下限和上限地址，访问内存时，硬件将被访问的地址与界限寄存器的内容比较以防止越界。</p><p>​        计算机系统中常使用通道以及直接存储器存取(DMA)等1/O技术。通道独立于中央处理器，它代替处理器对外部设备实行统一的管理，从而使处理器和外部设备并行工作，提高多道程序处理的效率。DMA技术由DMA控制器自动控制成块数据在内存和I/O单元之间的传送，提高了处理I/O的效能。缓冲技术是用以缓解处理器处理数据速度与设备传输数据速度不相匹配矛盾的一种数据暂存技术。</p><p>​        计算机系统中的时钟可分为硬件时钟和软件时钟，以及绝对时钟和相对时钟。时钟可防止系统陷入死循环，实现作业按时间片轮转运行，给出正确的时间信号，定时唤醒事先按确定时间执行的事件，记录事项，等等。</p><p>​        中断是指处理器对系统中或系统外发生的异步事件的响应。中断能充分发挥处理器的使用效率，提高系统的实时能力。中断可划分为强迫性中断和自愿性中断。中断系统包括硬件中断装置和中断处理程序。硬件中断装置接收中断信号，并把中断信号寄存在中断寄存器中；处理器的中断扫描机构在每条指令执行周期的最后时刻扫描中断寄存器。在多级中断中，中断的级别的高低标识了中断的紧急或者重要的程度，处理器接收中断优先级为最高的中断；如果有优先级相当的多个中断信号同时到达，可采用固定的优先数或表格轮转法依次处理。可通过对程序状态字PSW中设置中断屏蔽位的方法，以禁止或者允许对某些类别中断的响应。中断事件的处理需要硬件和软件两方面的配合，共同完成分辨和接收中断信号、保护现场、分析中断原因、调用中断处理程序进行处理、处理完毕恢复现场和原有程序继续执行的整个中断处理过程。如果在中断的处理过程中又发生了中断，将引起中断处理的嵌套。</p><p>​        为了从操作系统中获得服务，用户程序必须使用系统调用，系统调用陷入内核并调用操作系统。系统调用和普通函数调用非常相似，二者区别在于，系统调用由操作系统内核实现，运行于管态；而函数调用由函数库或用户自己提供，运行于目态。系统调用是操作系统提供给编程人员的唯一接口。当用户使用操作系统调用时，通过使用访管指令产生中断，把目态切换成管态，并启用操作系统。访管指令包含对应系统调用的功能号。系统设计人员还必须为实现各种系统调用功能的子程序编造入口地址表，每个入口地址都与相应的系统程序名对应起来。然后，陷入处理程序把陷入指令中所包含的功能号与该入口地址表中的有关项对应起来，从而由系统调用功能号驱动有关子程序执行。当有关工作完成之后，在系统调用后面的指令把控制权返回给用户程序，系统调用的执行结果也要以参数形式返回给用户程序，可通过指令自带、寄存器、内存中专门的堆栈来传递。</p><h2 id="三、-进程与线程"><a href="#三、-进程与线程" class="headerlink" title="三、 进程与线程"></a>三、 进程与线程</h2><p>为了能够从技术上较为准确地描述正在运行、将要运行或者刚刚退出运行的各个程序的执行代码、数据以及所需的资源信息等，人们引进了进程(Process)这个概念。</p><h3 id="3-1-多道程序设计"><a href="#3-1-多道程序设计" class="headerlink" title="3.1 多道程序设计"></a>3.1 多道程序设计</h3><h4 id="3-1-1-程序的顺序执行"><a href="#3-1-1-程序的顺序执行" class="headerlink" title="3.1.1 程序的顺序执行"></a>3.1.1 程序的顺序执行</h4><p>把一个具有独立功能的程序独占处理器直到得到最终结果的过程称为程序的顺序执行。</p><p>程序的顺序执行具有如下特点。1.顺序性；2.封闭性；3.程序执行结果的确定性；4.程序执行结果的可再现性。</p><p>程序的顺序性和封闭性是一切顺序程序所应具有的特性。</p><h4 id="3-1-2-程序的并发执行"><a href="#3-1-2-程序的并发执行" class="headerlink" title="3.1.2 程序的并发执行"></a>3.1.2 程序的并发执行</h4><p>程序并发执行，是指两个或两个以上程序在计算机系统中，同时处于已开始执行且尚未结束的状态。能够参与并发执行的程序称为并发程序。</p><p>程序的并发执行有如下特征。1.在执行期间并发程序相互制约； 2.程序与计算不再一一对应；3.并发程序的执行结果不可再现；4.程序的并行执行与程序的并发执行，这两者存在着差别。前者是指不论从宏观的时间周期上看，还是从微观上看，若干程序确实在同时运行；而程序的并发执行，如果在单处理器系统中，它们在宏观上是同时进行的，但在微观上，这些程序仍然是顺序执行的。</p><h4 id="3-1-3-多道程序设计"><a href="#3-1-3-多道程序设计" class="headerlink" title="3.1.3 多道程序设计"></a>3.1.3 多道程序设计</h4><p>为了提高计算机系统中各种资源的利用效率，缩短进程的周转时间，在现代计算机中广泛采用多道程序技术，使多种硬件资源能并行工作。</p><p>通常采用并行操作技术，使系统的各种硬件资源尽量做到并行工作。</p><p>多道程序设计，就是允许多个程序同时进入内存并运行。多道程序设计是操作系统所采用的最基本、最重要的技术，其根本目的是提高整个系统的效率。</p><p>衡量系统效率的尺度是系统吞吐量。所谓吞吐量是指单位时间内系统所处理进程(程序)的道数(数量)。</p><p>多道程序设计改善了各种资源的使用情况，从而增加了吞吐量，提高了系统效率，但也带来了资源竞争。因此，在实现多道程序设计时，必须协调好资源使用者与被使用资源之间的关系。</p><p>多道程序设计环境具有以下特点。(1)独立性。(2)随机性。 (3)资源共享性。 </p><p>多道程序设计的缺陷：(1)可能延长程序的执行时间。(2)系统效率的提高有一定限度。</p><h3 id="3-2-进程"><a href="#3-2-进程" class="headerlink" title="3.2 进程"></a>3.2 进程</h3><h4 id="3-2-1-进程的定义"><a href="#3-2-1-进程的定义" class="headerlink" title="3.2.1 进程的定义"></a>3.2.1 进程的定义</h4><p>进程是具有一定独立功能的程序在某个数据集合上的一次运行活动，是系统进行资源分配和调度的一个独立单位。</p><p>从操作系统角度来看，可将进程分为系统进程和用户进程两类。</p><p>进程和程序的联系：程序是构成进程的组成部分之一，一个进程的运行目标是执行它所对应的程序。从静态的角度看，进程是由程序、数据和进程控制块(PCB)三部分组成的。</p><p>进程和程序的区别：程序是静态的，而进程是动态的。 进程是程序的一个执行过程。程序的存在是永久的(这里不讨论人为删除程序等行为)。而进程是为了程序的一次执行而暂时存在的。进程有生命周期，有诞生，亦有消亡。 一个进程可以包括若干程序的执行，而一个程序亦可以产生多个进程。</p><p>一个能够被多个用户同时调用的程序称作是“可再入”的程序。现代的操作系统及编译程序都是属于可再入程序，它们能同时被不同用户调用而形成不同的进程。</p><p>进程具有两个基本属性。1.进程是一个可拥有资源的独立单位；2.进程同时又是一个可以独立调度和分派的基本单位。</p><p>进程具有以下特性。(1)并发性；(2)动态性；(3)独立性；(4)交往性；(5)异步性；(6)结构性。</p><p>一个进程由程序、数据和进程控制块三部分组成。</p><h4 id="3-2-2-进程的状态与转换"><a href="#3-2-2-进程的状态与转换" class="headerlink" title="3.2.2 进程的状态与转换"></a>3.2.2 进程的状态与转换</h4><ol><li>三状态进程模型。运行中的进程可以处于以下三种状态之一：运行、就绪、等待。</li><li>五状态进程模型。1、运行状态（Running）；2、就绪状态（Ready）；3、阻塞状态（Blocked）；4、创建状态（New）；5、结束状态（Exit）。</li><li>七状态进程模型。七状态进程模型把原来的就绪状态和阻塞状态进行细分，增加了就绪挂起和阻塞挂起两个状态。是为了进一步区分进程的地址空间位于内存还是外存。</li></ol><table><thead><tr><th align="center">进程之间的转换</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">就绪态→运行态</td><td align="left">进程被调度</td></tr><tr><td align="center">运行态→就绪态</td><td align="left">时间片刻，或CPU被其他高优先级的进程抢占</td></tr><tr><td align="center">运行态→阻塞态</td><td align="left">等待系统资源分配，或等待某事件发生（主动行为）</td></tr><tr><td align="center">阻塞态→就绪态</td><td align="left">资源分配到位，等待的事件发生（被动行为）</td></tr></tbody></table><h4 id="3-2-3-进程控制块"><a href="#3-2-3-进程控制块" class="headerlink" title="3.2.3 进程控制块"></a>3.2.3 进程控制块</h4><p>为了便于系统控制和描述进程的活动过程，在操作系统核心中定义了一个专门的数据结构，称为进程控制块(Process Control Block，PCB)。</p><p>操作系统利用PCB来描述进程的基本情况以及进程的运行变化过程。PCB是进程存在的唯一标志。 </p><p>1.进程控制块（PCB）的内容，可以分成调度信息和现场信息两大部分。调度信息供进程调度时使用，描述了进程当前所处的状况，它包括进程名、进程号、地址空间信息、优先级、当前状态、资源清单、“家族”关系、消息队列指针、进程队列指针和当前打开文件等。 现场信息刻画了进程的运行情况，PCB中的现场信息只记录那些可能会被其他进程改变的寄存器。</p><p>2.进程的组成。进程由程序、数据和进程控制块三部分组成。PCB是进程的“灵魂”，由于进程控制块中保存有进程的地址信息，通过PCB可以得到进程程序的存储位置，也可以找到整个进程。程序和数据是进程的“躯体”，程序部分描述了进程要实现的功能，而数据则是程序操作的对象。</p><p>3.进程控制块（PCB）组织方式。 (1)线性方式；(2)索引方式； (3)链接方式。</p><p>4.进程的队列分成三类。(1)就绪队列 ； (2)等待队列； (3)运行队列。</p><p>5.进程队列的组成。进程队列可以用进程控制块的链接来形成。常用链接的方式有两种：单向链接和双向链接。</p><h4 id="3-2-4-进程控制"><a href="#3-2-4-进程控制" class="headerlink" title="3.2.4 进程控制"></a>3.2.4 进程控制</h4><p>进程控制是指对进程在整个生命周期中各种状态之间的转换进行有效的控制。</p><p>用原语来实现进程控制。所谓原语，是由若干条指令所组成的一个指令序列，用来实现某个特定的操作功能。</p><p>原语是操作系统核心(由一组程序模块所组成的、完成操作系统中基本功能)的一个组成部分。原语必须在管态下执行，并且常驻内存。</p><p>原语的特点是执行期间不允许中断，只能一气呵成。这种不可被中断的操作即原子操作。</p><p>源于采用“关中断指令”和“开中断指令”实现。</p><p>用于进程控制的原语一般有：创建进程、撤销进程、挂起进程、激活进程、阻塞进程、唤醒进程以及改变进程优先级等。</p><h3 id="3-3-线程"><a href="#3-3-线程" class="headerlink" title="3.3 线程"></a>3.3 线程</h3><p>什么是线程？线程是处理器调度和分派的基本单位。</p><p>为什么引入线程？可以增加并发度，减少并发带来的开销。</p><h4 id="3-3-1-进程和线程"><a href="#3-3-1-进程和线程" class="headerlink" title="3.3.1 进程和线程"></a>3.3.1 进程和线程</h4><p>线程具有许多传统进程所具有的特征，故又称轻量级进程（Ligth-Weight Process），而传统进程成为重量级进程（Heavy-Weight Process）。</p><p>进程和线程的区别。①、引入线程的操作系统中，把线程作为调度和分派的基本单位，把进程作为资源分配的基本单位；②线程提高了并发性；③同一个进程中的资源可供它属下的所有线程共享；④进程切换的开销远大于线程切换的开销，线程的切换、同步和通信可以无须操作系统内核的干预。</p><h4 id="3-3-2-线程的实现机制"><a href="#3-3-2-线程的实现机制" class="headerlink" title="3.3.2 线程的实现机制"></a>3.3.2 线程的实现机制</h4><p>用户级线程。用户级线程不依赖于内核，只存在于用户态中，内核也不知道有用户级线程的存在。用户级线程中，线程的调度非常快捷。</p><p>内核级线程。内核级线程依赖于内核，在内核中保留一个线程控制块，系统根据控制块对线程进行控制。缺点是系统调用开销大。</p><h4 id="3-3-3-进程调度"><a href="#3-3-3-进程调度" class="headerlink" title="3.3.3 进程调度"></a>3.3.3 进程调度</h4><h5 id="3-3-3-1-进程调度概念和层次"><a href="#3-3-3-1-进程调度概念和层次" class="headerlink" title="3.3.3.1 进程调度概念和层次"></a>3.3.3.1 进程调度概念和层次</h5><p>进程调度即处理机调度。就是按照某种算法选择一个进程将处理机分配给它。</p><p>分三个层次：①作业调度（高级调度），从后备队列选择合适的作业将其调入内存，并为其创建进程；②内存调度（中级调度），从挂起队列选择合适的进程将其数据调回内存；③进程调度（低级调度），从就绪队列中选择一个进程为其分配处理机。</p><p>三层调度的联系与区别。①作业调度，外存→内存（面向作业），发生频率低；②内存调度，外存→内存（面向进程），发生频率中等；③进程调度，内存→CPU，发生频率高。</p><h5 id="3-3-3-2-进程调度的时机、切换与过程、方式"><a href="#3-3-3-2-进程调度的时机、切换与过程、方式" class="headerlink" title="3.3.3.2 进程调度的时机、切换与过程、方式"></a>3.3.3.2 进程调度的时机、切换与过程、方式</h5><p>什么时候需要进程调度？</p><table><thead><tr><th align="left">主动放弃</th><th align="left">被动放弃</th></tr></thead><tbody><tr><td align="left">进程正常中止</td><td align="left">分给进程的时间片用完</td></tr><tr><td align="left">运行过程中发生异常而中止</td><td align="left">有更紧急的事处理（如I/O中断）</td></tr><tr><td align="left">主动阻塞（如等待I/O）</td><td align="left">有更高优先级的进程进入就绪队列</td></tr></tbody></table><p>进程调度的方式：①抢占式：可由操作系统剥夺当前进程的CPU使用权；②非抢占式：只能由当前运行的进程主动放弃CPU。</p><h5 id="3-3-3-3-调度算法的评价指标"><a href="#3-3-3-3-调度算法的评价指标" class="headerlink" title="3.3.3.3 调度算法的评价指标"></a>3.3.3.3 调度算法的评价指标</h5><ol><li>周转时间（进程从提交到完成时刻的统计时间）=作业完成时间-到达时间。</li><li>带权周转事件=作业周转时间÷作业运行时间</li><li>等待时间=周转时间-运行时间。</li></ol><h5 id="3-3-3-4-进程调度算法"><a href="#3-3-3-4-进程调度算法" class="headerlink" title="3.3.3.4 进程调度算法"></a>3.3.3.4 进程调度算法</h5><p>饥饿（Starvation）的概念，当短进程源源不断进入后备池，长进程将会长时间滞留在后备池中，这种现场称为长进程处于“饥饿”。</p><p>适用于批处理系统的三种算法：</p><p>1、先来先服务算法（First-Come First-Served，FCFS）。非抢占式，不饥饿。</p><p>2、最短进程优先算法（Shortest Job First，SJF），非抢占式；最短剩余时间优先算法（Shortest Remaining Time Next，SRTN），抢占式，可能饥饿。</p><p>3、最高响应比优先算法（Highest Response Rate First，HRRF）。非抢占式，不饥饿。响应比Rp=（等待时间+运行时间）/运行时间=周转时间/运行时间。</p><p>适用于交互式系统的调度算法：</p><p>1、时间片轮转算法（Round-Robin，RR）。将处理器的处理时间划分城一个个时间片，就绪队列中的诸进程轮流运行一个时间片。用于进程调度，抢占式，不饥饿。时间片不能太大也不能太小。优点：公平，响应快，适用于分时操作系统；缺点：有一定开销，不区分任务的紧急程度。</p><p>2、最高优先级算法（Highest Priority First，HPF）。每次将处理器分配给具有最高优先级的就绪程序。既可用于作业调度，也可用于进程调度，抢占、非抢占都有，可能饥饿。</p><p>3、多级反馈队列调度算法。综合了先进先出、时间片轮转和可抢占式最高优先级算法。①设计多级就绪队列，各级队列优先级从高到低，时间片从小到大；②新进程到达时先进入第1级队列，按先进先出（FCFS）原则等待被分配时间片，用完时间片进程还未结束，则进程进入下一级队列队尾。如果此时已经是在最下级的队列，则重新放回该队列队尾；③只有第k级队列为空时，才会为k+1级队头的进程分配时间片用于进程调度。优点：很多，缺点：复杂，可能饥饿。</p><h4 id="3-3-4-系统内核"><a href="#3-3-4-系统内核" class="headerlink" title="3.3.4 系统内核"></a>3.3.4 系统内核</h4><p>为了提高系统运行效率、保护系统的关键部分，一般把操作系统中提供支持系统运行的各种基本操作和基础功能的一组程序模块集中安排，形成系统内核（Kernel）。</p><p>内核只占整个操作系统代码中的一小部分，是最接近裸机的部分。·系统内核本身不是进程，是系统进程和用户进程赖以活动的基础。系统内核常驻内存之中。</p><h3 id="3-4-本章小结"><a href="#3-4-本章小结" class="headerlink" title="3.4 本章小结"></a>3.4 本章小结</h3><p>​    一个具有独立功能的程序独占处理器执行，直到得到最终结果的过程，是程序的顺序执行过程，具有顺序性、封闭性、执行结果的确定性和可再现性。程序并发执行，是指两个或两个以上程序在计算机系统中，同时处于已开始执行且尚未结束的状态。并发执行的程序相互制约，程序与计算不再一一对应，而且执行结果不可再现。多道程序设计是操作系统最基本、最重要的技术之一，多道程序设计改善了各种资源的使用情况，增加了吞吐量，提高了系统效率，但也带来了资源竞争，其特点是独立性、随机性和资源共享性；其缺点是可能延长程序的执行时间，对系统效率的提高有一定有限度。</p><p>​    进程是具有一定独立功能的程序在某个数据集合上的一次运行活动，是系统进行资源分配和调度的一个独立单位。进程和程序既有联系又有区别，从静态的角度看，进程是由程序、数据和进程控制块(PCB)三部分组成的；程序是静态的，而进程是动态的；一个进程可以包括若干程序的执行，而一个程序亦可以产生多个进程；进程具有创建其他进程的功能，从而可以构成进程家族。进程具有并发性、动态性、独立性、交往性和异步性。一个的进程可以处于运行、就绪和等待三种基本状态之中。随着进程自身的进展情况和外界环境条件的动态变化，一个进程的状态可以在三种基本状态中转换。</p><p>​    操作系统利用PCB来描述进程的基本情况以及进程的运行变化过程，PCB是进程存在的唯一标志。PCB是进程的“灵魂”，由于进程控制块中保存有进程的地址信息，通过PCB可以得到进程程序的存储位置，也可以找到整个进程。程序和数据是进程的“躯体”，程序部分描述了进程要实现的功能，而数据则是程序操作的对象。通常，系统中进程队列分成就绪队列、等待队列和运行队列三类。进程队列可以用进程控制块的链接来形成，常用链接的方式有单向链接和双向链接。</p><p>​    进程控制通过进程控制原语对进程在整个生命周期中各种状态之间的转换进行有效的控制。原语是操作系统核心的一个组成部分，必须在管态下执行，并常驻内存。用于进程控制的原语一般有创建进程、撤销进程、挂起进程、激活进程、阻塞进程、唤醒进程以及改变进程优先级等。</p><p>​    线程是进程中的一个实体，是处理器调度和分派的基本单位。线程只拥有少量在运行中必不可少的资源，但共享所属进程所拥有的全部资源。线程可以提高系统内程序并发执行的级别，进一步提高系统效率。 </p><p>​    进程调度的任务是是记录系统中所有进程的执行状况，根据一定的调度算法，从就绪队列中选出一个进程，把处理器分配给它。处理器方式有不可抢占式和抢占式。进程调度算法的任务是对各个就绪的进程进行处理器分配，以达到预定的进程调度目标，算法应该合理、有效，尽可能提高资源利用率，并减少处理器空闲。常用的算法有先来先服务算法、时间片轮转算法、最短进程优先算法、最高响应比优先算法、最高优先级算法和多级队列反馈法等。选择进程调度算法时应该考虑处理器利用率、吞吐量、等待时间和响应时间等因素，并确定优先考虑的指标，在此基础上对各种算法进行评估，选出合适的算法。</p><p>​    为了提高系统运行效率、保护系统的关键部分，把支持系统运行的各种基本操作和基础功能的一组程序模块集中安排，形成系统内核。一般而言，内核提供中断处理、进程同步与互斥、进程调度、控制与通信、存储管理的基本操作以及时钟管理等。内核只占整个操作系统代码中的一小部分，是最接近裸机的部分，内核是进程赖以活动的基础，内核的功能通过执行原语操作来实现。</p><h2 id="四、-进程同步与互斥"><a href="#四、-进程同步与互斥" class="headerlink" title="四、 进程同步与互斥"></a>四、 进程同步与互斥</h2><h3 id="4-1-进程间相互作用"><a href="#4-1-进程间相互作用" class="headerlink" title="4.1 进程间相互作用"></a>4.1 进程间相互作用</h3><p>在逻辑上具有某种联系的进程称为相关进程，在逻辑上没有任何联系的进程称为无关进程。</p><p>在并发程序中共享了公共变量，使得程序的计算结果与并发程序执行的速度有关，这种错误往往与时间有关，称为“与时间有关的错误”。</p><h3 id="4-2-进程的同步与互斥"><a href="#4-2-进程的同步与互斥" class="headerlink" title="4.2 进程的同步与互斥"></a>4.2 进程的同步与互斥</h3><p>进程的同步是指进程之间一种直接的协同工作关系，一些进程相互合作，共同完成一项任务。进程之间的同步也是进程间的一种直接制约关系。能实现进程同步的机制称为“同步机制”。</p><p>我们把一个时间段内只允许一个进程使用的资源称为临界资源。许多物理设备（比如摄像头、打印机）都属于临界资源。此外还有许多变量、数据、内存缓冲区等都属于临界资源。</p><p>对临界资源的访问，必须互斥地进行。互斥，亦称间接制约关系。临界资源一次只为一个进程服务，各进程间只能互斥的使用临界资源，这种关系就是进程的互斥。</p><p>为了实现对临界资源的互斥访问，同时保证系统整体性能，需要遵循以下原则：</p><ol><li>有空让进。临界区空闲时，可以允许一个请求进入临界区的进程立即进入临界区；</li><li>无空等待。当已有进程进入临界区时，其他试图进入临界区的进程必须等待；</li><li>多中择一。当多个进程要求进入临界区，只能让其中一个进入临界区，其他进程必须等待；</li><li>有限等待。对请求访问的进程，应保证能在有限时间内进入临界区（保证不会饥饿）；</li><li>让权等待。当进程不能进入临界区时，应立即释放处理机，防止进程忙等待。</li></ol><h3 id="4-3-信号量及P、V操作"><a href="#4-3-信号量及P、V操作" class="headerlink" title="4.3 信号量及P、V操作"></a>4.3 信号量及P、V操作</h3><p>整型信号量：①用一个整数型变量作为信号量，数值表示某种资源数；②整型信号量与普通整型变量的区别：对信号量只能执行初始化、P、V三种操作；③整型信号量存在的问题：不满足让权等待原则</p><p>记录型信号量（一个整型变量附加一个队列）：①S.value表示某种资源数，S.L指向等待该资源的队列；②P操作中，一定是先S.value–，之后可能需要执行block原语；③V操作中，一定是先S.value++，之后可能需要执行 wakeup 原语；④注意：要能够自己推断在什么条件下需要执行blockA或 wakeup；⑤可以用记录型信号量实现系统资源的“申请“和“释放”；⑥可以用记录型信号量实现进程互斥、进程同步</p><blockquote><p>PV操作由P操作原语和V操作原语组成（原语是不可中断的过程），对信号量进行操作，具体定义如下：</p><p>P（S）：①将信号量S的值减1，即S=S-1；</p><p>②如果S&gt;=0，则该进程继续执行；否则该进程置为等待状态，排入等待队列。</p><p>V（S）：①将信号量S的值加1，即S=S+1；</p><p>②如果S&gt;0，则该进程继续执行；否则释放队列中第一个等待信号量的进程。</p><p>PV操作的意义：我们用信号量及PV操作来实现进程的同步和互斥。PV操作属于进程的低级通信。</p></blockquote><h3 id="4-4-经典的进程同步问题"><a href="#4-4-经典的进程同步问题" class="headerlink" title="4.4 经典的进程同步问题"></a>4.4 经典的进程同步问题</h3><h4 id="4-4-1-多个生产者-消费者问题"><a href="#4-4-1-多个生产者-消费者问题" class="headerlink" title="4.4.1 多个生产者-消费者问题"></a>4.4.1 多个生产者-消费者问题</h4><p>生产者和消费者之间存在同步和互斥关系。</p><p>算法如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//同步问题：1.生产者不能往“满”的缓冲区中放产品，设信号量为empty，初值为k，用于指示缓冲池中空缓冲区数目；2.消费者不能从“空”的缓冲区中取产品。，设置信号量为full，初值为0，用于指示缓冲池中满缓冲区数目。</span><br><span class="hljs-comment">//互斥问题：设信号量为mutex，初值为1，用于实现临界区的互斥。</span><br><br><span class="hljs-comment">//生产者进程P1,P2,....,Pn：</span><br>i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>    生产产品;<br>    P(empty);<br>    p(mutex);<br>    往Buffer[i]中放产品;<br>    i=(i+<span class="hljs-number">1</span>)%k;<br>    V(mutex);<br>    V(full);<br>&#125;;<br><span class="hljs-comment">//消费者进程Q1,Q2,....,Qm：</span><br>j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>    P(full);<br>    p(mutex);<br>    往Buffer[j]中取产品;<br>    j=(j+<span class="hljs-number">1</span>)%k;<br>    V(mutex);<br>    V(full);<br>    消费产品;<br>&#125;; <br>    <br></code></pre></div></td></tr></table></figure><p>互斥的P操作一定要在实现同步的P操作之后。也就是一定要先同步P操作，再互斥P操作，否则可能造成“死锁”。</p><p>P、V问题先画图，遵循以下原则：①互斥：在临界区前后分别P、V；②同步：前V后P。</p><h4 id="4-4-2-读者-写者问题"><a href="#4-4-2-读者-写者问题" class="headerlink" title="4.4.2 读者-写者问题"></a>4.4.2 读者-写者问题</h4><p>一个数据对象可以供多个进程共享。需要遵循以下规定：</p><ol><li>多个进程可以同时读文件。</li><li>任一个进程在对文件进行写时，不允许其他进程对文件进行读或写。</li><li>当有进程正在读文件时不允许任何进程去写文件。</li></ol><p>显然，写者与写者互斥；读者与写者互斥，但第一个读者读了文件后，其他读者也可以跟着读，所以，写者与读者间的互斥变成写者与第一个读者之间的互斥。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//设read_count=0记录当前正在读的读者进程个数；多个读者访问read_count，需要互斥使用互，设信号量为mutex=1；写者互斥信号量write=1；</span><br><span class="hljs-comment">//为了防止读进程源源不断，产生写进程饥饿，设互斥信号量W=1；</span><br><br><span class="hljs-comment">//写者进程：</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>    P(W);<br>    P(write);<br>    写文件;<br>    V(write);<br>    V(W);<br>&#125;<br><br><span class="hljs-comment">//读者进程：</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>    P(W);<br>    P(mutex);<br>    read_count=read_count+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(read_count=<span class="hljs-number">1</span>)<br>            P(write);<br>    V(mutex);<br>    V(W);<br>    读文件;<br>    P(mutex);<br>    read_count=read_count<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(read_count=<span class="hljs-number">0</span>)<br>            V(write);<br>    V(mutex);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-4-3-吸烟者问题"><a href="#4-4-3-吸烟者问题" class="headerlink" title="4.4.3 吸烟者问题"></a>4.4.3 吸烟者问题</h4><p><img src="%5C4.4.3.png" alt="4.4.3"></p><h3 id="4-5-管程"><a href="#4-5-管程" class="headerlink" title="4.5 管程"></a>4.5 管程</h3><p>为什么要引入管程?解决信号量机制易读性差、程序不利于维护和修改、易出错的问题。</p><p>管程的组成：1.共享数据结构；2.对数据结构初始化的语句；3.一组用来访问数据结构的过程（函数）。</p><p>管程的重要特征：1.各外部进程/线程只能通过管程提供的特定“入口”才能访问共享数据；2.每次仅允许一个进程在管程内执行某个内部过程。</p><h3 id="4-6-进程通信"><a href="#4-6-进程通信" class="headerlink" title="4.6 进程通信"></a>4.6 进程通信</h3><p>进程之间的大量通信有三类解决方案：1、共享内存；2.消息机制；3.通过共享文件即管道通信。</p><h3 id="4-7-本章小结"><a href="#4-7-本章小结" class="headerlink" title="4.7 本章小结"></a>4.7 本章小结</h3><p>并发进程相互之间可能是无关的，也可能是相关的。如果一个进程的执行依赖其他进程的进展，或者一个进程的执行可能影响其他进程的执行结果，则这些并发进程是相关的。由于在并发程序中存在共享公共变量，使得程序的计算结果与并发程序执行的时间有关，这种“与时间有关的错误”需要依靠进程的同步处理解决。</p><p>进程同步是指进程之间一种直接的协同工作关系，是一些进程相互合作，共同完成一项任务。在系统中，许多进程需要共享资源，而这些资源往往要求排他性的使用，进程间的这种关系就是进程的互斥。若系统中某些资源一次只允许一个进程使用，则这类资源称为临界资源，而在进程中访问临界资源的程序称为临界区。系统对临界区的使用规则为有空让进、无空等待、多中择一、有限等待和让权等待。</p><p>设信号量为S可取不同的整数值，利用S的取值表示共享资源的使用情况。信号量S的物理含义是某类可用的临界资源。当S&gt;0时，S值的大小表示该类资源可以分配的数量；当S&lt;0时，表示没有可分配的资源数量，其S的绝对值表示排在S信号量的等待队列中进程的数目。对信号量S实施P、V操作的物理含义是，每执行一次P操作，意味着对请求的进程分配到一个资源；每执行一次V操作，意味着进程释放了一个资源。用P、V操作可实现进程之间的互斥和同步。P、V操作在使用时必须成对出现，有一个P操作就一定有一个V操作。P、V操作当为互斥操作时，它们位于同一进程；当为同步操作时，则不在同一进程中出现。生产者——消费者问题和读者——写者问题是进程同步互斥的两个经典例子。</p><p>信号量及P、V操作一种有效处理进程同步互斥问题的机制，但是在使用不正确时会导致一些错误且难以检测出来。为此提出了管程机制。管程定义了一个共享变量的数据结构以及在该数据结构上所执行的一组操作，只有使用这些操作才能修改共享变量。典型的管程设计方案是Hoare管程。</p><p>P、V操作不能承担进程间大量信息的交换任务，解决进程间的大量信息通信的问题有共享内存、消息缓冲通信、信箱通信以及管道通信方式。共享内存方式在相互通信的进程之 间设有一个公共内存区，一组进程向公共内存中写，另一组从公共内存中读，从而实现两组进程间的信息交换。消息缓冲通信方式根据“生产者——消费者”原理，利用内存中公用消息缓冲区实现进程之间的信息交换，为实现消息缓冲通信，要利用发送原语send和接收原语receive。信箱通信方式设立信箱，通过发送信件以及接收回答信件实现进程间通信。管道通信通过连接两个进程之间的一打开的共享文件，进行进程间通信，管道通信的基础是文件系统。</p><h2 id="五、-死锁"><a href="#五、-死锁" class="headerlink" title="五、 死锁"></a>五、 死锁</h2>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令速查备忘手册</title>
    <link href="/2021/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/Linux%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E5%A4%87%E5%BF%98%E6%89%8B%E5%86%8C/"/>
    <url>/2021/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/Linux%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E5%A4%87%E5%BF%98%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本文转载于UP主CodeSheep的<a href="https://www.bilibili.com/video/BV14A411378a">Linux速查备忘手册</a>,记录下来备用，然后特别感谢他的辛苦整理和无私分享！！！</strong></p></blockquote><h2 id="1、关机-重启-注销"><a href="#1、关机-重启-注销" class="headerlink" title="1、关机/重启/注销"></a>1、关机/重启/注销</h2><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>shutdown -h now</td><td>即刻关机</td></tr><tr><td>shutdown -h 10</td><td>10分钟后关机</td></tr><tr><td>shutdown -h 11:00</td><td>11：00关机</td></tr><tr><td>shutdown -h +10</td><td>预定时间关机（10分钟后）</td></tr><tr><td>shutdown -c</td><td>取消指定时间关机</td></tr><tr><td>shutdown -r now</td><td>重启</td></tr><tr><td>shutdown -r 10</td><td>10分钟之后重启</td></tr><tr><td>shutdown -r 11:00</td><td>定时重启</td></tr><tr><td>reboot</td><td>重启</td></tr><tr><td>init 6</td><td>重启</td></tr><tr><td>init 0</td><td>⽴刻关机</td></tr><tr><td>telinit 0</td><td>关机</td></tr><tr><td>poweroff</td><td>⽴刻关机</td></tr><tr><td>halt</td><td>关机</td></tr><tr><td>sync</td><td>buff数据同步到磁盘</td></tr><tr><td>logout</td><td>退出登录Shell</td></tr></tbody></table><h2 id="2、系统信息和性能查看"><a href="#2、系统信息和性能查看" class="headerlink" title="2、系统信息和性能查看"></a>2、系统信息和性能查看</h2><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>uname -a</td><td>查看内核/OS/CPU信息</td></tr><tr><td>uname -r</td><td>查看内核版本</td></tr><tr><td>uname -m</td><td>查看处理器架构</td></tr><tr><td>arch</td><td>查看处理器架构</td></tr><tr><td>hostname</td><td>查看计算机名</td></tr><tr><td>who</td><td>显示当前登录系统的⽤户</td></tr><tr><td>who am i</td><td>显示登录时的⽤户名</td></tr><tr><td>whoami</td><td>显示当前⽤户名</td></tr><tr><td>cat /proc/version</td><td>查看linux版本信息</td></tr><tr><td>cat /proc/cpuinfo</td><td>查看CPU信息</td></tr><tr><td>cat /proc/interrupts</td><td>查看中断</td></tr><tr><td>cat /proc/loadavg</td><td>查看系统负载</td></tr><tr><td>uptime</td><td>查看系统运⾏时间、⽤户数、负载</td></tr><tr><td>env</td><td>查看系统的环境变量</td></tr><tr><td>lsusb -tv</td><td>查看系统USB设备信息</td></tr><tr><td>lspci -tv</td><td>查看系统PCI设备信息</td></tr><tr><td>lsmod</td><td>查看已加载的系统模块</td></tr><tr><td>grep MemTotal /proc/meminfo</td><td>查看内存总量</td></tr><tr><td>grep MemFree /proc/meminfo</td><td>查看空闲内存量</td></tr><tr><td>free -m</td><td>查看内存⽤量和交换区⽤量</td></tr><tr><td>date</td><td>显示系统⽇期时间</td></tr><tr><td>cal 2021</td><td>显示2021⽇历表</td></tr><tr><td>top</td><td>动态显示cpu/内存/进程等情况</td></tr><tr><td>vmstat 1 20</td><td>每1秒采⼀次系统状态，采20次</td></tr><tr><td>iostat</td><td>查看io读写/cpu使⽤情况</td></tr><tr><td>查看io读写/cpu使⽤情况</td><td>查询cpu使⽤情况（1秒⼀次，共10次）</td></tr><tr><td>sar -d 1 10</td><td>查询磁盘性能</td></tr></tbody></table><h2 id="3、磁盘和分区"><a href="#3、磁盘和分区" class="headerlink" title="3、磁盘和分区"></a>3、磁盘和分区</h2><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>fdisk -l</td><td>查看所有磁盘分区</td></tr><tr><td>swapon -s</td><td>查看所有交换分区</td></tr><tr><td>df -h</td><td>查看磁盘使⽤情况及挂载点</td></tr><tr><td>df -hl</td><td>同上</td></tr><tr><td>du -sh /dir</td><td>查看指定某个⽬录的⼤⼩</td></tr><tr><td>du -sk * | sort -rn</td><td>从⾼到低依次显示⽂件和⽬录⼤⼩</td></tr><tr><td>mount /dev/hda2 /mnt/hda2</td><td>挂载hda2盘</td></tr><tr><td>mount -t ntfs /dev/sdc1 /mnt/usbhd1</td><td>指定⽂件系统类型挂载（如ntfs）</td></tr><tr><td>mount -o loop xxx.iso /mnt/cdrom</td><td>挂 载 iso ⽂ 件</td></tr><tr><td>umount -v /dev/sda1</td><td>通过设备名卸载</td></tr><tr><td>umount -v /mnt/mymnt</td><td>通过挂载点卸载</td></tr><tr><td>fuser -km /mnt/hda1</td><td>强制卸载(慎⽤)</td></tr></tbody></table><h2 id="4、⽤户和⽤户组"><a href="#4、⽤户和⽤户组" class="headerlink" title="4、⽤户和⽤户组"></a>4、⽤户和⽤户组</h2><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>useradd username</td><td>创建⽤户</td></tr><tr><td>userdel -r username</td><td>删除⽤户</td></tr><tr><td>usermod -g group_name user_name</td><td>修改⽤户的组</td></tr><tr><td>usermod -aG group_name user_name</td><td>将⽤户添加到组</td></tr><tr><td>usermod -s /bin/ksh -d /home/codepig –g dev username</td><td>修改⽤户username的登录Shell、主⽬录以及⽤户组</td></tr><tr><td>groups test</td><td>查看test⽤户所在的组</td></tr><tr><td>groupadd group_name</td><td>创建⽤户组</td></tr><tr><td>groupdel group_name</td><td>删除⽤户组</td></tr><tr><td>groupmod -n new_name old_name</td><td>重命名⽤户组</td></tr><tr><td>su - user_name</td><td>su - user_name</td></tr><tr><td>passwd</td><td>修改⼝令</td></tr><tr><td>passwd username</td><td>修改某⽤户的⼝令</td></tr><tr><td>w</td><td>查看活动⽤户</td></tr><tr><td>id username</td><td>查看指定⽤户username信息</td></tr><tr><td>last</td><td>查看⽤户登录⽇志</td></tr><tr><td>crontab -l</td><td>查看当前⽤户的计划任务</td></tr><tr><td>cut -d: -f1 /etc/passwd</td><td>查看系统所有⽤户</td></tr><tr><td>cut -d: -f1 /etc/group</td><td>查看系统所有组</td></tr></tbody></table><h2 id="5、⽹络和进程管理"><a href="#5、⽹络和进程管理" class="headerlink" title="5、⽹络和进程管理"></a>5、⽹络和进程管理</h2><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>ifconfig</td><td>查看⽹络接⼝属性</td></tr><tr><td>ifconfig eth0</td><td>查看某⽹卡的配置</td></tr><tr><td>route -n</td><td>查看路由表</td></tr><tr><td>netstat -lntp</td><td>查看所有监听端⼝</td></tr><tr><td>netstat -antp</td><td>查看已经建⽴的TCP连接</td></tr><tr><td>netstat -lutp</td><td>查看TCP/UDP的状态信息</td></tr><tr><td>ifup eth0</td><td>启⽤eth0⽹络设备</td></tr><tr><td>ifdown eth0</td><td>禁⽤eth0⽹络设备</td></tr><tr><td>iptables -L</td><td>查看iptables规则</td></tr><tr><td>ifconfig eth0 192.168.1.1 netmask 255.255.255.0</td><td>配置ip地址</td></tr><tr><td>dhclient eth0</td><td>以dhcp模式启⽤eth0</td></tr><tr><td>route add -net 0/0 gw Gateway_IP</td><td>配置默认⽹关</td></tr><tr><td>route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1</td><td>配置静态路由到达⽹络’192.168.0.0/16’</td></tr><tr><td>route del 0/0 gw Gateway_IP</td><td>删除静态路由</td></tr><tr><td>hostname</td><td>查看主机名</td></tr><tr><td>host <a href="http://www.baidu.com/">www.baidu.com</a></td><td>解析主机名</td></tr><tr><td>nslookup <a href="http://www.baidu.com/">www.baidu.com</a></td><td>查询DNS记录，查看域名解析是否正常</td></tr><tr><td>ps -ef</td><td>查看所有进程</td></tr><tr><td>ps -ef | grep username</td><td>过滤出你需要的进程</td></tr><tr><td>kill -s name</td><td>kill指定名称的进程</td></tr><tr><td>kill -s pid</td><td>kill指定pid的进程</td></tr><tr><td>top</td><td>实时显示进程状态</td></tr><tr><td>vmstat 1 20</td><td>每1秒采⼀次系统状态，采20次</td></tr><tr><td>iostat</td><td>iostat</td></tr><tr><td>sar -u 1 10</td><td>查询cpu使⽤情况（1秒⼀次，共10次）</td></tr><tr><td>sar -d 1 10</td><td>查询磁盘性能</td></tr></tbody></table><h2 id="6、常⻅系统服务命令"><a href="#6、常⻅系统服务命令" class="headerlink" title="6、常⻅系统服务命令"></a>6、常⻅系统服务命令</h2><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>chkconfig –list</td><td>列出系统服务</td></tr><tr><td>service &lt;服务名&gt; status</td><td>查看某个服务</td></tr><tr><td>service &lt;服务名&gt; start</td><td>启动某个服务</td></tr><tr><td>service &lt;服务名&gt; stop</td><td>终⽌某个服务</td></tr><tr><td>service &lt;服务名&gt; restart</td><td>重启某个服务</td></tr><tr><td>systemctl status &lt;服务名&gt;</td><td>查看某个服务</td></tr><tr><td>systemctl start &lt;服务名&gt;</td><td>启动某个服务</td></tr><tr><td>systemctl stop &lt;服务名&gt;</td><td>终⽌某个服务</td></tr><tr><td>systemctl restart &lt;服务名&gt;</td><td>重启某个服务</td></tr><tr><td>systemctl enable &lt;服务名&gt;</td><td>关闭⾃启动</td></tr><tr><td>systemctl disable &lt;服务名&gt;</td><td>关闭⾃启动</td></tr></tbody></table><h2 id="7、⽂件和⽬录操作"><a href="#7、⽂件和⽬录操作" class="headerlink" title="7、⽂件和⽬录操作"></a>7、⽂件和⽬录操作</h2><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>cd &lt;⽬录名&gt;</td><td>进⼊某个⽬录</td></tr><tr><td>cd ..</td><td>回上级⽬录</td></tr><tr><td>cd ../..</td><td>回上两级⽬录</td></tr><tr><td>cd</td><td>进个⼈主⽬录</td></tr><tr><td>cd -</td><td>回上⼀步所在⽬录</td></tr><tr><td>pwd</td><td>显示当前路径</td></tr><tr><td>ls</td><td>查看⽂件⽬录列表</td></tr><tr><td>ls -F</td><td>查看⽬录中内容（显示是⽂件还是⽬录）</td></tr><tr><td>ls -l</td><td>查看⽂件和⽬录的详情列表</td></tr><tr><td>ls -a</td><td>查看隐藏⽂件</td></tr><tr><td>ls -lh</td><td>查看⽂件和⽬录的详情列表（增强⽂件⼤⼩易读性）</td></tr><tr><td>ls -lSr</td><td>查看⽂件和⽬录列表（以⽂件⼤⼩升序查看）</td></tr><tr><td>tree</td><td>查看⽂件和⽬录的树形结构</td></tr><tr><td>mkdir &lt;⽬录名&gt;</td><td>创建⽬录</td></tr><tr><td>mkdir dir1 dir2</td><td>同时创建两个⽬录</td></tr><tr><td>mkdir -p /tmp/dir1/dir2</td><td>创建⽬录树</td></tr><tr><td>rm -f file1</td><td>删除’file1’⽂件</td></tr><tr><td>rmdir dir1</td><td>删除’dir1’⽬录</td></tr><tr><td>rm -rf dir1</td><td>删除’dir1’⽬录和其内容</td></tr><tr><td>rm -rf dir1 dir2</td><td>同时删除两个⽬录及其内容</td></tr><tr><td>mv old_dir new_dir</td><td>重命名/移动⽬录</td></tr><tr><td>cp file1 file2</td><td>复制⽂件</td></tr><tr><td>cp dir/* .</td><td>复制某⽬录下的所有⽂件⾄当前⽬录</td></tr><tr><td>cp -a dir1 dir2</td><td>复制⽬录</td></tr><tr><td>cp -a /tmp/dir1 .</td><td>复制⼀个⽬录⾄当前⽬录</td></tr><tr><td>ln -s file1 link1</td><td>创建指向⽂件/⽬录的软链接</td></tr><tr><td>ln file1 lnk1</td><td>创建指向⽂件/⽬录的物理链接</td></tr><tr><td>find / -name file1</td><td>从跟⽬录开始搜索⽂件/⽬录</td></tr><tr><td>find / -user user1</td><td>搜索⽤户user1的⽂件/⽬录</td></tr><tr><td>find /dir -name *.bin</td><td>在⽬录/dir中搜带有.bin后缀的⽂件</td></tr><tr><td>locate &lt;关键词&gt;</td><td>快速定位⽂件</td></tr><tr><td>locate *.mp4</td><td>寻找.mp4结尾的⽂件</td></tr><tr><td>whereis &lt;关键词&gt;</td><td>显示某⼆进制⽂件/可执⾏⽂件的路径</td></tr><tr><td>which &lt;关键词&gt;</td><td>查找系统⽬录下某的⼆进制⽂件</td></tr><tr><td>chmod ugo+rwx dir1</td><td>设置⽬录所有者(u)、群组(g)及其他⼈(o)的读（r）写(w)执⾏(x)权限</td></tr><tr><td>chmod go-rwx dir1</td><td>移除群组(g)与其他⼈(o)对⽬录的读写执⾏权限</td></tr><tr><td>chown user1 file1</td><td>改变⽂件的所有者属性</td></tr><tr><td>chown -R user1 dir1</td><td>改变⽬录的所有者属性</td></tr><tr><td>chgrp group1 file1</td><td>改变⽂件群组</td></tr><tr><td>chown user1:group1 file1</td><td>改变⽂件的所有⼈和群组</td></tr></tbody></table><h2 id="8、⽂件查看和处理"><a href="#8、⽂件查看和处理" class="headerlink" title="8、⽂件查看和处理"></a>8、⽂件查看和处理</h2><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>cat file1</td><td>查看⽂件内容</td></tr><tr><td>cat -n file1</td><td>查看内容并标示⾏数</td></tr><tr><td>tac file1</td><td>从最后⼀⾏开始反看⽂件内容</td></tr><tr><td>more file1</td><td>more file1</td></tr><tr><td>less file1</td><td>类似more命令，但允许反向操作</td></tr><tr><td>head -2 file1</td><td>查看⽂件前两⾏</td></tr><tr><td>tail -2 file1</td><td>查看⽂件后两⾏</td></tr><tr><td>tail -f /log/msg</td><td>实时查看添加到⽂件中的内容</td></tr><tr><td>grep username hello.txt</td><td>在⽂件hello.txt中查找关键词username</td></tr><tr><td>grep ^sheep hello.txt</td><td>在⽂件hello.txt中查找以sheep开头的内容</td></tr><tr><td>grep [0-9] hello.txt</td><td>选择hello.txt⽂件中所有包含数字的⾏</td></tr><tr><td>sed ‘s/s1/s2/g’ hello.txt</td><td>将hello.txt⽂件中的s1替换成s2</td></tr><tr><td>sed ‘/^$/d’ hello.txt</td><td>从hello.txt⽂件中删除所有空⽩⾏</td></tr><tr><td>sed ‘/ *#/d; /^$/d’ hello.txt</td><td>从hello.txt⽂件中删除所有注释和空⽩⾏</td></tr><tr><td>sed -e ‘1d’ hello.txt</td><td>从⽂件hello.txt 中排除第⼀⾏</td></tr><tr><td>sed -n ‘/s1/p’ hello.txt</td><td>查看只包含关键词”s1”的⾏</td></tr><tr><td>sed -e ‘s/ *$//‘ hello.txt</td><td>删除每⼀⾏最后的空⽩字符</td></tr><tr><td>sed -e ‘s/s1//g’ hello.txt</td><td>从⽂档中只删除词汇s1并保留剩余全部</td></tr><tr><td>sed -n ‘1,5p;5q’ hello.txt</td><td>查看从第⼀⾏到第5⾏内容</td></tr><tr><td>sed -n ‘5p;5q’ hello.txt</td><td>查看第5⾏</td></tr><tr><td>paste file1 file2</td><td>合并两个⽂件或两栏的内容</td></tr><tr><td>paste -d ‘+’ file1 file2</td><td>合并两个⽂件或两栏的内容，中间⽤”+”区分</td></tr><tr><td>sort file1 file2</td><td>排序两个⽂件的内容</td></tr><tr><td>comm -1 file1 file2</td><td>⽐较两个⽂件的内容(去除’file1’所含内容)</td></tr><tr><td>comm -2 file1 file2</td><td>⽐较两个⽂件的内容(去除’file2’所含内容</td></tr><tr><td>comm -3 file1 file2</td><td>⽐较两个⽂件的内容(去除两⽂件共有部分)</td></tr></tbody></table><h2 id="9、打包和解压"><a href="#9、打包和解压" class="headerlink" title="9、打包和解压"></a>9、打包和解压</h2><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>zip xxx.zip file</td><td>压缩⾄zip包</td></tr><tr><td>zip -r xxx.zip file1 file2 dir1</td><td>将多个⽂件+⽬录压成zip包</td></tr><tr><td>unzip xxx.zip</td><td>解压zip包</td></tr><tr><td>tar -cvf xxx.tar file</td><td>创建⾮压缩tar包</td></tr><tr><td>tar -cvf xxx.tar file1 file2 dir1</td><td>将多个⽂件+⽬录打tar包</td></tr><tr><td>tar -tf xxx.tar</td><td>查看tar包的内容</td></tr><tr><td>tar -xvf xxx.tar</td><td>解压tar包</td></tr><tr><td>tar -xvf xxx.tar -C /dir</td><td>将tar包解压⾄指定⽬录</td></tr><tr><td>tar -cvfj xxx.tar.bz2 dir</td><td>创建bz2压缩包</td></tr><tr><td>tar -jxvf xxx.tar.bz2</td><td>解压bz2压缩包</td></tr><tr><td>tar -cvfz xxx.tar.gz dir</td><td>创建gzip压缩包</td></tr><tr><td>tar -zxvf xxx.tar.gz</td><td>解压gzip压缩包</td></tr><tr><td>bunzip2 xxx.bz2</td><td>解压bz2压缩包</td></tr><tr><td>bzip2 filename</td><td>压缩⽂件</td></tr><tr><td>gunzip xxx.gz</td><td>解压gzip压缩包</td></tr><tr><td>gzip filename</td><td>压缩⽂件</td></tr><tr><td>gzip -9 filename</td><td>最⼤程度压缩</td></tr></tbody></table><h2 id="10、RPM包管理命令"><a href="#10、RPM包管理命令" class="headerlink" title="10、RPM包管理命令"></a>10、RPM包管理命令</h2><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>rpm -qa</td><td>查看已安装的rpm包</td></tr><tr><td>rpm -q pkg_name</td><td>查询某个rpm包</td></tr><tr><td>rpm -q –whatprovides xxx</td><td>显示xxx功能是由哪个包提供的</td></tr><tr><td>rpm -q –whatrequires xxx</td><td>显示xxx功能被哪个程序包依赖的</td></tr><tr><td>rpm -q –changelog xxx</td><td>显示xxx包的更改记录</td></tr><tr><td>rpm -qi pkg_name</td><td>查看⼀个包的详细信息</td></tr><tr><td>rpm -qd pkg_name</td><td>查询⼀个包所提供的⽂档</td></tr><tr><td>rpm -qc pkg_name</td><td>查看已安装rpm包提供的配置⽂件</td></tr><tr><td>rpm -ql pkg_name</td><td>查看⼀个包安装了哪些⽂件</td></tr><tr><td>rpm -qf filename</td><td>查看某个⽂件属于哪个包</td></tr><tr><td>rpm -qR pkg_name</td><td>查询包的依赖关系</td></tr><tr><td>rpm -ivh xxx.rpm</td><td>安装rpm包</td></tr><tr><td>rpm -ivh –test xxx.rpm</td><td>测试安装rpm包</td></tr><tr><td>rpm -ivh –nodeps xxx.rpm</td><td>安装rpm包时忽略依赖关系</td></tr><tr><td>rpm -e xxx</td><td>卸载程序包</td></tr><tr><td>rpm -Fvh pkg_name</td><td>升级确定已安装的rpm包</td></tr><tr><td>rpm -Uvh pkg_name</td><td>升级rpm包(若未安装则会安装)</td></tr><tr><td>rpm -V pkg_name</td><td>RPM包详细信息校验</td></tr></tbody></table><h2 id="11、YUM包管理命令"><a href="#11、YUM包管理命令" class="headerlink" title="11、YUM包管理命令"></a>11、YUM包管理命令</h2><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>yum repolist enabled</td><td>显示可⽤的源仓库</td></tr><tr><td>yum search pkg_name</td><td>搜索软件包</td></tr><tr><td>yum install pkg_name</td><td>下载并安装软件包</td></tr><tr><td>yum install –downloadonly pkg_name</td><td>只 下 载 不 安 装</td></tr><tr><td>yum list</td><td>显示所有程序包</td></tr><tr><td>yum list installed</td><td>查看当前系统已安装包</td></tr><tr><td>yum list updates</td><td>查看可以更新的包列表</td></tr><tr><td>yum check-update</td><td>查看可升级的软件包</td></tr><tr><td>yum update</td><td>更新所有软件包</td></tr><tr><td>yum update pkg_name</td><td>升级指定软件包</td></tr><tr><td>yum deplist pkg_name</td><td>列出软件包依赖关系</td></tr><tr><td>yum remove pkg_name</td><td>删除软件包</td></tr><tr><td>yum clean all</td><td>清除缓存</td></tr><tr><td>yum clean packages</td><td>清除缓存的软件包</td></tr><tr><td>yum clean headers</td><td>清除缓存的header</td></tr></tbody></table><h2 id="12、DPKG包管理命令"><a href="#12、DPKG包管理命令" class="headerlink" title="12、DPKG包管理命令"></a>12、DPKG包管理命令</h2><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>dpkg -c xxx.deb</td><td>列出deb包的内容</td></tr><tr><td>dpkg -i xxx.deb</td><td>安装/更新deb包</td></tr><tr><td>dpkg -r pkg_name</td><td>移除deb包</td></tr><tr><td>dpkg -P pkg_name</td><td>移除deb包(不保留配置)</td></tr><tr><td>dpkg -l</td><td>查看系统中已安装deb包</td></tr><tr><td>dpkg -l pkg_name</td><td>显示包的⼤致信息</td></tr><tr><td>dpkg -L pkg_name</td><td>查看deb包安装的⽂件</td></tr><tr><td>dpkg -s pkg_name</td><td>查看包的详细信息</td></tr><tr><td>dpkg –unpack xxx.deb</td><td>解开deb包的内容</td></tr></tbody></table><h2 id="13、APT软件⼯具"><a href="#13、APT软件⼯具" class="headerlink" title="13、APT软件⼯具"></a>13、APT软件⼯具</h2><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>apt-cache search pkg_name</td><td>搜索程序包</td></tr><tr><td>apt-cache show pkg_name</td><td>获取包的概览信息</td></tr><tr><td>apt-get install pkg_name</td><td>安装/升级软件包</td></tr><tr><td>apt-get purge pkg_name</td><td>卸载软件（包括配置）</td></tr><tr><td>apt-get remove pkg_name</td><td>卸载软件（不包括配置）</td></tr><tr><td>apt-get update</td><td>更新包索引信息</td></tr><tr><td>apt-get upgrade</td><td>更新已安装软件包</td></tr><tr><td>apt-get clean</td><td>清理缓存</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Excel_VBA</title>
    <link href="/2021/02/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/VB/Excel-VBA/"/>
    <url>/2021/02/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/VB/Excel-VBA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本教程自用，也适合有一点编程基础的人查阅。<a href="https://www.lanzous.com/i96y7sj">课件地址</a></p></blockquote><h2 id="一：-基础"><a href="#一：-基础" class="headerlink" title="一： 基础"></a>一： 基础</h2><h3 id="1-1-If-And-For"><a href="#1-1-If-And-For" class="headerlink" title="1.1 If And For"></a>1.1 If And For</h3><p>利用if和for来制作工资条和恢复工资表。</p><p>PS：插入会导致行序号变化，可以从表尾插入，就不会导致下面的行序号变化了。<br>删除表或区域也一样，最好倒着删。<br>如：<code>For i = 100 To 1 Step -1</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 制作工资条()<br>Dim i As Integer<br><br>&#x27; 从第3行起，每隔一行插入第一行表头<br>For i = 3 To 200 Step 2<br>    &#x27; 如果i行为空，则跳出循环，Range是单元格<br>    If Range(&quot;A&quot; &amp; i) = &quot;&quot; Then<br>        Exit For<br>    End If<br>    <br>    &#x27; 选择第一行，复制，Rows是行<br>    Rows(&quot;1:1&quot;).Select<br>    Application.CutCopyMode = False<br>    Selection.Copy<br>    &#x27; 选中第i行，插入复制的表头<br>    Range(&quot;A&quot; &amp; i).Select<br>    Selection.Insert shift:=xlDown<br>    <br>Next<br>End Sub<br><br><br>Sub 恢复工资表()<br>Dim i As Integer<br><br>&#x27; 从第3行起，递归删除下一行<br>For i = 3 To 200<br>    &#x27; 如果i行为空，则跳出循环<br>    If Range(&quot;A&quot; &amp; i) = &quot;&quot; Then<br>        Exit For<br>    End If<br>    <br>    Range(&quot;A&quot; &amp; i).Select<br>    Application.CutCopyMode = False<br>    Selection.EntireRow.Delete<br><br>Next<br>End Sub<br></code></pre></div></td></tr></table></figure><h3 id="1-2-操作工作表"><a href="#1-2-操作工作表" class="headerlink" title="1.2 操作工作表"></a>1.2 操作工作表</h3><h4 id="1-2-1-Add"><a href="#1-2-1-Add" class="headerlink" title="1.2.1 Add"></a>1.2.1 Add</h4><p><code>Sheets(Sheets.Count)</code>获取最后一张表</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 建12个月的表()<br>Dim i As Integer<br><br>For i = 1 To 12<br>    &#x27; 在最后一张表后面新建一张表<br>    Sheets.Add after:=Sheets(Sheets.Count)<br>    &#x27; 最后一张表命名为i月<br>    Sheets(Sheets.Count).Name = i &amp; &quot;月&quot;<br>Next<br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="1-2-2-Delete"><a href="#1-2-2-Delete" class="headerlink" title="1.2.2 Delete"></a>1.2.2 Delete</h4><p>删除表记得加上取消提示框和恢复提示框。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 删除12个月的表()<br>Dim i As Integer<br><br>&#x27;取消提示框<br>Excel.Application.DisplayAlerts = False<br><br>For i = 1 To 12<br>    &#x27; 删除第一张，后面表就变为sheets(1)<br>    Sheets(2).Delete<br>Next<br><br>&#x27; 恢复提示框<br>Excel.Application.DisplayAlerts = True<br><br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="1-2-3-Copy"><a href="#1-2-3-Copy" class="headerlink" title="1.2.3 Copy"></a>1.2.3 Copy</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 复制表()<br>Sheets(1).Copy after:=Sheets(Sheets.Count)<br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="1-2-4-模板创建日报表"><a href="#1-2-4-模板创建日报表" class="headerlink" title="1.2.4 模板创建日报表"></a>1.2.4 模板创建日报表</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 模板创建31天日报表()<br>Dim i As Integer<br><br>For i = 1 To 31<br>    &#x27; 复制第一张表<br>    Sheets(1).Copy after:=Sheets(Sheets.Count)<br>    &#x27; 最后一张表命名为5月i日<br>    Sheets(Sheets.Count).Name = &quot;5月&quot; &amp; i &amp; &quot;日&quot;<br>    &#x27; 表内的e5单元格赋予内容<br>    Sheets(Sheets.Count).Range(&quot;e5&quot;) = &quot;2016-5-&quot; &amp; i<br>Next<br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="1-2-5-多表汇总"><a href="#1-2-5-多表汇总" class="headerlink" title="1.2.5 多表汇总"></a>1.2.5 多表汇总</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 多表汇总()<br>Dim i As Integer<br>&#x27; 把第一张表的B列设为日期<br>Columns(&quot;B:B&quot;).Select<br>Selection.NumberFormatLocal = &quot;yyyy-m-d&quot;<br><br>&#x27; 从第二张表开始汇总<br>For i = 2 To Sheets.Count<br>    &#x27; 把下表的e5内容存到表1的b10单元格内<br>    Sheets(1).Range(&quot;b&quot; &amp; i + 8) = Sheets(i).Range(&quot;e5&quot;)<br>    Sheets(1).Range(&quot;c&quot; &amp; i + 8) = Sheets(i).Range(&quot;e6&quot;)<br>    Sheets(1).Range(&quot;d&quot; &amp; i + 8) = Sheets(i).Range(&quot;e44&quot;)<br>Next<br>End Sub<br></code></pre></div></td></tr></table></figure><h3 id="1-3-操作工作簿"><a href="#1-3-操作工作簿" class="headerlink" title="1.3 操作工作簿"></a>1.3 操作工作簿</h3><h4 id="1-3-1-For-Each"><a href="#1-3-1-For-Each" class="headerlink" title="1.3.1 For Each"></a>1.3.1 For Each</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 删除工作簿()<br>Dim 表 As Worksheet<br>&#x27; 不提示警告框<br>Application.DisplayAlerts = False<br>For Each 表 In Sheets<br>    If 表.Name &lt;&gt; &quot;决不能删&quot; Then<br>        表.Delete<br>    End If<br>Next<br>Application.DisplayAlerts = True<br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="1-3-2-操作文件"><a href="#1-3-2-操作文件" class="headerlink" title="1.3.2 操作文件"></a>1.3.2 操作文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 操作文件()<br>&#x27; 关闭屏幕更新，即操作文件时不闪现文件<br>Application.ScreenUpdating = False<br>Application.DisplayAlerts = False<br>&#x27; 新建工作簿<br>Workbooks.Add<br>&#x27; 活动工作簿的第一张表的a2格写入这是我自动创建的<br>ActiveWorkbook.Sheets(1).Range(&quot;a2&quot;) = &quot;这是我自动创建的&quot;<br>&#x27; 活动工作簿另存为d:\temp\1.xlsx<br>ActiveWorkbook.SaveAs Filename:=&quot;d:\temp\1.xlsx&quot;<br>&#x27; 关闭工作簿<br>ActiveWorkbook.Close<br>&#x27; 打开文件d:\temp\1.xlsx<br>Workbooks.Open Filename:=&quot;d:\temp\1.xlsx&quot;<br>&#x27; 活动工作簿的第一张表的a1格写入到此一游<br>ActiveWorkbook.Sheets(1).Range(&quot;a1&quot;) = &quot;到此一游&quot;<br>ActiveWorkbook.Save<br>ActiveWorkbook.Close<br>Application.ScreenUpdating = True<br>Application.DisplayAlerts = True<br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="1-3-3-将多个表拆分并另存为多个工作簿"><a href="#1-3-3-将多个表拆分并另存为多个工作簿" class="headerlink" title="1.3.3 将多个表拆分并另存为多个工作簿"></a>1.3.3 将多个表拆分并另存为多个工作簿</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 将多个表拆分并另存为多个工作簿()<br>Dim sht As Worksheet<br>&#x27; 遍历每一张表<br>For Each sht In Sheets<br>    &#x27; 表.copy默认复制当前活动表并新建为一个新工作簿的新表<br>    sht.Copy<br>    &#x27; 文件名保存为表名<br>    ActiveWorkbook.SaveAs Filename:=&quot;d:\temp\&quot; &amp; sht.Name &amp; &quot;.xlsx&quot;<br>    ActiveWorkbook.Close<br>Next<br>End Sub<br></code></pre></div></td></tr></table></figure><h3 id="1-4-操作单元格对象"><a href="#1-4-操作单元格对象" class="headerlink" title="1.4 操作单元格对象"></a>1.4 操作单元格对象</h3><p>基本函数说明：</p><ol><li><code>Cells(10,2)</code> 等同于 <code>B10</code>单元格 等同于 <code>Range(&quot;b10&quot;)</code></li><li><code>Range(&quot;a1&quot;).Offset(5,1)</code> 等同于取 <code>a1</code> 单元格下5行、右1列，即 <code>b6</code></li><li><code>Range(&quot;a100&quot;).End(xlUp)</code> 等同于取 <code>A</code>列<strong>从下往上</strong>第一个有数据的单元格(若<code>a100</code>本身有数据，则取<code>a100</code>从下往上最后第一个有数据的单元格)</li><li><code>Range(&quot;a10&quot;).EntireRow.Select</code> 等同于选中<code>a10</code>所在单元格那一行</li><li><code>Range(&quot;a2&quot;).Resize(2, 3).Select</code> 等同于选中<code>a2:c3</code>，即选中2行、3列</li><li><code>Range(&quot;a1&quot;).Copy Range(&quot;b1&quot;)</code> 等同于把<code>a1</code>单元格复制到<code>b1</code>单元格</li></ol><h4 id="1-4-1-实际应用1"><a href="#1-4-1-实际应用1" class="headerlink" title="1.4.1 实际应用1"></a>1.4.1 实际应用1</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 合并单元格()<br>Dim rng As Range<br>&#x27; 合并a1、a2；b1、b2；c1、c2单元格<br>For Each rng In Range(&quot;a1:c1&quot;)<br>    rng.Resize(2, 1).Merge<br>Next<br>End Sub<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 自动填充()<br>&#x27; 定义rng为单元格格式<br>Dim rng As Range<br>&#x27; 遍历b2到a列最后一个不为空的单元格的那一行<br>For Each rng In Range(&quot;b2:b&quot; &amp; Range(&quot;a65535&quot;).End(xlUp).Row)<br>    &#x27; 若本单元格左边的一格内为男，则本单元格的值为先生<br>    If rng.Offset(0, -1) = &quot;男&quot; Then<br>        rng.Value = &quot;先生&quot;<br>    Else<br>        rng.Value = &quot;0&quot;<br>    End If<br>Next<br>End Sub<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 清空内容()<br>For i = 2 To Sheets.Count<br>    &#x27; 清除内容不清除格式<br>    Sheets(i).Range(&quot;a2:z10000&quot;).ClearContents<br>Next<br>End Sub<br><br>Sub 拆分表初版()<br>Dim i, j, k As Integer<br>&#x27; 调用函数 清空内容()<br>Call 清空内容<br>&#x27; 遍历所有工作表<br>For i = 2 To Sheets.Count<br>    &#x27; 遍历表1的第二行到最后一行<br>    For j = 2 To Sheet1.Range(&quot;a65535&quot;).End(xlUp).Row<br>        &#x27; 若表1的d列值等于表i的名字<br>        If Sheet1.Range(&quot;d&quot; &amp; j) = Sheets(i).Name Then<br>            &#x27; 表i的单元格最后一行有数据的行号为k<br>            k = Sheets(i).Range(&quot;a65535&quot;).End(xlUp).Row<br>            &#x27; 表1的第j行整行复制到表i的k行的下一行<br>            Sheet1.Range(&quot;d&quot; &amp; j).EntireRow.Copy Sheets(i).Range(&quot;a&quot; &amp; k + 1)<br>        End If<br>    Next<br>Next<br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="1-4-2-一张表拆分为多张表"><a href="#1-4-2-一张表拆分为多张表" class="headerlink" title="1.4.2 一张表拆分为多张表"></a>1.4.2 一张表拆分为多张表</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 用筛选来拆分表()<br>Dim i As Integer<br>For i = 2 To Sheets.Count<br>    &#x27; 表1的所有行，筛选出第4列D，数据为表名。PS：Criteria1后面是a一<br>    Sheets(1).Range(&quot;a1:f1048&quot;).AutoFilter Field:=4, Criteria1:=Sheets(i).Name<br>    &#x27; 筛选出的表1的所有单元格复制到对应表<br>    Sheet1.Range(&quot;a1:f1048&quot;).Copy Sheets(i).Range(&quot;a1&quot;)<br>Next<br>&#x27; 关闭筛选<br>Sheet1.Range(&quot;a1:f1048&quot;).AutoFilter<br>End Sub<br></code></pre></div></td></tr></table></figure><p>基本函数：</p><ol><li><code>MsgBox &quot;我是弹窗！&quot;</code> 弹出提示框</li><li><code>InputBox &quot;你多大了？&quot;</code> 弹出输入框</li></ol><p><strong>应用：将一张表的指定列的所有不同的数据拆分为不同的表。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 未重名则新建表(列, sht0)<br>Dim sht As Worksheet<br>&#x27; 默认k=0<br>Dim i, k As Integer<br>Dim irow As Integer &#x27; irow为共多少行<br>irow = sht0.Range(&quot;a65536&quot;).End(xlUp).Row<br>For i = 2 To irow<br>    k = 0<br>    For Each sht In Sheets<br>        &#x27; 遍历表，如果表重名，则k=1，那么不新建<br>        If sht.Name = sht0.Cells(i, 列) Then<br>            k = 1<br>        End If<br>    Next<br>    If k = 0 Then &#x27; 没重名<br>        &#x27; 在最后一张表后面新建表并定义表名<br>         Sheets.Add(after:=Sheets(Sheets.Count)).Name = sht0.Cells(i, 列)<br>    End If<br>Next<br>End Sub<br><br><br>Sub 拷贝数据(列, sht0)<br>Dim i As Integer<br>Dim irow As Integer &#x27; irow为共多少行<br>irow = sht0.Range(&quot;a65536&quot;).End(xlUp).Row<br>Call 未重名则新建表(列, sht0)<br>For i = 2 To Sheets.Count<br>    &#x27; 表1的所有行，筛选出第4列D，数据为表名。PS：Criteria1后面是a一<br>    sht0.Range(&quot;a1:z&quot; &amp; irow).AutoFilter Field:=列, Criteria1:=Sheets(i).Name<br>    &#x27; 筛选出的表1的所有行复制到对应表<br>    sht0.Range(&quot;a1:z&quot; &amp; irow).Copy Sheets(i).Range(&quot;a1&quot;)<br>Next<br>&#x27; 关闭筛选<br>sht0.Range(&quot;a1:z&quot; &amp; irow).AutoFilter<br>End Sub<br><br><br>Sub 拆分数据表完成版()<br>Dim sht, sht0 As Worksheet<br>&#x27; 将一张表的指定列的所有不同的数据拆分为不同的表<br>Dim i<br>i = InputBox(&quot;此操作会删除除第一张表外的所有表，如不需要请关闭。那么请问你要拆分第几列(输入数字)？&quot;)<br><br>&#x27; 如果i不是数字或不在范围内，则终止，防止出错<br>If IsNumeric(i) = False Or i &lt; 1 Or i &gt; 20 Then<br>    MsgBox (&quot;请输入正确的数字，如4。&quot;)<br>    Exit Sub<br>End If<br><br>&#x27; 将i转换为整型<br>i = Val(i)<br><br>&#x27; 先备份当前活动表数据到sht0，防止误删<br>Set sht0 = ActiveSheet<br><br>Application.DisplayAlerts = False &#x27;关闭提示<br>&#x27; 删除除了第一张表外的所有表<br>If Sheets.Count &gt; 1 Then<br>    For Each sht In Sheets<br>        If sht.Name &lt;&gt; sht0.Name Then<br>            sht.Delete<br>        End If<br>    Next<br>End If<br><br>Call 拷贝数据(i, sht0)<br>Application.DisplayAlerts = True &#x27;打开提示<br>sht0.Select<br>End Sub<br></code></pre></div></td></tr></table></figure><h3 id="1-5-事件与典型应用案例"><a href="#1-5-事件与典型应用案例" class="headerlink" title="1.5 事件与典型应用案例"></a>1.5 事件与典型应用案例</h3><h4 id="1-5-1-With与选项卡"><a href="#1-5-1-With与选项卡" class="headerlink" title="1.5.1 With与选项卡"></a>1.5.1 With与选项卡</h4><p>With可以用于设置单元格格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">&#x27; 对齐方式选项卡<br>With Selection<br>        .HorizontalAlignment = xlRight  &#x27;水平对齐方式<br>        .VerticalAlignment = xlCenter   &#x27;垂直对齐方式<br>        .WrapText = False               &#x27;自动换行<br>        .Orientation = 0                &#x27;文字方向<br>        .AddIndent = False              &#x27;缩进<br>        .IndentLevel = 0                &#x27;缩进量<br>        .ShrinkToFit = False            &#x27;缩小字体填充<br>        .ReadingOrder = xlContext       &#x27;文字方向<br>        .MergeCells = False             &#x27;合并单元格<br>    End With<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">&#x27; 字体格式选项卡<br> With Selection.Font<br>        .Name = &quot;华文琥珀&quot;                  &#x27;字体<br>        .Size = 9                           &#x27;字号<br>        .Strikethrough = False              &#x27;删除线<br>        .Superscript = False                &#x27;上标<br>        .Subscript = False                  &#x27;下标<br>        .OutlineFont = False                &#x27;大纲字体<br>        .Shadow = False                     &#x27;阴影<br>        .Underline = xlUnderlineStyleNone   &#x27;下划线<br>        .ColorIndex = xlAutomatic           &#x27;字体颜色<br>        .TintAndShade = 0                   &#x27;颜色变深或变浅<br>        .ThemeFont = xlThemeFontNone        &#x27;主题字体<br>    End With<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">&#x27; 填充色选项卡<br> With Selection.Interior<br>        .Pattern = xlSolid                      &#x27;图案样式<br>        .PatternColorIndex = xlAutomatic        &#x27;图案颜色<br>        .ThemeColor = xlThemeColorDark1         &#x27;主体颜色<br>        .TintAndShade = -4.99893185216834E-02   &#x27;颜色变深或变浅<br>        .Color = 65535                          &#x27;填充色<br>        .PatternTintAndShade = 0                &#x27;对象的淡色和底纹图案<br>    End With<br></code></pre></div></td></tr></table></figure><h4 id="1-5-2-事件"><a href="#1-5-2-事件" class="headerlink" title="1.5.2 事件"></a>1.5.2 事件</h4><p>在VBA中，要手动更改单元格或单元格值范围时，可以触发事件驱动的编程。<a href="https://yiibai.com/vba/vba_events.html">点击查看如何触发事件</a></p><p><strong>常见的事件如下：</strong></p><p>工作簿事件|说明<br>|-|-|<br>Activate|激活工作薄时<br>AddinInstall|当工作簿作为加载宏安装时<br>AddinUninstall|工作簿作为加载宏卸载时<br>BeforeClose|关闭工作薄前<br>BeforePrint|打印工作薄（或其中任何内容）之前<br>BeforeSave|保存工作薄前<br>Deactivate|工作簿从活动状态转为非活动状态时<br>NewSheet|在工作簿中新建工作表时<br>Open|打开工作簿时<br>PivotTableCloseConnection|在数据透视表关闭与其数据源的连接之后<br>PivotTableOpenConnection|在数据透视表打开与其数据源的连接之后<br>SheetActivate|激活任何一张表时<br>SheetBeforeDoubleClick|双击任何工作表时<br>SheetBeforeRightClick|鼠标右键单击任一工作表时<br>SheetCalculate|工作表重新计算时<br>SheetChange|更改工作表中的单元格时<br>SheetDeactivate|任一工作表由活动状态转为非活动状态时<br>SheetFollowHyperlink|单击 Microsoft Excel中的任意超链接时<br>SheetPivotTableUpdate|数据透视表的工作表更新之后<br>SheetSelectionChange|工作簿中的数据透视表更新之后<br>WindowActivate|工作簿的窗口激活时<br>WindowDeactivate|工作簿的窗口变为非活动状态时<br>WindowResize|工作簿窗口调整大小时</p><hr><table><thead><tr><th>工作表事件</th><th>说明</th></tr></thead><tbody><tr><td>Activate</td><td>激活工作表时</td></tr><tr><td>Deactivate</td><td>工作表从活动状态转为非活动状态时</td></tr><tr><td>BeforeDoubleClick</td><td>双击工作表前</td></tr><tr><td>BeforeRightClick</td><td>右键单击工作表时</td></tr><tr><td>Calculate</td><td>对工作表进行重新计算之后</td></tr><tr><td>Change</td><td>更改工作表中的单元格，或外部链接引起单元格变化时</td></tr><tr><td>FollowHyperlink</td><td>单击工作表上的任意超链接时</td></tr><tr><td>PivotTableUpdate</td><td>在工作簿中的数据透视表更新之后</td></tr><tr><td>SelectionChange</td><td>工作表上的选定区域发生改变时</td></tr></tbody></table><hr><h4 id="1-5-3-聚光灯、自动筛选、自动备份"><a href="#1-5-3-聚光灯、自动筛选、自动备份" class="headerlink" title="1.5.3 聚光灯、自动筛选、自动备份"></a>1.5.3 聚光灯、自动筛选、自动备份</h4><p><strong>聚光灯效果。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">&#x27; 在sheet1事件SelectionChange里输入如下代码<br>Private Sub Worksheet_SelectionChange(ByVal Target As Range)<br>Call 聚光灯<br>End Sub<br><br>Sub 聚光灯()<br>&#x27; 整表无填充色<br>Cells.Interior.Pattern = xlNone<br>&#x27; 选中的单元格所在行改为黄色<br>Selection.EntireRow.Interior.Color = 65535<br>End Sub<br></code></pre></div></td></tr></table></figure><p><strong>自动筛选。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Private Sub Worksheet_Change(ByVal Target As Range)<br>&#x27; 关闭事件触发。事件里一般都要加上，否则一change就触发，会死机<br>Application.EnableEvents = False<br>Call 输入条件自动完成筛选<br>&#x27; 打开事件触发<br>Application.EnableEvents = True<br>End Sub<br><br>Sub 输入条件自动完成筛选()<br>&#x27;清除掉L列及往后的数据<br>Sheets(1).Range(&quot;L1:Q&quot; &amp; Sheets(1).Range(&quot;a65536&quot;).End(xlUp).Row).Clear<br>&#x27; 筛选表1的第4列，关键词为i2的值<br>Sheets(1).Range(&quot;a1:f&quot; &amp; Sheets(1).Range(&quot;a65536&quot;).End(xlUp).Row).AutoFilter Field:=4, Criteria1:=Range(&quot;i2&quot;)<br>Sheets(1).Range(&quot;a1:f&quot; &amp; Sheets(1).Range(&quot;a65536&quot;).End(xlUp).Row).Copy Range(&quot;L1&quot;)<br>&#x27; 关闭筛选<br>Sheets(1).Range(&quot;a1:f&quot; &amp; Sheets(1).Range(&quot;a65536&quot;).End(xlUp).Row).AutoFilter<br>End Sub<br></code></pre></div></td></tr></table></figure><p><strong>自动备份。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">&#x27; 在工作薄触发事件中<br>Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)<br>&#x27; Format把日期时间数据转换成一个字符串<br>ThisWorkbook.SaveCopyAs &quot;d:\temp\&quot; &amp; Format(Now(), &quot;yyyymmddhhmmss&quot;) &amp; &quot;.xls&quot;<br>End Sub<br></code></pre></div></td></tr></table></figure><h3 id="1-6-VBA中使用公式"><a href="#1-6-VBA中使用公式" class="headerlink" title="1.6 VBA中使用公式"></a>1.6 VBA中使用公式</h3><h4 id="1-6-1-统计人数"><a href="#1-6-1-统计人数" class="headerlink" title="1.6.1 统计人数"></a>1.6.1 统计人数</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 统计人数()<br>Dim i, k, l, m As Integer<br>&#x27; 遍历工作表<br>For i = 2 To Sheets.Count<br>    &#x27; 统计所有工作表中A列中有数据的个数<br>    k = k + Application.WorksheetFunction.CountA(Sheets(i).Range(&quot;a:a&quot;)) - 1<br>    &#x27; 统计所有表中F列为“男”的个数<br>    l = l + Application.WorksheetFunction.CountIf(Sheets(i).Range(&quot;f:f&quot;), &quot;男&quot;)<br>    m = m + Application.WorksheetFunction.CountIf(Sheets(i).Range(&quot;f:f&quot;), &quot;女&quot;)<br>Next<br><br>Sheets(1).Range(&quot;d26&quot;) = k<br>Sheets(1).Range(&quot;d27&quot;) = l<br>Sheets(1).Range(&quot;d28&quot;) = m<br><br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="1-6-2-跨表查询"><a href="#1-6-2-跨表查询" class="headerlink" title="1.6.2 跨表查询"></a>1.6.2 跨表查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 跨表查询数据()<br>&#x27; 运行错误，则继续执行出错语句的下面的那句<br>On Error Resume Next<br><br>&#x27; 清除d14的姓名数据<br>Sheets(1).Range(&quot;d14&quot;).ClearContents<br><br>Dim i As Integer<br>For i = 2 To Sheets.Count<br>    Sheets(1).Range(&quot;d14&quot;) = Application.WorksheetFunction.VLookup(Sheets(1).Range(&quot;d9&quot;), Sheets(i).Range(&quot;a:h&quot;), 5, 0)<br>    Sheets(1).Range(&quot;d16&quot;) = Application.WorksheetFunction.VLookup(Sheets(1).Range(&quot;d9&quot;), Sheets(i).Range(&quot;a:h&quot;), 6, 0)<br>    Sheets(1).Range(&quot;d18&quot;) = Application.WorksheetFunction.VLookup(Sheets(1).Range(&quot;d9&quot;), Sheets(i).Range(&quot;a:h&quot;), 3, 0)<br>    Sheets(1).Range(&quot;d20&quot;) = Application.WorksheetFunction.VLookup(Sheets(1).Range(&quot;d9&quot;), Sheets(i).Range(&quot;a:h&quot;), 8, 0)<br>    Sheets(1).Range(&quot;d22&quot;) = Sheets(i).Name<br>    &#x27; 如果查询到数据，则跳出循环<br>    If Sheets(1).Range(&quot;d14&quot;) &lt;&gt; &quot;&quot; Then<br>        Exit For<br>    End If<br>Next<br><br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="1-6-3-Instr-和-Split"><a href="#1-6-3-Instr-和-Split" class="headerlink" title="1.6.3 Instr 和 Split"></a>1.6.3 Instr 和 Split</h4><p>Instr用于寻找指定字符；<br>Split用于切片字符串，分割为字符数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 寻找字符()<br>&#x27; 寻找@字符<br>Range(&quot;a1&quot;).Value = VBA.Strings.InStr(Range(&quot;a2&quot;), &quot;@&quot;)<br>End Sub<br><br><br>Sub 切片()<br>&#x27; 通过指定分隔符，把一个字符串分割成字符串数组，下标从0开始<br>Range(&quot;b2&quot;) = Split(Range(&quot;a2&quot;), &quot;-&quot;)(1)<br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="1-6-4-常用的几类VBA函数"><a href="#1-6-4-常用的几类VBA函数" class="headerlink" title="1.6.4 常用的几类VBA函数"></a>1.6.4 常用的几类VBA函数</h4><p><code>With VBA</code><br>函数|说明<br>-|-<br>.Strings|文本函数<br>.Math|数学函数<br>.DateTime|日期时间<br>.FileSystem|文件信息<br>.Financial|财务函数<br>.Information|信息函数<br>.Interaction|交互函数<br><code>End With</code></p><hr><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 转换日期()<br>&#x27; 将20200102转换为2020-01-02<br>With Sheets(1)<br>    For i = 2 To .Range(&quot;a65536&quot;).End(xlUp).Row<br>        &#x27; DateSerial函数返回包含指定的年、月、日的变量<br>        .Range(&quot;b&quot; &amp; i) = DateSerial(Left(.Range(&quot;a&quot; &amp; i), 4), Mid(.Range(&quot;a&quot; &amp; i), 5, 2), Right(.Range(&quot;a&quot; &amp; i), 2))<br>    Next<br>End With<br>End Sub<br><br><br>Sub 身份证号提取生日()<br>With Sheets(2)<br>    For i = 2 To .Range(&quot;a65536&quot;).End(xlUp).Row<br>        .Range(&quot;b&quot; &amp; i) = DateSerial(Mid(.Range(&quot;a&quot; &amp; i), 7, 4), Mid(.Range(&quot;a&quot; &amp; i), 11, 2), Mid(.Range(&quot;a&quot; &amp; i), 13, 2))<br>    Next<br>End With<br>End Sub<br></code></pre></div></td></tr></table></figure><h3 id="1-7-其他"><a href="#1-7-其他" class="headerlink" title="1.7 其他"></a>1.7 其他</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 批量创建文件夹()<br>On Error Resume Next<br>Dim path As String<br>&#x27; //路径是当前文件所在路径的temp文件夹下<br>myPath = ThisWorkbook.path &amp; &quot;\temp\&quot;<br>If Dir(myPath) = &quot;&quot; Then         &#x27;// 文件夹不存在就建立<br>    MkDir mypath<br>End If<br>For i = 1 To Range(&quot;A65536&quot;).End(xlUp).Row<br>    myFilename = myPath &amp; Range(&quot;A&quot; &amp; i).Value  &#x27;//A列<br>    If Dir(Name) = &quot;&quot; Then          &#x27;// 文件夹不存在就建立<br>        VBA.MkDir (myFilename)<br>    End If<br>Next<br>End Sub<br></code></pre></div></td></tr></table></figure><h2 id="二：-进阶"><a href="#二：-进阶" class="headerlink" title="二： 进阶"></a>二： 进阶</h2><h3 id="2-1-函数和过程"><a href="#2-1-函数和过程" class="headerlink" title="2.1 函数和过程"></a>2.1 函数和过程</h3><p>函数有返回值，过程可以无返回值。VBA中直接函数名=返回值。</p><h4 id="2-1-1-简单的函数"><a href="#2-1-1-简单的函数" class="headerlink" title="2.1.1 简单的函数"></a>2.1.1 简单的函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Function 转美金(x)<br>    转美金 = x / 6.03 - x * 0.03<br>End Function<br><br>Function 性别(str As String)<br>    If str = &quot;男&quot; Then<br>        性别 = &quot;先生&quot;<br>    ElseIf str = &quot;女&quot; Then<br>        性别 = &quot;女士&quot;<br>    End If<br>End Function<br><br>Function 日期转换(str As String)<br>    日期转换 = DateSerial(Left(str, 4), Mid(str, 5, 2), Right(str, 2))<br>End Function<br><br>Function 截取字符(str As String, str1 As String, i As Integer)<br>    截取字符 = Split(str, str1)(i - 1)<br>End Function<br></code></pre></div></td></tr></table></figure><h4 id="2-1-2-创建表通用过程"><a href="#2-1-2-创建表通用过程" class="headerlink" title="2.1.2 创建表通用过程"></a>2.1.2 创建表通用过程</h4><p><strong>创建表的过程</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 创建表(str As String)<br>Dim sht As Worksheet<br>&#x27; 表名重复，则k=1<br>For Each sht In Sheets<br>    If sht.Name = str Then<br>        k = 1<br>    End If<br>Next<br>&#x27; 表名不重复，则新建表<br>If k = 0 Then<br>    Sheets.Add after:=Sheets(Sheets.Count)<br>    Sheets(Sheets.Count).Name = str<br>End If<br><br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="2-1-3-加载宏"><a href="#2-1-3-加载宏" class="headerlink" title="2.1.3 加载宏"></a>2.1.3 加载宏</h4><ul><li>将有代码的工作簿存为<code>.xla</code>为后缀的文件，存放文档地点默认，即可保存为加载宏。</li><li>直接点击加载项就可以调用。</li><li>以后每次打开新的工作簿都可以调用此代码。</li></ul><h3 id="2-2-合并多个文件"><a href="#2-2-合并多个文件" class="headerlink" title="2.2 合并多个文件"></a>2.2 合并多个文件</h3><h4 id="2-2-1-对象赋值给变量"><a href="#2-2-1-对象赋值给变量" class="headerlink" title="2.2.1 对象赋值给变量"></a>2.2.1 对象赋值给变量</h4><p>Set的用法</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 对象赋值给变量()<br>Dim i As Integer<br>Dim sht As Worksheet<br>For i = 2 To 5<br>    &#x27; 用set将对象赋值给变量<br>    Set sht = Sheets.Add<br>    sht.Name = Sheet1.Range(&quot;a&quot; &amp; i)<br>Next<br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="2-2-2-Dir，路径的使用"><a href="#2-2-2-Dir，路径的使用" class="headerlink" title="2.2.2 Dir，路径的使用"></a>2.2.2 Dir，路径的使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub dir的用法()<br>Dim i As Integer<br>For i = 1 To 5<br>    &#x27; dir有则返回文件名，无则返回空值;*为通配符，xlsx，xls都可以<br>    &#x27; 若有n个文件符合，第一个dir加路径返回第一个值，第二个dir直接返回第二个值，<br>    &#x27; 到第n+1个dir返回空值，n+2个dir返回错误<br>    If Dir(&quot;d:\data\&quot; &amp; Range(&quot;a&quot; &amp; i) &amp; &quot;.xls*&quot;) = &quot;&quot; Then<br>        Range(&quot;b&quot; &amp; i) = &quot;无此文件&quot;<br>    Else<br>        Range(&quot;b&quot; &amp; i) = &quot;有文件&quot;<br>    End If<br>Next<br>End Sub<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 遍历指定文件夹的文件()<br>Dim str As String<br>Dim wb As Workbook<br>str = Dir(&quot;d:\data\*.xls*&quot;)<br>For i = 1 To 100<br>    &#x27; 遍历打开指定文件夹内的所有xls*文件<br>    Set wb = Workbooks.Open(&quot;d:\data\&quot; &amp; str)<br><br>    &#x27; 这里该干嘛干嘛<br>    <br>    &#x27; 关闭打开的工作簿<br>    wb.Close<br>    &#x27; dir不带参数，返回下一个符合的文件名<br>    str = Dir<br>    &#x27; dir返回空，则下一个dir会出错，所有需要跳出循环<br>    If Dir = &quot;&quot; Then<br>        Exit For<br>    End If<br>Next<br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="2-2-3-多文件合并"><a href="#2-2-3-多文件合并" class="headerlink" title="2.2.3 多文件合并"></a>2.2.3 多文件合并</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 多文件合并()<br>Dim str As String<br>Dim wb As Workbook<br>Dim sht As Worksheet<br>str = Dir(&quot;d:\data\*.xls*&quot;)<br>For i = 1 To 100<br>    Set wb = Workbooks.Open(&quot;d:\data\&quot; &amp; str)<br>    For Each sht In wb.Sheets<br>        &#x27; 存放在当前活动工作薄的最后一张表<br>        sht.Copy after:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count)<br>        ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count).Name = Split(wb.Name, &quot;.&quot;)(0) &amp; &quot;_&quot; &amp; sht.Name<br>    Next<br>    wb.Close<br>    str = Dir<br>    If str = &quot;&quot; Then<br>        Exit For<br>    End If<br>Next<br>End Sub<br></code></pre></div></td></tr></table></figure><h4 id="2-2-4-查找的标准化写法"><a href="#2-2-4-查找的标准化写法" class="headerlink" title="2.2.4 查找的标准化写法"></a>2.2.4 查找的标准化写法</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 使用查找功能()<br>&#x27; find标准化写法，否则找不到会报错<br>Dim rng As Range<br>&#x27; find返回一个单元格，赋值于对象<br>Set rng = Range(&quot;d:d&quot;).Find(Range(&quot;l3&quot;))<br>&#x27; 否否得有，为有数据<br>If Not rng Is Nothing Then<br>    Range(&quot;m3&quot;) = rng.Offset(0, 3)<br>End If<br>End Sub<br></code></pre></div></td></tr></table></figure><h3 id="2-3-VBA数组"><a href="#2-3-VBA数组" class="headerlink" title="2.3 VBA数组"></a>2.3 VBA数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 使用数组提升运行效率()<br>Dim i, k<br>Dim t<br>Dim str As String<br>Dim arr()<br>&#x27; 用timer计算程序运行时间<br>t = Timer<br>&#x27; 数组<br>arr() = Range(&quot;g1:j200000&quot;)<br>str = Range(&quot;n5&quot;)<br>For i = 2 To 200000<br>    If arr(i, 1) = str Then<br>        k = k + arr(i, 4)<br>    End If<br>Next<br>Range(&quot;p5&quot;) = k<br>MsgBox Timer - t<br>End Sub<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 小示例()<br>Dim arr()<br>Dim j, i As Integer<br>j = Range(&quot;a65536&quot;).End(xlUp).Row - 1<br>&#x27; 重新定义用ReDim<br>ReDim arr(1 To j)<br><br>For i = 1 To j<br>    arr(i) = Range(&quot;b&quot; &amp; i + 1) * Range(&quot;c&quot; &amp; i + 1)<br>Next<br>&#x27; 用自带的函数要加WorksheetFunction.<br>Range(&quot;h3&quot;) = Application.WorksheetFunction.Max(arr)<br>&#x27; Match用于返回一个值在指定数组中的位置<br>Range(&quot;h2&quot;) = Range(&quot;a&quot; &amp; Application.WorksheetFunction.Match(Range(&quot;h3&quot;), arr, 0) + 1)<br>&#x27; UBound返回数组上限和LBound下限<br>MsgBox LBound(arr)<br>End Sub<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VBA">Sub 排列组合计算4个数相加等于124704()<br>Dim i, j, k, l As Integer<br>Dim arr()<br>t = Timer<br>arr = Range(&quot;a1:a80&quot;)<br>For i = 2 To 80<br>    For j = 2 To 80<br>        For k = 2 To 80<br>            For l = 2 To 80<br>                If arr(i, 1) + arr(j, 1) + arr(k, 1) + arr(l, 1) = 124704 Then<br>                    Range(&quot;f3&quot;) = arr(i, 1)<br>                    Range(&quot;g3&quot;) = arr(j, 1)<br>                    Range(&quot;h3&quot;) = arr(k, 1)<br>                    Range(&quot;i3&quot;) = arr(l, 1)<br>                    &#x27; 找到就用goto跳出循环<br>                    GoTo 100<br>                End If<br>            Next<br>        Next<br>    Next<br>Next<br><br>100<br>MsgBox Format(Timer - t, &quot;0.00000&quot;)<br>End Sub<br></code></pre></div></td></tr></table></figure><h3 id="2-4-使用ActiveX控件"><a href="#2-4-使用ActiveX控件" class="headerlink" title="2.4 使用ActiveX控件"></a>2.4 使用ActiveX控件</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1L4411Q7Ni">跟着王老师学Excel_VBA</a></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>VB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VBA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传奇SF搭建</title>
    <link href="/2021/01/06/games/%E4%BC%A0%E5%A5%87SF%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/01/06/games/%E4%BC%A0%E5%A5%87SF%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="6942e496afa780c2d6dacc91a56373896ebf899e8440d28470e858709d72588f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>games</category>
      
      <category>传奇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>传奇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>错题本_资料分析</title>
    <link href="/2020/11/27/%E5%85%AC%E8%80%83/CuoTi-ZiLiaoFenXi/"/>
    <url>/2020/11/27/%E5%85%AC%E8%80%83/CuoTi-ZiLiaoFenXi/</url>
    
    <content type="html"><![CDATA[<h2 id="一：-综合分析"><a href="#一：-综合分析" class="headerlink" title="一： 综合分析"></a>一： 综合分析</h2><p>【2016江苏B】135.当对认为控烟“没有效果”“效果很差”的受访市民询问原因时，19.8%的女性受访市民认为“购买香烟过于方便”，比男性市民高出5.0个百分点；17.7%的市民认为“购买香烟过于方便”。 36.7%的市民认为“禁烟执法不严”，23.6%的市民认为公众对吸烟危害认识不足。<br>关于本次调查，下列判断不正确的是：<br>C.认为控烟“没有效果”“效果很差”的原因是“禁烟执法不严”和“公众对吸烟危害认识不足”的受访市民合计占受访市民的比重为60.3%<br>D.在认为控烟“没有效果”“效果很差”的受访市民中，认为“购买香烟过于方便”的男性的比重小于女性<br>解析：C项分母不同，错误。应该是占认为控烟“没有效果”“效果很差”的受访市民的比重为60.3%。<br>D项女性19.8%，男性19.8%-5%=14.8%，混合17.7%。线段法，女：男=(17.7%-14.8%)：(19.8%-17.7%)=2.9：2.1。所以男比女少。对的。</p><h2 id="二：-增长率"><a href="#二：-增长率" class="headerlink" title="二： 增长率"></a>二： 增长率</h2><h3 id="2-1-年平均增长率"><a href="#2-1-年平均增长率" class="headerlink" title="2.1 年平均增长率"></a>2.1 年平均增长率</h3><p>【2017江苏B】2013年国际航线旅客吞吐量为6345，2014年为7089，2015年为8582。<br>133.若2016-2017年与2014-2015年保持相同的年平均增速，则2017年中国机场国际航线旅客吞吐量将是：<br>A.10075万人次 B.10389万人次<br>C.11608万人次 D.13781万人次<br>解析：年平均增速相同，设2014-2015年平均增速为r。则$6345×(1+r)^2=8582$。，2016-2017年为$8582×(1+r)^2=8582×\frac{8582}{6345} =86÷64×86=1.33×86=115$。选C。</p><h3 id="2-2-一般增长率"><a href="#2-2-一般增长率" class="headerlink" title="2.2 一般增长率"></a>2.2 一般增长率</h3><p>【2019江苏B】<img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2019JiangSuB-134.JPG" alt="2019江苏B-134"><br>134.2017年该市服务业小微样本企业销售总收入比2013年增长<br>A.100%-3.1%×18.8%×9.3%×14.0%<br>B.103.1%×118.8%×109.3%×114.0%-100%<br>C.100%-3.1%×18.8%×9.3%×14.0%×11.4%<br>D.103.1%×118.8%×109.3%×114.0%×111.4%-100%<br>解析：$基期(1+r)=现期 \Longrightarrow r=\frac{现期}{基期}-1 $<br>$r=\frac{2013年销售总收入×1.14×1.093×1.188×1.031}{2013年销售总收入} -1$<br>选B。(2017-2013=4，所以只有4项，选B而不是D)</p><p>【2021国地】2019年上半年，我国知识密集型服务进出口额8923.9亿元，同比增长 9.4%，<br>2019年全年，我国知识密集型服务进出口额18777.7亿元，同比增长 10.8%，<br>127.2019年上半年，我国知识密集型服务进出口额环比约：<br>A.上升了1.5% B.上升了10.5%<br>C.下降了1.5% D.下降了10.5%<br>解析：$\frac{2019年上半年-2018下半年}{2018下半年} =环比$。即求2018下半年。<br>$2018全年-2018上半年=2018下半年。$<br>$\frac{18777.7}{1+0.108} -\frac{8923.9}{1+0.094} =(18777-1877)-(8924-892)=8868-$<br>$环比=(8924-8868)÷8868=100÷8856，选A。$</p><h2 id="三：-增长量"><a href="#三：-增长量" class="headerlink" title="三： 增长量"></a>三： 增长量</h2><h2 id="四：-平均数"><a href="#四：-平均数" class="headerlink" title="四： 平均数"></a>四： 平均数</h2><p>【2020国地】2018年，B市高新技术示范区规模以上高新技术企业实现技术收入10629.4亿元，比上年增长 13.4%，占高新技术示范区规模以上高新技术企业总收入的比重为 18.1%，比上年提高1.8个百分点。<br>129.2018年，B市高新技术示范区规模以上高新技术企业月均收入在以下哪个范围内？<br>A.<code>超过5500亿元</code> B.<code>4500~5500亿元之间</code><br>C.<code>3500~4500亿元之间</code> D.<code>不到3500亿元</code><br>解析：18年，现期。先求高新技术企业总收入=10629÷0.181；月均就是再÷12；<br>计算错误。$\frac{10630}{0.181} {\div} 12不等于\frac{10630× 12}{0.181} 而是等于\frac{10630}{0.181× 12}$<br>$\frac{10630}{0.181× 12}=\frac{900}{0.181} ≈ 5000$，选B。</p><h2 id="五：-比重"><a href="#五：-比重" class="headerlink" title="五： 比重"></a>五： 比重</h2><h3 id="5-1-现期比重"><a href="#5-1-现期比重" class="headerlink" title="5.1 现期比重"></a>5.1 现期比重</h3><p>【2017江苏B】在以2015年11月1日零时为标准时点进行的全国1%人口抽样调查中。江苏最终样本量占全省常住人口总数的0.94%。调查显示：2015年11月1日零时江苏常住人口为7973万人。<br>116.以2015年11月1日零时为标准时点进行的1%人口抽样调查中，江苏最终样本量为：<br>A.75万人 B.79万人<br>C.82万人 D.86万人<br>解析：7973×0.94%=79.73×0.94=79.73×(1-0.06)=79.73-8×0.6=79.73-4.8=75。选A。</p><p>【2017江苏B】一星级饭店数量87家，二星级2342家，全国11037家。<br>123.2016年第一季度，全国一、二星级饭店总数占星级饭店总数的比重是：<br>A. 22.0% B. 25.6%<br>C. 28.3% D. 32.6%<br>解析：(87+2342)/11037=2429/11037=2429/11=22.0%，选A。</p><p>【2019江苏B】有酬劳动平均用时4小时24分钟。其中，男性5小时15分钟，女性3小时35分钟；城镇居民3小时59分钟，农村居民5小时1分钟；工作日4小时50分钟，休息日3小时19分钟。受访居民有酬劳动的参与率为59.0% ，其中城镇居民53.1% 。受访居民无酬劳动平均用时2小时42分钟。其中，女性3小时48分钟；农村居民2小时39分钟；工作日2小时34分钟。受访居民无酬劳动的参与率为 70.2%，其中男性55.3% 。<br>无酬劳动包括家务劳动、陪伴照料孩子生活、护送辅导孩子学习、陪伴照料成年家人、购买商品或服务、看病就医和公益活动。受访居民家务劳动平均用时1小时26分钟，参与率为 58.5%。其中，女性2小时6分钟，参与率 75.6%。受访居民陪伴照料孩子生活平均用时36分钟，参与率为 18.9%；护送辅导孩子学习平均用时9分钟，参与率为 10.2%；陪伴照料成年家人平均用时8分钟，参与率为 5.0%；看病就医平均用时4分钟，参与率为 2.2%；公益活动平均用时3分钟，参与率为 4.1%。<br>116.受访农村居民每日无酬劳动平均用时占其劳动平均用时的比重为<br>A 29.8% B 34.6%<br>C 38.0% D 45.3%<br>解析：农村居民有酬+无酬劳动时间等于劳动时间，为5小时1分钟+2小时39分钟=7小时40分钟。2小时39分钟÷7小时40分钟≈2.7/7.7≈34.6%，选B。</p><p>118.参与有酬劳动的受访城镇居民，每日有酬劳动的平均用时为<br>A.5小时50分钟 B.6小时40分钟<br>C.7小时30分钟 D.8小时20分钟<br>解析：3小时59分钟/53.1%≈4/0.53≈7.5，选C。</p><p>120.从上述资料中能够推出的是<br>A.受访居民休息日无酬劳动平均用时多于3小时<br>B.受访女性居民无酬劳动的参与率介于55.3% 和70.2% 之间<br>C.受访居民中，有酬劳动和无酬劳动都参与的占比至少为59.0%<br>D.受访居民不同类型无酬劳动的平均用时和参与率呈正相关<br>解析：C项:至少为70.2%+59.0%-100%=29.2%，错误。<br>D项:看病就医和公益活动时间和参与率不是正相关，错误。<br>B项:男性55.3%，混合70.2%，女性肯定比70.2%高，错误。<br>A项:((2小时42分×7)-(2小时34分×5))÷2=3小时2分，正确。选A。</p><h2 id="六：-基期"><a href="#六：-基期" class="headerlink" title="六： 基期"></a>六： 基期</h2><p>【2018江苏B】2017年西部地区近五年汽车保有量增加1963万辆，年均增速 19.3%，<br>118.2012年末西部地区汽车保有量为<br>A.$\frac{1963}{1+0.193^{5} }万辆$ B.$\frac{1963}{1.193^{5} +1}万辆$<br>C.$\frac{1963}{1.193^{5} -1}万辆$ D.$\frac{1963}{1-0.193^{5} }万辆$<br>解析：$基期(1+0.193)^{5} =基期+增长量\Rightarrow 1.193^{5}=1+\frac{增长量}{基期} \Rightarrow 基期=\frac{1963}{1.193^{5} -1} $，选C。</p><h2 id="七：-简单计算-容斥原理"><a href="#七：-简单计算-容斥原理" class="headerlink" title="七： 简单计算(容斥原理)"></a>七： 简单计算(容斥原理)</h2><p>【2020江苏B】抽取2000名居民进行调研。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2020JiangSuB-128%E3%80%81129.JPG" alt="2020江苏B-128、129"><br>128.2019年春节期间消费支出在2000元以下的受访居民中，“发红包、给压岁钱”的至少占<br>A.79.4% B.61.0%<br>C.54.8% D.52.9%<br>解析：2000元以下36.7%；“发红包、给压岁钱”的82.7%；<br>所以在2000元以下“发红包、给压岁钱”的至少占受访居民的(36.7%+82.7%-100%)=19.4%；<br>在2000元以下“发红包、给压岁钱”的至少占支出在2000元以下的受访居民的(19.4%÷36.7%)=52.9%；<br>选D。<br>129.2019年春节期间消费支出在5000元以上的受访居民人数有可能是：<br>A.320人 B.388人<br>C.420人 D.456人<br>解析：11.5%+4.5%+2.9%=18.9%，2000×18.9%=378人；<br>1.6%是说不清的，即1.6%×2000=32人；<br>所以人数在378到410(32+378)之间，选B。</p><p>【2021国地】2019年末残疾人康复机构9775家，其中视力残疾康复服务机构1430家，听力言语残疾康复服务机构1669家。<br>123.如提供视力残疾康复服务的残疾人康复机构中，同时提供听力言语残疾康复服务的机构比不提供该服务的机构多20% ，则2019年末全国有多少家残疾人康复机构不提供以上两种康复服务中的任意一种？<br>A.不到7300家 B.7300～7600家之间<br>C.7600～7900家之间 D.超过7900家<br>解析：设提供视力残疾康复服务的残疾人康复机构中不提供听力言语残疾康复服务的机构数量为a。<br>则a+1.2a=1430，a=650。<br>故只提供视力为650个，提供听力或听力+视力为1669。<br>因此不提供上述任意一种的机构数为9775-(650+1669)=7456个，选B。</p>]]></content>
    
    
    <categories>
      
      <category>公考</category>
      
      <category>错题本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>错题本_判断推理</title>
    <link href="/2020/11/27/%E5%85%AC%E8%80%83/CuoTi-PanDuanTuiLi/"/>
    <url>/2020/11/27/%E5%85%AC%E8%80%83/CuoTi-PanDuanTuiLi/</url>
    
    <content type="html"><![CDATA[<h2 id="一：-类比推理"><a href="#一：-类比推理" class="headerlink" title="一： 类比推理"></a>一： 类比推理</h2><h3 id="1-1-逻辑关系"><a href="#1-1-逻辑关系" class="headerlink" title="1.1 逻辑关系"></a>1.1 逻辑关系</h3><p>【2016江苏B】77. 风气 之于（ ）相当于 文献 之于 （ ）。<br>A.风格——图书 B.风尚——典籍<br>C.精神——文化 D.弘扬——传承<br>解析：包含关系。风气指风尚习气，风气包含风尚。文献包含典籍。选B。</p><p>【2018江苏B】69. 三角形：三棱锥<br>A.四边形：四面体 B.五边形：五角星<br>C.正方形：正方体 D.抛物线：圆柱体<br>解析：种属关系。三棱锥所有面都是三角形。四面体所有面都是三角形。A错误。选C。</p><p>【2019江苏B】69.理智：情感：悲伤<br>A.冷漠：热情：热点 B.科学：艺术：雕塑<br>C.蓝天：白云：云霞 D.陆地：河流：黄河<br>解析：理智、情感并列关系，悲伤是一种情感。选项考虑BD。<br>黄河是特指。而雕塑和悲伤都不是特指，B更优，选B。</p><p>【2019江苏B】70.眼睛：眼镜：隐形眼镜<br>A.脚踝：护膝：运动护膝 B.耳机：耳朵：蓝牙耳机<br>C.手掌：手套：纯棉手套 D.假牙：牙套：烤瓷牙套<br>解析：种属关系。隐形眼镜是眼睛地一种。眼睛和眼镜是器官和保护矫正工具的关系。<br>护膝对应膝盖，A错误。B反了；C正确；D牙齿对应牙套，错误。选C。</p><p>【2021国地】93.春山暖日和风：阑干楼阁帘栊<br>A.绿蚁新醅酒：红泥小火炉 B.鸡声茅店月：人迹板桥霜<br>C.江碧鸟逾白：山青花欲燃 D.柴门闻犬吠：风雪夜归人<br>解析：并列关系。前后各3个事物，选项中前后也是各三个事物，选B。</p><p>【2021国地】97.中央预算：年度预算：地方预算<br>A.历史题材：军事题材：现实题材 B.户外广告：文字广告：电视广告<br>C.知识创新：技术创新：管理创新 D.人身权利：生命权利：财产权利<br>解析：并列交叉关系。中央预算和地方预算都属于国家预算。和年度预算交叉关系。<br>A符合。D生命权利属于人身权利，不符合。选A。</p><h3 id="1-2-言语关系"><a href="#1-2-言语关系" class="headerlink" title="1.2 言语关系"></a>1.2 言语关系</h3><h3 id="1-3-描述关系"><a href="#1-3-描述关系" class="headerlink" title="1.3 描述关系"></a>1.3 描述关系</h3><h3 id="1-4-条件关系"><a href="#1-4-条件关系" class="headerlink" title="1.4 条件关系"></a>1.4 条件关系</h3><p>【2017江苏B】78.丝绸之路 之于 （ ） 相当于 万里长征 之于 （ ）<br>A.敦煌—遵义 B.骆驼—草鞋<br>C.沙漠—海洋 D.贸易—解放<br>解析：A丝绸之路经过敦煌，万里长征经过遵义。B丝绸之路的必要工具是骆驼，长征的必要工具不一定是草鞋。选A。</p><p>【2020江苏B】66.唇亡：齿寒<br>A.安居：乐业 B.纲举：目张<br>C.开卷：有益 D.惩前：毖后<br>解析：因果关系。唇亡和齿寒是因果对应关系。<br>纲举目张：提起渔网上面的总绳，一个个网眼都张开了。也是因果关系。<br>选B。</p><p>【2021国地】98.健康监测：体检：疾病筛查<br>A.为国聚财：税收：调节分配 B.发掘遗迹：考古：考证年代<br>C.解决争议：审判：强制执行 D.太空飞行：航天：地质分析<br>解析：健康检测和疾病筛查都是体检的目的。关系同A，选A。<br>B项发掘遗迹是过程，D项太空飞行全同航天。</p><h3 id="1-5-语法关系"><a href="#1-5-语法关系" class="headerlink" title="1.5 语法关系"></a>1.5 语法关系</h3><p>【2020江苏B】75.请从四个选项中选出恰当的一项，其特征或规律与题干给出的一串符号的特征或规律最为相符。<br>由甲申曱甲申甴甲由曱<br>A.己已巳乙已巳己已己乙 B.上下卡卞下卡土下上卞<br>C.人八六入八六人八人入 D.土士二干士二二士土干<br>解析：先找唯一的不同，排除选项后用相同的找。<br>不同的是倒数第四个“甴”，再看选项，只有B符合，选B。</p><h3 id="1-6-常识知识"><a href="#1-6-常识知识" class="headerlink" title="1.6 常识知识"></a>1.6 常识知识</h3><p>【2016江苏B】73.江苏：南京：北京<br>A.上海：海口：海南 B.武汉：湖北：河北<br>C.青海：辽宁：西宁 D.广东：广州：贵州<br>解析：考察常识，南京是江苏省省会，北京省与江苏省并列级别。<br>A海口不是上海的省会。B顺序反了。C青海省和辽宁省并列。D广州是广东省省会，贵州省。</p><h2 id="二：-图形推理"><a href="#二：-图形推理" class="headerlink" title="二： 图形推理"></a>二： 图形推理</h2><h3 id="2-1-位置规律"><a href="#2-1-位置规律" class="headerlink" title="2.1 位置规律"></a>2.1 位置规律</h3><p>【2020国地】72.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2020GuoDi-72.JPG" alt="2020国地-72"><br>解析：组成相同，考虑位置规律。图1到2，黑色L顺时针旋转90°，图2到3白色L逆时针旋转90°。<br>选A。</p><h3 id="2-2-样式规律"><a href="#2-2-样式规律" class="headerlink" title="2.2 样式规律"></a>2.2 样式规律</h3><h3 id="2-3-属性规律"><a href="#2-3-属性规律" class="headerlink" title="2.3 属性规律"></a>2.3 属性规律</h3><p>【2019江苏B】88.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2019JiangSuB-88.JPG" alt="2019江苏B-88"><br>解析：元素组成不同，考虑属性规律，对称无，曲直规律：第一行都直线，第二行都曲线，第三行有曲有直，选A。</p><p>【2021国地】71.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2021GuoDi-71.JPG" alt="2021国地-71"><br>解析：元素组成相同，无明显位置规律。无样式规律。考虑属性规律对称，对称轴变化规律。<br>选A。</p><p>【2020国地】78.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2020GuoDi-78.JPG" alt="2020国地-78"><br>解析：组成不同，考虑属性规律。都是对称图形，画出对称轴，一种对称轴垂直边；一种对称轴穿过点。选C。</p><h3 id="2-4-数量规律"><a href="#2-4-数量规律" class="headerlink" title="2.4 数量规律"></a>2.4 数量规律</h3><p>【2017江苏B】82.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2017JiangSuB-82.JPG" alt="2017江苏B-82"><br>解析：组成元素不同，对称曲直开闭无规律，考虑数量，第三张和第四章图差一个点，考虑点规律，选择9个点的图，选C。</p><p>【2019江苏B】77.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2019JiangSuB-77.JPG" alt="2019江苏B-77"><br>解析：元素相似，考虑遍历、加减同异、黑白运算，无规律；考虑属性规律：对称曲直开闭无规律，无规律。考虑数量规律：都是一个面。横线、竖线明显，考虑到横线数量和竖线数量相同。选C。</p><p>【2020江苏B】76.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2020JiangSuB-76.JPG" alt="2020江苏B-76"><br>解析：图形相似，属性规律无，样式规律无。看数量规律，后一张图交点都+1.<br>考察点数量规律，依次为3，4，5，6，7，8，只有C是8个点，选C。</p><p>【2021国地】78.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2021GuoDi-78.JPG" alt="2021国地-78"><br>解析：组成不同，考虑属性规律，无对应。数量规律数面，选C。</p><p>【2020国地】71.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2020GuoDi-71.JPG" alt="2020国地-71"><br>解析：组成不同，无属性规律。考虑数量。图4明显为一笔画，考虑一笔画，选C。</p><p>【2020国地】79.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2020GuoDi-79.JPG" alt="2020国地-79"><br>解析：组成不同，无属性规律。考虑数量规律。图形拼接明显，146公共边是4条，235公共边是3条。选A。</p><p>【2020国地】80.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2020GuoDi-80.JPG" alt="2020国地-80"><br>解析：组成不同。无属性规律。考虑数量规律。有黑块，考虑元素数量。看黑色的元素块是否相同，选B。</p><h3 id="2-5-空间重构"><a href="#2-5-空间重构" class="headerlink" title="2.5 空间重构"></a>2.5 空间重构</h3><p>【2018江苏B】88.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2018JiangSuB-88.JPG" alt="2018江苏B-88"><br>解析：A右边图形不对；B上面图形反了；C右边图形位置不对；选D。</p><p>【2020江苏B】86.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2020JiangSuB-86.JPG" alt="2020江苏B-86"><br>解析：A上面线方向不对；B上面线方向不对；C前面不对，若是相对面，不可能相邻；<br>选D。</p><p>【2021国地】77.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2021GuoDi-77.JPG" alt="2021国地-77"><br>解析：选C。最上层缺5个小立方，只有C符合。</p><p>【2020国地】77.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2020GuoDi-77.JPG" alt="2020国地-77"><br>解析：A正视图竖直往下切。B从正前方切入，向后下方切出。<br>C图形下方切入，平行于底面。选D。</p><h3 id="2-6-平面拼合"><a href="#2-6-平面拼合" class="headerlink" title="2.6 平面拼合"></a>2.6 平面拼合</h3><p>【2016江苏B】84.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2016JiangSuB-84.JPG" alt="2016江苏B-84"><br>解析：A项为比例不对，应该是正方形，<strong>注意比例坑，比例坑，比例坑</strong>，江苏常考。选B。</p><p>【2018江苏B】80.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2018JiangSuB-80.JPG" alt="2018江苏B-80"><br>解析：特殊边方法无用，直接在图上画，D的右下角伸出来些许，错误。选C。</p><p>【2018江苏B】82.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2018JiangSuB-82.JPG" alt="2018江苏B-82"><br>解析：特殊边方法无用，直接在图上画，选择C。</p><p>【2019江苏B】82.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2019JiangSuB-82.JPG" alt="2019江苏B-82"><br>解析：特殊边方法无用。选D。</p><p>【2020江苏B】80.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2020JiangSuB-80.JPG" alt="2020江苏B-80"><br>解析：图1右上边是特殊边，排除D。<br>图3在左边，图4在右边。选A。</p><p>【2020江苏B】81.<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/CuoTiBen/PanDuanTuiLi/2020JiangSuB-81.JPG" alt="2020江苏B-81"><br>解析：图3，下边是特殊边，选D。</p><h2 id="三：-逻辑判断"><a href="#三：-逻辑判断" class="headerlink" title="三： 逻辑判断"></a>三： 逻辑判断</h2><h3 id="3-1-翻译推理"><a href="#3-1-翻译推理" class="headerlink" title="3.1 翻译推理"></a>3.1 翻译推理</h3><p>【2019江苏B】97.某县新一届党政领导班子刚组建完成，一心想为群众做一些实事。面对有限的财力，新一届领导班子明确表示，今年只能完成两件大事。对于众多排进公共政策议程的大事，他们认为：如果建一条乡村公路，则不能建污水处理厂；如果建污水处理厂，则要建排污管道；如果建排污管道，则不能建垃圾处理厂。<br>按照这届领导班子的想法，以下哪项不可能是他们今年同时要建设的？<br>A.乡村公路、排污管道 B.乡村公路、垃圾处理厂<br>C.污水处理厂、排污管道 D.污水处理厂、垃圾处理厂<br>解析：翻译为乡村→-污水；污水→排污→-垃圾；逐一代入，ABC都可以。D中建污水→-乡村，垃圾→-污水，相互矛盾。选D。</p><h3 id="3-2-组合排列"><a href="#3-2-组合排列" class="headerlink" title="3.2 组合排列"></a>3.2 组合排列</h3><p>【2018江苏B】甲、乙、丙、丁、戊、己6项工作需要按照一定的先后顺序才能顺利完成。已知：<br>（1）丁必须在甲之前完成，并且中间只能隔着1项工作；<br>（2）丙必须在乙之前完成，并且中间只能隔着2项工作。<br>请回答99-100题<br>99.若戊第2个完成，则己第几个完成？<br>A.3 B.4<br>C.5 D.6<br>解析：翻译题干，（1）翻译为丁○甲，（2）为丙○○乙。列表格，顺序为丙戊丁乙甲己，选D。<br>100.若甲、乙不是紧挨着先后完成，则可以得出以下哪项？<br>A.甲在乙之前完成 B.乙在甲之前完成<br>C.戊在己之前完成 D.己在戊之前完成<br>解析：翻译题干，（1）翻译为丁○甲，（2）为丙○○乙。列表格，顺序为1丁2丙3甲4？5乙6？，所以选A。</p><p>【2019江苏B】某市江海区决定对东风路、西河路、南塘路、北海路等4条辖区内道路进行市容出新。为了解群众意见，制定符合民意的出新方案，区政府相关部门的甲、乙、丙、丁4位同志两人一组结伴展开调研。已知，每人各选两条道路，每条道路恰有两人选择：在每条道路的调研中，乙与丙始终没有在一组。另外，还知道：<br>（1）如果甲选东风路，则丁也选东风路；<br>（2）如果丙选南塘路，则丁也选南塘路；<br>（3）甲没有选南塘路。<br>请回答99-100题<br>99.根据上述信息，可以得出以下哪项？<br>A.甲选西河路和北海路 B.乙选西河路和南塘路<br>C.丙选东风路和西河路 D.丁选东风路和北海路<br>解析：翻译一人2条路，一条路2人。乙丙不一组。甲东→丁东，丙南→丁南，-甲南。因为乙丙不一组，则甲丁不一组，所以（1）肯定错，甲不选东，（3）甲不选南，则甲选西和北，A对。<br>100.如果乙不选东风路，则可以得出以下哪项？<br>A.甲或者选东风路或者选南塘路 B.乙或者选西河路或者选南塘路<br>C.丙或者选南塘路或者选北海路 D.丁或者选西河路或者选北海路<br>解析：因为甲乙都不选东，所以丙丁必选东。所以B对，选B。</p><p>【2020江苏B】<br>在400米跑比赛中，罗、方、许、吕、田、石6人被分在一组。他们站在由内到外的1至6号赛道上。关于他们的位置，已知：<br>（1）田和石的赛道相邻；<br>（2）吕的赛道编号小于罗；<br>（3）田和罗之间隔着两条赛道；<br>（4）方的赛道编号小于吕，且中间隔着两条赛道。<br>请回答99-100题<br>99.根据以上陈述，关于田的位置，以下哪项是可能的？<br>A.在3号赛道上 B.在4号赛道上<br>C.在5号赛道上 D.在6号赛道上<br>解析：翻译题干，（1）田石相邻、（2）吕＜罗、（3）田罗隔2、（4）方＜吕，且隔2<br>代入A，田在3，根据（3）罗只可能在6，（1）石在2或4，石在4与（4）矛盾。所以石在2，吕在4，方在1，正确，选A。<br>100.根据以上陈述，可以推出以下哪项？<br>A.许和石的赛道相邻 B.许和石之间隔着一条赛道<br>C.许和石之间隔着两条赛道 D.许和石之间隔着三条赛道<br>解析：根据99题推出的，1方2石3田4吕5许6罗，则选C。</p><h3 id="3-3-削弱题型"><a href="#3-3-削弱题型" class="headerlink" title="3.3 削弱题型"></a>3.3 削弱题型</h3><p>【2016江苏B】97.一项研究选取80名13岁到25岁出现精神分裂症早期症状的年轻人作为被试对象，随机选取其中的一半人服用鱼油片剂3个月，另一半人都用安慰剂3个月。研究人员对受试者跟踪考察7年后发现，在服用鱼油片剂组中，只有10%的人罹患精神分裂症；而在服用安慰剂组中，罹患这种疾病的人则高达40%。由此，研究人员得出结论：服用鱼油片剂有助于青少年预防精神分裂症。<br>以下各项如果为真，则<strong>除了哪项</strong>均能质疑上述研究人员的结论？<br>A.被试对象的数量仍然偏少，且每个被试者在7年中的发展差异较大<br>B.被试对象的年龄跨度较大，实验开始时有人可能已是青年而非少年<br>C.鱼油片剂曾被尝试<strong>治疗成年</strong>精神分裂症患者，但实验发现没有效果<br>D.被试对象服用鱼油片剂的时间较短，不足以形成稳定、明显的疗效<br>解析：论点：服用鱼油片剂有助于青少年预防精神分裂症。<br>论据：一项研究选取…………高达40%。<br>B项说明论据选取样本不科学，削弱了论据。<br>C项是治疗成年，与主题预防青少年不一致，无关选项，选择C。</p><p>【2017江苏B】91.近日国外一项调查研究发现，肥胖与较差的社会经济地位之间存在着内在的关系，那些社会经济地位较差的人大多比较肥胖，甚至越穷越胖。研究者解释，这是因为社会经济地位较差的人更容易选择高热量低营养的快餐食品，而摄入这些食品很容易导致肥胖。<br>下列哪项如果为真，最能削弱研究者的<strong>上述解释</strong>？<br>A.高热量低营养食品的摄入虽是一些人的饮食习惯，但却容易造成营养不良<br>B.刚富起来的人更容易沉迷于高热量食品，而有些穷人对快餐食品只能偶尔尝鲜<br>C.穷人没有足够的金钱和时间去锻炼身体，富人却更有能力在身体健康上投入<br>D.现在高热量低营养的快餐食品变得越来越廉价，而健康的低卡路里食品变得越来越昂贵<br>解析：论点：社会经济地位较差的人大多比较肥胖，甚至越穷越胖。<br>论据：社会经济地位较差的人更容易选择高热量低营养的快餐食品，而摄入这些食品很容易导致肥胖。<br>A项，话题不一致，不选。B项，否定论据，削弱解释的，保留。C项，文段说的食品，选项说的锻炼，他因削弱，不是削弱解释，不选。D项，搭桥加强，不选。<br>选B。</p><p>【2017江苏B】93.某高速路段管理处决定招聘10名道路辅助管理人员，以解决正式管理人员不足的问题，但是这一建议招致某人士的反对。该人士认为，增加这10名道路辅助管理人员后，将会有更多的道路违规、违纪行为被发现，而后期处理这些问题需要占用更多的正式管理人员，这将导致本已紧张的正式管理人员更加不足。<br>以下哪项如果为真，最能削弱该人士的观点？<br>A.新招聘的道路辅助人员工作起来未必能尽心尽职<br>B.有许多道路违规、违纪行为问题当场就可解决，不需要拖到后期处理<br>C.道路辅助管理人员也可以对道路违规、违纪行为进行后期处理<br>D.增加道路辅助管理人员将有效减少该路段道路违规、违纪行为的发生<br>解析：论点：本已紧张的正式管理人员更加不足。<br>论据：增加这10名道路辅助管理人员后，将会有更多的道路违规、违纪行为被发现，而后期处理这些问题需要占用更多的正式管理人员。<br>争议题，CD都是削弱。A，B项不明确；C项削弱论据；D项减少多少行为不知道；偏向选择C。</p><p>【2021国地】101.有研究人员认为，胶原蛋白保持皮肤年轻的说法并不科学，他们认为，皮肤得以保持年轻，应归功于表皮干细胞，哺乳动物的表皮细胞会持续更新，新细胞来源于表皮干细胞，这些干细胞会通过一种特定分化的多元蛋白结构——半桥粒附着在基膜上。表皮干细胞会不断复制、分化，产生新细胞取代受损的老细胞，这一更新有利于维持皮肤的年轻。因此，表皮干细胞的更新才是保持皮肤年轻的原因。<br>以下哪项如果为真，最能削弱上述结论？<br>A.表皮干细胞的更新还需要其他化合物的促进<br>B.表皮干细胞的再生能力会随着年龄的增长而衰退<br>C.胶原蛋白对促进表皮干细胞的更新至关重要<br>D.胶原蛋白的表达在不同干细胞之间存在很大差异<br>解析：论点：表皮干细胞的更新才是保持皮肤年轻的原因。<br>论据：表皮干细胞会不断复制、分化，产生新细胞取代受损的老细胞，这一更新有利于维持皮肤的年轻。<br>逐一分析：A项不明确，无C表述明确，排除。<br>B项话题不一致，一个是表皮干细胞的更新，一个是再生能力，排除。<br>C项认为B导致了Z，提出反驳观点其实是A导致了B，所以A才是导致了Z的根本原因，能削弱论点。<br>D项话题不一致，排除。</p><h3 id="3-4-加强题型"><a href="#3-4-加强题型" class="headerlink" title="3.4 加强题型"></a>3.4 加强题型</h3><p>【2018江苏B】97.绿茶的主要成分是茶多酚。近来大量动物实验发现，茶多酚具有抑制肿瘤细胞增殖、促进肿瘤细胞消亡的作用。但是，有些专家通过对大量人群的研究，并未发现饮茶越多癌症发病率就越低这一现象。据此，他们并不认为经常饮茶能够防癌。<br>以下哪项如果为真，则是上述专家作出结论最合理的假设<br>A.如果茶叶在生产、加工、运输过程中受到重金属、农药等致癌物的污染，则饮茶越多就越增加患癌风险<br>B.如果人们长期饮茶但又奉行抽烟、喝酒、熬夜等不良生活习惯，则很难看出经常饮茶带来的防癌作用<br>C.只有假定品种不同但份量相同的茶叶中含有的茶多酚基本相同，才能得出经常饮茶能够防癌这一结论<br>D.只有在大量人群中发现饮茶越多癌症发病率就越低这一现象，才能得出经常饮茶能够防癌这一结论<br>解析：论点：不认为经常饮茶能够防癌<br>论据：通过对大量人群的研究，并未发现饮茶越多癌症发病率就越低这一现象<br>问假设即前提，AB都不是前提，则在CD中选择，C话题不一致，无法加强，D是搭桥，能加强，选D。</p><h3 id="3-5-日常结论"><a href="#3-5-日常结论" class="headerlink" title="3.5 日常结论"></a>3.5 日常结论</h3><h3 id="3-6-真假推理"><a href="#3-6-真假推理" class="headerlink" title="3.6 真假推理"></a>3.6 真假推理</h3><p>【2016江苏B】96.某金融机构计划在欧洲和亚洲分别设立一个办事处，候选城市有6个，亚洲的吉隆坡、香港和首尔，欧洲的苏黎世、伦敦和法兰克福。该机构的两名工作人员就办事处的设立城市进行了如下猜测：<br>张经理：亚洲办事处一定会设在吉隆坡，绝不会设在首尔；<br>陈经理：欧洲办事处一定会设在伦敦，绝不会设在苏黎世。<br>事后得知，两人的猜测都只有一半是正确的。<br>根据以上信息，以下哪项是错误的判断？<br>A.亚洲办事处设在香港<br>B.欧洲办事处设在法兰克福<br>C.亚洲办事处如果不设在香港，就会设在首尔<br>D.欧洲办事处如果不设在伦敦，那么也不会设在法兰克福<br>解析：这种性价比低的题，如果短时间没思路建议放弃，控制好时间。<br>因为只对一半，则亚洲办事处一定不在吉隆坡和首尔，那么就在香港。同理，欧洲办事处在法兰克福。<br>则AB正确。C亚洲办事处在香港，则不在香港为假，001，正确。D不在伦敦对，苏黎世错，100(只有100是错误，其他都正确)，错误。</p><h3 id="3-7-原因解释"><a href="#3-7-原因解释" class="headerlink" title="3.7 原因解释"></a>3.7 原因解释</h3><p>【2019江苏B】96.我国家长们对儿童阅读越来越重视，大多数家长希望孩子多读书读好书。2018年，某市70.3%的家庭有父母陪孩子读书的习惯，亲子阅读的图书量比2017年提高了1.8个百分点，时长也比去年有所增加。但是，2018年该市的儿童人均图书阅读量仅为4.72本，比2017年还下降了0.6个百分点。<br>以下哪项如果为真，最能解释上述现象？<br>A.近年来孩子课业负担较重，对课外阅读很多人是“心有余而时不足”<br>B.在亲子阅读中很多孩子习惯“听书”，这种情况2018年未计算在内<br>C.大多数80后、90后家长都受过高等教育，比较看重亲子阅读的意义<br>D.孩子在手机、电脑上的电子阅读一直未纳入儿童图书阅读的考虑范围<br>解析：找矛盾。D中一直未纳入，那么18年和19年没区别，无法解释。<br>A,C都无法解释。选B。</p><p>【2021国地】104.近年来，国家从药品生产、流通和销售各环节发力，频频出台降低药价的相关政策。但是，让不少患者感到疑惑的是，一方面是国家降低药价的政策不断出台，另一方面却是诸多常用药价格不断上涨。<br>以下哪项如果为真，最能解释上述现象？<br>A.价格下降的药品占大多数，价格上涨的药品占少数，因此从整体上来说，药品价格仍然是下降了<br>B.常用进口药的需求增多，相关政策无法控制此类药品的价格上涨<br>C.国家虽然出台了降低药价的政策，但是其影响要经过―段时间才能显现出来<br>D.降低药价的政策可以有效控制药品市场中因制药原料涨价而导致的药价上涨<br>解析：题干矛盾现象是一方面是国家降低药价的政策不断出台，另一方面却是诸多常用药价格不断上涨。<br>A话题不一致，B能解释。<br>C项只能解释价格为啥暂时不下降，不能解释为啥还上涨了。选B。</p><h2 id="四：-定义判断"><a href="#四：-定义判断" class="headerlink" title="四： 定义判断"></a>四： 定义判断</h2><h3 id="4-1-单定义"><a href="#4-1-单定义" class="headerlink" title="4.1 单定义"></a>4.1 单定义</h3><p>【2016江苏B】106.隐形就业：指没有通过传统就业渠道获取固定职业，处于相关部门就业统计范围之外的工作状态。<br>下列不属于隐形就业的是：<br>A.颜某辞去工作后，一边带孩子一边经营一奶粉网店<br>B.某教授受多家培训学校之邀，在工作之余常去授课<br>C.小陈离开公司后专门为电商店铺提供平台搭建和维护服务<br>D.酷爱写作的小王，大学毕业后成了一家报社的自由撰稿人<br>解析：分析题干没有固定职业。分析选项，B有固定职业，选B。</p><p>【2016江苏B】108.交友泡沫化指基于各种现实需要而有意扩大朋友范围或虽有交往却从未谋面的朋友泛化现象。<br>下列不属于交友泡沫化的是：<br>A.游戏爱好者的账号中都有一串不知道真名实姓的朋友<br>B.饭局上，即使不太熟悉的人也会以哥们、兄弟相称<br>C.小昊说自己微信朋友圈里有许多从未见过面的好友<br>D.大多数人都习惯把交情比较深的同事也称为朋友<br>解析：A属于有交往却未谋面的朋友；D未扩大朋友圈，也有交往谋面，不符合题意，选择D。</p><p>【2016江苏B】110.社会概称意识：指人们对某一社会群体所持有的比较固定的、概括而笼统的看法。<br>下列属于社会概称意识的是：<br>A.某民族认为狼都是凶残、贪婪的 B.非洲某部落视天狼星为其幸运星<br>C.不少年轻人认为<strong>养宠物</strong>最有爱心 D.南方人认为北方人是不怕冷的<br>解析：主体人们，客体社会群体。C项养宠物是行为，不是社会群体。</p><p>【2017江苏B】114.新乡贤：指长期扎根农村，利用自己的知识、技术、财富为村民热心服务并作出突出贡献，在当地社会生活及民众心目中具有较高威望和影响力的乡村人士。<br>下列属于新乡贤的是：<br>A.10多年来，老李虽然一直在外经商，但他时时惦念着家乡，每年都会捐出大量资金为家乡修桥铺路，资助家乡的特困大学生完成学业，乡亲们经常千里迢迢地跑来看望他<br>B.小张复员后回到家乡，两三年就成了远近闻名的“养殖大王”，为了带动乡亲们共同致富，他开办了多期培训班，免费传授实用养殖技术和经验，受到了大家的称赞<br>C.20多年来，某市商会会长孙先生利用自己长期积累的丰富经验，为经营各种农副产品的家乡村民牵线搭桥，指导他们寻找商机，被乡亲们誉为贴心的“诸葛亮”<br>D.某乡村小学校长程某退休后，利用自己学生多、关系广的优势，为挖掘家乡历史文化资源、发展乡村文化旅游业积极谋划、东奔西走，被乡亲们传为佳话<br>解析：主体：乡村人士；客体：村民；过程：利用自己知识、技术、财富为村民；出发点：长期扎根农村；落脚点：服务并作出突出贡献。<br>A项不符合出发点，长期扎根农村；B项不符合出发点，长期扎根农村；C项不符合主体，乡村人士；D项符合，选D。</p><p>【2018江苏B】101.社区居家养老：指以家庭为核心、社区为依托，向居住在家中的老年人提供专业化、社会化服务，以解决日常生活中各种实际困难的养老方式。<br>下列属于社区居家养老的是：<br>A.自从去年住进街道办的托老所后，文大爷整整胖了5斤。那里不光生活很舒心，而且还有周边社区的20多位老人作伴，连过年他都有点舍不得回家<br>B.某社区联合一家养老企业推出适老化改造项目：针对老人的生理特点及生活习惯合理调整家里卧室、阳台、卫生间、厨房等处的生活设施。仅去年就完成了600多户家庭的改造工作<br>C.退休多年的周婆婆每天上午都去社区养老服务中心跟着专业老师学习民族舞，下午又到那里当义工，傍晚才回家。中心也会定期派专职人员上门为她进行体检及其他服务<br>D.南方某养老社区通过“互联网+社区+服务”模式，为准备在该社区过冬的“候鸟老人”提供网上预定租住房源以及接送服务，全程安排旅居、娱乐、社交生活<br>解析：客体：居住在家中的老年人；过程：专业化、社会化服务；落脚点：解决实际困难；<br>A不符合客体；B不符合落脚点，无困难；C正确，选C；D不符合客体，非家中老人。</p><p>【2018江苏B】103.亲情经济：指商家利用人们对亲情关系的重视，在传统节日期间举行商业让利促销活动。<br>下列属于亲情经济的是<br>A.某影楼在店庆3周年之际推出户外全家福拍摄优惠活动<br>B.某食品企业中秋节期间适当调高了礼盒装月饼的销售价格<br>C.某商场在儿童节前夕推出少儿服装、玩具对折优惠活动<br>D.重阳节期间许多商场的按摩椅、保健品都有不同程度的优惠<br>解析：主体：商家；客体：人们；出发点：传统节日期间；过程：商业让利活动；落脚点：促销；<br>A不符合出发点；B不符合过程；C不符合出发点，选D。</p><p>【2018江苏B】104.副驾驶法则：指坐在驾驶员旁边的人往往喜欢按照自己的经验，对驾驶过程进行指点、评论。泛指旁观者根据个人实践经验指点他人完成操作过程的言行或心态。<br>下列属于副驾驶法则的是：<br>A.老李一上车，教练就打开了驾驶训练语音提示系统：“请系好安全带”“请松开手刹”……老李边操作边观察<br>教练表情<br>B.小张乘出租车时总喜欢坐在前排，与驾驶员聊天南地北的段子，还时不时对路上其他司机的驾驶水平评头论足<br>C.夏天的市民广场，最热闹的就是下象棋了。每张棋桌旁都围站着一圈圈的棋迷，对弈双方的每步棋都被大家指指点点<br>D.冯经理将人事调整初步方案呈报董事长审阅，董事长翻看后圈了几个人，并向他交待了几句，让他拿回去重新修改<br>解析：主体：旁观者；客体：他人；出发点：个人实践经验；过程：指点他人完成操作过程；落脚点：言行或心态。<br>A不符合主体；B不符合过程；C符合；D不符合主体和出发点。</p><p>【2018江苏B】105.主动补偿：指企业针对自己有瑕疵的产品或服务，主动向消费者做出经济补偿的行为。<br>下列属于主动补偿的是：<br>A.小王和几个同事在某火锅店消费时发现菜盘里有一只死苍蝇，就去找老板讨要说法，经过半个多小时的协商，老板终于同意免单并道歉<br>B.某高校食堂收到了学生关于饭菜质次量少、价格偏高的投诉，立即着手整改。三天后，食堂的饭菜质量有了明显提高，价格也有所下降<br>C.某公司发现，新近推出的一款手机在充电时发生爆炸，很快向社会公开承诺：用户可在30天内免费更换手机电池，邮寄费、路费等均由公司承担<br>D.老张上星期买了一辆摩托车，骑起来感觉很好。两天前，厂家突然通知他带着原始发票到指定修理厂更换电路控制器，还送给他200元加油卡<br>解析：主体：企业；客体：消费者；出发点：主动；过程：经济补偿的行为；落脚点：有瑕疵的产品或服务。<br>A不符合出发点；B不符合出发点；C不符合过程；选D。</p><p>【2018江苏B】106.人才逆流动：指原本在知名大城市工作的专业人士，主动选择到中小城市工作的人才流动现象。<br>下列属于人才逆流动的是：<br>A.小赵家乡的县城近年来经济发展迅猛，正在到处招聘有大城市工作背景的专业人才，反复考虑之后，小赵辞去北京某研究部门的工作回乡应聘成功<br>B.高中毕业的小韩在深圳打拼多年，深感这里的工作机遇虽多，年收入也很可观，但竞争压力太大，有时力不从心，春节后他决定留在家乡创业<br>C.小黄在天津某大学桥梁设计专业取得硕士学位后，来到女友所在的小城市找了一份不错的工作，他和女友都很开心<br>D.80后白领小李在上海的一家金融机构总部任职，几天前决定跳槽到附近的一家保险公司，意外发现自己的这一决定与不少同事的选择不谋而合<br>解析：主体：专业人士；客体：无；出发点：知名大城市工作；过程：主动选择；落脚点：中小城市工作。<br>A符合；B不符合过程；C不符合出发点；D不符落脚点。选A。</p><p>【2018江苏B】110.中介后遗症：指用户接受中介机构的服务后，个人信息被泄露到其他机构而长时间遭到骚扰的现象。<br>下列属于中介后遗症的是：<br>A.小陈在商场购买了一台空调，销售商把小陈的信息通报给了厂家。小陈多次接到询问安装时间及地点的<br>话，后来又经常接到空调使用情况的回访电话<br>B.小蔡在某房地产开发公司买了一套住房，随后就经常接到装修公司询问是否需要家装的电话，小蔡暂时不打算装修，非常反感这些来电<br>C.小张通过一家猎头公司找到了满意的工作，但接下来的几个月里每天还会接到一些来路不明的电话，向他推荐“待遇优厚、时间灵活、任务轻松”的工作<br>D.老王挂号就医时遇到了自称认识名医的丁某，在看过丁某推荐的名医后，病情未见好转，便不再理会丁某，也不再接丁某的骚扰电话<br>解析：主体：用户；客体：中介机构；出发点：个人信息；过程：泄露到其他机构；落脚点：长时间被骚扰。<br>A不符合落脚点；B不符合客体；C符合；D不符合过程。</p><p>【2018江苏B】112.文化焦虑：指在全球化和现代化进程中，基于传统文化受到外来文化的挤压而产生的迷惘、焦躁、失望、不自信等心理状态。<br>下列不属于文化焦虑的是：<br>A.为应对西方文化的入侵，有些家长建议教育部门尽快制定相关政策，让包括四书五经在内的传统经典进入中小学课堂<br>B.全国各地大大小小的城市中，随处可见“罗马广场”“加州小镇”之类的包含外国地名的广场、小区和公园<br>C.圣诞节、情人节、复活节现在越来越流行，不少传统节日却受到年轻人的冷落，部分学者呼吁尽快采取措施严格限制洋节日<br>D.许多历史文化遗产及人文景观随着如火如荼的旧城改造而不断消失，越来越多的有识之士对此深感忧虑<br>解析：主体：传统文化；客体：外来文化；出发点：全球化和现代化进程中；过程：挤压；落脚点：迷惘、焦躁、失望、不自信等心理状态。<br>A属于；B不属于，没有落脚点；C属于；D属于。选B。</p><p>【2018江苏B】113.头条模式：指互联网公司、媒体等向特定用户精准推送筛选出的、对用户具有重要参考价值信息的一种信息服务模式。<br>下列属于头条模式的是：<br>A.小李在某商场购买奶粉后，三年来陆续收到商场发来的澡盆、遥控玩具、儿童图书等商品的打折促销信息，还真省了不少钱<br>B.某网络文献检索平台可以根据用户要求提供所需的文献及其下载率、引用率等信息，但是用户必须提供准确的个人信息<br>C.某网络媒体公司将其平台专题栏目内容分为免费和付费两类，付费内容专业性很强，主要供有特定需求的人士选择使用<br>D.某新媒体公司通过分析客户数据，组织专门团队实时筛选不同种类的信息，保证特定用户第一时间就能看到自己关心的内容<br>解析：主体：互联网公司、媒体；客体：特定用户；出发点：筛选出；过程：精准推送：；落脚点：对用户具有重要参考价值信息。<br>A不符合过程；B不符合过程，未推送；C不符合过程；D符合。</p><p>【2019江苏B】101.公众充权：指在公共政策的制定、执行、评估、监督过程中，公众积极参与，充分表达自己的利益主张，以推动公共政策过程的民主化与科学化。<br>下列属于公众充权的是<br>A.清明节到来前夕，一些社会人士在市文明办支持下创建了文明祭扫网站，号召民众祭扫时不放鞭炮，不烧纸钱，改用虚拟鲜花、电子蜡烛等绿色环保的方式<br>B.快递小哥小李当选市人大代表后，在广泛走访充分调研的基础上，提交了一份关于如何保障快递员权益、促进快递行业健康发展的议案<br>C.某市将要召开天然气价格调整听证会，有关部门要求辖区各街道、居委会搞好宣传动员工作，按照下达名额推举市民代表，确保公开公平公正<br>D.在某县未来五年发展规划制定过程中，县委、县政府通过召开居民座谈会、专家听证会等形式，征求到了许多宝贵的意见<br>解析：无主体；客体：公众；出发点：公共政策的制定、执行、评估、监督过程中；过程：积极参与，充分表达自己的利益主张；落脚点：民主化与科学化。<br>A不符合过程，未表达利益主张；B不符合客体；C不符合客体，推选代表不符合公众；D符合。选D。</p><p>【2019江苏B】104.社会性处罚：指存在失信行为的人员所受到的与自身失信行为没有直接关联的来自其他部门的限制和处罚。<br>下列属于社会性处罚的是<br>A.以“站不起来”为理由强占他人座位的高铁“霸座男”，当场受到了乘警的严肃批评，下车后被移送公安机关接受治安处罚。这一事件曝光后，当事人的恶劣行为又遭到了全国网民的一致谴责<br>B.由于数据造假，某教授在国际期刊上发表的论文被撤稿。在网民的谴责声中，该教授又被撤销了基于该论文所获得的绩效奖励、省部级科研项目、荣誉称号、社会兼职<br>C.春节前夕，恶意拖欠农民工工资的部分包工头，被有关部门和各种媒体曝光，引起社会各界密切关注。根据银行、保险、铁路等部门的规定，这些违规者申请信用卡、购买保险以及动车和高铁票时都将受到限制<br>D.长江沿岸的一家化工企业，多次不顾禁令向长江偷偷排污，最近被省有关部门通报批评，吊销了企业生产执照，它的上级主管部门及主要负责人也都受到了严厉的处罚<br>解析：主体：失信行为的人员；客体：其他部门；出发点：与自身失信行为没有直接关联；过程：限制和处罚；落脚点：无。<br>A网民不属于部门，不符合客体；B不符合客体，无其他部门；C符合；D无其他部门，不符合客体；选C。</p><p>【2019江苏B】107.大数据“杀熟”：指商家在提供相同的商品或服务时，根据大数据的甄别结果，对有多次消费记录或消费能力较高的客户，以偏高标准收费的销售策略。<br>下列属于大数据“杀熟”的是<br>A.小李负责单位的接待工作，经常要预约商务车接送。后来只要他打车，网约平台就直接推送高价的商务车，无奈之下小李只好注册一个新号供自己日常出行<br>B.经常在网上预订酒店的老张在预订某酒店的单人间时，价格一直为380元。他的侄子暑假来看望他，也在网上预定了该酒店同样的房间，价格却便宜四分之一<br>C.位于市中心金融服务区的某超市由于环境优越，客户购买力强，某品牌饮料在这里售价高达15元，而这种饮料在居民小区便利店只需要10元<br>D.某购物网站推出新用户推广活动，每位新注册用户都可免费获赠抵用券，算下来买同样的商品新会员比老会员还要便宜好多，这让老会员们郁闷不已<br>解析：主体：商家；客体：多次消费记录或消费能力较高的客户；出发点：相同的商品或服务；过程：大数据的甄别结果；落脚点：偏高标准收费的销售策略。<br>A不符合出发点，单位和个人不是同样的服务；B符合。C不符合出发点；D是优惠券，不符合落脚点。选B。</p><p>【2019江苏B】109.信息焦虑：指人们在过量信息包围下因为难以获取、处理、利用所需信息而产生的厌倦、烦躁、紧张等负面情绪。<br>下列属于信息焦虑的是<br>A.小敏热衷于娱乐八卦，她时刻关注微博更新，看到手机上的未读信息就忍不住想去点击，每天用于浏览信息的时间远远超过她自己的工作时间<br>B.在开发商那里登记过购房意向后，闵先生每天都会接到几十个乃至上百个电话和信息，卖房的、装修的、投资的、理财的、贷款的，让他不胜其烦<br>C.小谢沉迷于网络游戏，一玩就是一通宵，白天上课总是想着游戏，久而久之产生了严重的厌学情绪，精神状态萎靡不振，身体素质越来越差<br>D.小李在外文数据库查资料，每输入一个关键词就跳出几十篇相关论文，因英语欠佳，没法筛选，完全不知道哪些才是自己真正要用的，感觉精神马上就要崩溃了<br>解析：主体：人们；客体：过量信息；出发点：包围；过程：难以获取、处理、利用所需信息；落脚点：<br>产生的厌倦、烦躁、紧张等负面情绪。<br>A无落脚点；B不符合过程，可以获取、处理、利用的；C无客体；D符合。选D。</p><p>【2020江苏B】101.造血式扶贫：指政府部门或社会力量通过持续性地扶持农村产业发展，拓宽农产品销售及消费渠道等，帮助贫困地区、贫困人口增收脱贫的扶贫方式。<br>下列属于造血式扶贫的是<br>A.某县按照“东部林果、旅游，西部设施农业”的整体思路，一直坚持“产业+基地+车间 ”的产业发展模式，使农民年收入翻了一番，人均达到近万元<br>B.某县扶贫办组织了200多名山区农民，经过严格培训，输送到东南沿海城市工作。这些农民每月都按时寄钱回家，家里的日子越过越红火<br>C.县农科所资助某村贫困家庭100头种羊，多次对他们进行科学养羊技术培训，并安排技术人员进行“一对一”的专业指导<br>D.为了解决全村苹果严重滞销的问题，村里的几个年轻人共同开办了一个水果直销网店。不到半月时间，所有苹果就销售一空<br>解析：主体：政府部门或社会力量；客体：农村产业；出发点：持续性地；过程：拓宽农产品销售及消费渠道；落脚点：帮助贫困地区、贫困人口增收脱贫。<br>A不符合落脚点，不是贫困；B不符合出发点，没有持续培训；C不符合出发点，没有持续性；D不符合落脚点、出发点，不是持续性、贫困；<br>机构选A，我觉得选C。</p><p>【2020江苏B】102.分众化教育：指根据受众的具体差异，用典型案例分别进行宣传，以激发情感共鸣，达成特定目标的教育方式。<br>下列属于分众化教育的是<br>A.某市组织全市技术创新能手分别深入到所在行业部门，分享自己的创新经验，极大地激发了各行各业人士的创新热情<br>B.某地组织的“五一劳动奖章”获得者宣讲团多次进行巡回报告，他们的先进事迹深深地打动了前来听讲的市民<br>C.每天傍晚，某学校附近地铁口都有艺术教育培训机构的招生人员散发传单，上面印着考入名校的学生彩照和成绩<br>D.在“不忘初心、牢记使命”主题教育中，某区组织党员干部分系统观看专题纪录片《警钟长鸣》，取得了预期效果<br>解析：主体：无；客体：受众的具体差异；出发点：典型案例进行宣传；过程：激发情感共鸣；落脚点：达成特定目标的教育方式。<br>A符合；B不符合具体差异；C不符合具体差异；D不符合具体差异，选A。</p><p>【2020江苏B】111.痕迹管理：指按照相关部门要求，用文字或图片等材料记录、展示工作过程和业绩，作为绩效考核依据的监督管理手段。<br>下列不属于痕迹管理的是<br>A.李先生被派往分公司调研，每天忙得不亦乐乎：手机上装了多个工作APP，必须随时关注上边的各种信息，还得及时把现场工作照上传给公司领导<br>B.某公司人力资源部门存储了大量的记录公司各项活动的文字影像资料，为每年的年终总结和工作汇报提供了足够的第一手材料<br>C.按有关部门规定，申报项目时，除了填写申请书，还须以附件形式提供相应的图片、证书、文件等作为支撑材料，以供评审专家核查<br>D.某窗帘公司要求安装人员为客户上门服务时，必须把测量、安装、调试、用户评价等每个环节拍成小视频，现场传给部门经理<br>解析：主体：相关部门；客体：监督管理手段；出发点：用文字或图片等材料记录；过程：展示工作过程和业绩；落脚点：作为绩效考核依据。<br>A符合；B符合；C不符合落脚点，不是用作绩效考核的；D符合；选C。</p><p>【2021国地】85.通过提供产品及服务使顾客产生愉悦等积极情感，从而使顾客觉得从产品及服务中获得了超过使用价值的新价值，以此为手段进行情感营销的过程，称为情感价值链。<br>根据上述定义，下列没有凸显情感价值链的是（ ）。<br>A.小张从事美容工作多年，她总是专注而耐心地倾听客户说话，让客户在享受按摩的同时心情舒畅<br>B.智能音箱“小美”深受孩子们喜爱，因为它不仅能播放儿歌和故事，还能跟小朋友“对话、握手和点头”<br>C.电视上，一对年轻夫妻为“该谁扫地了”而犯愁，之后扫地机器人登场，并闪现广告语“有了它，更幸福”<br>D.洗碗机广告中，一位女士愁眉苦脸刷着油腻的碗盘，看着自己粗糙的双手，广告词是“你要做这样的女人<br>吗？”<br>解析：主体：无；客体：顾客；出发点：产生愉悦等积极情感；过程：此为手段进行情感营销；落脚点：获得了超过使用价值的新价值。<br>A符合，有附加价值心情舒畅。B不符合，无附加价值。<br>C符合，有幸福附加价值。D符合，有美丽双手附加价值。选B。</p><p>【2021国地】90.人们常常系统地高估自己对事件的控制程度或影响力，而低估机会、运气等不可控制因素在事件发展过程及其结果上所扮演的角色，这一现象被称为控制错觉。<br>根据上述定义，下列没有体现控制错觉的是：<br>A.人们想用骰子掷出“双6”时会在心中默念，用力揉捏骰子，相信这样做就会如愿<br>B.一些股民往往借助几个简单的因素预测大盘指数，结果常常是谬以千里<br>C.某企业经理认为今年当地举办的运动会对企业发展非常有利，预测今年营业额会有所上涨<br>D.景区某摆渡车驾驶员常年走山路，认为自己路况熟、技术好，所以在山路上开得非常快<br>解析：主体：人们；客体：事件；出发点：高估<strong>自己</strong>对事件的控制程度或影响力；过程：事件发展过程及其结果上所扮演的角色；落脚点：低估机会、运气等不可控制因素。<br>A符合用力，但是没有用。B符合。C不符合，不是自己，是运动会的影响。D符合。选C。</p><p>【2020国地】84.合理使用是指在法律明文规定的情形下，非商业性使用他人已经发表的作品，可以不经著作权人许可，也不必向其支付报酬。“法律明文规定的情形”主要包括：（1）为个人学习、研究或者欣赏，使用他人已经发表的作品；（2）免费表演已经发表的作品；（3）对设置或者陈列在室外公共场所的艺术作品进行临摹、绘画、摄影、录像；（4）将已经发表的以汉语言文字创作的作品翻译成少数民族语言文字作品出版发行。<br>根据上述规定，下列属于合理使用的是：<br>A.甲在班级聚会上演唱了戊未发表的一首歌曲<br>B.乙将一部英文作品翻译成蒙文作品出版发行<br>C.丙公司拍摄公共广场的雕塑作品后，将其制作成图片发行<br>D.丁为撰写论文，复印了庚发表在某期刊上的论文作参考<br>解析：A不属于，还未发表，不符合（2）；B不属于，发行属于商业性；C不属于，发行属于商业性；<br>D写论文是个人参考，属于，选D。</p><h3 id="4-2-多定义"><a href="#4-2-多定义" class="headerlink" title="4.2 多定义"></a>4.2 多定义</h3><p>【2021国地】83.统计数据分为定性数据与定量数据。定性数据包括分类数据和顺序数据。分类数据是指只能归于某一类别的非数字型数据，它是对事物进行分类的结果，用文字表述；顺序数据是指归于某一有序类别的非数字型数据。定量数据是指表现为具体数字观测值的数据。<br>①按城市规模可将城市分为特大城市、大城市、中等城市和小城市；<br>②婚姻状况：1-未婚，2-已婚，3-离异，4-丧偶；<br>③A地到B地的距离为200公里，到C地为320公里，到D地为100公里；<br>④某医院建筑面积37.5万平方米，开放床位3182个，临床医生687人。<br>根据上述定义，关于以上4组数据的说法正确的是（ ）。<br>A.②④都是分类数据 B.②③④都是定量数据<br>C.①②都是顺序数据 D.仅②是分类数据<br>解析：①是顺序，②是分类，③④是定量。选D。</p>]]></content>
    
    
    <categories>
      
      <category>公考</category>
      
      <category>错题本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>错题本_言语</title>
    <link href="/2020/11/27/%E5%85%AC%E8%80%83/CuoTi-YanYu/"/>
    <url>/2020/11/27/%E5%85%AC%E8%80%83/CuoTi-YanYu/</url>
    
    <content type="html"><![CDATA[<h2 id="一：-片段阅读"><a href="#一：-片段阅读" class="headerlink" title="一： 片段阅读"></a>一： 片段阅读</h2><h3 id="1-1-中心理解题"><a href="#1-1-中心理解题" class="headerlink" title="1.1 中心理解题"></a>1.1 中心理解题</h3><p>【2016江苏B】33.随着全球进入到“后抗生素时代”，微生物的耐药问题日渐严重。<strong>虽然</strong>无药可用的日子还未到来，<strong>但</strong>如果各国能认识到这一问题的紧迫性和严重性，规范抗菌药物使用，加紧筛选和研发新型抗菌药物，制定新型抗菌策略，将有助于控制微生物的耐药问题，提高人类的健康水平。<br>这段文字主要强调的是：<br>A.微生物的耐药性问题将会日渐严重 B.“后抗生素时代”面临无药可用的困境<br>C.“后抗生素时代”给各国带来健康威胁 D.解决微生物耐药性问题已迫在眉睫<br>解析：选D。转折前不选。</p><p>【2017江苏B】22.大多数桥梁是向公众开放的。尽管一些桥梁要收取通行费，但是对于绝大多数车辆来说并不禁止通行。<strong>然而</strong>，多数网络系统对公众却是不开放的。原因显而易见——这些网络系统是用来储存和处理个人通信、财务数据、医疗记录和商业秘密等敏感信息的，这些信息都跟个人和机构密切相关。<br>这段文字重在说明：<br>A.大多数桥梁向公众开放的事实依据 B.桥梁和网络在开放程度方面的差别<br>C.网络系统的存储功能及其基本特点 D.多数网络系统对公众关闭的合理性<br>解析：开放程度的差别的话应该是并列结构，而文段是转折结构，选D。</p><p>【2017江苏B】23.在日益开放的市场经济活动中，无论是来自城市还是来自农村的市场参与者，都被抛进不断更新的陌生空间中。市场的交易主体、交易行为、交易制度和交易商品，都在日新月异地变化着。尤其是考虑到经济生活信息化和网络化，市场经济的陌生关系就呈现出更为复杂的状态。<br>这段文字重在说明：<br>A.市场经济活动中人们面对的是陌生关系 B.市场经济的主要特点就是信息不断更新<br>C.市场经济生活变得越来越信息化网络化 D.市场经济使得人与人之间的关系复杂化<br>解析：文段的核心话题是“陌生关系”，只有A有此关键词。选A。</p><p>【2018江苏B】19.敦煌的壁画，今天来看，有关它的艺术类别、作者群体之争早已淹没在它作为风俗记录的伟大功绩之下。它激发的久远的情感共鸣，它唤起的广阔的文化认同，它引导人们对祖先的精神信仰和世俗生活的深度理解，雄健地跨越历史的长河，如此鲜明和有力地以记忆的方式，作用在欣赏者的心田。<br>这段文字着重强调的是<br>A.敦煌壁画的巨大功绩 B.敦煌壁画的文化精神<br>C.人们对敦煌壁画的价值认同 D.人们对敦煌壁画的情感共鸣<br>解析：总分结构，前面的是重点，主要描述功绩，选A。</p><p>【2018江苏B】20.AI应用于医疗服务，已经有很长一段时间。机器医生的表现看起来神奇，<strong>但</strong>在AI专家眼里，这些医疗应用都属于计算机视觉中的图像识别范畴，而大数据支持的图像识别技术，机器的表现已经在很多方面超过了人类，在医学影像领域展现实力属于正常发挥。<br>这段文字意在说明<br>A.AI在医学图像识别领域的进展 B.AI用于医学图像识别已趋成熟<br>C.AI在医学上的表现已超越人类 D.AI必将全面进入医疗服务领域<br>解析：转折结构。重点突出展现实力属于正常发挥，就是已经很成熟的意思，符合B，选B。</p><p>【2019江苏B】30.沉浸在自然环境的多样性生物中，有助于维持肌肤不可或缺的健康微生物群系和肠道菌群。研究显示，如果儿童在很小的时候没有用足够的时间去亲近大自然，那么随着年龄的增长他们就不会形成适当的免疫功能来保护自我。沐浴在大自然中，可以摄取那些能产生大量健康微生物群系的东西。由于一些城市缺少公园，树木稀少，这种大自然赋予的免疫力不足，________。<br>填入画横线处最恰当的是：<br>A.微生物群系和肠道菌群减少了 B.孩子们的免疫功能退化了<br>C.大自然中的生物多样性降低了 D.成年人的健康水平下降了<br>解析：文段中主要讲儿童，所以选B。</p><p>【2020江苏B】16.国家治理效能是反映制度优势的重要指标。中国特色社会主义的制度优势需要转化为国家治理效能，需要通过治理效能来实现和彰显。要善于运用制度和法律治理国家，把各方面制度优势转换为管理国家的效能。推进国家治理体系和治理能力现代化，是发挥社会主义制度优越性的必由之路。<br>这段文字重在强调：<br>A.我国制度优势需要通过良好的治理效能来体现 B.依靠法律推进我国治理体系和治理能力现代化<br>C.社会主义制度对我国治理现代化产生重大影响 D.治理国家必须发挥我国社会主义制度的优越性<br>解析：总分结构。BC无治理效能和制度优势这2个关键词。D太绝对，不选，且文中无此意思。选A。</p><p>【2020江苏B】18.对于1900-1911年的社会政治变动，真正给我以深刻印象的，并不是所读到的辛亥革命史著作，而是鲁迅的小说。从那里，我才真正知道各色人等是如何经历一场变革，他们不同的心态、经历、际遇、沉浮。在一个个非常生活化的、普通的空间里，被作家塑造和加工了的人物形象是栩栩如生的、可信的，他们再现了一个时代的情境。在这里，辛亥革命不是一个被神圣化了的事件，而是每一个经历者生活的一部分。而在我们的历史写作中，重大事件往往是被高高地架起来的。<br>这段文字意在说明：<br>A.鲁迅小说对历史事件的描写真实生动 B.历史写作往往不能给人以鲜活的印象<br>C.小说的史实陈述比历史学著作更真实 D.撰写辛亥革命史应该借鉴文学的手法<br>解析：转折结构。重点突出重大事件是被高高地架起来地。即不是栩栩如生地，选B。</p><p>【2020江苏B】21.在电影表现的技术层面，数字技术事实上已经代替了同源成像技术，出现了由电脑生产影像所构造的故事片。电脑生产的影像已经不再局限于单纯的特技效果，它们构成了影片全部蒙太奇中的镜头，主要角色都是完全或部分由电脑合成。在电影的发行和放映环节，具有质感的胶片卷，放映机吵闹的声音，抑或是影像剪辑表，还有流动于影院之间装胶片的金属盒，正在一个个地消失于我们的视线，成为历史。<br>下列对文意的概括最恰当的是：<br>A.数字技术已经颠覆了以往电影生产发行全过程 B.当前电影艺术表现完全离不开数字技术的辅助<br>C.数字合成技术取代了电影制作中各种拍摄手法 D.同源成像技术在电影拍摄技术层面已成为历史<br>解析：并列结构，找关键词，为数字技术。D项无关键词，排除。B、C无中生有，不选；选A。</p><p>【2020江苏B】23.每一页书中也许蕴含着各种心境情绪，让你时而唏嘘不已、痛哭流涕，时而又情不自禁、破涕为笑。你打开一本书，又好似开启了一条可以随意穿梭的时空隧道，瞬间拥有了一双可以御风的翅膀。每一页书中还可能隐含着一场涤荡一切的头脑风暴、一场惊天动地的革命，打开它你可能坚定如往昔，也可能瞬间大彻大悟。在书中，百年乃至千年前的先贤、天才与你同在。在书中，你可以与古人窃窃私语，也可以与他们唇枪舌剑。而每当你合上书页，你都不再是打开它时的自己——<strong>人不能两次打开同一本书</strong>。<br>下列说法与文中画线(加粗)部分意思最接近的是：<br>A.每读一本书读者就可能穿越一次历史和现实 B.两次读同一本书时往往身处不同的时间空间<br>C.读书的感悟会随着心境和情绪的不同而变化 D.同一本书中包含的内容有时候给人印象不同<br>解析：总分总结构，开头讲心境情绪，结尾再次强调。选C。</p><p>【2020江苏B】25.语言和文化一样，很少是自给自足的，故词语的借用自古至今都是常见的语言现象。但当外来词汇进入一个国家后，当地民族会在适应吸收新成分的同时，不自觉地变异和改造其原貌。随着时间的推移，外来词汇会逐渐本土化，日久天长，源流模糊，体用隔断，变异迭生。一旦借词身上的“异域特征”(诸如音素、音节的构成等)在使用者的意识里淡化或消失，它们就会被当地人视为自己母语中的一部分。<br>这段文字重在说明：<br>A.外来词汇对本民族语言和文化的影响 B.本民族语言吸收改造外来词汇的方式<br>C.外来词汇使用的普遍性及本土化过程 D.外来词汇在母语中淡化与消失的原因<br>解析：转折结构。转折后讲诉的是外来词汇本土化的过程。选C。</p><p>【2021国地】41.“藏粮于地、藏粮于技”是习近平总书记对粮食安全的战略部署，“软硬件”同时发力将助力提升农业生产率和土地产出率。随着现代科技手段的注入，农业科技创新既帮助农民不断克服疫情带来的影响，又让农业生产更加精准高效。袁隆平的超级杂交水稻、李登海的紧凑型杂交玉米······一批又一批领先国际的粮食品种不断被培育出来。从地瘠“斗笠田”到丰产“吨粮田”，从“汗滴禾下土”到“无接触式春耕”，从“灾殃难测”到“高科技防灾”，现代科技为我国农耕注入了“硬核生产力”。这就意味着粮食丰收，库存充裕，藏粮于民，才会国泰民安。<br>最适合做这段文字标题的是：<br>A.民为国基，谷为民命 B.粮食生产“稳”字当头<br>C.藏粮于民，才能国泰民安 D.提升科技水平，保障粮食安全<br>解析：总分总结构。文章主旨是现代科技，选D。</p><p>【2021国地】42.一般而言，城市群之间的交通干线分布着许多城市，聚集着大量产业和人口，从而构成经济带。加强经济带规划和经济带上城市建设，是建设现代化区域发展体系和促进区域协调发展的重要方面。为此，应依托重要交通干线聚集经济要素，形成纵向或横向的经济发展轴，充分发挥其对统筹区域协调发展的作用。比如，沿海经济带、长江经济带、陇海兰新经济带和京广京哈经济带等已经集聚了大量人口、产业，城市分布也比较密集，形成了比较明显的经济发展轴，已成为承东启西、连南贯北的经济主骨架。<br>这段文字意在说明：<br>A.经济带建设对区域协调发展具有重要意义 B.我国区域经济发展应以城市群建设为依托<br>C.交通干线承担着聚集经济要素的重大使命 D.形成经济发展轴是城市群建设的长远目标<br>解析：分总分结构。“应依托重要交通干线聚集经济要素”是关键句，选C。</p><p>【2021国地】45.早在先秦时期，我国就逐渐形成了以炎黄华夏为凝聚核心、“五方之民”共天下的交融格局。秦国“书同文，车同轨，量同衡，行同伦”，开启了中国统一的多民族国家发展的历程。此后，无论哪个民族入主中原，都以统一天下为己任，都以中华文化的正统自居。分立如南北朝，都自诩中华正统；对峙如宋辽夏金，都被称为“桃花石”；统一如秦汉、隋唐、元明清，更是“六合同风，九州共贯”。秦汉雄风、大唐气象、康乾盛世，都是各民族共同铸就的历史。今天，我们实现中国梦，就要紧紧依靠各族人民的力量。<br>这段文字意在说明：<br>A.我们悠久的历史是各民族共同书写的 B.我们辽阔的疆域是各民族共同开拓的<br>C.我们灿烂的文化是各民族共同创造的 D.我们伟大的精神是各民族共同培育的<br>解析：分总结构。B文段中无疆域，C是例子内容，非重点。<br>D文段中没有伟大精神，选A。</p><p>【2021国地】47.虽然物质生产是社会生活的基础，但上层建筑也可以反作用于经济基础，生产力和生产关系、经济基础和上层建筑之间有着十分复杂的关系，有着作用和反作用的现实过程，并不是单线式的简单决定和被决定逻辑。世界上的事物总是有着这样那样的联系，不能孤立地静止地看待事物发展，________。正所谓“有无相生，难易相成，长短相形，高下相倾，音声相和，前后相随”。在观察社会发展时，一定要注意这种决定和被决定、作用和反作用的有机联系。对生产力标准必须全面准确理解，不能绝对化，不能撇开生产关系、上层建筑来理解生产力标准。<br>填入画横线部分最恰当的一项是：<br>A.广袤的自然界是如此，丰富的精神世界也是如此<br>B.每一个事物各部分、要素之间都存在联系<br>C.否则往往会出现盲人摸象、以偏概全的问题<br>D.任何事物都与周围的其他事物相互联系着<br>解析：提出问题-分析问题-解决问题。横线填孤立看待事物的后果或影响。选C。</p><p>【2021国地】50.戴口罩等遮挡条件下的人脸识别其实是一项“老”技术，此前研究人员在解决军事刑侦和视频监控问题时就曾长期研究过该技术，并发展出诸多成熟应用。因此，________。但是以往的技术基础并没有完全打消人们对戴口罩人脸识别“先天不足”的顾虑。相较于以往，口罩遮挡住面部，使得人脸识别系统收集到的面部信息大量减少。不过研究表明，人脸识别的关键信息集中于眉毛和眼睛，只要模型训练得当，戴口罩人脸识别的准确率并不会大幅下降。<br>填入画横线部分最恰当的一项是：<br>A.提高识别精度才是这一技术的难点所在 B.该技术的稳定性和准确率是有一定基础的<br>C.人脸识别技术已经被广泛应用于各个领域 D.人脸识别并不需要对全脸进行整体识别<br>解析：转折结构。选B。</p><p>【2021国地】53.与线下教学相比，由于时空差异，线上教学更加依赖于教师的指导和帮助，对资源的需求更大。然而，在知识经济时代，教师早已不再是知识垄断者，网络社会中的个体都有可能成为兼具知识消费者和生产者的双重角色。因此，推动社会力量参与在线教育资源供给，需要改变学校“单打独斗”的传统教育格局，以开放的态度接纳企业在线教育服务。例如，学校可适当采取外包的形式，向那些通过资质审核的教育机构、企业购买网络课程服务，提供“智能 真人”的双引擎驱动教学服务。此外，双方还可在资源支持、学情监测、评价反馈等方面加强协同创新，促进在线教育的健康发展。<br>这段文字意在说明：<br>A.“智能 真人”是教育服务的发展趋势    B.教育资源供给来源不再局限于学校内部<br>C.共享经济时代在线教育将成为一种常态 D.在线教育的健康发展需要引入社会力量<br>解析：转折后总结结构。要改变“单打独斗”，就是要引入社会力量的意思，选D。</p><p>【2021国地】58.近年来，3D打印技术开始应用于食品、建筑、医疗卫生、航空航天等多个领域。随着3D打印技术在金属零部件制造上取得较大进展，各国开始探讨其在武器装备制造与维修中的应用。研究表明，3D打印对军用武器及设施维修效果显著，能直接在战场上把需要的零部件“打印”出来，及时、精准完成受损装备的维修，快速恢复其作战能力。然而，这种方式制造的军用设备有着不可避免的缺陷，对装备材料要求极高的军用设备来说，除了尺寸受限，其强度和质量也令人担忧。受技术、成本的限制，3D打印技术难以取代大规模流水线生产。<br>这段文字主要介绍了3D打印技术：<br>A.广阔的应用前景 B.取得的最新进展<br>C.在军事领域的应用情况 D.与大规模流水线生产的区别<br>解析：转折结构。A无中生有，无“军事”主题词。<br>B非重点，D非重点且无军事关键词。选C。</p><p>【2020国地】53.作为世界上最成功的室内栽培植物之一，绿萝几乎就是盆栽的代名词，______。绿萝这个物种早在1880年就被确认了，但是你很难想象，直到2004年，它的原产地才被确定为法属波利尼西亚社会群岛的莫雷阿岛。更为神秘的是，绿萝是一种过分矜持的植物，虽然它已经扩散到了全世界的热带地区，却只在1962年有过一次确切的开花记录，直到2016年，人们才发现了它开花的秘密。<br>填入画横线部分最恰当的一句是：<br>A.唯一的遗憾就是绿萝从来不开花 B.因为它非常适合人类的居住环境<br>C.但它却也是我们最熟悉的陌生人 D.是一种不可多得的室内观叶植物<br>解析：下文程度词–更为神秘的是。前文也是强调神秘。选C。</p><p>【2020国地】58.虽然寒冷的冬季是心血管疾病的高发期，<strong>但在高温</strong>闷热的“秋老虎”时节，空气中湿度增高、含氧量降低，平时患有高血压、冠心病的人常会感觉不适，出现胸闷、气促、头晕等症状。另外，高温天气会使人体出汗过多，血液浓缩，如果未能及时补充水分，容易形成斑块；一旦斑块脱落，血栓形成，堵塞血管，就可发生急性心梗。此外，人在炎热夏夜往往得不到良好的睡眠，这也是心脑血管疾病的重要诱因之一。闷热天气还会使人情绪波动、心情烦躁，这也是冠心病突发的危险因素。在这段时间，因工作劳累而缺乏休息的人，尤其要警惕心肌梗死突然来袭。<br>最适合做这段文字标题的是：<br>A.“养生”尤其要“养心” B.“秋老虎”之名因何而来<br>C.心脑血管疾病诱因知多少 D.夏秋之交要预防心肌梗死<br>解析：文段一开始冬季引出话题，但在高温突出是夏秋交际时刻。<br>后面程度词并列说明夏秋之交时要警惕心血管疾病、心梗。<br>C不够全面，选D。</p><h3 id="1-2-接语选择题"><a href="#1-2-接语选择题" class="headerlink" title="1.2 接语选择题"></a>1.2 接语选择题</h3><p>【2018江苏B】18.①中国已经成为世界第二大经济体，而且不断拉开与世界第三大经济体的差距。<br>②这些都给人民币的进一步崛起提供了机会。<br>③事实上，中国已经取代美国成为世界上第一大货物贸易国。<br>④此外，中国还通过创建亚投行，发起“一带一路”倡议，大大提升了国家的经济软实力。<br>⑤人民币国际地位的提升是大势所趋，是中国经济影响力提升决定的。<br>⑥不仅如此，中国金融市场的发展也取得了长足进步，中国的股票市场规模仅次于美国，上海和深圳正大踏<br>步走在通往世界主要金融中心的道路上。<br>将以上6个句子重新排列，语序正确的是：<br>A.⑤③①②④⑥ B.⑤①③⑥④②<br>C.①③④⑥②⑤ D.①③②④⑥⑤<br>解析：先看首句，1和5，看不出来。开始找关联句，看到3，和1可以关联，1在3前面，排除A。<br>然后看到6，和3可以关联，先3后6后4。符合B。选B。</p><p>【2020江苏B】29.①显而易见，一个专业人士在一年之内进行多次重复实验<br>②但欧洲在改良并且推广印刷术之后，开始建立科学实验的制度，偶然的作用开始让位于必然<br>③有经济学家认为，古代中国在技术上一直领先，是因为古代中国人口规模庞大，偶然性的发明远远多于人口稀少的欧洲<br>④所获得的知识和发现，肯定要比一个工匠一辈子因为偶然和随机所获得的发现和成果多<br>⑤在印刷术发明之前，人类社会科技的进步主要靠大众在生产实践中的偶然发现<br>⑥无论在东方社会，还是西方社会，情况都是相似的<br>将以上6个句子重新排列，语序最恰当的是：<br>A.⑤⑥③②①④ B.③⑥⑤②①④<br>C.⑤⑥②①④③ D.③⑤⑥①④②<br>解析：③和⑤比较，③更适合作首句；③②可以捆绑，只有A符合，选A。</p><p>【2021国地】52.①原因就在于原子核内部的质子和中子数量越多，其状态也就越不稳定。越容易发生放射性的衰变<br>②当越来越多的质子和中子聚集在一起，带正电荷的质子之间的斥力就越来越大<br>③人们可以在实验室里通过人工方式合成自然界中不存在的元素，但却不能合成无限多的原子核<br>④在原子核内部，质子和中子等粒子通过强相互作用结合在一起，这几乎是宇宙中最强的相互作用<br>⑤中子之间也会有一些排斥，强相互作用越来越难以束缚，不足以维持原子核的稳定<br>⑥在人类已经发现或是制造出的3000多种原子核中，只有288种是稳定的<br>将以上6个句子重新排列，语序正确的一项是：<br>A.②④⑤⑥③① B.③①④②⑤⑥<br>C.④⑤⑥①②③ D.⑥②③①④⑤<br>解析：首句不好判断。找捆绑。<br>第⑤句中也有排斥，说明前面有斥力，可以和②捆绑。<br>看选项只有B，选B。（注意连接词）</p><h3 id="1-3-细节判断题"><a href="#1-3-细节判断题" class="headerlink" title="1.3 细节判断题"></a>1.3 细节判断题</h3><p>【2016江苏B】26.<strong>网络用语</strong>从一开始就不是交际语言，文字和语言的性质是不一样的，语言<strong>本质上</strong>是用声音符号做物质外壳的，文字则是用来记录有声语言的。世界上大多数语言并没有文字，这些语言也就不会有网络用语。文字有记录、保存语言的功能，并能远距离传送，网络主要利用文字来实现即时的远距离交流。文字有这样的优点，但是它不能取代语言。<br>根据文意，网络用语之所以不是交际语言是由于：<br>A.网络用语本质上是用文字符号记载的语言 B.网络语言主要用来实现即时的远距离交流<br>C.文字虽能远距离传送但不能取代交际语言 D.网络即使再发达人也不可能不用交际语言<br>解析：选A。D项是无中生有。选项长度一致，拗口的、且字数一致的一般是凑齐字数的，不选。</p><p>【2019江苏B】18.以人均收入衡量的发展差距，本身隐含着一个资源禀赋结构上的差异，即发达地区具有相对丰富的资本要素，从而在资本密集型产业上具有比较优势；而相对不发达地区则具有劳动力丰富和生产成本低的比较优势。东中西部地区之间存在的资源禀赋结构差异，无疑可以成为中西部地区经济发展赶超的机遇。<br>下列说法与文意不符的是<br>A.不同地区资源禀赋的差异有利有弊 B.发达地区相对来说劳动力比较缺乏<br>C.中西部可以利用劳动力丰富的优势 D.资本密集型产业多集中在东部地区<br>解析：A项，不同地区的资源差异文中没体现出弊端。选A。</p><p>【2020江苏B】26.旅行是用你的眼、用你的心去感悟，这一点是再好的旅行装备，再妙笔生花的作家的游记作品，再保真的摄像拍照设备都代替不了的。至于如何获得个人感悟，从客观上讲需要提前做功课，带着感情和文化背景去旅行；从主观上要保持随心所欲的心态，每个人都有自己独特的感悟，不要跟随他人的参照系去做盲目判断。<br>下列说法与文意不符的是<br>A.旅行就是用自己的眼睛去发现美探索美 B.了解相关文化背景有助于体悟旅行之美<br>C.旅行时的装备和设备可有可无 D.旅行者应当有宽松舒缓的心态<br>解析：总分结构。A表述片面；BD符合，排除；C项文段仅说保真的拍照设备，不是所有装备和设备，偷换概念；<br>相比A和C而言，C更加错误，择优选C。</p><p>【2021国地】54.人们在评判手机拍照功能时，总是直观地认为手机像素越高，拍照效果越好。事实真的是这样吗？从成像原理来看，像素值的大小对生成的图像会产生一定的影响。当手机的图像传感器面积一定的时候，像素值越高，单位像素面积就越小。而单位像素面积又直接影响到进光量，单位像素面积越小，图像传感器上进光量就越少，拍摄出的照片就会变得灰暗模糊；像素值越低，单位像素感光面积大，感光性能更好，因此在成像的高感光画质以及画面层次等方面都有更好的表现。<br>这段文字接下来最有可能：<br>A.阐述像素的定义及其提升途径 B.介绍提高手机拍照效果的技巧<br>C.揭示进光量与像素值间的关系 D.指出影响手机成像效果的因素<br>解析：后文围绕如何保证手机成像效果进一步说明，选D。</p><p>【2020国地】59.导航卫星位于2万公里的高空，在其所覆盖的范围内都可通过接收信号来导航。而在超出2万公里的深空，就需要全新的导航系统。天文学家提出了几种可能的导航系统，谈得最多的就是脉冲星导航。脉冲星是一类中子星，其磁极方向能产生射电或X射线辐射，当转动轴和磁极不重合，而转动轴扫过地球的时候，就会产生脉冲。其中一些脉冲星转动稳定性非常好，可以比拟于地球上最好的原子钟，所以这些脉冲星也被称为“宇宙间的原子钟”。如果可以接收到它们的信号并且知道它们的位置，便可以利用这些脉冲星进行星际航行。<br>这段文字接下来最可能介绍的是：<br>A.宇宙中类似脉冲星的其他原子钟 B.目前星际航行中面临的一些困难<br>C.验证脉冲星导航可行性的实验 D.影响脉冲星转动稳定性的因素<br>解析：读全文段，不要只读最后一段，D文段中已经提到过。<br>关键词脉冲星导航，选C。</p><h2 id="二：-文章阅读"><a href="#二：-文章阅读" class="headerlink" title="二： 文章阅读"></a>二： 文章阅读</h2><p>【2017江苏B】<br>没有“履约保证金”作保，没有追责索赔渠道兜底，订单农业以及相关产销合同，当然没有任何约束力可言。<br>38.关于订单农业购销合同缺乏约束力的原因，作者特别强调的是：<br>A.农民不熟悉商品社会的契约的体系和交易方式 B.农民对违约的行为的性质和后果没有充分认识<br>C.大部分农民的合同没有保障执行的担保机制 D.企业因索赔代价太高放弃追究违约行为<br>解析：文段中说没有约束力，是因为没有“履约保证金”作保，突出的是保证，即担保，选择C。</p><p>【2020江苏B】<br>我们多数人对“膳食纤维”的感性印象，恐怕就是那些粗糙的、嚼不烂的“植物纤维”，所以很容易就会想到芹菜和韭菜这类含“筋”丰富的蔬菜，其实，这两种蔬菜膳食纤维含量和许多食物比起来丝毫不出众。它们“渣渣”的口感，主要是植物木质部和韧皮部形成的宏观维管束结构，不完全等同于“膳食纤维”。<br>大多数植物性食物，都同时含有这两类膳食纤维。食物口感粗糙的部分，主要包含不溶性膳食纤维，而可溶性纤维完全没有粗粝的口感，膳食纤维含量_______，所以一种食物粗纤维较多，并不代表它的膳食纤维的总量就高。那么，哪些食物的膳食纤维含量比较高呢？膳食纤维在谷物、豆类、菌藻和果蔬中广泛存在，而动物性食物则几乎不含膳食纤维。实际上，豆类和谷物才是膳食纤维的含量冠军，它们可溶性和不可溶性膳食纤维的含量都很高，是普通果蔬的几倍甚至十多倍。需要强调的是，这里的“谷物”特指“全谷物”：即脱壳后没有经过精制的粮食种子，譬如小麦粒、大麦粒、糙米、燕麦、荞麦、玉米、薏米、小米等，不包括精白米和精白面，事实上，精米、精面做成的食物，膳食纤维含量很低。<br>41.作者在文章开头以芹菜韭菜为例主要想说明：<br>A.多数人凭感性印象判定膳食纤维 B.含“筋”的食物并非一定富含膳食纤维<br>C.膳食纤维丰富与否不能光凭口感 D.这两种蔬菜实际上与膳食纤维关系不大<br>解析：第一段是转折结构。开始描述含“筋”丰富的蔬菜<strong>其实</strong>膳食纤维含量不一定多，同B，选B。<br>43.填入文中画横线处最恰当的是：<br>A.取决于两者的总和 B.全在于两者比例高低<br>C.来自于这两类食物 D.包含在这两类食物中<br>解析：大多数植物性食物，都同时含有这两类膳食纤维。指出主要看两者总和，选A。<br>45.作者通过这篇文章主要说明：<br>A.哪些食物中膳食纤维含量是比较丰富的 B.食用适量含膳食纤维食品对健康有哪些好处<br>C.居民膳食指南给日常饮食提出哪些要求 D.不恰当的饮食方式中隐含哪些健康风险因素<br>解析：选A。文章中心论述了哪些食物膳食纤维含量多，符合A选项。<br>CD不含膳食纤维主题词，排除；</p><h2 id="三：-选词填空"><a href="#三：-选词填空" class="headerlink" title="三： 选词填空"></a>三： 选词填空</h2><p>【2016江苏B】41.在全面深化改革的进程中，谋事不实，蓝图再好也不过是______；创业不实，梦想再美也只是黄粱一梦；做人不实，立身之本必定是_______。<br>依次填入画横线处最恰当的一项是：<br>A.缘木求鱼 空中楼阁 B.画饼充饥 荡然无存<br>C.纸上谈兵 一无是处 D.闭门造车 子虚乌有<br>解析：选B。<br>缘木求鱼比喻方向、方法不对，达不到目的；<br>画饼充饥比喻空想安慰自己。<br>一无是处比喻一点对的地方都没有。</p><p>【2016江苏B】54.大数据以量取胜，孤立的单个数据几乎没有商品价值，故而多数记录主体容易________自己的数据产权。但是一个个数据_______，便是宝藏。而大型数据集的处理使用，须借助复杂的分析算式与大功率计算机，普通人和小公司______。<br>依次填入画横线处最恰当的一项是：<br>A.忽视 集腋成裘 难以问津 B.忽略 积少成多 难以为继<br>C.遗忘 日积月累 望而却步 D.遗弃 接踵而至 望洋兴叹<br>解析：选A。<br>集腋成裘：比喻积少成多。<br>难以问津：比喻很难去探索或尝试。<br>难以为继：比喻之前做的事情难以继续下去。文段中的小公司根本没法开始做。</p><p>【2017江苏B】41.北京有大量历史文化保护区，它们是古都北京的文化________，而位于北京历史城区中轴线西侧的什刹海区域，更是以宁静而优雅的环境、自然与人文的和谐________。<br>依次填入画横线处最恰当的一项是：<br>A.特色 举世闻名 B.特征 远近闻名<br>C.标志 著称于世 D.指标 为人称道<br>解析：特色、特征都指一个事物区别于其他事物的地方。故选择C。</p><p>【2017江苏B】45.和西方的《荷马史诗》《圣经》一样，中国历史上早期的一些典籍获得了备受________的地位。当然，这些典籍之后无一例外地经受了历史时代的文本筛选、价值________的复杂过程。<br>依次填入画横线处最恰当的一项是：<br>A.尊崇 阐释 B.膜拜 诠释<br>C.拥戴 注释 D.青睐 解释<br>解析：备受尊崇为固定搭配。拥戴一般指人；膜拜表示极端恭敬或畏服，程度过重。选A。</p><p>【2017江苏B】46.其实，物理学家探测引力波的尝试一直________地进行着，然而因为长期没有突破，这方面的工作逐渐被边缘化，颇受________。<br>依次填入画横线处最恰当的一项是：<br>A.时有时无 冷遇 B.时断时续 冷落<br>C.时强时弱 冷淡 D.时快时慢 冷眼<br>解析：选B。时有时无通常不做修饰语，无法搭配进行着，排除；受到冷落为固定搭配。选B。</p><p>【2018江苏B】33.当前及今后相当长的一段时期内，教育公平这一价值理念将是社会大众对教育的基本而强烈的诉求，是教育政策的核心价值追求，也是政府推动教育改革的基本________。在教育公平价值理念的映射下，教育________成为促进、实现教育公平的策略选择。<br>依次填入划横线处最恰当的一项是<br>A.目的 平等 B.目标 均衡<br>C.要求 均等 D.需求 平衡<br>解析：看第一空，目的和目标都符合，排除CD。教育平等是不可能的，只能说教育均衡。选B。</p><p>【2018江苏B】41.在现今国际竞争格局中，一个国家的综合竞争力也取决于是否有若干个综合经济实力强大的________或城市群，它们是一国国民经济的________，代表国家参与国际竞争，________周边乃至全国经济的增长。<br>依次填入划横线处最恰当的一项是<br>A.地区 晴雨表 推动 B.地域 风向标 撬动<br>C.区域 制高点 带动 D.区位 领头羊 启动<br>解析：第一空排除D。第二空看不出来。第三空，经济好的带动差的，同先富带动后富，选C。</p><p>【2018江苏B】42.实现精准扶贫，关键是具体情况具体分析、特殊贫困特殊对待，要对不同地区不同条件下的特殊贫困做________研究，准确地把握贫困问题的________，然后________地探寻精准扶贫的有效途径。<br>依次填入划横线处最恰当的一项是：<br>A.细致 关键 分门别类 B.精准 脉搏 因地制宜<br>C.深入 实质 对症下药 D.切实 本质 深中肯綮<br>解析：深中肯綮(qìng)，比喻分析深刻，能击中要害，或能说到点子上。<br>因地制宜：意思是根据各地的具体情况，制定适宜的办法。<br>纠结B和C。<br>前文已经提到精准，不会反复用同一个词形容，而且第三空对症下药读起来更顺畅，优选C。</p><p>【2018江苏B】45.知识可以通过间接的途径获得，审美也存在其他的来源和形式，但师生之间彼此的透彻了解与关切，施教者________透示出的热爱和睿智，受教者________聆听表现出的诚恳和渴望，问题不得解决的苦苦思索，问题解决后的________，发自内心的钦佩和赏识等等，这种特定时空的共同构思、问答、行动以及伴随其中的喜悦痛苦，是任何第三者不曾感受，别的场合也不曾有过的。<br>依次填入划横线处最恰当的一项是：<br>A.声情并茂 全神贯注 笑逐颜开 B.倾尽全力 敛声屏气 相视一笑<br>C.言传身教 聚精会神 喜上眉梢 D.循循善诱 凝神屏气 会心一笑<br>解析：敛声屏气：形容畏惧、小心的样子。B项不符语境。<br>笑逐颜开：多形容人满脸堆笑得表情和喜悦得心情。<br>喜上眉梢：表情眉开眼笑。AC都是形容外在的表情，不符后面发自内心的语境，排除。<br>选D。</p><p>【2019江苏B】33.中国传统文化中的“和而不同”与共享观念，________地成为“人类命运共同体”以及“民心相通”的价值观的注脚。中国向世界提出了“人类共同命运”的全球倡议，包含了对全球“普遍联结”与“价值关联”等发展特征的________概括，是中国特色全球传播的生动表述。<br>依次填入画横线处最恰当的一项是<br>A.恰逢其时 高度 B.无可替代 简洁<br>C.恰如其分 凝练 D.正当其时 有力<br>解析：恰如其分：指办事或者说话十分恰当合适。<br>正当其时：指正是时候。文段中未涉及时间。选C。</p><p>【2019江苏B】35.支付工具的多样化组合，提升了我国支付体系运行的质量和效率，满足了公众________支付需求。从未来支付趋势看，现金支付和非现金支付工具相互________、相互补充、共存共生的局面将长期存在。但是对我国这样一个地域广、人口多、发展很不均衡的大国来说，由于核心技术水平的限制，过度依赖非现金支付会大大增加支付体系的脆弱性。因此，必须长期________现金作为国家法定支付方式的地位，切实保障广大人民使用现金的合法权益。<br>依次填入画横线处最恰当的一项是<br>A.区别化 支持 确保 B.差异化 支撑 确立<br>C.个性化 支援 确认 D.多元化 支应 确证<br>解析：看第一空，多样化组合，差异化支付需求比较符合，排除CD，长期确立地位，选B。</p><p>【2019江苏B】36.随着城镇化以及新一轮产业转移，很多城区的制造企业搬离。在留下的厂房利用问题上，以北京798艺术区为代表的城市更新________，并成为诸多城市________的对象，各类文化创意产业园区逐渐成为城市更新的重要产品________。<br>依次填入画横线处最恰当的一项是<br>A.如火如荼 模拟 名片 B.方兴未艾 沿袭 样式<br>C.应运而生 效仿 形态 D.风起云涌 学习 代表<br>解析：随着城镇化表示之前未开始，因此第一空应运而生比较好，第二三空也符合，选C。</p><p>【2019江苏B】40.这部古代医学典籍对我来说有点“深”，但我还是________地读了一遍，竟然________。我想中国的医道，其实就是天道、人道，是________的。从医生的医案中，我们照样可以读出中国的哲学和中国人的智慧。<br>依次填入画横线处最恰当的一项是<br>A.全神贯注 喜出望外 浑然天成 B.目不转睛 无师自通 不分你我<br>C.手不释卷 恍然大悟 一以贯之 D.饶有兴趣 爱不释手 一脉贯通<br>解析：选D。第一空目不转睛地”看”，搭配“读”不合适，因此ACD保留；第三空一脉贯通较好，选D。</p><p>【2020江苏B】33.他从不要求学生死记硬背，组织考试也________。考试通常采用开卷的方式，让学生把试卷带回去做。凡是提出自己见解的，即使是与他唱反调，只要能________，往往也能得高分。<br>依次填入画横线处最恰当的一项是<br>A.特立独行 自成一体 B.与众不同 自圆其说<br>C.我行我素 言之凿凿 D.剑走偏锋 义正词严<br>解析：特立独行：特殊的，与众不同的；符合；<br>自成一体：在书法、绘画等方面独具风格，自成体系，不符合文意；<br>自圆其说：指说话的人能使自己的观点或谎言没有漏洞。选B。</p><p>【2020江苏B】34.国际组织亦称国际团体或国际机构，是具有国际性行为特征的组织，是两个或两个以上的国家（或其他国际法主体）为实现共同的政治经济目的，依据其________的条约或其他正式法律文件建立的有一定规章制度的________机构。<br>依次填入画横线处最恰当的一项是<br>A.缔结 常设性 B.制订 长期性<br>C.拟定 永久性 D.起草 轮值性<br>解析：选A。常设性机构，固定搭配。<br>缔结指订立，可搭配条约；制订指创制，拟定，不如缔结合适。</p><p>【2020江苏B】36.一个人走在森林里，膨胀的暖流扑面而来，仿佛热气从暖炉中________而出。随着森林的浓密稀疏，温热的空气或膨胀、或减弱。湿润的凉意令人感到河道的存在，它们虽早已________，但泥土中仍________着湿气。<br>依次填入画横线处最恰当的一项是：<br>A.流泻 干涸 残存 B.汹涌 断流 留存<br>C.肆意 枯竭 保存 D.奔腾 湮灭 残留<br>解析：河流断流，河道干涸，B不恰当；<br>河道搭配干涸，泥土中残存着湿气也恰当，选A。</p><p>【2020江苏B】40.每次去浯溪，除了看它的碑林和山水之外，最令我________的，是元结当年弹琴的浯台。那里是浯溪的最高点，每到月夜，元结总是执一把琴，坐在那里对江而弹。琴声激活了浯溪山水，浯溪山水________了他的琴声。元结与山水融合在一起，任千古忧愁万古功名顺琴声而去，随水而流，在虚无中________着沉重，在缥缈中偶尔跳出一声叹息。<br>依次填入画横线处最恰当的项是：<br>A.魂牵梦绕 涵养 夹杂 B.心驰神往 滋养 错杂<br>C.流连忘返 浸润 掺杂 D.铭心刻骨 滋润 混杂<br>解析：第一空，ABC都适合，D程度过重；<br>第二空A项涵养指修身养性方面，不符合；<br>第三空掺杂指混杂，恰当；而错杂指交错夹杂，侧重杂乱，不符合；选C。</p><p>【2021国地】24.中国道路的成功开创不仅创造了中国奇迹，而且创造了中国经验。中国经验无疑是中国智慧的结晶，具有鲜明的________。但是，中国经验作为中国道路的积极成果，也是在遵循历史发展和现代化发展规律、吸收世界发展经验教训的基础上形成的，它是对人类文明发展进行探索的重要产物，反映了人类文明进步的规律，因而又具有一定的________。<br>依次填入画横线部分最恰当的一项是：<br>A.地域性 国际性 B.实践性 理论性<br>C.特殊性 普遍性 D.先进性 创新性<br>解析：第一空看不出来，先看第二空。反映了规律，具有普遍性。<br>第一空后面但是转折，填特殊性，选C。</p><p>【2021国地】25.“为调研而调研”等现象的出现，很大程度上就在于调研不深入、不具体。现实中，有人了解情况习惯于大而化之、________；有人调研习惯于走设计路线，________。这些心中不揣问题、脚下不沾泥土的错误做法，导致调研不深、不实、不细、不准，最终也会无效。<br>依次填入画横线部分最恰当的一项是：<br>A.粗枝大叶 按部就班 B.走马观花 表里不一<br>C.轻描淡写 循规蹈矩 D.避重就轻 按图索骥<br>解析：大而化之：形容做事不谨慎，疏忽大意。<br>第一空填近义词，AB都可，第二空也是近义，选A。</p><p>【2021国地】28.在实际应用中，专网通常服务于政府、军队、公安、能源、消防、轨道交通等部门或领域，大部分情况下被用来进行应急通信、调度指挥。性能可靠、低成本、定制化的特点，使其在行业应用中具备________的优势。即便5G时代呼啸而来，专网依旧能够找到________。<br>依次填入画横线部分最恰当的一项是：<br>A.独具一格 立足之地 B.众所周知 一席之地<br>C.不可替代 用武之地 D.显而易见 立锥之地<br>解析：先看第二空。用武之地比喻有施展才能的地方或机会。符合。<br>立足之地指容身的地方，不符合文意。选C。</p><p>【2021国地】30.一些国家在实现自身现代化过程中选错了参照系，将发达国家有什么、做什么作为实现自身现代化的________，导致在向市场经济转型过程中经济停滞、崩溃、危机不断。而中国能够根据自己的要素禀赋条件，发挥政府在市场经济中________的作用，把自己能做好的产业做大做强，将比较优势变成竞争优势，从而推动经济长期稳定快速发展。<br>依次填入画横线部分最恰当的一项是：<br>A.目标 因势利导 B.原则 总揽全局<br>C.模本 穿针引线 D.途径 保驾护航<br>解析：参照系同意词，排除BD。<br>因势利导：顺着事物的发展趋势加以引导。<br>政府在市场经济中是起指导作用，故选A。</p><p>【2021国地】36.亲近百姓、接近生活是曲艺这门艺术的生命力所在。当然，任何人都不可能________生活的全部，所以创作者才有了“采风”一说。采风从来不是去________生活，而是深入其中，体会其中的乐与悲。然而，现在许多曲艺工作者没有耐心去深入百姓生活，于是只能写自己熟悉的生活，创作能力无疑也受到了________。<br>依次填入画横线部分最恰当的一项是：<br>A.描摹 评判 质疑 B.洞察 记录 束缚<br>C.掌握 体验 削弱 D.了解 审视 限制<br>解析：第一空排除A。第二空深入其中的反义，是停留在表面，排除C。<br>第三空，能力被限制更好。选D。</p><p>【2021国地】37.上世纪八十年代初，SCI作为一种________的、相对公平的量化指标被引进中国，这是建立科学、公平、公正的高校科研评价体系的初步尝试，在当时是一种进步。但如果启用先进的考核举措而长期________，甚至演变成“至上”的法宝和单一的指挥棒，最终都会________，弊大于利。<br>依次填入画横线部分最恰当的一项是：<br>A.详细 奉为圭臬 画地为牢 B.稳定 唯命是从 作茧自缚<br>C.客观 一成不变 物极必反 D.中立 墨守成规 贻笑大方<br>解析：第一空体现相对公平之意，排除AB。<br>第三空贻笑大方：让内行人笑话，文中无此意，选C。</p><p>【2021国地】38.医生和患者在沟通时最容易出现的________其实是，患者不同意或没听懂医生的建议，又因为不想被说教或觉得尴尬而没有如实反馈意见，而医生也大多没有意识到这一点。这显然会大大影响临床诊疗的________。此外，患者还会由于不想被说教而不承认一些不良生活行为。越是健康状况差的患者，越是容易________一些信息，而他们恰恰是最需要高质量医疗服务的人。<br>依次填入画横线部分最恰当的一项是：<br>A.难点 结果 遗漏 B.盲区 效率 隐瞒<br>C.障碍 判断 虚构 D.瓶颈 目的 回避<br>解析：从第二空入手，排除D。<br>第三空“没有如实反馈意见”之意，排除AC。<br>第一空盲区代入，与后文呼吁，选B。</p><p>【2021国地】40.随着各种侦察手段的不断演进，可视侦察、红外侦察、雷达侦察等“________”，现代坦克在战场上越来越难以藏身。对此，现代坦克当然不会“________”。在讲求“发现即摧毁”的现代战场上，坦克必须实现对侦察手段的“免疫”，见招拆招，________，让对手对自己庞大的身躯“视若无睹”。<br>依次填入画横线部分最恰当的一项是：<br>A.齐头并进 束手就擒 对症下药 B.大显身手 自暴自弃 见机行事<br>C.虎视眈眈 坐以待毙 有的放矢 D.明察秋毫 知难而退 多管齐下<br>解析：第一空，A齐头并进形容有几个事物或一个事物多方面不分先后的进行，排除。<br>D明察秋毫多形容人，强调细小的事物能看清楚，排除。<br>第二空B自暴自弃形容甘心落后，不求上镜，排除。<br>C有的放矢：说话、做事有针对性。符合文意。选C。</p><p>【2020国地】22.中国正处于经济结构转型升级和世界新一轮技术革命的交汇时期，创新驱动高质量发展渐成共识。没有管理创新、市场创新的商业创新模式________，有真实需求场景的教育、医疗健康、信息消费、消费升级等模式创新领域，将会迸发出新的投资机会。<br>填入画横线部分最恰当的一项是：<br>A.举步维艰 B.日薄西山<br>C.难以为继 D.岌岌可危<br>解析：举步维艰：比喻办事情每向前一步都不容易，一般用于人或事物。<br>难以为继对应新的投资机会，选C。</p><p>【2020国地】24.“万物各得其和以生，各得其养以成”。这方面有很多鲜活生动的事例。始建于战国时期的都江堰，距今已有2000多年历史，就是根据岷江的洪涝规律和成都平原悬江的地势特点，________建设的大型生态水利工程，不仅造福当时，而且________。<br>依次填入画横线部分最恰当的一项是：<br>A.顺势而为 利在千秋 B.因势利导 泽被后世<br>C.物尽其用 历久弥新 D.因地制宜 经久不衰<br>解析：因势利导：顺着发展趋势加以引导。<br>顺势而为：指做事要顺应潮流，不要逆势而为。<br>第二空造福当时，泽被后世；功在当代，利在千秋。固定搭配，选B。</p><p>【2020国地】28.现在很多人对快速发展的食品科技比较陌生，对食品从农田到餐桌的全过程知之甚少，因此对错误信息的辨识能力、对谣言的抵御能力十分有限。那些________的谣言不仅影响消费信心，也给行业、产业带来直接的危害。强化食品安全科普传播________，也迫在眉睫，这已经成为全行业和全社会的共识。<br>依次填入画横线部分最恰当的一项是：<br>A.虚张声势 至关重要 B.铺天盖地 首当其冲<br>C.口耳相传 任重道远 D.耸人听闻 势在必行<br>解析：第一空BD都可。第二空首当其冲比喻最先受到攻击或遇到灾难，不符合文意。<br>势在必行：指从事情发展趋势看，必须采取行动。选D。</p><p>【2020国地】31.从陆地到天空，从恐龙到鸟类，生物的生态习性发生了巨大改变，身体结构也有了天壤之别。若非有一系列介于两者之间的过渡物种让人________，即便熟读《物种起源》，笃信达尔文的演化理论，也仍然会对“恐龙是鸟类的祖先”的说法________。<br>依次填入画横线部分最恰当的一项是：<br>A.无可辩驳 充耳不闻 B.心服口服 置之不理<br>C.不置可否 不以为然 D.眼见为实 将信将疑<br>解析：不置可否：意为不明确表态，即不说对、也不说不对，不符合文意；<br>选D。</p><p>【2020国地】34.当今世界，处于百年未有之大变局。世界多极化、经济全球化________，人类的命运紧密相连，各国利益深度融合。但同时，各种挑战也日益严峻。变局之中，要合作还是要对立，要开放还是要封闭，要互利共赢还是要________，人类发展处在何去何从的十字路口。<br>依次填入画横线部分最恰当的一项是：<br>A.有目共睹 各行其是 B.高歌猛进 独善其身<br>C.方兴未艾 两败俱伤 D.势不可挡 以邻为壑<br>解析：第一空排除C。<br>第二空 以邻为壑指拿邻国当作大水坑，把本国洪水排到那边去，比喻把灾难或困难推给别人。<br>独善其身：指做不上官，搞好自身修养，多指只顾自己，缺乏集体精神。<br>各行其是：各子按照自己以为对的去做。<br>选互利共赢反义词，D更恰当。</p><p>【2020国地】35.过去，我国生产能力滞后，因而把工作重点放在扩大投资、提高生产能力上。现在，产能总体过剩，仍________靠扩大规模投资抬高速度，作用有限且边际效用递减。虽然短期内投资可以成为拉动经济增长的重要动力，但最终消费才是经济增长的________动力。在扩大有效投资、发挥投资关键作用的同时，必须更加有效地发挥消费对增长的________作用。<br>依次填入画横线部分最恰当的一项是：<br>A.一味 持久 基础 B.片面 根本 决定<br>C.盲目 核心 一般 D.单纯 长期 实质<br>解析：第二空短期的反义，AD均可。<br>第三空政府工作报告固定搭配：投资是关键、消费是基础、出口是支撑。<br>选A。</p><p>【2020国地】39.准确、权威的信息不及时传播，虚假、歪曲的信息就会搞乱人心；积极、正确的思想舆论不发展壮大，消极、错误的言论观点就会肆虐______。这方面，主流媒体守土有责，更要守土尽责，及时提供更多真实客观、观点鲜明的信息内容，牢牢______舆论场主动权和主导权。主流媒体要敢于引导、善于疏导，原则问题要旗帜鲜明、立场坚定，一点都不能______。<br>依次填入画横线部分最恰当的一项是：<br>A.蔓延 守护 犹豫 B.扩散 占据 退缩<br>C.滋生 控制 迟疑 D.泛滥 掌握 含糊<br>解析：第一空排除C。第二空排除A。<br>第三空旗帜鲜明、立场坚定的反义词，对应含糊。选D。</p><p>【2020国地】40.具有“边缘型状态”的人往往缺乏______的自我认知，没有相对明确的自我形象。有时候他们觉得自己充满力量，非常自信，似乎是全能的存在；有时候却又觉得自己好像虚弱无力，______，非常自卑。在“边缘型状态”的人身上，这种转变往往是突然而______的。<br>依次填入画横线部分最恰当的一项是：<br>A.全面 弱不禁风 深刻 B.稳定 一无是处 剧烈<br>C.清醒 无所作为 离奇 D.完整 无足轻重 彻底<br>解析：第一空对应下文有时候，和转变往往是突然的，排除ACD。<br>第二空是全能的反义，对应B一无是处。<br>选B。</p>]]></content>
    
    
    <categories>
      
      <category>公考</category>
      
      <category>错题本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>错题本_数量</title>
    <link href="/2020/11/27/%E5%85%AC%E8%80%83/CuoTi-ShuLiang/"/>
    <url>/2020/11/27/%E5%85%AC%E8%80%83/CuoTi-ShuLiang/</url>
    
    <content type="html"><![CDATA[<h2 id="一：-数字推理"><a href="#一：-数字推理" class="headerlink" title="一： 数字推理"></a>一： 数字推理</h2><h3 id="1-1-多级数列"><a href="#1-1-多级数列" class="headerlink" title="1.1 多级数列"></a>1.1 多级数列</h3><p>【2016江苏B】57. $\sqrt{2}，2，3，\sqrt{17}，2\sqrt{7}，（）。$<br>A 6 B 7 C $\sqrt{42}$ D $4\sqrt{3}$<br>解析：选C。先**把数字还原到根号下面(根号题先还原)**，然后两两做差，再次做差公差为3。</p><p>【2017江苏B】58. $\sqrt{2}，3-\sqrt{2}，2，3，4+\sqrt{2}，（）。$<br>A $5+2\sqrt{2}$<br>B $6+5\sqrt{2}$<br>C $7+3\sqrt{2}$<br>D $9+6\sqrt{2}$<br>解析：做差得$3-2\sqrt{2}，\sqrt{2}-1，1，1+\sqrt{2}$，此数列公比为$1+\sqrt{2}$，选C。</p><p>【2019江苏B】46. $-8，12 ，-6 ，-3 ，-4.5 ，（ ）$<br>A -7.5 B -9<br>C -11.25 D 10<br>解析：做商，得新数列$-1.5，-0.5，0.5，1.5，（）$，公差为1，$-4.5×2.5=-11.25$，选C。</p><h3 id="1-2-机械划分"><a href="#1-2-机械划分" class="headerlink" title="1.2 机械划分"></a>1.2 机械划分</h3><p>【2016江苏B】58. $4.2,5.2,8.4,17.8,44.22,（）。$<br>A125.62 B85.26 C99.44 D125.64<br>解析：<strong>解一</strong>：先分为$4，5，8，17，44$和$2，2，4，8，22$两个数列。<br>第一个数列做差后为$1，3，9，27$，是公比为3的等比数列。<br>第二个数列做差后为$0，2，4，14$，做差无结果，做和得$2，6，18$，公比为3。54-14=40,22+40=62。(<strong>做差无结果，无明显等比特征，考虑做和</strong>)<br><strong>解二</strong>：偶数项的整数部分是小数部分的2倍，奇数项的整数部分是小数部分的2倍+1。(<strong>看整数部分和小数部分的关系</strong>)<br>选A。</p><p>【2019江苏B】49. $720\sqrt{2} ，120\sqrt{2} ，12\sqrt{24} ，6\sqrt{30} ，2\sqrt{210} ，（）。$<br>A $\sqrt{210} $ B $\frac{10}{3} \sqrt{42} $<br>C $6\sqrt{35}$ D $\sqrt{1890}$<br>解析：$12\sqrt{24}化为24\sqrt{6}$，前面商为$6，5，4，3，2$，后面商为$1,3,5,7,9$，选D。</p><h3 id="1-3-分数数列"><a href="#1-3-分数数列" class="headerlink" title="1.3 分数数列"></a>1.3 分数数列</h3><p>【2016江苏B】60. $\frac{1}{2}，\frac{3}{5}，\frac{7}{10}，\frac{13}{17}，\frac{21}{26}，（）。$<br>A$\frac{31}{47}$ B$\frac{5}{7}$ C$\frac{65}{97}$ D$\frac{31}{37}$<br>解析：<strong>分子、分母分为两个数列</strong>。两两做差2次，得公差为2的等差数列2个。选D。</p><p>【2018江苏B】55. $-\frac{16}{15}, 1.6,-\frac{12}{5} ,3.6,-\frac{27}{5} ,()。$<br>A $5.6$ B $8.1$ C $\frac{32}{15} $ D $-\frac{36}{5} $<br>解析：通分为分母相同的分数:$-\frac{16}{15}, \frac{24}{15} ,-\frac{36}{15} ,\frac{54}{15} ,-\frac{81}{15} $，分母为公比为-1.5的等比数列，所以选B。也可以直接看趋势分析出来。</p><h3 id="1-4-因式分解数列"><a href="#1-4-因式分解数列" class="headerlink" title="1.4 因式分解数列"></a>1.4 因式分解数列</h3><p>【2017江苏B】60. $2，6，15，28，55，（）。$<br>A.72 B.78 C.86 D.160<br>解析：因式分解为$1×2，2×3，3×5，4×7，5×11$，前面的是123456，后面的是质数数列，选6×13=78。</p><h2 id="二：-容斥原理"><a href="#二：-容斥原理" class="headerlink" title="二： 容斥原理"></a>二： 容斥原理</h2><p>【2016江苏B】69.某单位举办设有A、B、C三个项目的趣味运动会，每位员工三个项目都可以报名参加。经统计，共有72名员工报名，其中参加A、B、C三个项目的人数分别为26、32、38，三个项目都参加的有4人，则仅参加一个项目的员工人数是：<br>A.48 B.40 C.52 D.44<br>解析：设只参加1个项目的为x，只2个项目的为(72-x-4)。容斥原理三集合非标准公式列式：$26+32+38-(72-x-4)-4×2=72，解出x=52$，选C。<br>PS：$A+B+C-只满足两个-满足三个×2=总数$<br>$只满足一个+只满足两个+满足三个=总数$</p><h2 id="三：-工程问题"><a href="#三：-工程问题" class="headerlink" title="三： 工程问题"></a>三： 工程问题</h2><p>【2018江苏B】61.编制一批“中国结”，甲乙合作6天可完成；乙丙合作10天可完成；甲乙合作4天后，乙再单独做5天可完成，则甲、乙、丙的工作效率之比是<br>A.3：2：1 B.4：3：2<br>C.5：3：1 D.6：4：3<br>解析：6和10的最小公倍数30，设工程量为30。则甲乙效率为5，乙丙效率为3。代入第二个条件30-5*4=10，10/5=2，则乙为2，甲为3，丙为1。选A。</p><p>【2019江苏B】57.一场大雪过后，某单位需安排员工清理包干区的道路积雪。清理时必须3人一组，其中2人铲雪，1人扫雪。如果安排10人铲雪，3.5小时才能完成。假设每组工作效率相同，若要在100分钟内完成，则需安排的员工人数最少是<br>A.21 B.24<br>C.30 D.33<br>解析：10人=5组，设每组效率为1，则工程总量为5×1×3.5*60=1050，1050/100=10.5组，即11组，11×3=33人，选D。</p><p>【2019江苏B】62.某工程队承担一项工程，由于天气原因，工期将延后10天。为了按期完工，需增加施工人员。若增加4人，工期会延后4天；若增加10人，工期将提前2天。假设每人工作效率相同，为确保按期完工，则工程队最少应增加的施工人员数是<br>A.6 B.7<br>C.8 D.9<br>解析：4人工期为-4，10人工期为2，增加6人，工期减少6天，平均1人1天，选C。</p><h2 id="四：-行程问题"><a href="#四：-行程问题" class="headerlink" title="四： 行程问题"></a>四： 行程问题</h2><p>【2018江苏B】60.甲乙丙分别骑摩托车、乘大巴、打的从A地去B地，甲的出发时间分别比乙丙早15分钟、20分钟，到达时间比乙丙都晚5分钟。已知甲乙的速度之比是2：3，丙的速度是60千米/小时，则AB两地间的距离是<br>A.75千米 B.60千米<br>C.48千米 D.35千米<br>解析：设甲从A到B用时x分钟，则乙用时x-20分钟，则$(x-20):x=2:3,x=60$，则丙用时60-25=35分钟，距离为60*35/60=35千米。选D。距离相同，时间与速度成反比。(江苏行程题选倍数中最小的)</p><p>【2020江苏B】60.甲、乙两人分别从A、B两地同时出发相向而行。当两人合计走完两地间路程的$\frac{1}{4} $时，甲距A地的路程是500米；当两人合计走完两地间路程的 $\frac{3}{4} $时，乙距B地的路程是2400米。若两人的速度始终不变，则当速度较快者走完全程时，速度较慢者距走完全程还剩的路程是<br>A.1350米 B.1600米<br>C.1800米 D.1950米<br>解析：设总时间4s，$\frac{1}{4} $路用时1s，$\frac{3}{4} $路用时3s，则甲速度500，乙速度2400÷3=800，总路程为(500+800)×4=5200米；则乙用时5200÷800=6.5s，甲走了500×6.5=3250米，还剩5200-3250=1950米，选D。</p><h2 id="五：-概率"><a href="#五：-概率" class="headerlink" title="五： 概率"></a>五： 概率</h2><p>【2017江苏B】66.甲、乙、丙三个单位各派2名志愿者参加公益活动，现将这6人随机分成3组，每组2人，则每组成员均来自不同单位的概率是：<br>A $\frac{1}{3} $ B $\frac{5}{12} $ C $\frac{1}{4} $ D $\frac{8}{15} $<br>解析：正难反易。先求每组成员均来自相同的单位的概率。<br>6个人分为三组，总数为$\frac{C_{6}^{2} ×C_{4}^{2}}{A_{3}^{3} } =15$种情况。<br>只有一组来自同一单位。共6种。<br>有两组来自同一单位。三组来自同一单位，共1种。所以相同的概率是$\frac{6+1}{15}$。选D。</p><h2 id="六：-排列组合"><a href="#六：-排列组合" class="headerlink" title="六： 排列组合"></a>六： 排列组合</h2><p>【2016江苏B】68.将所有由1、2、3、4组成且没有重复数字的四位数，按从小到大的顺序排列，则排在第12位的四位数是：<br>A.3124 B.2341<br>C.2431 D.3142<br>解析：千位数为1的四位数有$A_{3}^{3} $=6个，千位数为2的四位数有$A_{3}^{3} $=6个，则按从小到大顺序排列，排在第12位的四位数是千位数为2的四位数中最大的数字，即2431。<br>PS：不可互换(有序用排列)的用A，可以互换(无序用组合)的用C。</p><h2 id="七：-经济利润问题"><a href="#七：-经济利润问题" class="headerlink" title="七： 经济利润问题"></a>七： 经济利润问题</h2><p>【2018江苏B】56.一款手机按2000元单价销售，利润为售价的 25%。若重新定价，将利润降至新售价的20% ，则新售价是：<br>A.1900元 B.1875元<br>C.1840元 D.1835元<br>解析：成本是2000-2000×25%=1500。设新售价为x，则x-x×20%=1500,x=1500/0.8=1875，选B。</p><p>【2020江苏B】53.某网店零售月季花，每束成本39元、售价99元，月销量800束。现推出团购活动，购买10束及以上，每束售价59元，预计零售销量减半，团购销量激增。若使原销售利润不减，则月团购销量至少应是<br>A.800束 B.1000束<br>C.1200束 D.1500束<br>解析：原销售利润为：(99-39)×800=48000元。<br>现团购每束利润为59-39=20元，零售销量为原来一半，即零售利润减半，团购利润需为24000元。<br>即团购销量至少为24000÷20=1200束，选C。</p><p>【2020江苏B】57.某商品的进货单价为80元，销售单价为100元，每天可售出120件。已知销售单价每降低1元，每天可多售出20件。若要实现该商品的销售利润最大化，则销售单价应降低的金额是<br>A.5元 B.6元<br>C.7元 D.8元<br>解析：设降价x元，多售20x件。则利润y=(100-80-x)(120+20x)。则x=20，x=-6。则当$x=\frac{20-6}{2} =7$时，利润最大化，选C。<br>PS:$y=|x+A||x-B|\Longrightarrow x=\frac{B-A}{2} 时，y为极值。$<br>$等同于二次函数，x=-\frac{b}{2a} 时，y为极值。$</p><h2 id="八：-浓度问题"><a href="#八：-浓度问题" class="headerlink" title="八： 浓度问题"></a>八： 浓度问题</h2><p>【2016江苏B】61.有两瓶质量均为100克且浓度相同的盐溶液，在一瓶中加入20克水，在另一瓶中加入50克浓度为30%的盐溶液后，他们的浓度仍然相等，则这两瓶盐溶液原来的浓度是？<br>A36% B64% C50% D60%<br>解析：设原来浓度为x，则$\frac{100x}{100+20}=\frac{100x+50×0.3}{100+50} $，解得x=60%。<br>PS:溶液问题注意把握住<strong>溶质不变原则</strong>，列方程，能解大部分题目。</p><p>【2018江苏B】63.某化学实验室有A、B、C三个试管分别盛有10克、20克、30克水，将某种盐溶液10克倒入试管A中，充分混合均匀后，取出10克溶液倒入B试管，充分混合均匀后，取出10克溶液倒入C试管，充分混合均匀后，这时C试管中溶液浓度为 1%，则倒入A试管中的盐溶液浓度是：<br>A.40% B.36%<br>C.30% D.24%<br>解析：设浓度为a，倒入A试管时，混合后浓度=a/2,经过B、C试管后为原来的a/3,a/4，则原来浓度为2×3×4=24。选D。</p><p>【2019江苏B】52.现有浓度为 12%和 24%的盐水各若干克，将其混合后加入50克水，配制成了浓度为 18%的盐水600克，则原12%和 24%的盐水质量之比是<br>A.6：5 B.1：1<br>C.5：6 D.4：7<br>解析：溶质为0.18×600=108g，溶液为600-50=550g，浓度约为20%，溶质比约为(24-20):(20-12)=1：2，选D。</p><h2 id="九：-和差倍比问题"><a href="#九：-和差倍比问题" class="headerlink" title="九： 和差倍比问题"></a>九： 和差倍比问题</h2><p>【2016江苏B】62.若买6个订书机、4个计算器和6个文件夹共需504元，买3个订书机、1个计算器和3个文件夹共需207元，则购买订书机、计算器和文件夹各5个所需的费用是？<br>A.465元 B.475元 C.485元 D.495元<br>解析：列方程，$①6x+4y+6z=504；②3x+y+3z=207，①-②=3x+3y+3z=297，再乘以\frac{5}{3}等于495，选D$。</p><p>【2017江苏B】64.某公司管理人员、技术人员和后勤服务人员一月份的平均收入分别为6450元、8430元和4350元，收入总额分别为5.16万元、33.72万元和5.22万元。则该公司这三类人员一月份的人均收入是：<br>A.6410元 B.7000元<br>C.7350元 D.7500元<br>解析：解一：$管理人员\frac{51600}{6450} =8人；技术人员\frac{33720}{8430} =40人；后勤人员\frac{52200}{4350} =12人；人均收入为：\frac{5.16+33.72+5.22}{8+40+12} =\frac{44.1}{60} =0.735$，选C。<br>解二：总收入为44.1万元，为3的倍数，排除AB，除数代入CD，只有C能整除，选C。</p><p>【2017江苏B】69.玩具厂原来每日生产某玩具560件，用A、B两种型号的纸箱装箱，正好装满24只A型纸箱和25只B型纸箱。扩大生产规模后该玩具的日产量翻了一番，仍然用A、B两种型号的纸箱装箱，则每日需要纸箱的总数至少是：<br>A.70只 B.75只<br>C.77只 D.98只<br>解析：设A型号纸箱每个装a个，B型号装b个。则列方程$24a+25b=560。24a和560都能被8整除，则b=8，a=15。$，设翻番后A用x个，B用y个，则可列方程$15x+8y=560*2=1120；令y=0，x=74……10，则是75个。选B。$</p><p>【2018江苏B】59.小李为办公室购买了红、黄、蓝三种颜色的笔若干支，共花费40.6元。已知红色笔单价为1.7元、黄色笔为3元、蓝色笔为4元，则小李买的笔总数最多是<br>A.19支 B.20支<br>C.21支 D.22支<br>解析：只有红色笔有0.7的尾数，所以红笔肯定是18只，共18×1.7=30.6元，还剩10元，2支黄、1支蓝正好，则共18+2+1=21只。选C。</p><p>【2018江苏B】62.已知正月初六从某火车站乘车出行旅客人数恰好是正月初五的8.5倍，且恰好比正月初七少 9%，则正月初七从该火车站乘车出行的旅客人数至少是<br>A.850人 B.1300人<br>C.1700人 D.3400人<br>解析：六月是8.5的倍数，也就是17的倍数。六月：七月比为91：100，则七月既是17倍数又为100的倍数，则选C。</p><p>【2019江苏B】53.某地区有甲、乙、丙、丁4个派出所。已知上月甲、乙2个派出所的合计出警次数是95次，乙、丙、丁3个派出所的合计出警次数是140次，乙派出所的出警次数占4个派出所合计出警次数的 7/40，则上月甲派出所的出警次数是<br>A.55次 B.60次<br>C.68次 D.75次<br>解析：乙是7得倍数，代入选项，只有甲60，乙35时符合。选B。</p><p>【2020江苏B】56.某社区组织了一次助学捐款活动，在场的老王、老李和老张均积极捐款。若老王捐款的 $\frac{1}{3} $是老李捐款的 $\frac{1}{5} $、老张捐款的 $\frac{1}{11} $，且老张比老王多捐192元，则他们的捐款总额是：<br>A.418元 B.456元<br>C.494元 D.532元<br>解析：设老王捐3x，老李5x、老张11x。则11x-3x=192;x=24;那么总额为(3+5+11)×24=尾数是6，选B。</p><p>【2020江苏B】61.某便民超市将薏米、红豆和小黄米按2：3：5混合后出售，每千克成本13.3元。若薏米每千克成本23.6元，红豆每千克成本9.8元，则小黄米每千克的成本是<br>A.10.36元 B.10.18元<br>C.11.45元 D.11.28元<br>解析：设薏米2kg、红豆3kg、小黄米5kg，则(2×23.6+3×9.8+5×a)=13.3×10；a=11.28,选D。</p><p>【2020江苏B】65.某企业按三个等级给员工发放奖金，一、二、三等奖的获奖人数之比为1：3：10，奖金总额之比为2：3：1。已知获奖员工总数126人，发放奖金总额16.2万元，则三等奖的奖金是<br>A.250元 B.300元<br>C.350元 D.400元<br>解析：设获奖人数为a:3a:10a，则14a=126；a=9。设奖金为2x:3x:x，则(2+3+1)x=16.2;x=2.7万元=27000;则三等奖为27000÷(10×9)=300元。选B。</p><h2 id="十：-鸡兔同笼"><a href="#十：-鸡兔同笼" class="headerlink" title="十： 鸡兔同笼"></a>十： 鸡兔同笼</h2><h3 id="10-1-最值问题"><a href="#10-1-最值问题" class="headerlink" title="10.1 最值问题"></a>10.1 最值问题</h3><p>【2016江苏B】66.某学校举办知识竞赛，共设50道选择题，评分标准是：答对1题得3分，答错1题扣1分，不答的题得0分。若王同学最终得95分，则他答错的选择题最多有：<br>A.12道 B.13道 C.14道 D.15道<br>解析：设全部答对，则得分50*3=150分，实际95分，差150-95=55分是答错得题目的。实际不答少3分，答错一题少(答对的3分+错的1分=)4分，55/4=13……3，所以打错13道，1题未答不得分。选B。</p><h2 id="十一：-牛吃草"><a href="#十一：-牛吃草" class="headerlink" title="十一： 牛吃草"></a>十一： 牛吃草</h2><h2 id="十二：-周期问题"><a href="#十二：-周期问题" class="headerlink" title="十二： 周期问题"></a>十二： 周期问题</h2><p>【2017江苏B】63.一个圆盘上按顺时针方向依次排列着编号为1到7的七盏彩灯，通电后每个时刻只有三盏亮着，每盏亮6秒后熄灭，同时其顺时针方向的下一盏开始亮，如此反复。若通电时编号为1，3，5的三盏先亮，则200秒后亮着的三盏彩灯的编号是：<br>A.1，3，6 B.1，4，6<br>C.2，4，7 D.2，5，7<br>解析：编号固定差2，顺时针循环，6后面2个是1，1后面2个是3；7后面2个是2，2后面2个是4。看AC。<br>200÷6=33次……2秒，共34次，34÷7=4循环……6次。所以原来编号为1的灯现在是1→2→3→4→5→6。选A。</p><p>【2019江苏B】64.某公司年终联欢，准备了52张编号分别为1至52的奖券用于抽奖。如果编号是2、3的倍数的奖券可分别兑换2份、3份奖品，编号同时是2和3的倍数的奖券只可兑换3份奖品，其他编号的奖券只可兑换1份奖品，则所有奖券可兑换的奖品总数是<br>A.99份 B.100份<br>C.102份 D.104份<br>解析：先枚举，12345678910，可换123213|123213循环，52/6=8……4，即8×(1+2+3+2+1+3)=8×12=96，96+1+2+3+2=104，选D。</p><h2 id="十三：-几何问题"><a href="#十三：-几何问题" class="headerlink" title="十三： 几何问题"></a>十三： 几何问题</h2><p>【2020江苏B】62.某训练基地的一块三角形场地的面积是1920平方米。已知该三角形场地的三边长度之比是 $5：12：13$，则其周长是：<br>A.218米 B.240米<br>C.306米 D.360米<br>解析：5平方+12平方等于13平方，故为直角三角形。边长为$\frac{5a×12a}{2} =1920;a=\sqrt{64} =8;$周长为(5+12+13)×8=240米，选B。</p>]]></content>
    
    
    <categories>
      
      <category>公考</category>
      
      <category>错题本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数量关系</title>
    <link href="/2020/11/04/%E5%85%AC%E8%80%83/quantitative-relation/"/>
    <url>/2020/11/04/%E5%85%AC%E8%80%83/quantitative-relation/</url>
    
    <content type="html"><![CDATA[<blockquote><p>数量关系：主要测查应试人员理解、把握事物间量化关系和解决数量关系问题的能力，涉及数据关系的分析、推理、判断、运算等。常见的题型有：数字推理、数学运算等。</p></blockquote><hr><h2 id="一：-几大特性-代入排除、数字特性、方程法等"><a href="#一：-几大特性-代入排除、数字特性、方程法等" class="headerlink" title="一： 几大特性(代入排除、数字特性、方程法等)"></a>一： 几大特性(代入排除、数字特性、方程法等)</h2><h3 id="1-1-代入排除"><a href="#1-1-代入排除" class="headerlink" title="1.1 代入排除"></a>1.1 代入排除</h3><ol><li>使用范围<ol><li>典型题： 年龄、余数、不定方程、多位数</li><li>看选项： 选项为一组数或可转化为一组数</li><li>剩两项： 只剩两项时，代入一项即可得答案</li><li>超复杂： 题干长、主体多、关系乱</li></ol></li><li>方法<ol><li>先排除： 尾数法、奇偶、倍数</li><li>再代入： 最值、好算</li></ol></li></ol><h3 id="1-2-奇偶特性"><a href="#1-2-奇偶特性" class="headerlink" title="1.2 奇偶特性"></a>1.2 奇偶特性</h3><ol><li>使用范围<ol><li>知和求差、知差求和</li><li>不定方程–一般优先考虑奇偶性</li><li>A是B的2倍，将A分成两份。 A为偶数</li><li>质数： 逢质必2</li></ol></li><li>方法<ol><li>和差： 同奇同偶则为偶，一奇一偶则为奇</li><li>积： 一偶则偶，全奇为奇。</li></ol></li></ol><h3 id="1-3-倍数特性"><a href="#1-3-倍数特性" class="headerlink" title="1.3 倍数特性"></a>1.3 倍数特性</h3><ol><li>使用范围<ol><li>分数、百分数、比例、倍数</li><li>物品平均分配</li></ol></li><li>方法<ol><li>$\frac{A}{B} = \frac{m}{n} $<ol><li>$若\frac{A}{B} = \frac{m}{n} ,则\frac{A}{B} = \frac{m}{n}=\frac{A\pm m }{B\pm n} $</li></ol></li><li>整除判定<ol><li>拆分(普遍适用)<ol><li>看是否A的倍数，将A拆分为A的整数倍的一个数字a±一个小的数字b，若b也能被A整除，则原数能被A整除。</li></ol></li><li>口诀<ol><li>3/9，各位之和能被3或9整除，则是倍数</li><li>4(末2位)/8(末3位)，能被4/8整除，则是倍数</li><li>2(偶数)/5(0,5)</li><li>7： 一个数个位截掉，余下的数减个位数的2倍，若差是7的倍数，能被7整除。</li></ol></li><li>因式分解(复杂倍数用)<ol><li>将一个数分解为互质的两个数。</li><li>如： 判断能否被45整除，只要判断它是9和5的倍数即可</li></ol></li></ol></li></ol></li></ol><h3 id="1-4-方程法"><a href="#1-4-方程法" class="headerlink" title="1.4 方程法"></a>1.4 方程法</h3><ol><li>普通方程<ol><li>设未知数<ol><li>设小不设大(避免分数)</li><li>最大信息化(方便列式)，即设中间量</li><li>设谁求谁(避免陷阱)</li></ol></li><li>列方程<ol><li>共、是、比、相等</li></ol></li><li>解方程<ol><li>约分： 如3600=400x+800y</li><li>消元： 求谁留谁</li></ol></li></ol></li><li>不定方程<ol><li>奇偶特性： a、b系数一奇一偶</li><li>倍数特性： a、b系数与常数有公因子<ol><li>$9x + 7y  = 81$</li><li>$9n/9(m-n)/9m$</li></ol></li><li>尾数特性： a、b系数尾数为5或0</li><li>代入排除： 无法运用上述特性</li></ol></li><li>赋零法<ol><li>范围： ①未知数可以非整数②求算式而非单一未知数</li><li>方法： 设某个未知数为零，再求其他未知数</li></ol></li></ol><h3 id="1-5-乘方尾数"><a href="#1-5-乘方尾数" class="headerlink" title="1.5 乘方尾数"></a>1.5 乘方尾数</h3><p><strong>口诀：底数留个位，指数除4留余数，余数为0转为4.</strong></p><p>例：$2008^{2008}+2009^{2009}$的个位数是？</p><p>答： $2008 \bmod 4=0，则可转化为8^{4}+9^{1}，8×8=64，4×8=32，2×8=16，6+9=15，个位数是5$</p><h3 id="1-6-数列-等差、等比"><a href="#1-6-数列-等差、等比" class="headerlink" title="1.6 数列(等差、等比)"></a>1.6 数列(等差、等比)</h3><h4 id="1-6-1-等差数列"><a href="#1-6-1-等差数列" class="headerlink" title="1.6.1 等差数列"></a>1.6.1 等差数列</h4><p>公差用字母$d$表示，等差数列的通项公式为:<br>$a_{n}=a_{1}+(n-1)d$</p><p>求和公式为：<br>$S_{n}=na_{1}+\frac{n(n-1)}2d=平均数×项数=中位数×项数$</p><h4 id="1-6-2-等比数列"><a href="#1-6-2-等比数列" class="headerlink" title="1.6.2 等比数列"></a>1.6.2 等比数列</h4><p>通项公式： $a_{n}=a_{1}q^{n-1}=a_{m}q^{n-m}$</p><p>求和公式： $S_{n}=\frac{a_{1}(1-q^{n})}{1-q}$</p><p>等比中项： 如果a，b，c成等比数列，则b叫做a与c的等比中项，有：$b^{2}=ac$。</p><h2 id="二：-几大题型"><a href="#二：-几大题型" class="headerlink" title="二： 几大题型"></a>二： 几大题型</h2><h3 id="2-1-数字推理"><a href="#2-1-数字推理" class="headerlink" title="2.1 数字推理"></a>2.1 数字推理</h3><ol><li>基础数列<ol><li>等差、等比</li><li>质数数列</li><li>平方立方数列</li><li>周期数列</li><li>简单递推数列</li></ol></li><li>多重数列<ol><li>特征： 项数≥7项</li><li>方法： 先交叉(22交叉，奇偶交叉，三三分)再分组</li></ol></li><li>分数数列<ol><li>约分</li><li>先分开看，再一起看，观察趋势</li></ol></li><li>做商数列</li><li>幂次数列<ol><li>$64=8^{2} =2^{6}；81=9^{2}=3^{4}$</li></ol></li><li>多级数列</li><li>递推数列<ol><li>两两做和</li></ol></li></ol><h3 id="2-2-容斥原理"><a href="#2-2-容斥原理" class="headerlink" title="2.2 容斥原理"></a>2.2 容斥原理</h3><ol><li>公式<ol><li>$A+B-A\cap B=总数-都不$</li><li>$A+B+C-A\cap B-A\cap C-B\cap C+A\cap B\cap C=总数-都不$</li><li>$A+B+C-只满足两个-只满足三个×2=总数-都不$</li><li>$A+B+C=只满足一个+只满足两个×2+满足三个×3$</li><li>$只2=A\cap B+B\cap C+A\cap C-3×只3$</li></ol></li><li>画图<ol><li>画圈圈，标数据，去重复</li><li>交叉部分重点标注</li></ol></li></ol><h3 id="2-3-工程问题"><a href="#2-3-工程问题" class="headerlink" title="2.3 工程问题"></a>2.3 工程问题</h3><ol><li>赋值总量型<ol><li>识别： 题干只给了多个完工时间</li><li>方法： 赋值总量–算出效率–列式求解</li><li>技巧： 总量一般设公倍(用短除法求最小公倍数和最大公约数)，公倍难算用乘积</li></ol></li><li>赋值效率型<ol><li>识别： 题干给出了效率比、效率倍数等</li><li>方法： 赋值效率–求出总量–列式求解</li><li>技巧： 按照比例设效率，设值尽量设整数</li></ol></li><li>给具体值型<ol><li>识别： 题干有效率、总量的具体值(设小不设大，设中间量)</li><li>方法： 代公式–列方程求解(方程往往有整除、倍数关系)</li></ol></li></ol><h3 id="2-4-经济利润问题"><a href="#2-4-经济利润问题" class="headerlink" title="2.4 经济利润问题"></a>2.4 经济利润问题</h3><ol><li>基础公式<ol><li>$利润=售价-成本$</li><li>$利润率=利润÷成本；售价=成本×(1+利润率)$</li></ol></li><li>分段计算<ol><li>水电费、出租车费、税费等</li><li>每段费用分别计算，求和后为总费用</li></ol></li><li>合并付费<ol><li>先分开买，再合并买，问省了多少钱？</li><li>答： $便宜的那件商品的原价×折扣差$</li></ol></li></ol><h3 id="2-5-概率"><a href="#2-5-概率" class="headerlink" title="2.5 概率"></a>2.5 概率</h3><ol><li>概率=满足所有的情况数÷所有的情况数</li><li>分类用加法，分步用乘法</li><li>正难反易： $1-反面情况概率$</li></ol><h3 id="2-6-排列组合"><a href="#2-6-排列组合" class="headerlink" title="2.6 排列组合"></a>2.6 排列组合</h3><ol><li>概念<ol><li>分类用加法(要么……要么……)</li><li>分步用乘法(先……再……)</li><li>有序用排列$A_{n}^{m} $(不可互换)</li><li>无序用组合$C_{n}^{m} $(可以互换)<ol><li>$C_{n}^{m} = C_{n}^{n-m}$</li></ol></li></ol></li><li>题型<ol><li>相邻<ol><li>捆绑法： 先捆再排</li><li>把相邻的元素捆绑起来，注意內部有无顺序</li></ol></li><li>不相邻<ol><li>插空法： 先插再排</li><li>①先安排可以相邻的元素，形成若干空位；②再将不相邻的元素插入空位中</li></ol></li><li>凑数字<ol><li>枚举法： 按序枚举</li></ol></li><li>插板法<ol><li>将N个相同元素分给M个人，每人至少一个，共有$C_{n-1}^{m-1} $种情况</li></ol></li><li>错位排列(不回原位)<ol><li>个数：$1、2、3、4、5、6$</li><li>N种：$0、1、2、9、44、265$</li></ol></li></ol></li></ol><h3 id="2-7-植树问题"><a href="#2-7-植树问题" class="headerlink" title="2.7 植树问题"></a>2.7 植树问题</h3><p>所谓植树问题就是要理清间隔数量与端点之间的关系。</p><ol><li>两端栽树，棵树比段数多1，棵树=线路总长÷株距+1；</li><li>一端栽树，棵树与段数相等，棵树=线路总长÷株距；</li><li>两端都不栽树，棵树=段数-1，棵树=线路总长÷株距-1；</li><li>两边植树需要在1条路的基础上乘以2；</li><li>封闭型植树，棵树=线路总长÷株距=总段数；</li><li>类似于“两端不植树”的还有“上楼梯问题”、“锯木头、剪绳子”、“站成一列”问题，上到N楼用M分钟，则上每层楼用M/(N-1)分钟，其余同理。</li></ol><p>PS：剪绳问题公式： $2^{N}×M+1(一根绳子连续对折N次，剪M刀，问绳子被剪成几段？)$</p><h3 id="2-8-鸡兔同笼"><a href="#2-8-鸡兔同笼" class="headerlink" title="2.8 鸡兔同笼"></a>2.8 鸡兔同笼</h3><p>核心公式：</p><ol><li>鸡数=(兔脚数×总头数-总脚数)÷(兔脚数-鸡脚数)</li><li>兔数=(总脚数-鸡脚数×总头数)÷(兔脚数-鸡脚数)</li></ol><p>问：已知鸡兔同笼，共35只，脚共94只，求鸡和兔的个数。</p><p>答：方程法略。假设法：假设35只都是鸡，则有脚35×2=70只，每一只鸡换成兔就多2只脚。故共有兔子12只，鸡23只。</p><p>**总结： 先假设全部是某一种，然后求出的值与实际值的差值除以他们单个的差值，得出来的是另一种。(假设鸡得出兔，假设兔得出鸡)**。</p><h3 id="2-9-牛吃草问题"><a href="#2-9-牛吃草问题" class="headerlink" title="2.9 牛吃草问题"></a>2.9 牛吃草问题</h3><h3 id="2-10-过河问题和空瓶换水"><a href="#2-10-过河问题和空瓶换水" class="headerlink" title="2.10 过河问题和空瓶换水"></a>2.10 过河问题和空瓶换水</h3><p>一条船只能运送N人，现在M个人过河，问几次过完？ 答：共需$\frac{M-1}{N-1} $次。</p><p>N个空瓶换一瓶水，已有M个空瓶，问可以换几瓶水？ 答： $\frac{M}{N-1}(舍弃小数取整) $个</p><h3 id="2-11-日期、年龄问题"><a href="#2-11-日期、年龄问题" class="headerlink" title="2.11 日期、年龄问题"></a>2.11 日期、年龄问题</h3>]]></content>
    
    
    <categories>
      
      <category>公考</category>
      
      <category>数量关系</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>判断推理</title>
    <link href="/2020/11/02/%E5%85%AC%E8%80%83/%C2%96judgment-and-inference/"/>
    <url>/2020/11/02/%E5%85%AC%E8%80%83/%C2%96judgment-and-inference/</url>
    
    <content type="html"><![CDATA[<blockquote><p>判断推理：主要测查应试人员对各种事物关系的分析推理能力，涉及对图形、语词概念、事物关系和文字材料的理解、比较、组合、演绎和归纳等。常见的题型有：图形推理、定义判断、类比推理、逻辑判断等。S</p></blockquote><hr><h2 id="一：-图形推理"><a href="#一：-图形推理" class="headerlink" title="一： 图形推理"></a>一： 图形推理</h2><h3 id="1-1-位置规律"><a href="#1-1-位置规律" class="headerlink" title="1.1 位置规律"></a>1.1 位置规律</h3><p>识别： 元素组成相同</p><ol><li>平移<ol><li>方向： 上下、左右、顺逆时针、外圈、行列</li><li>步数： 恒定、递增(等差)</li></ol></li><li>旋转<ol><li>方向： 顺逆时针</li><li>角度： 45°、90°、180°</li></ol></li><li>翻转<ol><li>方向： 上下(横轴对称)、左右(竖轴对称)</li></ol></li><li>技巧<ol><li>比较思维： 既可以比较题干，也可比较选项</li><li>九宫格，中间图形特殊优先“米”字型观察</li></ol></li></ol><h3 id="1-2-样式规律"><a href="#1-2-样式规律" class="headerlink" title="1.2 样式规律"></a>1.2 样式规律</h3><p>识别： 元素组成相似(相同 <code>图形或线条</code> 重复出现)</p><ol><li>遍历(缺啥补啥)<ol><li>元素遍历<ol><li>每个元素出现次数相同</li><li>特定元素的遍历</li></ol></li><li>位置遍历<ol><li>外框的遍历</li><li>内部线条/阴影/空白/图形的遍历</li><li>涉及多个相同小元素时，考虑数量遍历</li></ol></li></ol></li><li>加减同异<ol><li>相加、相减</li><li>求异</li><li>求同</li><li>PS: 位置和样式的复合考法</li></ol></li><li>黑白运算<ol><li>特征： 图形轮廓和分隔区域相同，内部颜色不同</li><li>方法： 相同位置运算</li><li>小技巧： 优先考虑黑白运算后，从问号处着手解题更快，边找边验证</li><li>特别注意： “白+黑”和“黑+白”是不同等式</li></ol></li></ol><h3 id="1-3-属性规律"><a href="#1-3-属性规律" class="headerlink" title="1.3 属性规律"></a>1.3 属性规律</h3><p>识别： 元素组成不同</p><ol><li>对称性(优先)<ol><li>轴对称：对称轴方向、数量</li><li>中心对称</li></ol></li><li>开闭性： 优先全开放、全封闭</li><li>曲直性： 优先全曲或全直，其次曲+直</li><li>凹凸性<ol><li>任意两点相连，在图外，是凹，如×</li><li>任意两点相连，在图内，是凸，如O</li></ol></li></ol><h3 id="1-4-数量规律"><a href="#1-4-数量规律" class="headerlink" title="1.4 数量规律"></a>1.4 数量规律</h3><p>识别： 元素组成不同且无属性规律，数量规律明显</p><ol><li>点<ol><li>特征<ol><li>线条交叉明显</li><li>乱糟糟一团线交叉</li><li>相切较多</li></ol></li><li>细化考法<ol><li>交点(切点)</li><li>端点</li><li>直曲相交</li></ol></li></ol></li><li>线<ol><li>直线数特征图<ol><li>多边形、单一直线</li></ol></li><li>曲线数特征图<ol><li>曲线图形(全曲线图、圆、弧)</li></ol></li><li>笔画数<ol><li>一笔画图形<ol><li>连通图</li><li>奇点数=0或2</li></ol></li><li>多笔画图形<ol><li>笔画数=奇点数/2</li><li>如果存在多部分，每个部分的笔画单独算，再相加</li></ol></li><li>常见特征图<ol><li>五角星、圆和圆相切、田和日的变形</li></ol></li></ol></li></ol></li><li>角<ol><li>个数</li><li>角度(钝角，锐角)</li><li>数＜180°的角，角不重复数</li><li>特征图： 扇形、折线图、改造图</li></ol></li><li>面<ol><li>个数</li><li>面积</li><li>特征<ol><li>图形被分割，封闭面明显</li><li>生活化图形，粗线条图形中留空白区域</li></ol></li></ol></li><li>素<ol><li>元素种类</li><li>元素个数<ol><li>满眼相同图形，重复数</li><li>三角、四边形</li><li>曲直</li></ol></li><li>部份数<ol><li>线条连在一起叫一部分</li><li>常考查粗线条图形</li></ol></li></ol></li></ol><h3 id="1-5-空间重构"><a href="#1-5-空间重构" class="headerlink" title="1.5 空间重构"></a>1.5 空间重构</h3><h4 id="1-5-1-四面体"><a href="#1-5-1-四面体" class="headerlink" title="1.5.1 四面体"></a>1.5.1 四面体</h4><ol><li>基础知识<ol><li>展开图中构成一条直线的两条边，折合之后是同一条边</li><li>平行四边形展开图中两条短边，折合之后也是同一条边</li></ol></li><li>解题方法-箭头法<ol><li>对题干和选项中同一个面，画箭头</li><li>箭头方向是否一致</li></ol></li></ol><h4 id="1-5-2-六面体"><a href="#1-5-2-六面体" class="headerlink" title="1.5.2 六面体"></a>1.5.2 六面体</h4><ol><li>相对面<ol><li>两个面在同一行或同一列，且中间隔了一个面</li><li>两个面在“Z”字形两端，且紧靠着“Z”字形中间那条线</li><li>相对面只能出现一个，且必须出现一个。</li></ol></li><li>相邻面<ol><li>在展开图中，呈直角的两条边，折合后为同一条边</li><li>看图形相对位置</li><li>画边法：选特殊面的唯一点或唯一边，顺时针(或逆时针)画边，与题干不匹配的排除。</li></ol></li></ol><h4 id="1-5-3-八面体"><a href="#1-5-3-八面体" class="headerlink" title="1.5.3 八面体"></a>1.5.3 八面体</h4><ol><li>基础知识<ol><li>展开图中，构成“V”字形的两条边，折合之后是同一条边</li><li>每个顶点发出4个面</li><li>每个面只有3个相邻面</li></ol></li><li>解题方法<ol><li>箭头法</li><li>公共点法</li></ol></li></ol><h4 id="1-5-4-图形平面拼合"><a href="#1-5-4-图形平面拼合" class="headerlink" title="1.5.4 图形平面拼合"></a>1.5.4 图形平面拼合</h4><ol><li>平行等长消除法(找到相对面积较大的图形作为基准图形，找到平行且等长的边进行拼合，拼合之后等长线条抵消)</li><li>特殊边秒杀法<ol><li>找出四个图形中不可能消除的线条(特殊边)，如没有平行的线条，最长的线条，唯一的横直线</li><li>到选项中去找这条线，没有的直接排除，剩下的用平行等长消除法拼合</li></ol></li><li>注意比例坑，江苏题经常在此出坑。</li></ol><h4 id="1-5-5-截面图"><a href="#1-5-5-截面图" class="headerlink" title="1.5.5 截面图"></a>1.5.5 截面图</h4><ol><li>解题原则： 一刀切</li><li>截面有弧线<ol><li>立体图形本身存在曲面(如圆柱、圆锥等)、拦腰切、斜切</li></ol></li><li>截面有矩形<ol><li>六面体– 拦腰切，上下切，斜切</li><li>圆柱– 上下切</li></ol></li><li>截面有三角形<ol><li>六面体– 从棱上某一个点开始切</li><li>圆锥– 经过顶点向底面切</li></ol></li><li>小技巧<ol><li>六面体切不出直角三角形</li><li>立体图形有曲线，才能切出带曲线的截面</li><li>圆柱切不出梯形</li></ol></li></ol><h2 id="二：-定义判断"><a href="#二：-定义判断" class="headerlink" title="二： 定义判断"></a>二： 定义判断</h2><ol><li>识别五要素(问属于)<ol><li>主体</li><li>客体</li><li>出发点(造成的结果)</li><li>过程</li><li>落脚点(场地)</li></ol></li><li>问不属于<ol><li>直接看选项，找出不同的一项，同构选项排除法</li></ol></li></ol><h2 id="三：-类比推理"><a href="#三：-类比推理" class="headerlink" title="三： 类比推理"></a>三： 类比推理</h2><h3 id="3-1-逻辑关系"><a href="#3-1-逻辑关系" class="headerlink" title="3.1 逻辑关系"></a>3.1 逻辑关系</h3><ol><li>全同关系<ol><li>中外翻译  eg罗曼蒂克:浪漫</li><li>古称和今称 eg北平:北京</li><li>谦称和敬称 eg犬子:令郎</li><li>俗称和雅称 eg三月:桃月</li><li>全称和缩写 eg辽宁:辽</li></ol></li><li>包含关系<ol><li>一重包含、二重包含<ol><li>一重包含 eg苹果:水果</li><li>二重包含 eg红富士:水果</li></ol></li><li>种属包含、部分包含<ol><li>种属 eg苹果:水果；杂志:期刊</li><li>整体和部分 eg阳光:紫外线；树木:森林</li><li>不可分割 eg鱼:鱼鳔</li><li>功能互补 eg键盘:电脑；羽毛球:羽毛球拍</li></ol></li></ol></li><li>并列关系<ol><li>方法： 构成并列关系的概念必须是同一层次上的，如国画:油画都是画、香蕉:苹果都是水果</li><li>矛盾： 非此即彼 eg生死:物质意识 黑夜白天：男人女人</li><li>反对： 除了A和B以外，还有其他情况 eg红色:黄色</li></ol></li><li>交叉关系<ol><li>方法： 用有的……是……造句来判断</li><li>eg 男人:老师；唐诗:七律；瓷器:茶杯</li></ol></li><li>全异关系<ol><li>含义： 词语所表示的概念属于同一大类的事物，或具有某种共同性。所有A不是B，且A和B之间不是并列关系</li><li>eg实数:木耳；蝙蝠:鸟类；天鹅:塑料</li></ol></li><li>无对应关系<ol><li>两个词语之间没有一点联系。看起来特别匪夷所思的两组词，有可能适用这个考点。</li><li>eg布告:棉布</li></ol></li></ol><h3 id="3-2-语义关系"><a href="#3-2-语义关系" class="headerlink" title="3.2 语义关系"></a>3.2 语义关系</h3><ol><li>近义关系<ol><li>同义词或近义词 eg安居乐业:丰衣足食、谨慎:慎重</li><li>属性相近 eg寒冷:冰冷；吼叫:咆哮</li></ol></li><li>反义关系<ol><li>eg节约:浪费；早餐:傍晚</li></ol></li><li>褒贬关系<ol><li>eg后果:结果；妄想:遐想:理想，贬:中:褒</li></ol></li><li>象征关系<ol><li>eg水:温柔；土:敦厚</li></ol></li></ol><h3 id="3-3-描述关系"><a href="#3-3-描述关系" class="headerlink" title="3.3 描述关系"></a>3.3 描述关系</h3><ol><li>与事物相关<ol><li>事物与其性质 eg花:香</li><li>事物与其象征意义 eg凤凰:吉祥</li><li>事物与其活动空间、制作场所、原材料、所在地、作用对象等等 eg飞机:天空、大夏:城市、桌子:木材</li><li>同样功能的古代、现代物品 eg蒲扇:冷空调、火柴:打火机</li></ol></li><li>与人相关<ol><li>职业与工作地点<ol><li>eg编辑:杂志社、农民:土地</li></ol></li><li>职业与其特征、用具等其他相关内容<ol><li>eg士兵:军装、学生:桃李</li></ol></li></ol></li></ol><h3 id="3-4-条件关系"><a href="#3-4-条件关系" class="headerlink" title="3.4 条件关系"></a>3.4 条件关系</h3><ol><li>因果关系<ol><li>根本原因(本质原因) eg疾病:抑郁，因为疾病所有抑郁</li><li>直接原因(导火索) eg努力:成功，因为努力而成功。</li><li>间接原因 eg招摇撞骗:锒铛入狱，因为招摇撞骗所有锒铛入狱。</li></ol></li><li>时间顺成关系<ol><li>几个动作或事件相继发生，有一定的时间先后顺序。B在A之后发生。</li><li>eg起跑:冲线、起床:刷牙、校对:印刷:出版</li></ol></li><li>目的关系<ol><li>某个事件的发生是以另一个事件为目的</li><li>A是B的目的，B是A的手段。eg广告:宣传、节食:减肥</li></ol></li><li>必要充分条件<ol><li>充分条件</li><li>必要条件<ol><li>eg消毒:手术；启动:驾驶</li></ol></li></ol></li></ol><h3 id="3-5-语法关系"><a href="#3-5-语法关系" class="headerlink" title="3.5 语法关系"></a>3.5 语法关系</h3><ol><li>词性： 名词、动词、形容词</li><li>主谓关系(谓语指干了什么，一般是动词+形容词) eg轮船:启航；宝石:发光</li><li>动宾结构 eg讨论:问题；合同:定制；风卷:残云</li><li>偏正结构<ol><li>一个词对另一个词起修饰或限制作用。</li><li>eg清秀:面容；热烈:欢迎；义务:劳动；窗户:玻璃，玻璃做的窗户；戒指:宝石，宝石做的戒指。</li></ol></li><li>并列结构<ol><li>两个词性相同的实词并列组成</li><li>eg七上:八下；天南:地北</li><li>成语题目 eg围湖造田:饮鸠止渴=忍辱偷生:削足适履</li></ol></li><li>后补结构 eg安于现状:轻于鸿毛:对答如流</li><li>排列类比(江苏特色) eg:dda:22v<ol><li>方法：先找出唯一不同的元素，排除选项后再用相同的找。</li></ol></li></ol><h3 id="3-6-常识知识"><a href="#3-6-常识知识" class="headerlink" title="3.6 常识知识"></a>3.6 常识知识</h3><ol><li>生活常识<ol><li>功能对应 eg药物:治疗；滑板:运动</li><li>组成对应 eg骨骼:人体、梁柱:房屋</li><li>加工对应<ol><li>物理变化 eg木材:家具、花岗岩:雕塑</li><li>化学变化 eg葡萄:酒；大豆:酱油</li></ol></li><li>职业对应</li><li>空间对应 eg小鸟:天空:飞翔；蟋蟀:草丛:欢叫</li><li>属性对应<ol><li>必然属性 eg糖:甜</li><li>或然属性 eg官员:廉洁；子女:孝顺</li></ol></li><li>民俗对应<ol><li>eg七夕:织女；端午:屈原</li></ol></li></ol></li><li>书本常识<ol><li>地理 eg布达拉宫:拉萨；云冈石窟:大同</li><li>文学历史</li><li>科普<ol><li>eg时间:速度；体积:密度</li><li>eg三角形:三棱柱；四边形:正方体</li></ol></li></ol></li></ol><h3 id="3-7-二级辨析"><a href="#3-7-二级辨析" class="headerlink" title="3.7 二级辨析"></a>3.7 二级辨析</h3><p>解题技巧:</p><ol><li>遣词造句法</li><li>对比词性</li><li>横纵对比法</li><li>感情色彩是否一致</li><li>范围程度是否有差异</li><li>性质、功能是否相同</li><li>词的构成方式是否相同</li><li>必然与或然</li><li>全面与片面</li><li>绝对反义和相对反义</li></ol><h2 id="四：-逻辑推理"><a href="#四：-逻辑推理" class="headerlink" title="四： 逻辑推理"></a>四： 逻辑推理</h2><p><strong>逻辑推理题目错误选项常见类型：</strong></p><ol><li>主体不一致</li><li>话题不一致</li><li>明文规定、道听途说的选项不选</li><li>不明确选项。如“目前不知道”</li><li>强弱有别</li><li>时间重合≠因果关系，一定错，不选。</li></ol><h3 id="4-1-翻译推理"><a href="#4-1-翻译推理" class="headerlink" title="4.1 翻译推理"></a>4.1 翻译推理</h3><p>识别： 题干中出现可推出/不可推出</p><ol><li>前推后<ol><li>关键词： 如果……，那么……；若……，则……；只要……，就……；所以……，都……；为了……一定……；……是……的充分条件；等</li><li>翻译规则： 前推后：<code>A → B</code></li></ol></li><li>后推前<ol><li>关键词： 只有……才……；不……不……；除非……否则不……；……是……的基础/假设/前提/关键/必要条件</li><li>翻译规则： 后推前： <code>B → A</code></li><li>谁必要谁放箭头后面</li><li>PS： <code>除非(只要/其他……)A否则B</code> 等价于 <code>-B → A</code>;</li></ol></li><li>逆否等价: <code>A → B</code> 等价于 <code>-B → -A</code></li><li>且和或<ol><li>含义<ol><li>A或B： 二者至少一个成立为真</li><li>A且B： 二者同时成立为真</li></ol></li><li>推理规则： 或命题为真时， <code>否1 → 1</code></li></ol></li><li>德摩根定律<ol><li><code>-(A且B) = -A 或 -B</code></li><li><code>-(A或B) = -A 且 -B</code></li><li>小技巧： 逐项添符号，且或互变</li></ol></li><li>推理方法： 推理结构保持完全相同</li></ol><h3 id="4-2-组合排列"><a href="#4-2-组合排列" class="headerlink" title="4.2 组合排列"></a>4.2 组合排列</h3><p>识别： 题干给出两组及两组以上对象，问给出几组对象之间的关系</p><ol><li>排除法、代入法<ol><li>题干信息确定优先使用排除法</li><li>题干信息不确定优先使用代入法</li></ol></li><li>辅助技巧<ol><li>最大信息： 以题干中出现次数最多的信息为推理起点</li><li>符号(＞、＜)</li><li>表格(一维表、二维表)</li></ol></li></ol><h3 id="4-3-削弱题型"><a href="#4-3-削弱题型" class="headerlink" title="4.3 削弱题型"></a>4.3 削弱题型</h3><ol><li>识别方法<ol><li>设问中包含“反驳、削弱、质疑”的论证题目</li><li>问不能削弱/质疑分2种情况<ol><li>无关选项</li><li>加强选项</li></ol></li></ol></li><li>削弱方式<ol><li>削弱论点(最常考，力度最强)<ol><li>通过矛盾命题或例子的形式直接削弱题干观点</li></ol></li><li>削弱论证(力度第二)<ol><li>拆桥： 能够证明论据无法直接得出论点</li></ol></li><li>削弱论据(力度最弱)： 证明论据时错的</li></ol></li></ol><h3 id="4-4-加强题型"><a href="#4-4-加强题型" class="headerlink" title="4.4 加强题型"></a>4.4 加强题型</h3><ol><li>识别： 设问中包含“支持、加强、前提/假设”条件</li><li>加强方式<ol><li>搭桥(最强)<ol><li>题干特征<ol><li>论点和论据出现不同概念</li><li>论点和论据为整体和部分关系</li></ol></li><li>选项特征： 同时包含论点和论据中的关键词，并肯定论点和论据之间的关系</li></ol></li><li>必要条件(第二)<ol><li>题干特征<ol><li>提问为前提、假设、必要条件、加强论证、无搭桥项时考虑必要条件</li><li>如：题干是对比试验，但起点是否一致未知</li><li>如：论点是比例，论据只涉及其中一项，需要补充分母</li></ol></li><li>选项判别： 否定代入。先假设选项是错误的，代入题干论点不成立，则可以证明该选项是必要条件。</li></ol></li><li>补充论据<ol><li>解释原因(第三)： 说明论点成立的原因</li><li>举例论证(第四)： 说明论点成立的例子</li></ol></li></ol></li><li>加强力度： 搭桥＞必要条件＞解释原因＞举例论证</li></ol><h3 id="4-5-日常结论"><a href="#4-5-日常结论" class="headerlink" title="4.5 日常结论"></a>4.5 日常结论</h3><p><strong>日常结论不找对的，用排除法，找错的三个排除。</strong></p><p>识别： 题干为类言语的表述，无逻辑关联词，提问方式为“可以推出”，“不能退出”……</p><ol><li>三不选<ol><li>逻辑错误不选</li><li>无中生有不选</li><li>偷换概念不选</li></ol></li><li>四慎选<ol><li>绝对化的词： 一定、肯定、必须、所有、如果……就……、只有……才……</li><li>比较性的词： 更、比、越来越……</li><li>程度性的词： 最、主要、次要、首要</li><li>范围扩大缩小。</li></ol></li><li>一优选<ol><li>在选项都存在瑕疵时，带有表述“可能”意思字眼的选项优选。</li></ol></li></ol><h3 id="4-6-真假推理"><a href="#4-6-真假推理" class="headerlink" title="4.6 真假推理"></a>4.6 真假推理</h3><p>题干特征： 题干中出现几个命题，但其真假未知，要求通过判断命题的真假情况推出某些结论</p><ol><li>优先找关系<ol><li>矛盾关系<ol><li>特性： 必然一真一假</li><li>使用方法<ol><li>首先找矛盾，绕过矛盾看其余</li><li>条件一假，假话在矛盾中，其余全真</li><li>条件一真，真话在矛盾中，其余全假</li></ol></li><li>常见矛盾关系<ol><li>A与-A</li><li>“所有A都是B”与“有的A不是B”</li><li>“所有A都不是B”与“有的A是B”</li><li><strong>“A→B”与“A且-B”</strong></li><li>“A或B”与“-A且-B”</li><li>“A且B”与“-A或-B”</li></ol></li></ol></li><li>反对关系<ol><li>使用方法<ol><li>没有矛盾找反对，绕过反对看其余</li><li>条件一真，找到“有的”和“有的不”，其余全假</li><li>条件一假，找到“所有都”和“所有都不”，其余全真</li></ol></li><li>常见反对关系<ol><li>“有的A是B”与“有的A不是B”： 必有一真</li><li>“所有A都是B”与“所有A都不是B”： 必有一假</li></ol></li></ol></li><li>推出关系<ol><li>如果命题P为真，那么命题Q也一定为真，即P(真)→Q(真)，P和Q就是推出关系</li><li>使用方法<ol><li>找不到矛盾或反对，找推出关系</li><li>一真前假，一假后真</li></ol></li><li>常见推出关系<ol><li>A(真) → A或B(真)</li><li>所有A都是B(真) → 某个A是B(真) → 有的A是B(真)</li><li>所有A都不是B(真) → 某个A不是B(真) → 有的A不是B(真)</li></ol></li></ol></li></ol></li><li>找不到关系： 考虑代入排除法</li></ol><h2 id="五：-小技巧"><a href="#五：-小技巧" class="headerlink" title="五： 小技巧"></a>五： 小技巧</h2><ol><li>图形推理一般每道题会考一个知识点，做题的时候把相应的知识点标记在题目旁边，其他题目的考点大概率不会重复，所以做其他题目的时候可以不考虑那个知识点，提高做题速度。</li><li>图推题目没有思路，一般考虑下一笔画，还是没有思路超过30秒放弃，不纠结。</li><li>类比推理善用造句。</li><li>定义判断就是找茬，找主体、客体、定语(定语是用来修饰、限定、说明名词或代词的品质与特征的。)、状语(一种状态)的不同。</li></ol>]]></content>
    
    
    <categories>
      
      <category>公考</category>
      
      <category>判断推理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>言语理解</title>
    <link href="/2020/11/02/%E5%85%AC%E8%80%83/lalognosis/"/>
    <url>/2020/11/02/%E5%85%AC%E8%80%83/lalognosis/</url>
    
    <content type="html"><![CDATA[<blockquote><p>言语理解与表达：主要测查应试人员运用语言文字进行思考和交流、迅速准确地理解和把握文字材料内涵的能力。常见的题型有：片段阅读、文章阅读、选词填空等。</p></blockquote><hr><p>分为三个题型：中心理解题、细节判断题、语句表达、逻辑填空。</p><hr><h2 id="一：-中心理解题"><a href="#一：-中心理解题" class="headerlink" title="一： 中心理解题"></a>一： 中心理解题</h2><h3 id="1-1-转折关系-转折之后是重点"><a href="#1-1-转折关系-转折之后是重点" class="headerlink" title="1.1 转折关系(转折之后是重点)"></a>1.1 转折关系(转折之后是重点)</h3><ol><li>典型标志词<ol><li>虽然……但是；尽管……可是；不过；然而；却；其实/事实上/实际上；……</li></ol></li><li>非典型标志词<ol><li>殊不知；截然不同(相反)；全新的研究；一种误读；相对而言；……</li></ol></li><li>逆向思维<ol><li>理论依据<ol><li>转折前后句子意思相反</li></ol></li><li>文段特征<ol><li>很多人都认为/大多数人认为/传统观点认为/不少人认为</li><li>转折表述</li></ol></li></ol></li><li>错误选项特征<ol><li>转折前内容</li><li>无中生有</li><li>选项中没有出现主题词，可排除</li><li>相对绝对法：优选相对的表述，绝对的表述不选</li><li>优选明确的表述。不明确的一般不选</li></ol></li></ol><h3 id="1-2-主题词"><a href="#1-2-主题词" class="headerlink" title="1.2 主题词"></a>1.2 主题词</h3><ol><li>特征<ol><li>文段围绕其展开</li><li>一般高频出现</li><li>多为名词</li><li>前有引入或后有解释说明</li></ol></li><li>干扰选项<ol><li>范围扩大/缩小/偷换的不选</li></ol></li></ol><h3 id="1-3-因果关系-结论是重点"><a href="#1-3-因果关系-结论是重点" class="headerlink" title="1.3 因果关系(结论是重点)"></a>1.3 因果关系(结论是重点)</h3><ol><li>典型格式<ol><li>因为……所以；由于……因此；……</li></ol></li><li>因果标志词<ol><li>所以、因此、因而、故而、于是、可见、看来、……</li><li>导致、致使、使得、造成、……</li><li>为什么、为何、……</li></ol></li><li>文段特征<ol><li>“因此”句在结尾——90%以上为文段中心句</li><li>“因此”句在中间<ol><li>后为进一步解释说明——“因此”句为中心句</li><li>后有其他关联关系——需结合多种关联词共同分析</li></ol></li></ol></li><li>提示<ol><li>当提问直接问原因时，重点关注“由于”、“因为”之后或“因此”之前的内容</li></ol></li></ol><h3 id="1-4-必要条件关系-必要条件是重点"><a href="#1-4-必要条件关系-必要条件是重点" class="headerlink" title="1.4 必要条件关系(必要条件是重点)"></a>1.4 必要条件关系(必要条件是重点)</h3><p>充分必要条件，意思是说，如果能从命题A推出命题B，而且也能从命题B推出命题A ，则称A是B的充分必要条件，且B也是A的充分必要条件。</p><p><strong>正推成立是充分，反推成立是必要。若有A推到B，则B为必要条件，即被推导出来的就是必要条件</strong>。不需要把两个一次性全部分辨出来，只要记准那个是必要条件就行了，因为另一个A肯定就是充分条件。</p><ol><li>典型格式<ol><li>只有……才……</li></ol></li><li>对策标志词<ol><li>应该、应当、必须、需要、亟需、亟待+做法</li><li>通过/采取……手段/途径/措施/方式/方法/渠道，才能……</li><li>呼吁、倡导、体长、提醒、建议+做法</li><li>前提、基础、保障</li></ol></li><li>文段特征<ol><li>对策在结尾<ol><li>提出问题+分析问题+解决问题</li></ol></li><li>对策在开头<ol><li>对策+原因论证、正反论证</li></ol></li><li>对策在中间<ol><li>后有对前一做法的加强论证，前面做法更重要</li></ol></li></ol></li><li>反面论证<ol><li>典型格式<ol><li>如果/倘若/一旦……+不好的结果</li></ol></li><li>具体应用<ol><li>把前面的做法反过来，即为正确答案</li></ol></li></ol></li><li>提示<ol><li>文段只出现提出问题+分析问题，解决问题可能出现在选项中作为正确答案</li><li>对策和其意义、效果、作用同时出现时，对策更重要</li><li>对策不万能，一定要注意</li><li>假设偷换成现实的选项是错误的</li></ol></li></ol><h3 id="1-5-程度词"><a href="#1-5-程度词" class="headerlink" title="1.5 程度词"></a>1.5 程度词</h3><ol><li>标志词<ol><li>典型标志<ol><li>更、最、尤其是、根本、正是、真正等</li></ol></li><li>非典型标志<ol><li>致命、无疑是、核心、突出等</li></ol></li></ol></li><li>理论要点<ol><li>程度词所在的语句通常为重点</li></ol></li></ol><h3 id="1-6-并列关系-概括全面完整"><a href="#1-6-并列关系-概括全面完整" class="headerlink" title="1.6 并列关系(概括全面完整)"></a>1.6 并列关系(概括全面完整)</h3><ol><li>文段特征<ol><li>包含并列关联词及标点，如：此外、另外、同时、以及、“；”等</li><li>层次分明，格式工整</li><li>无明显其他关联词语</li></ol></li><li>选项特征<ol><li>两方面情况： 和、及、与、同</li><li>更多种情况： 许多、一些、不同、各种、一系列</li></ol></li><li>提示<ol><li>分句表达意思相同： 提取共性</li><li>纠结时可反推文段是否涵盖全部内容</li></ol></li></ol><h3 id="1-7-行文脉络"><a href="#1-7-行文脉络" class="headerlink" title="1.7 行文脉络"></a>1.7 行文脉络</h3><ol><li>理论要点<ol><li>把握中心句及分述句的特点</li></ol></li><li>中心句特征<ol><li>位置特征<ol><li>常出现在首尾</li><li>出现在中间时往往有关键词引导</li></ol></li><li>内容特征<ol><li>为观点： 如对策、结论、评价</li></ol></li></ol></li><li>分述句特征<ol><li>“比如”、“例如”、“……就是例证”等</li><li>多角度分析(不同角度并列、正反论证)</li><li>原因解释</li><li>调查资料、研究、报告</li></ol></li><li>提示<ol><li>选项陷阱总结<ol><li>尾句内容迷你眼</li><li>并非全部是重点</li><li>非重点处设陷阱</li><li>无中生有需警醒</li></ol></li><li>选项排除技巧(反推)<ol><li>如何-措施</li><li>原因-因果</li><li>差异-并列</li><li>应该-对策</li><li>意义-好处</li></ol></li></ol></li></ol><h2 id="二：-细节判断题"><a href="#二：-细节判断题" class="headerlink" title="二： 细节判断题"></a>二： 细节判断题</h2><ol><li>提问方式<ol><li>以下对文段理解正确/不正确的是</li><li>符和/不符合这段话意思的是</li><li>以下说法正确/不正确的是</li></ol></li><li>细节主旨化<ol><li>题干特征<ol><li>题干常问“符合的”，“正确的”，偶尔以“可以推出的”为变形题干形式</li></ol></li><li>文段特征<ol><li>一般不考查极其晦涩难懂的科技说明文，文段中心较为明显</li></ol></li><li>解题思路<ol><li>优选契合文段中心的选项，寻找中心的方法同中心理解题</li></ol></li></ol></li><li>典型细节题(错误选项类型)<ol><li>无中生有</li><li>偷换概念<ol><li>替换</li><li>混搭</li></ol></li><li>偷换时态<ol><li>将来时(将要、立刻、趋势、以后)</li><li>完成时(已、已经、了、完成)</li><li>进行时(正在、在……中、着)</li></ol></li><li>程度轻重(相对绝对法)<ol><li>绝对标志词<ol><li>均、取代、主导、唯一、只要……就……、无论……都……等</li></ol></li><li>相对标志词<ol><li>尽量、往往、容易、几乎、……之一等</li></ol></li></ol></li></ol></li></ol><h2 id="三：-语句表达"><a href="#三：-语句表达" class="headerlink" title="三： 语句表达"></a>三： 语句表达</h2><h3 id="3-1-语句排序题"><a href="#3-1-语句排序题" class="headerlink" title="3.1 语句排序题"></a>3.1 语句排序题</h3><ol><li>提问方式<ol><li>以下几个句子重新排列组合最连贯的是？</li></ol></li><li>解题要点(先看选项，从选项入手)<ol><li>对比选项确定首尾句</li><li>确定捆绑词集团或确定顺序或观察尾句</li><li>根据具体情况进行验证</li></ol></li><li>确定首句<ol><li>背景引入<ol><li>随着、近年来、在……大背景/环境下</li></ol></li><li>下定义<ol><li>……就是/是指</li></ol></li><li>提出观点<ol><li>有人说、人们普遍认为</li></ol></li><li>非首句特征<ol><li>指代词</li><li>关联词后半部分</li></ol></li></ol></li><li>确定捆绑词集团<ol><li>关联词<ol><li>配套出现确定捆绑</li><li>单个出现分析句义</li></ol></li><li>共同信息<ol><li>找特殊信息捆绑</li></ol></li><li>指代词<ol><li>这、那、他、其、该</li></ol></li></ol></li><li>确定顺序<ol><li>时间顺序： 如从古到今、A和B，先说A再说B</li><li>逻辑顺序： 如父子</li></ol></li><li>确定尾句<ol><li>因此、所以、看来、这……引导的总结性尾句</li><li>对策</li></ol></li><li>验证所选答案</li></ol><h3 id="3-2-语句填空题"><a href="#3-2-语句填空题" class="headerlink" title="3.2 语句填空题"></a>3.2 语句填空题</h3><ol><li>提问方式<ol><li>填入横线部分最恰当的一项是……</li></ol></li><li>横线在结尾<ol><li>总结前文</li><li>提出对策</li><li>尾句中的分句<ol><li>优先考虑与前面分句的衔接</li><li>保证前后话题一致</li></ol></li></ol></li><li>横线在开头<ol><li>需概括文段的中心内容</li></ol></li><li>横线在中间<ol><li>注意与上下文的联系</li><li>把握好主题词，保证文段话题一致</li></ol></li><li>提示<ol><li>纠结时可用反向排除法</li></ol></li></ol><h3 id="3-3-接语选择题"><a href="#3-3-接语选择题" class="headerlink" title="3.3 接语选择题"></a>3.3 接语选择题</h3><ol><li>提问方式<ol><li>作者接下来最可能讲述的是……</li></ol></li><li>理论要点<ol><li>重点关注文段最后一句话</li></ol></li><li>干扰项特征<ol><li>文段中已经论述过的内容</li></ol></li><li>提示<ol><li>理解要紧紧依托文段，不能无中生有</li></ol></li></ol><h2 id="四：-逻辑填空"><a href="#四：-逻辑填空" class="headerlink" title="四： 逻辑填空"></a>四： 逻辑填空</h2><h3 id="4-1-词的辨析"><a href="#4-1-词的辨析" class="headerlink" title="4.1 词的辨析"></a>4.1 词的辨析</h3><ol><li>词义侧重(的辨析方法)<ol><li>第一种： 拆字组词： 用不一样的字单独组词</li><li>第二种： 整词搭配： 用整个词进行组词搭配</li></ol></li><li>固定搭配<ol><li>积累热点词<ol><li>倒逼增长；精准扶贫</li><li>催生国际力量；抑制房价增长</li><li>厉行节约；资源匮乏</li><li>创新驱动；金融恐慌</li></ol></li><li>根据词性找搭配<ol><li>若选项均是动词，在文段中找到动词后或动词前搭配的名词，也可找修饰动词的副词</li><li>若选项均是名词，在文段中找到名词后或名词前搭配的动词，也可找修饰名词的形容词</li><li>例： 又瘦又美的(定语)小美(主语名词)深深地(副词)爱(谓语动词)学生们(宾语名词)</li></ol></li><li>两分法<ol><li>主动or被动</li><li>具体or抽象</li><li>上对下or下对上</li><li>人or物</li></ol></li></ol></li><li>程度轻重<ol><li>区分词地程度轻重<ol><li>程度轻： 大相径庭；相差很大；相差很多</li><li>程度重： 截然不同；完全相反；完全不同</li></ol></li><li>理论要点<ol><li>所填词语地程度和文段意思地轻重保持一致</li></ol></li></ol></li><li>感情色彩<ol><li>区分词地感情色彩<ol><li>褒义： 成果</li><li>贬义： 成果</li><li>中性： 成果</li></ol></li><li>理论要点： 所填词语地感情色彩与文段地感情色彩保持一致</li></ol></li></ol><h3 id="4-2-语境分析"><a href="#4-2-语境分析" class="headerlink" title="4.2 语境分析"></a>4.2 语境分析</h3><ol><li>关联关系<ol><li>转折<ol><li>标志词： 但是、然而、却等</li><li>理论要点： 前后语义相反</li></ol></li><li>递进<ol><li>标志词： 而且、甚至、更等</li><li>理论要点： 语义程度前轻后重</li></ol></li><li>并列<ol><li>理论要点<ol><li>同义并列： 顿号(、)，逗号(，)</li><li>反义并列： 不是……而是……、是……不是……、相反、反之等</li></ol></li><li>提示： 相同句式表并列</li></ol></li></ol></li><li>对应关系<ol><li>解释类对应<ol><li>题干特点： 分句，﹍﹍，分句</li><li>标志词： 是、就是、即、无异于、无疑是、比如、例如等</li><li>标点： 冒号(:)、破折号(——)</li></ol></li><li>重点词句对应<ol><li>重点词： 主题词、指代词等</li><li>重点句： 中心句、完整句</li></ol></li><li>提示： 找准对应关系，要基于对整个文段意思的把握</li></ol></li></ol><h2 id="五：-小技巧"><a href="#五：-小技巧" class="headerlink" title="五： 小技巧"></a>五： 小技巧</h2><ol><li>注意文章的结构，是转折，总分，还是并列……</li><li>注意程度词、连接词，关注文段的语义变化是破题的捷径。</li><li>多用逻辑分析，看是近义、反义还是并列……，注重上下文联系。</li><li>转折前不选</li><li>例子不选</li><li>片面、无中生有不选</li><li>提问、分析问题，则解决问题的是答案</li><li>主题词(上述无用，读不懂的时候用)</li><li>不明确时优选明确选项</li><li>反推法</li></ol>]]></content>
    
    
    <categories>
      
      <category>公考</category>
      
      <category>言语理解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PVE虚拟机下安装ikuai、openwrt及配置IPv6</title>
    <link href="/2020/09/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/PVE%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8B%E5%AE%89%E8%A3%85ikuai%E5%92%8Copenwrt/"/>
    <url>/2020/09/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/PVE%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8B%E5%AE%89%E8%A3%85ikuai%E5%92%8Copenwrt/</url>
    
    <content type="html"><![CDATA[<blockquote><p>PVE虚拟机下使用ikuai进行流控，openwrt进行去广告、KMS服务器等高级功能。<br>2021.9后可参考视频<a href="https://3g.163.com/v/video/VBIPHHU10.html">PVE全新奶妈保姆级+爱快+openwrt+黑群晖7.0.1+直通+IPV6+MAC地址</a></p></blockquote><h2 id="一、-安装PVE"><a href="#一、-安装PVE" class="headerlink" title="一、 安装PVE"></a>一、 安装PVE</h2><h3 id="2-1-固件安装"><a href="#2-1-固件安装" class="headerlink" title="2.1 固件安装"></a>2.1 固件安装</h3><p>用U盘制作<a href="https://www.ventoy.net/cn/index.html">ventoy启动盘</a>后，把<a href="https://www.proxmox.com/en/downloads">PVE官方映像</a>拖到U盘里面。</p><p>bios里面使用u盘启动，选择下载的PVE官方映像进行安装。</p><ol><li>选择安装的磁盘。</li><li>country选择<code>China</code>。</li><li>输入root密码，邮箱随意，可以不输入。</li><li>网卡默认，hostname设置为你的域名或随意域名，下面的ip按需设置，网关设为<code>openwrt</code>的地址，DNS设为114.114.114.114。</li><li>安装。</li></ol><h3 id="2-2-web界面配置"><a href="#2-2-web界面配置" class="headerlink" title="2.2 web界面配置"></a>2.2 web界面配置</h3><p>输入<code>https://你的ip:8006/</code>进入web界面。</p><p>点击系统-网络-选择默认网桥(类别为Linux Bridge)，双击-桥接端口，把上面的网络设备名称全部添加进去(空格间隔)。</p><p>双击网络里面的全部接口-设置为自动启动。</p><p>下面更换源和关闭订阅提示。<br>将下面的代码保存为<code>pve.sh</code>，拖到<code>PVE</code>的<code>/root</code>根目录，<code>chmod +x pve.sh</code>，<code>./pve.sh</code>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">修改apt国内源</span><br>echo &quot;deb http://mirrors.ustc.edu.cn/debian/ stretch main contrib non-free&quot; &gt; /etc/apt/sources.list<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb-src http://mirrors.ustc.edu.cn/debian/ stretch main contrib non-free&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><br>echo &quot;deb http://mirrors.ustc.edu.cn/debian/ stretch-updates main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb-src http://mirrors.ustc.edu.cn/debian/ stretch-updates main contrib non-free&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><br>echo &quot;deb http://mirrors.ustc.edu.cn/debian/ stretch-backports main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb-src http://mirrors.ustc.edu.cn/debian/ stretch-backports main contrib non-free&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><br>echo &quot;deb http://mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb-src http://mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-free&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br>echo -e &quot;\033[32m 已修改apt源为中国科学技术大学源！\033[0m&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">修改pve-no-subscription源</span><br>rm -f /etc/apt/sources.list.d/pve-enterprise.list<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://download.proxmox.com/debian/pve stretch pve-no-subscription&quot;</span> &gt; /etc/apt/sources.list.d/pve-install-repo.list</span><br>echo &quot;deb http://download.proxmox.com/debian/pve stretch pve-no-subscription&quot; &gt;&gt; /etc/apt/sources.list<br>wget http://download.proxmox.com/debian/proxmox-ve-release-5.x.gpg -O /etc/apt/trusted.gpg.d/proxmox-ve-release-5.x.gpg<br>echo -e &quot;\033[32m 已完成修改pve-no-subscription源！\033[0m&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">apt update更新</span><br>apt update -y &amp;&amp; apt dist-upgrade -y &amp; apt-get clean<br><span class="hljs-meta">#</span><span class="bash">pveupdate</span><br><span class="hljs-meta">#</span><span class="bash">pveupgrade</span><br>echo -e &quot;\033[32m 已完成apt更新！\033[0m&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">登陆屏蔽订阅通知</span><br><span class="hljs-meta">#</span><span class="bash"> find / -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;*.js&quot;</span> | xargs  grep -Hn --color=auto <span class="hljs-string">&quot;You do not have a valid subscription for this server&quot;</span></span><br>sed -i_orig &quot;s/data.status !== &#x27;Active&#x27;/false/g&quot; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js<br>echo -e &quot;\033[32m 已屏蔽登陆订阅通知！\033[0m&quot;<br></code></pre></div></td></tr></table></figure><h3 id="2-3-关闭TSO"><a href="#2-3-关闭TSO" class="headerlink" title="2.3 关闭TSO"></a>2.3 关闭TSO</h3><p><strong>PS</strong>:我用的<code>M73</code>，因为原生网卡不支持，需要关闭<code>TSO</code>，如果你的不需要，则忽略此步骤，先安装<strong>ethtool</strong>，<code>apt install ethtool</code>，<code>ip link show</code>查看网口，用<code>ethtool -k vmbr0</code>查看网口是否开启了TSO，我这边网口是vmbr0。</p><p>关闭TSO命令<code>ethtool -K vmbr0 tso off</code></p><p><code>nano /etc/init.d/tsooff</code>，编辑开机自动关闭TSO脚本如下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SHELL"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## BEGIN INIT INFO</span></span><br><span class="hljs-meta">#</span><span class="bash"> Provides: tsooff</span><br><span class="hljs-meta">#</span><span class="bash"> Required-Start: <span class="hljs-variable">$network</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$local_fs</span></span><br><span class="hljs-meta">#</span><span class="bash"> Required-Stop: <span class="hljs-variable">$network</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$local_fs</span></span><br><span class="hljs-meta">#</span><span class="bash"> Default-Start: 2 3 4 5</span><br><span class="hljs-meta">#</span><span class="bash"> Default-Stop: 0 1 6</span><br><span class="hljs-meta">#</span><span class="bash"> Short-Description: TSO_off</span><br><span class="hljs-meta">#</span><span class="bash"> Description: tso_off</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## END INIT INFO</span></span><br><br>ethtool -K eno1 tso off<br>ethtool -K vmbr0 tso off<br>ethtool -K vmbr1 tso off<br><br>exit 0<br></code></pre></div></td></tr></table></figure><p><code>ctrl+O,ctrl+X</code>保存并关闭编辑</p><p><code>chmod +x /etc/init.d/tsooff</code></p><p>将脚本加入自动执行<br><code>update-rc.d tsooff defaults</code></p><h3 id="2-4-添加温度显示"><a href="#2-4-添加温度显示" class="headerlink" title="2.4 添加温度显示"></a>2.4 添加温度显示</h3><p><a href="https://github.com/ivanhao/pvetools">使用GitHub-pvetools一键工具添加温度显示</a></p><p>命令行安装，需要用root账号来运行</p><p>在终端中按行分别执行以下内容：</p><blockquote><p>强烈建议先删除企业源：rm /etc/apt/sources.list.d/pve-enterprise.list</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SHELL">export LC_ALL=en_US.UTF-8<br>apt update &amp;&amp; apt -y install git &amp;&amp; git clone https://github.com/ivanhao/pvetools.git<br>cd pvetools<br>./pvetools.sh<br><span class="hljs-meta">#</span><span class="bash"> 如果提示没有权限，输入chmod +x ./*.sh</span><br></code></pre></div></td></tr></table></figure><p>执行后，按提示操作即可。</p><p><strong>卸载脚本</strong></p><p>删除下载的<code>pvetools</code>目录</p><h3 id="2-5-更改ProxmoxVE的LXC仓库源为国内中科大源"><a href="#2-5-更改ProxmoxVE的LXC仓库源为国内中科大源" class="headerlink" title="2.5 更改ProxmoxVE的LXC仓库源为国内中科大源"></a>2.5 更改ProxmoxVE的LXC仓库源为国内中科大源</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SHELL">grep -rn &quot;download.proxmox.com&quot; /usr/share/perl5/PVE/*   #查找设定下载源的文件<br>sed -i.bak &quot;s#http://download.proxmox.com/images#https://mirrors.ustc.edu.cn/proxmox/images#g&quot; /usr/share/perl5/PVE/APLInfo.pm #替换为中科大源<br>wget -O /var/lib/pve-manager/apl-info/mirrors.ustc.edu.cn https://mirrors.ustc.edu.cn/proxmox/images/aplinfo-pve-6.dat # 下载aplinfo-pve-6文件，也可下载aplinfo.dat<br></code></pre></div></td></tr></table></figure><h2 id="二、-安装ikuai"><a href="#二、-安装ikuai" class="headerlink" title="二、 安装ikuai"></a>二、 安装ikuai</h2><p>点击local-内容-上传，上传<a href="https://www.ikuai8.com/component/download">ikuai官网</a>下载的ISO映像。</p><p>创建虚拟机-名称<code>ikuai</code>-操作系统选择<code>上传的映像</code>-系统<strong>显卡一定要选择VMWARE兼容，否则不能正确显示。</strong>-硬盘总线<code>SCSI</code>,磁盘大小<code>2</code>-CPU为1核<code>2线程</code>、高级中<code>启用NUMA</code>(支持热拔插，不需要则不开启)-内存64位<code>4096</code>或者32位<code>2048</code>-网络<code>VirIO(半虚拟化)</code>-确定。</p><p>web界面点击虚拟机100。</p><p>硬件-添加-网络设备-选择<code>桥接接口</code>-模型选<code>VirtIO</code>-添加。</p><p>选项-开机自启动设置为<code>是</code>。</p><p>启动，选择控制台。<code>2</code>绑定网卡，<code>0</code>LAN口地址设置。</p><p>登录ikuai的web界面。</p><p><a href="https://www.right.com.cn/forum/thread-2640416-1-1.html">网关配置</a></p><h2 id="三、-安装openwrt"><a href="#三、-安装openwrt" class="headerlink" title="三、 安装openwrt"></a>三、 安装openwrt</h2><h3 id="3-1-PVE配置"><a href="#3-1-PVE配置" class="headerlink" title="3.1 PVE配置"></a>3.1 PVE配置</h3><p>先修改映像名字为 <code>openwrt.img</code> ，再用 <code>winscp</code> 把 <code>openwrt</code> 的映像传到 <code>PVE</code> 的 <code>/root</code> 根目录。</p><p>PVE的shell命令行工具中输入如下命令：</p><blockquote><p>映像转换的命令格式为(区分大小写)：<br>qemu-img(转换工具) convert -f raw(-f后面指明原文件格式) -O qcow2(输出格式) openwrt.img openwrt.qcow2</p></blockquote><p><code>qemu-img convert -f raw -O qcow2 openwrt.img openwrt.qcow2</code></p><p>首先先创建虚拟机101.</p><p><code>PVE的web</code>界面点击虚拟机<code>101</code>。</p><p>操作系统 -&gt; 不使用任何介质。</p><p>系统 -&gt; 默认。</p><p>硬盘 -&gt; 随意设置 2G， 之后会删除。</p><p>CPU -&gt; <code>1核2线程</code> -&gt; 类别 <code>host</code> 。</p><p>内存 -&gt; <code>1024</code> 。</p><p>网络 -&gt; 默认。</p><p>然后<code>PVE-web</code>界面分离不用的硬盘：选择刚刚创建的“Openwrt虚拟机” -&gt;  硬件 -&gt; 硬盘(scsi0) -&gt; 点击“分离” -&gt; 点击“删除”。</p><p>PVE的shell命令行工具中输入如下命令：</p><blockquote><p>导入磁盘命令格式为(区分大小写)：<br>qm importdisk 101(虚拟机编号) openwrt.qcow2(映像名字) local-lvm(pve存储空间名字)</p></blockquote><p><code>qm importdisk 101 openwrt.qcow2 local-lvm</code></p><p>选择刚刚创建的“Openwrt虚拟机” -&gt;  硬件 -&gt; 未使用的硬盘0 -&gt; 点击“编辑” -&gt; 总线/设备“SATA” -&gt; 添加。</p><p>硬件 -&gt; 硬盘SATA0 -&gt; 调整磁盘大小，增加<code>3</code>。</p><p>(这一条如果不用openwrt拨号可以不设置，我这边没添加)添加-网络设备-选择<code>桥接接口</code>-模型选<code>VirtIO</code>-添加。</p><p>切换到虚拟机的“选项”选项卡，双击“引导顺序”，第一引导项选“Disk ‘sata0’”。开机自启动设置为<code>是</code>。</p><p>启动虚拟机101，控制台操作如下命令行。</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH"><span class="hljs-comment"># 修改LAN口固定IP</span><br>vi /etc/config/network<br><span class="hljs-comment"># option ipaddr可以改为你想要管理路由的IP地址，比如&#x27;192.168.10.1&#x27;</span><br><br><span class="hljs-comment"># 重启网络</span><br>/etc/init.d/network restart<br></code></pre></div></td></tr></table></figure><h3 id="3-2-更改web端口和SSH端口"><a href="#3-2-更改web端口和SSH端口" class="headerlink" title="3.2 更改web端口和SSH端口"></a>3.2 更改web端口和SSH端口</h3><ol><li>修改uhttpd端口</li></ol><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH"><span class="hljs-comment"># 修改uhttpd</span><br>vi /etc/config/uhttpd<br><span class="hljs-comment"># 将以下改为新的端口</span><br>list listen_http 0.0.0.0:80 --&gt; list listen_http 0.0.0.0:8081<br><span class="hljs-comment"># 保存,重启uhttpd</span><br><span class="hljs-comment">#/etc/init.d/uhttpd restart</span><br></code></pre></div></td></tr></table></figure><h3 id="3-3-网关配置"><a href="#3-3-网关配置" class="headerlink" title="3.3 网关配置"></a>3.3 网关配置</h3><p>登录openwrt的web界面。</p><p><a href="https://www.right.com.cn/forum/thread-2640416-1-1.html">网关配置</a></p><h3 id="3-4-在openwrt配置HP1020设置为网络打印机"><a href="#3-4-在openwrt配置HP1020设置为网络打印机" class="headerlink" title="3.4 在openwrt配置HP1020设置为网络打印机"></a>3.4 在openwrt配置HP1020设置为网络打印机</h3><blockquote><p>参考：<a href="https://post.smzdm.com/p/apz08xz2/">openwrt共享打印机【上】【完美解决】HP10系打印异常问题</a></p></blockquote><p>openwrt安装打印服务器<br>1、<del>安装USB支持软件包（eSir固件可省略）</del><br><del>opkg update</del><br><del>opkg install luci-i18n-base-zh-cn  (openwrt安装中文语言包)</del><br><del>opkg install kmod-usb-storage</del><br><del>opkg install kmod-usb-printer #USB口打印机支持</del><br><del>opkg install p910nd</del><br><del>opkg install luci-app-p910nd</del><br><del>opkg install luci luci-base luci-compat (更新一下luci-compat即可)</del><br>2、WEB界面设备选择HP1020，<strong>接口未指定</strong>，端口默认，<strong>双向模式关闭</strong><br>3、上传固件<code>sihp1020.dl</code>到路由器<code>/etc/</code><br>4、<code>/etc/hotplug.d/usb/10-usb-printer</code>（替换原有的10-usb_printer文件）（自动加载固件到打印机）<br>5、网络-防火墙-通信规则，开放9100端口<br>6、写入语句到路由器启动项中  <code>cat /etc/sihp1020.dl &gt;&gt;/dev/usb/lp0</code>（路由器在重启后自动加载固件到打印机）<br>7、PC上添加本地网络打印机,路由器和打印机双向打印都关闭。</p><h2 id="四、-配置ipv6"><a href="#四、-配置ipv6" class="headerlink" title="四、 配置ipv6"></a>四、 配置ipv6</h2><p>首先在ikuai中网络设置-开启IPv6并设置DHCPv6(很简答，选自动获取，傻瓜操作)。</p><p>其次在openwrt中<a href="https://zhaoshuai.top/2020/08/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%9A%84%E4%B8%BB%E6%9C%BA%E5%AE%9E%E7%8E%B0%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE(IPv6%E3%80%81frp%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86)/">IPv6如此设置</a> ， <a href="(https://www.wygdbb.com/2020/09/openwrt-ipv6/)">参考图片，图片里是<code>WAN</code>，但我们是二级路由，所以是<code>LAN</code></a>：</p><ol><li>从网络 –&gt; 接口 –&gt; 删除<code>“IPv6 ULA 前缀”</code> –&gt; 保存&amp;应用</li><li>手动添加一个新接口–&gt; <code>IPV6</code> -&gt; 协议选 <code>DHCPv6客户端</code> -&gt; 自定义接口： <code>@lan</code> -&gt; <code>提交</code></li><li>DHCP/DNS –&gt; 高级设置 –&gt; <code>禁止解析 IPv6 DNS 记录</code> ，取消勾选</li><li>防火墙 –&gt; 基本设置 中 <code>入站数据、出站数据、转发，全部改为“接受”</code> -&gt; IP 动态伪装: <code>勾选</code> -&gt; 区域中 LAN <code>入站数据、出站数据、转发，全部改为“接受”</code> -&gt; 继续点击<code>修改</code>(lan口) -&gt; 覆盖网络 <code>勾选IPv6、LAN</code> -&gt; 端口触发 <code>勾选IPv6、LAN</code></li><li>网络 -&gt; 负载均衡 -&gt; 策略 -&gt; 修改-&gt; 备用成员设为 <code>默认(使用主路由器)</code>。</li></ol><p><a href="http://test-ipv6.com/">访问IPv6测试网页测试</a></p><p><a href="https://zhaoshuai.top/2020/08/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%9A%84%E4%B8%BB%E6%9C%BA%E5%AE%9E%E7%8E%B0%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE(IPv6%E3%80%81frp%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86)/">使用IPv6进行内网穿透教程</a></p><h2 id="五、-修复ikuai状态监控中MAC地址重复的问题"><a href="#五、-修复ikuai状态监控中MAC地址重复的问题" class="headerlink" title="五、 修复ikuai状态监控中MAC地址重复的问题"></a>五、 修复ikuai状态监控中MAC地址重复的问题</h2><p>一、进入openwrt后台，系统 – 软件包-刷新列表</p><p>二、在过滤器里面搜索SNMP(eSir的固件自带SNMP，不需要单独安装)<br>在可用安装包里面安装snmpd。</p><p>三、安装好后回到爱快配置。高级应用-第三层应用，添加一条<br>里面SNMP服务器ip：就填入你openwrt的后台地址即可，其他就不用填其他的。</p><p>四、现在回到爱快监控里面看，MAC地址已经显示正确了且不重复了。</p><p>五：如果安装<code>SNMP</code>出错，可按下面方法处理(eSir的固件自带SNMP，不需要单独安装)：<br>ssh连接你的<code>OPENWRT</code>路由,连接后输入以下代码（下载可能有点慢）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &quot;nameserver 114.114.114.114&quot;&gt;/tmp/resolv.conf<br>rm -f /var/lock/opkg.lock<br>opkg update<br></code></pre></div></td></tr></table></figure><h2 id="六、-双路由如何设置端口转发"><a href="#六、-双路由如何设置端口转发" class="headerlink" title="六、 双路由如何设置端口转发"></a>六、 双路由如何设置端口转发</h2><blockquote><p>情景设置：<br>爱快：10.10.10.3，它负责PPPoE拨号，负责DHCP，在DHCP上设置了网关为10.10.10.1<br>openwrt：10.10.10.1，它负责广告屏蔽和其他网络应用，它在内网上设置了静态IP，网关设置为10.10.10.3</p></blockquote><p>方法如下：</p><ol><li>在爱快路由上设置：内网地址全部设为10.10.10.1（即openwrt的ip）。内网端口就是局域网访问端口，不能重复（比如ikuai内网访问端口为80，我需要外网访问端口为800；openwrt端口改为81，外网访问端口801）;外网端口设置为外部访问的端口号（这边iKuai为800，openwrt为801）。</li><li>在openwrt上设置：外部端口设为局域网访问端口（按上面的例子ikuai就是80，openwrt就是81），内部ip地址为需要访问设备的ip，内部端口设为局域网访问端口（ikuai就是80，openwrt就是81）。（PS：外部区域即源区域，和内部区域都是LAN）</li></ol><p><strong>等于是做了两层转发，先从wan口经过ikuai转发到openwrt，然后从openwrt转发到内网需要访问的ip和端口。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>PVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试</title>
    <link href="/2020/08/26/%E5%85%AC%E8%80%83/Interview/"/>
    <url>/2020/08/26/%E5%85%AC%E8%80%83/Interview/</url>
    
    <content type="html"><![CDATA[<h2 id="一：-主要题型及答题思路"><a href="#一：-主要题型及答题思路" class="headerlink" title="一： 主要题型及答题思路"></a>一： 主要题型及答题思路</h2><h3 id="1-1-主要题型"><a href="#1-1-主要题型" class="headerlink" title="1.1 主要题型"></a>1.1 主要题型</h3><p>面视分为四大题型：</p><ol><li>社会现象+态度观点</li><li>组织管理</li><li>应急应变</li><li>人际关系+其他题型(模拟)</li></ol><h3 id="1-2-评分标准"><a href="#1-2-评分标准" class="headerlink" title="1.2 评分标准"></a>1.2 评分标准</h3><ol><li>表达流畅、有气场</li><li>逻辑清晰<ol><li>分点作答</li><li>重点前置</li><li>注重逻辑词连接</li></ol></li><li>内容充实</li></ol><h3 id="1-3-答题思路"><a href="#1-3-答题思路" class="headerlink" title="1.3 答题思路"></a>1.3 答题思路</h3><ol><li>综合分析题(怎么看，要接天气)<ol><li>高深新(要有作答亮点)</li></ol></li><li>应急应变(怎么办，要接地气)<ol><li>要有具体措施(实用、针对性强、可行度高)</li></ol></li><li>组织管理和人际关系(怎么说，要接人气)<ol><li>要沟通好，工作要细致、全面</li></ol></li></ol><h2 id="二：-社会现象-态度观点"><a href="#二：-社会现象-态度观点" class="headerlink" title="二： 社会现象+态度观点"></a>二： 社会现象+态度观点</h2><h3 id="2-1-综合分析之社会现象"><a href="#2-1-综合分析之社会现象" class="headerlink" title="2.1 综合分析之社会现象"></a>2.1 综合分析之社会现象</h3><ol><li>开头(可略过)<ol><li>直接表达式</li><li>情感式</li><li>联想式</li><li>背景式</li></ol></li><li>分析问题<ol><li>原因： 分为主观和客观</li><li>意义</li><li>问题</li></ol></li><li>解决问题(不可略过)<ol><li>对策</li></ol></li><li>结尾(可略过)<ol><li>概括上文</li><li>点明主旨</li><li>展望未来</li></ol></li></ol><h3 id="2-2-目的行为分析法"><a href="#2-2-目的行为分析法" class="headerlink" title="2.2 目的行为分析法"></a>2.2 目的行为分析法</h3><p><strong>主体分析法</strong>分为三个主体：1.发起方、制作方  2.受众   3.政府部门、监管部门</p><ol><li>适用范围： 政府行为、领导行为、出台政策</li><li>目的： 相对来说，说不好比较容易展开，只说好比较空洞(具体好不好还要根据实际题目判断)。出发点是好的，但是…</li><li>行为： 考虑合法性、合理性、可操作性、完善性、成本、可持续性…有哪些改善的地方</li><li>结果： 治标不治本</li><li>对策： 政策完善制定，从根本上解决问题</li></ol><h3 id="2-3-综合分析之态度观点"><a href="#2-3-综合分析之态度观点" class="headerlink" title="2.3 综合分析之态度观点"></a>2.3 综合分析之态度观点</h3><ol><li>是什么<ol><li>直接给出观点，然后归纳总结</li></ol></li><li>为什么<ol><li>论证： a.主题论证 b.正反论证 c.举例论证 d.名人名言</li></ol></li><li>怎么办<ol><li>启示</li></ol></li><li>答题要求： 观点鲜明、论证丰富</li></ol><h3 id="2-4-寓言故事"><a href="#2-4-寓言故事" class="headerlink" title="2.4 寓言故事"></a>2.4 寓言故事</h3><p>需要发散思维</p><ol><li>观点1+解释+论证+启示做法</li><li>观点2+解释+论证+启示做法</li><li>观点3+解释+论证+启示做法</li><li>启示</li></ol><p>方法有1. 切片法 2. 原因法 3. 代入法 4. 联想法</p><h2 id="三：-组织管理"><a href="#三：-组织管理" class="headerlink" title="三： 组织管理"></a>三： 组织管理</h2><p>答题方向： 对象、人员、方式、内容、效果</p><p>题型分为：</p><ol><li>常规调研、宣传、培训、会议、比赛、考察、接待、要素轴</li><li>活动策划-&gt;时间轴</li><li>特殊类型<ol><li>前期准备做什么</li><li>活动的重点难点是什么</li><li>如何保证活动的有效性</li></ol></li></ol><p>答题重点：</p><ol><li>联系实际</li><li>着重做事</li><li>情景感、画面感</li></ol><h3 id="3-1-调研"><a href="#3-1-调研" class="headerlink" title="3.1 调研"></a>3.1 调研</h3><ol><li>前期准备： 基本信息，活动经验，物资准备</li><li>对象： 群众、政府、企业家、专家…</li><li>调研人员： 性格、专业、经验</li><li>调研方式<ol><li>问卷调查</li><li>上门访谈、电话访谈</li><li>明察暗访</li><li>座谈会</li><li>文献资料</li></ol></li><li>调研内容： 根据题干</li><li>调研报告<ol><li>内容： 分类，对比，建议</li><li>形式： 图表，立体</li></ol></li></ol><h3 id="3-2-宣传"><a href="#3-2-宣传" class="headerlink" title="3.2 宣传"></a>3.2 宣传</h3><ol><li>前期准备： ①物资、手册、条幅 ②了解宣传内容 ③借鉴经验</li><li>宣传对象(要有针对性)： 普遍对象 + 重点对象</li><li>宣传方式：<ol><li>单向宣传<ol><li>传统媒体： 广播、电视、报纸、展板、宣传册、短信</li><li>新媒体： QQ、微信、公示屏、LED广告</li></ol></li><li>互动宣传： ①演讲 ②征文 ③讲座 ④培训</li><li>创意宣传： ①保证书 ②责任状 ③马拉松</li></ol></li><li>宣传内容： 要有针对性</li><li>宣传效果(长效性)：<ol><li>反馈： ①回访 ②考核 ③问卷调查</li><li>长效机制： ①大数据 ②二次宣传</li></ol></li></ol><h3 id="3-3-培训"><a href="#3-3-培训" class="headerlink" title="3.3 培训"></a>3.3 培训</h3><ol><li>对象： 对象不愿意时，管理纪律(动员参加、日常管理)</li><li>老师： 专业、经验</li><li>方式<ol><li>线上和线下：<ol><li>在线做题、看信息、征文</li><li>演讲、公开课</li></ol></li><li>理论和实践<ol><li>宣传单、材料</li><li>动手去做，如义工，注重实践</li></ol></li><li>分批次和立体： 分批次培训，看效果调整培训方案</li></ol></li><li>内容： 看题干</li><li>效果<ol><li>反馈： 考核、回访、问卷调查、做题</li><li>长效性： ①大数据 ②二次宣传</li></ol></li></ol><h3 id="3-4-比赛"><a href="#3-4-比赛" class="headerlink" title="3.4 比赛"></a>3.4 比赛</h3><ol><li>评分标准</li><li>评委选择： 专业、权威、民主</li><li>宣传报名<ol><li>宣传形式： ①公告栏 ②微信平台 ③QQ群等</li><li>报名方式： ①自荐 ②他荐 ③评选等其他报名方式</li></ol></li><li>评选过程<ol><li>场地</li><li>环节： ①初赛 ②复赛 ③决赛</li><li>方式： ①问卷 ②演讲 ③直播 ④面试</li></ol></li><li>结果<ol><li>奖励</li><li>交流会、总结征文</li></ol></li></ol><h3 id="3-5-接待"><a href="#3-5-接待" class="headerlink" title="3.5 接待"></a>3.5 接待</h3><ol><li>联系确认： 了解工作内容、行程日期、人员数量和性别</li><li>准备工作： 准备工作材料、文件、成果</li><li>接站食宿： 在规定预算时间内定酒店、安排用车、餐饮</li><li>全程配合： 根据考察的内容，配合工作，提供相关文件、材料</li><li>交流反馈： 召开座谈会，交流反馈整改</li><li>安排返程</li></ol><h3 id="3-6-会议"><a href="#3-6-会议" class="headerlink" title="3.6 会议"></a>3.6 会议</h3><ol><li>准备： 根据议题收集资料和文件备用，准备场所、茶水</li><li>对象： QQ、微信、电话、短信进行通知</li><li>签到</li><li>全程<ol><li>发放资料/观看视频</li><li>领导讲话(提纲准备)</li><li>工作人员/业务代表发言</li><li>交流反馈、补充意见</li></ol></li><li>共享会议资料、成果或总结文档</li></ol><h2 id="四：-应急应变"><a href="#四：-应急应变" class="headerlink" title="四： 应急应变"></a>四： 应急应变</h2><p>审题(三审)： 审身份、审场景、审矛盾</p><p>类型：</p><ol><li>一般突发事件</li><li>特殊场景突发事件(多个主体，如有群众、媒体等)</li><li>公共突发事件</li></ol><p>答题思路： 解决当下、惩前毖后</p><p>矛盾数量</p><ol><li>单一矛盾： 直接层层假设、先易后难</li><li>多个矛盾： 先急后缓、先重后轻、先公后私</li></ol><p>应对媒体： ①我有错 ②不知道是否属实 ③我没错</p><h3 id="4-1-澄清误解"><a href="#4-1-澄清误解" class="headerlink" title="4.1 澄清误解"></a>4.1 澄清误解</h3><ol><li>主动汇报、听从指示</li><li>多方调查、搜集证据(详细展开，人证、物证)</li><li>做好解释，澄清误会(发布会、新闻稿、宣传部、网警删除)</li><li>反思总结、惩前毖后</li></ol><h3 id="4-2-投诉、举报、曝光"><a href="#4-2-投诉、举报、曝光" class="headerlink" title="4.2 投诉、举报、曝光"></a>4.2 投诉、举报、曝光</h3><ol><li>回应表态<ol><li>明身份</li><li>表示重视</li><li>承诺解决</li><li>随后答复</li></ol></li><li>调查取证：<ol><li>对象： 当事人、目击者、监控</li><li>方式： 调研、座谈会、访谈</li><li>内容</li></ol></li><li>解决问题： 分真、假情况，详细说如何处理</li><li>惩前毖后</li></ol><h3 id="4-3-人际关系"><a href="#4-3-人际关系" class="headerlink" title="4.3 人际关系"></a>4.3 人际关系</h3><p>就事论事、一件一件说</p><p>先急后缓、先重后轻、先公后私</p><h3 id="4-4-示例"><a href="#4-4-示例" class="headerlink" title="4.4 示例"></a>4.4 示例</h3><p>媒体发现社会性问题如何处理？</p><ol><li>调研取证，发现问题严肃处理；</li><li>全面排查，消除已有存在的隐患</li><li>专项治理，进行整治。加强教育、群众监督举报；</li><li>信息公开，安抚群众，表达决心；</li><li>总结上报，完善法律，厘清职责，确保长效机制。</li></ol><h2 id="五：-人际关系"><a href="#五：-人际关系" class="headerlink" title="五： 人际关系"></a>五： 人际关系</h2><ol><li>工作为重<ol><li>沟通、做事并重</li><li>生活、工作分开</li><li>犯错要先补救</li></ol></li><li>适度阳光<ol><li>阳光心态</li><li>认同肯定</li><li>理解包容</li><li>“打小报告”</li></ol></li><li>责权意识<ol><li>本职工作，他人工作</li><li>不越级</li><li>领导命令</li><li>领导批评表扬</li><li>领导间冲突</li></ol></li><li>原则灵活： 保持原则，讲究灵活</li></ol><p>答题思路： <strong>抓住矛盾点、摆平所有人、搞定所有事</strong></p><h2 id="六：-其他题型"><a href="#六：-其他题型" class="headerlink" title="六： 其他题型"></a>六： 其他题型</h2><h3 id="6-1-情景模拟"><a href="#6-1-情景模拟" class="headerlink" title="6.1 情景模拟"></a>6.1 情景模拟</h3><ol><li>开头： 结合身份入情入景的打开与沟通对象的“话匣子”</li><li>模拟内容： 人际关系和应急应变</li><li>结尾： 自然结尾，突显说服效果</li></ol><p>说服原则： <strong>动之以情 晓之以理 责之以法 诱之以利 疏堵结合</strong></p>]]></content>
    
    
    <categories>
      
      <category>公考</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nas_DSM的配置及使用</title>
    <link href="/2020/08/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/NAS/Nas-DSM%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/08/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/NAS/Nas-DSM%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录群晖安装完后的一些基本设置。</p></blockquote><h2 id="一：-获取root权限"><a href="#一：-获取root权限" class="headerlink" title="一： 获取root权限"></a>一： 获取root权限</h2><ol><li>NAS_DSM控制面板 -&gt; ‘终端机和SNMP’ ，开启Telnet和SSH功能。</li><li>用ssh软件登录NAS</li><li>输入<code>sudo -i</code>获取权限和设置root密码</li><li>设置root账号密码，输入<code>synouser --setpw root 你的root密码</code>这里的密码最好和admin密码一样，这样不容易搞错。</li><li><code>vi /etc/ssh/sshd_config</code>，将<code>#PermitRootLogin prohibit-password</code>改为<code>PermitRootLogin yes</code></li><li><code>service sshd restart</code>或者<code>/etc/initd.d/sshd restart</code>，重启sshd服务。</li></ol><h2 id="二：-安装transmission"><a href="#二：-安装transmission" class="headerlink" title="二： 安装transmission"></a>二： 安装transmission</h2><ol><li>套件中心 -&gt; 设置 -&gt; 套件来源 -&gt; 新增 -&gt; <code>http://packages.synocommunity.com</code> -&gt; 确定</li><li>套件中心 -&gt; 社群 -&gt; 安装transmission -&gt; 设置默认下载位置<code>/volume1/download</code>(按需设置) -&gt; 设置账号密码</li><li><a href="https://github.com/ronggang/transmission-web-control/wiki/Linux-Installation-CN">安装好看的皮肤</a>。用ssh软件登录NAS。</li><li><code>wget -N https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.sh --no-check-certificate</code></li><li>国内镜像<code>wget -N https://gitee.com/culturist/transmission-web-control/raw/master/release/install-tr-control-gitee.sh</code></li><li><code>sudo bash install-tr-control-gitee.sh</code>，然后选择1。(如果提示没有权限Permission denied，则赋予权限<code>chmod +x install-tr-control-cn.sh</code>。UI界面升级也是进入该目录，执行此命令)</li><li>共享文件夹 -&gt; 编辑 你的共享文件夹 -&gt; 权限 -&gt; 本地群组 -&gt; <code>sc-download</code> 可读写</li><li>transmission里面设置远程端口或frp添加服务列表</li><li>开启NAS防火墙相关端口</li></ol><h2 id="三：-安装kodi组建家庭影院"><a href="#三：-安装kodi组建家庭影院" class="headerlink" title="三： 安装kodi组建家庭影院"></a>三： 安装kodi组建家庭影院</h2><p>首先安装kodi：</p><ol><li><a href="http://mirrors.kodi.tv/releases/android/arm64-v8a/">kodi官网</a>下载安装包，建议下载17.6版本，然后升级高版本。</li><li>电视上安装apk文件</li><li>进入app，设置里面，<code>interface settings</code> -&gt; <code>skin</code> -&gt; <code>font</code>设置为<code>Arial based</code></li><li><code>interface settings</code> -&gt; <code>regional</code> -&gt; <code>language</code>设置为简中</li></ol><p>接下来设置群晖共享SMB：</p><ol><li>控制面板文件服务 -&gt; 开启SMB</li><li>新建用户账号kodi -&gt; 设置密码 -&gt; 用户组users -&gt;共享文件夹只读 -&gt; 默认下一步到应用</li></ol><p>登录kodi，在资料库添加windows网络 SMB，选择NAS，添加视频源。</p><p>设置群晖共享NFS：</p><ol><li>控制面板文件服务 -&gt; 开启NFS</li><li>共享文件夹 -&gt; 选中编辑 -&gt; NFS权限 -&gt; 新增 -&gt; ip为* -&gt; 权限只读 -&gt; Squash设置为映射root为admin -&gt; 允许来自非特权端口的连接 -&gt; 允许用户访问已装载的子文件夹 -&gt; 确定应用</li></ol><p>登录kodi，在资料库添加NFS，选择NAS的ip，添加视频源。</p><p>字幕插件推荐shooter、opensubtitles.org、subscenne.com三个</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>NAS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>申论</title>
    <link href="/2020/08/08/%E5%85%AC%E8%80%83/EssayTest/"/>
    <url>/2020/08/08/%E5%85%AC%E8%80%83/EssayTest/</url>
    
    <content type="html"><![CDATA[<blockquote><p>申论主要测查从事机关工作应当具备的基本能力，试卷由注意事项、给定资料和作答要求三部分组成。<br>主要测查报考者的阅读理解能力、综合分析能力、贯彻执行能力、提出和解决问题能力、文字表达能力等。</p></blockquote><ol><li>阅读理解能力——要求全面把握给定资料的内容，准确理解给定资料的含义，准确提炼资料所包含的观点，并揭示所反映的本质问题。</li><li>综合分析能力——要求对给定资料的全部或部分的内容、观点或问题进行分析和归纳，多角度地思考资料内容，<strong>作出合理的推断或评价</strong>。</li><li>贯彻执行能力——要求能够准确理解工作目标和组织意图，遵循依法行政的原则，根据客观实际情况，及时有效地完成任务。</li><li>提出和解决问题能力——要求借助自身的实践经验或生活体验，在对给定资料理解分析的基础上，发现和界定问题，作出评估或权衡，提出解决问题的方案或措施。</li><li>文字表达能力——要求熟练使用指定的语种，运用说明、陈述、议论等方式，准确规范、简明畅达地表述思想观点。</li></ol><hr><p>申论分为几大题型：概括题，解释、分析题，应用文写作(单一题、综合题、公文和写作)。</p><hr><h2 id="零：-拿到试卷后"><a href="#零：-拿到试卷后" class="headerlink" title="零： 拿到试卷后"></a>零： 拿到试卷后</h2><p>第一步：看题目一一确定材料主题 梳理材料内容（10分钟以内）</p><hr><p>第二步：做客观题一一了解呈现问题的角度、明确命题人的态度（<strong>一道客观题20分钟以内，题目材料双印证，动笔直接圈关键词，题本上标出要点，直接动笔答题</strong>）</p><hr><p>第三步：大作文一一看题目所在材料，理解题目内涵。<br>   看开始或结尾材料，明确时代背景+大政方针<br>   结合题目和材料，发现问题的<strong>不平衡 或 解决问题的钥匙</strong><br>   给定的材料都是素材一一提炼，二次加工。确定文章脉络、分论点。<br>   动笔列提纲，<strong>标题、开篇、分论点</strong>。（10-15分钟）通篇文章写作，至少留一个小时。</p><h2 id="一：-能力考查"><a href="#一：-能力考查" class="headerlink" title="一： 能力考查"></a>一： 能力考查</h2><h3 id="1-1-答题要素"><a href="#1-1-答题要素" class="headerlink" title="1.1 答题要素"></a>1.1 答题要素</h3><ol><li>问题： 负面、消极的信息</li><li>影响<ol><li>意义： 好的结果</li><li>危害： 坏的结果</li></ol></li><li>对策： 解决问题的办法、方法</li><li>态度： 观点、看法</li><li>事例： 对题目要求作答的信息能起到证明作用、且资料中大段描述的典型例子</li></ol><h3 id="1-2-客观题答题步骤"><a href="#1-2-客观题答题步骤" class="headerlink" title="1.2 客观题答题步骤"></a>1.2 客观题答题步骤</h3><h4 id="1-2-1-申论客观题的总体思路"><a href="#1-2-1-申论客观题的总体思路" class="headerlink" title="1.2.1 申论客观题的总体思路"></a>1.2.1 申论客观题的总体思路</h4><p>给定材料是答案的载体，题目要求是答案的描述。<br>要按照题目要求，印证材料的核心内容，领会命题人的意图，然后再抓住题目要求，把材料中的要点加工成最符合题目要求的答案，<strong>实现题目要求与材料内容的最佳平衡。</strong></p><h4 id="1-2-2-阅读技巧-如何找要点"><a href="#1-2-2-阅读技巧-如何找要点" class="headerlink" title="1.2.2 阅读技巧(如何找要点)"></a>1.2.2 阅读技巧(如何找要点)</h4><ol><li>摘抄原文要点(<strong>要精简句子，抓住关键词</strong>)<ol><li><strong>首尾句原则</strong></li><li><strong>主角原则</strong>。有观点的句子： 政府、领导、专家学者、百姓群众、媒体等的观点</li><li><strong>关键词原则</strong>。综上所述、总之。</li><li>数字原则。有数字的可提炼时间线、比例、率等；</li><li>双引号原则。标点符号内的内容要关注。</li></ol></li><li><strong>如果无法抄要点，就要归纳要点</strong>。分两种：<ol><li>第一，单个事例，思考方向是材料中具体的事例、细节，可以突出什么观点？注意<strong>因果表达</strong>。<ol><li>什么是因果表述？举两个例子</li><li>官网信息时效差，更新慢，导致突发事件舆情失控。</li><li>建立专职人员队伍，提高网络宣传和服务能力。</li></ol></li><li>第二，多个事例，要归纳共同的特征（主体、属性），思考从哪些方面突出题目要求？注意<strong>总分表述</strong>？<ol><li>【总分表述】推进传统产业进行智能化改造。要引导创新协同，开展试点示范，培育“专精特新”企业。</li></ol></li></ol></li><li>要点明确后。<ol><li><strong>一是要权衡材料要点是否为答题要点</strong>——材料内容未必全部契合要点，防止答非所问</li><li><strong>二是调整答题要点的内容，契合题目要求</strong>——要点表达要突出题目所问</li></ol></li></ol><h4 id="1-2-3-答案组织"><a href="#1-2-3-答案组织" class="headerlink" title="1.2.3 答案组织"></a>1.2.3 答案组织</h4><ol><li><strong>给划出的要点句编号，圈出关键词</strong>，方便整理誊写。</li><li>誊写时标清序号： 大标题汉字，小标题阿拉伯数字</li><li>分类整理(不必刻意)<ol><li>按材料逻辑分类： 同一材料或段落，尽量去归纳；</li><li>按不同角度分类： 不同材料或段落，思考不同角度。</li></ol></li></ol><h2 id="二：-单一题"><a href="#二：-单一题" class="headerlink" title="二： 单一题"></a>二： 单一题</h2><h3 id="2-1-判定"><a href="#2-1-判定" class="headerlink" title="2.1 判定"></a>2.1 判定</h3><p>提问要素明确，且要求作答的要素数量较少。</p><h3 id="2-2-题型分类"><a href="#2-2-题型分类" class="headerlink" title="2.2 题型分类"></a>2.2 题型分类</h3><ol><li>问题类单一题<ol><li>常见问法： 问题、不足、困境、挑战、难点等</li><li>答题技巧： 寻找负面标志性词汇(不科学、不合理、不到位、不均衡、不完美、不健全、不足；缺乏、缺少、流失；少、差、低、差、弱、陈旧、单一等)</li></ol></li><li>影响类单一题<ol><li>常见问法<ol><li>正面影响： 意义、效果、成果、积极作用等</li><li>负面影响： 危害、后果等</li></ol></li><li>答题技巧<ol><li>寻找正面影响标志性词汇(促进了、改善了、增加了、提高了、减轻了、实现了、弘扬了、节约了、保护了、方便了、倒逼等)</li><li>寻找负面影响标志性词汇(降低了、减少了、破坏了、阻碍了、引发了、加重了、激化了等)</li></ol></li></ol></li><li>对策类单一题<ol><li>常见问法： 对策、措施、举措、建议、意见、做法、解决方法、经验、启示等</li><li>答题技巧<ol><li>直接摘抄： 资料中出现对策标志性动词可摘抄，如建立、健全、统筹、创新、规范、整顿、打击、扶持、规划、设置等</li><li>问题反馈： 资料中只要问题而无对策时，则可以用动词开头的短语或短句等，解决资料中的现有问题。</li><li>经验借鉴： 其他地区或国家的成功经验可以拿来借鉴。</li></ol></li></ol></li></ol><h2 id="三：-综合题"><a href="#三：-综合题" class="headerlink" title="三： 综合题"></a>三： 综合题</h2><h3 id="3-1-判定"><a href="#3-1-判定" class="headerlink" title="3.1 判定"></a>3.1 判定</h3><p>提问要素不明确，且要求做答的要素数量很多。</p><h3 id="3-2-题型分类"><a href="#3-2-题型分类" class="headerlink" title="3.2 题型分类"></a>3.2 题型分类</h3><ol><li>概括主要内容<ol><li>题目理解： 要概括作答范围内的所有要素的题目</li><li>题型判断： 概括……的主要内容；写……情况反馈；要求:概述全面等</li><li>答题内容： 问题+危害+对策+意义+事例等；材料中有什么与主题相关的要素就概括什么要素</li><li>答题原则： 全面(全面反映材料中包含的要素)；准确(以材料为依据，尽量用原词、原句)；有层次(尽量分类书写)</li><li>形式要求： 标注序号；多个要素可分段</li></ol></li><li>词语解释题<ol><li>题目理解： 针对一个或多个词汇、短语或句子进行理解和分析的题目</li><li>题型判断： 谈……的含义；对……进行解释；谈对……的理解</li><li>答题内容： 释义(一般根据与解释的词句相近的句子，比如专家/权威观点、总结句等，得出词句的字面含义)+相关要素(问题、危害、意义、事例等)+对策(应该怎么做)</li></ol></li><li>观点、现象分析题<ol><li>题目理解： 针对观点或现象进行分析评价的题目</li><li>题型判断<ol><li>题干： 对……观点/现象，谈见解/看法/评价/评析/分析/认识</li><li>要求： 观点明确、分析透彻、论证充分、有理有据、论据充实等</li></ol></li><li>答题内容： 表态+理由(从问题、危害、意义、事例等方面展开)+对策</li><li>常见表态方式<ol><li>赞同的： 正确的、科学的、合理的、全面</li><li>反对的： 不科学的、不合理的、不支持的、错误的、偏颇的、偏激的、绝对的、片面的</li><li>辩证看待、未知的： 有积极方面、有消极方面，有待考证，尚未定论</li><li>特殊要求： 论据充实、有理有据(答案中要有例证)</li></ol></li></ol></li><li>其他题型<ol><li>对比分析题<ol><li>题目理解： 对两种或两种以上的事物进行对比的题目</li><li>题型判断： 比较……的不同；比较……的异同；对……进行比较分析</li><li>答题内容： (相同点)+不同点+结论(优劣、对策)</li><li>常见比较要素: 主体、客体、目的、方式、效果等</li></ol></li><li>填空题<ol><li>题目理解： 在资料中的指定位置填入语句的题目</li><li>题型判断： 在某处填入标题/一句话</li><li>答题思路： 概括给定范围内的资料内容，用精炼的语句进行概括</li></ol></li></ol></li></ol><h3 id="3-3-概括题"><a href="#3-3-概括题" class="headerlink" title="3.3 概括题"></a>3.3 概括题</h3><p>概括题的总体做题策略–找<strong>总结句</strong>(重点看论点，而不是论据)，找<strong>关键词</strong>(归纳事例背后观点)，找<strong>观点</strong>(较难时用，材料作为论据，反向思考作者观点)。</p><ol><li><strong>第一，最忌讳只看题目要求，不看材料的主旨和意图，从细枝末节中匹配、拼凑尽可能多的答案要点</strong>。</li><li><strong>第二，找到材料的主旨句，实现从表现细节到问题本质的解读</strong>。</li></ol><p>四大注意事项：</p><p>一： 句式与规范表达</p><p>原文中有归纳总结的词语可以做到准确表达的，优先用原文词语。然后没有才是考虑归纳总结词语。</p><p>积累典型事例、现象规范表达，关键时刻套用。</p><p>属性——如制度法律、管理体制、资金投入、思想认识、既得利益……<br>领域——如环境保护、基础设施、传统文化、信息技术、媒体宣传……<br>主体——如有关部门、普通群众、企业、媒体……<br>流程——如组织协调、创新模式、重点突破、监督落实、宜传推广、总结……</p><p>二： 做题速度</p><p>概括、归纳题做题时间10-15分钟。<strong>不追求完美</strong>，概括题分数较少，时间给分数多的其他题。</p><p>三： <strong>审题(非常重要)</strong></p><p>一：是要准确理解题目的含义，<strong>非常清晰的题目问的什么</strong>！！！！！<br>二：是注意题目中的特殊要求，加工成题目希望的样子。</p><p>四： 双印证</p><p><strong>以不变应万变————申论题目的灵活性，“双印证”做题思路。</strong></p><p>当读不懂材料，难以理解材料主旨时，客观题的题目一般都会显示出对应材料的核心内容，我们可以以此为方向来找到材料的要点。<br>当不理解题目所问时，可以根据对应材料的要点内容来进一步明确题目意图。</p><p>总来说，就是结合题目理解材料，结合材料理解题目，二者互相印证，可以避免审题失误，要点找偏。</p><h3 id="3-3-解释分析、对策类题目"><a href="#3-3-解释分析、对策类题目" class="headerlink" title="3.3 解释分析、对策类题目"></a>3.3 解释分析、对策类题目</h3><p><strong>做题过程：第一步是懂得“解释思路”(转化为归纳概括)；第二步是去材料中“按图索骥”；第三步是结合材料“反思、调整”，确定最佳的答题内容。</strong></p><h4 id="3-3-1-解释分析类题目"><a href="#3-3-1-解释分析类题目" class="headerlink" title="3.3.1 解释分析类题目"></a>3.3.1 解释分析类题目</h4><p>答题思路：</p><p>第一步： 理解句子得含义–比喻、古文、概念类句子<br>第二步： 利用材料，确定解释类题目得答案要点–联系材料得内容，把这句话中所涉及得问题和观点以及其内在的因果关系等具体化。补充这句话的现实启发。<br>第三步： 把材料内容要点按逻辑顺序整理好，然后加工成符合题目所问的样子。</p><h4 id="3-3-2-对策类题目"><a href="#3-3-2-对策类题目" class="headerlink" title="3.3.2 对策类题目"></a>3.3.2 对策类题目</h4><p>识别：成功经验、有何启示、总结做法、归纳成功的做法、提出什么的思路、提出有效的措施……</p><p>具体的做法、举措和普适性的经验区别？<br>题干要求具体的做法的话要把对策尽量具体点，而题干要求普适性的话就是对策后面的经验。(不强求，区分不是泾渭分明的)</p><h2 id="四：-应用文写作-公文"><a href="#四：-应用文写作-公文" class="headerlink" title="四： 应用文写作(公文)"></a>四： 应用文写作(公文)</h2><h3 id="4-1-判定"><a href="#4-1-判定" class="headerlink" title="4.1 判定"></a>4.1 判定</h3><p>一般情况下，题干中出现“量词+文种”的表述时</p><h3 id="4-2-怎么写"><a href="#4-2-怎么写" class="headerlink" title="4.2 怎么写"></a>4.2 怎么写</h3><p><strong>标题，写格式，背景、意义引入话题，归纳总结要点，结尾呼吁号召。</strong></p><ol><li>格式分<ol><li>标题<ol><li>一般写法： 发文机关+事由+文种</li><li>位置： 居中</li></ol></li><li>称谓或主送机关： 顶格</li><li>落款<ol><li>内容： 上行署名；下行日期XX年XX月XX日</li><li>位置： 右下角</li></ol></li></ol></li><li>内容分： 归纳总结</li><li>语言分<ol><li>开头背景、意义引入</li><li>结尾呼吁、总结、号召</li></ol></li></ol><h3 id="4-3-题型"><a href="#4-3-题型" class="headerlink" title="4.3 题型"></a>4.3 题型</h3><ol><li>倡议书(公开信):在公考中公开信和倡议书基本一致<ol><li>有标题、称呼、落款</li><li>背景引入，开头+有如下倡议：</li><li>归纳总结倡议内容</li><li>结尾呼吁</li></ol></li><li>宣传稿、短评(类似大作文，分论点不用仔细写)、情况说明、警情提示<ol><li>有标题、无称呼、无落款(宣传稿落款看情况)</li><li>背景引入</li><li>归纳好处</li><li>如何办理、如何使用、安全性等(具体要看什么类型的宣传与材料内容结合)</li></ol></li><li>通知类<ol><li>有标题、称呼、落款</li><li>背景+开头+通知如下：</li><li>人员、内容、时间、地点、联系方式等(具体根据材料内容判断写不写)</li></ol></li><li>调研报告、汇报材料<ol><li>有标题、无称呼和落款</li><li>基本情况、背景</li><li>经验做法、成绩、问题(问题具体根据材料内容判断写不写)等</li><li>建议等</li></ol></li><li>发言稿、讲话稿<ol><li>有标题、称呼、无落款</li></ol></li><li>提纲<ol><li>有标题、无称呼和落款</li><li>要点归纳罗列清楚</li><li>基本情况等等。</li></ol></li></ol><h2 id="五：-大作文"><a href="#五：-大作文" class="headerlink" title="五： 大作文"></a>五： 大作文</h2><ol><li>第一，<strong>精彩要体现在标题中</strong>。</li><li>第二，<strong>漂亮的开头引人入胜</strong>。尽量不要超过4行。</li><li>第三，<strong>文章结构要顺畅明快</strong>。我们要围绕一个主题选取不结构层次，或并列，或递进。</li><li>第四，<strong>把观点放在显著的位置</strong>。开头或结尾。分论点要突出难点、亮点，不模板。</li><li>第五，<strong>少提抽象概念，多讲事实根据</strong>。</li><li>第六，<strong>语言表达上要直接明确，不含糊其辞、拖泥带水</strong>。</li></ol><h3 id="5-1-主题与观点的确定方法"><a href="#5-1-主题与观点的确定方法" class="headerlink" title="5.1 主题与观点的确定方法"></a>5.1 主题与观点的确定方法</h3><ol><li>第一步： 剖析题干，定位关键信息</li><li>第二步： 梳理资料，挖掘具体观点<ol><li>方法一： 指定资料 + 小题未涉及资料</li><li>方法二： 联系小题的主题 + 浏览全篇资料验证</li></ol></li></ol><h3 id="5-2-文章结构"><a href="#5-2-文章结构" class="headerlink" title="5.2 文章结构"></a>5.2 文章结构</h3><h4 id="5-2-1-标题"><a href="#5-2-1-标题" class="headerlink" title="5.2.1 标题"></a>5.2.1 标题</h4><ol><li>常规型标题    如：安全发展事关全局</li><li>比喻式标题    如：用家庭教育破解财富观“密码”</li><li>警醒式标题    如：莫让诗词“热”一时</li><li>对称式标题    如：放慢脚步,收获幸福</li><li>主副式标题    如：岁月失语,惟石能言——保护文化遗产,传承中华文明</li></ol><h4 id="5-2-2-开头"><a href="#5-2-2-开头" class="headerlink" title="5.2.2. 开头"></a>5.2.2. 开头</h4><ol><li>阐释式    解释特定主题观点的含义</li><li>评论式    评论、反驳与主题相关的错误观点</li><li>总结式    总结所有与主题相关的重要观点</li></ol><h4 id="5-2-3-论证"><a href="#5-2-3-论证" class="headerlink" title="5.2.3. 论证"></a>5.2.3. 论证</h4><ol><li>论证结构<ol><li>论证 = 观点 + 论据</li><li>常用论证结构<ol><li>内涵式观点 + 论据</li><li>原因式观点 + 论据</li><li>意义式观点 + 论据</li><li>对策式观点 + 论据</li></ol></li></ol></li><li>观点表达<ol><li>经典句式<ol><li>……是……的根本/关键/基础/核心/前提</li><li>……是……之基/之源/之本/之依</li><li>……是……的重中之重/当务之急/燃眉之急/必然要求</li><li>之所以会……，究其根本/追根溯源……</li><li>所谓……是……；……是指……</li><li>要……，就要加强/加大/完善……</li></ol></li><li>灵活表达<ol><li>用排比的修辞手法表达观点</li><li>用设问的修辞手法表达观点</li></ol></li></ol></li><li>论证方法<ol><li>引证法： 引用名人名言、国家政策、科学原理等来证明观点</li><li>例证法： 用一个或多个经典案例来证明观点，进阶也可用正反论证</li></ol></li><li>充实论据<ol><li>论据的含义： 论据是证明观点合理性的证据</li><li>常用论据<ol><li>事实论据： 社会热点、经典故事、数据、调查报告、新闻报道等</li><li>理论论据： 名人名言、俗语俚语、领导人讲话、理论政策、客观规律、科学原理、论著文章等</li></ol></li><li>充实方法<ol><li>方法一： 从申论材料中创造性使用理论论据</li><li>方法二： 从申论材料中概括性引用事实论据</li><li>方法三： 从时事热点中积累经典事例</li></ol></li></ol></li></ol><h4 id="5-2-4-结尾"><a href="#5-2-4-结尾" class="headerlink" title="5.2.4. 结尾"></a>5.2.4. 结尾</h4><ol><li>总结式： 再次总结强调正文中的重要观点</li><li>展望式： 展望美好未来</li><li>呼吁号召式： 动员大家一起行动</li><li>补充式： 补写正文写不下的或被遗漏的观点</li></ol><h2 id="六：-其他"><a href="#六：-其他" class="headerlink" title="六： 其他"></a>六： 其他</h2><p>有待补充</p>]]></content>
    
    
    <categories>
      
      <category>公考</category>
      
      <category>申论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>局域网内的主机实现外网访问(IPv6、frp和反向代理)</title>
    <link href="/2020/08/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%9A%84%E4%B8%BB%E6%9C%BA%E5%AE%9E%E7%8E%B0%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE(IPv6%E3%80%81frp%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86)/"/>
    <url>/2020/08/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%9A%84%E4%B8%BB%E6%9C%BA%E5%AE%9E%E7%8E%B0%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE(IPv6%E3%80%81frp%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86)/</url>
    
    <content type="html"><![CDATA[<p>本文记录如何在树莓派上如何实现反向代理，穿透内网进行远程登录和操作内网主机。本方法也适用于其他 <code>Linux</code> 系统和 <code>mac osx</code> 系统，但目录上有所区别。</p><h2 id="一：-必备条件"><a href="#一：-必备条件" class="headerlink" title="一： 必备条件"></a>一： 必备条件</h2><ol><li>相关linux知识、计算机网络知识。</li><li>相关设备（如树莓派、nas、openwrt），支持IPv6的路由器。</li><li><code>frp</code> 需要 <code>云主机或vps</code>。</li><li>自己的域名，方便访问。</li></ol><h2 id="二：-IPv6-主推荐"><a href="#二：-IPv6-主推荐" class="headerlink" title="二： IPv6(主推荐)"></a>二： IPv6(主推荐)</h2><p><strong>需要一个域名和能够支持IPv6的路由器</strong>。这种方法的话只能用支持IPv6的设备进行访问内网设备，现在的手机基本上移动数据都支持IPv6，可以用这个方法，但是如果是WiFi的话，需要路由器开启IPv6，否则无法使用。</p><h3 id="2-1-通过你的域名提供商获取账号密码"><a href="#2-1-通过你的域名提供商获取账号密码" class="headerlink" title="2.1 通过你的域名提供商获取账号密码"></a>2.1 通过你的域名提供商获取账号密码</h3><p>我用的是阿里云域名服务(也可以用<a href="https://www.pubyun.com/">免费的域名提供商</a>)，阿里云是通过 <code>AccessKey</code> 来控制DDNS服务的，域名请自行购买及配置。</p><p><a href="https://ram.console.aliyun.com/manage/ak">登录阿里云控制台获取AccessKey</a></p><p><strong>注意</strong>：提示信息中的云账号AccessKey是您访问阿里云API的密钥，具有该账户完全的权限，请务必妥善保管。请勿通过任何方式（如Github等）将AccessKey公开至外部渠道，以免被恶意利用而造成安全威胁。</p><h3 id="2-2-openwrt上设置动态dns-现改为在ikuai上设置动态域名"><a href="#2-2-openwrt上设置动态dns-现改为在ikuai上设置动态域名" class="headerlink" title="2.2 openwrt上设置动态dns(现改为在ikuai上设置动态域名)"></a>2.2 openwrt上设置动态dns(现改为在ikuai上设置动态域名)</h3><ol><li>打开openwrt的web端，点击<code>服务</code> -&gt; <code>动态DNS</code> -&gt; 输入 <code>openwrt_ipv6</code> -&gt; <code>添加</code></li><li>点击刚刚添加的<code>openwrt_ipv6</code>后面的<code>修改</code> -&gt; <code>启用</code> -&gt; 查询主机名：<code>你所需要解析的子域名</code> -&gt; ip地址版本：<code>IPv6</code> -&gt; DDNS服务提供商：<code>选择你的域名提供商</code> -&gt; 域名:<code>你所需要解析的子域名</code> -&gt; 用户名：<code>阿里云是AccessKey ID</code> -&gt; 密码：<code>阿里云是AccessKey Secret </code> -&gt; 保存应用。</li><li>如果是用虚拟机安装的openwrt则设置(其他的忽略)：<code>高级设置里</code> -&gt; IP 地址来源 [IPv6]设定为 : 可用的策略。</li><li>点击配置项<code>openwrt_ipv6</code>后面的: <code>启动</code>。</li><li><code>网络</code> -&gt; <code>防火墙</code> -&gt; 入站、出站、转发：<code>接受</code> -&gt; 修改 -&gt; 覆盖网络：<code>勾选全部端口</code> -&gt; 端口触发： <code>勾选全部端口</code>。</li><li>网络 -&gt; 负载均衡 -&gt; 策略 -&gt; 修改-&gt; 备用成员设为 <code>默认(使用主路由器)</code>。</li></ol><p>登录<a href="https://dns.console.aliyun.com/#/dns/domainList">阿里云的dns解析服务</a>，看看是否解析成功。同时用 <code>你的子域名</code> 使用 <code>ssh登录openwrt</code> 的后台，测试是否生效，不出意外的话，应该成功了。</p><h3 id="2-3-利用socat进行端口转发"><a href="#2-3-利用socat进行端口转发" class="headerlink" title="2.3 利用socat进行端口转发"></a>2.3 利用socat进行端口转发</h3><h4 id="2-3-1-原理"><a href="#2-3-1-原理" class="headerlink" title="2.3.1 原理"></a>2.3.1 原理</h4><p>因为IPv6的网络是直连的，不需要路由端口转发。所以需要用socat来进行IPv6到IPv4的端口转发。</p><p>解释下IPV6地址的基础知识，用冒号隔开的一共是<strong>8段，每段都有4个字符。前面4段是路由器获取的外面地址。后面4段是路由器分给内部设备的静态地址</strong>。</p><p>例如我的群晖， <code>IPV6</code> 是 <code>2409:abcd:ma23:34c1::1ec6/64</code></p><p>写全就是：<code>2409:abcd:ma23:34c1:0:0:0:1ec6</code></p><p>也就是说我的群晖的后4段就是：<code>0:0:0:1ec6</code>。</p><p>所以，在配置防火墙的时候，该填入:<code>0:0:0:0:0:0:0:1ec6/0:0:0:0:FFFF:FFFF:FFFF:FFFF</code></p><p>上面的意思是，前4段用掩码，后面4段是使用实际的地址。</p><p><img src="https://qnam.smzdm.com/202001/20/5e252d61e87f07323.png_e680.jpg"></p><h4 id="2-3-2-转发操作"><a href="#2-3-2-转发操作" class="headerlink" title="2.3.2 转发操作"></a>2.3.2 转发操作</h4><p>如何访问家庭局域网中存在只能使用IPv4的设备呢？（比如主路由器下有一个设备（192.168.1.10），该设备不支持IPv6，但现在又希望远程访问其管理页面进行配置）可以通过以下步骤进行操作。</p><ol><li>系统 -&gt; 软件包 -&gt; 可用软件包 -&gt; 过滤器搜索： <code>socat</code> 和 <code>coreutils-nohup</code> -&gt; <code>安装</code>。</li><li>选择“系统”-“启动项”菜单，切换至“本地启动脚本”选项卡。</li><li>在“exit 0”之前插入如下三条命令，并单击“保存”按钮。<ol><li><code>Sleep 120</code></li><li><code>nohup socat TCP6-LISTEN:8110,reuseaddr,fork TCP4:192.168.1.10:80&amp;</code></li><li><code>nohup socat UDP6-LISTEN:8110,reuseaddr,fork UDP4:192.168.1.10:80&amp;</code></li></ol></li><li><code>nohup</code>的作用是让指令在后台运行，如果不加<code>nohup</code>，则在命令支持后台运行的情况下其会正确执行，如果不支持后台运行，则该命令不会运行。</li><li><code>Sleep 120 </code>指令是防止<code>socat</code>命令运行太早，系统还未启动完成，不具备运行条件。</li><li>重启路由器后即可通过“<code>动态域名:8110</code>”访问IP地址为<code>192.168.1.10</code>的设备。</li><li>如果不想立即重启路由器，可以通过<code>SSH</code>连接路由器，在命令行中输入以下指令完成操作。（该操作成功后，如果路由器重启，设置将不起作用）<ol><li><code>socat TCP6-LISTEN:8110,reuseaddr,fork TCP4:192.168.1.10:80&amp;</code></li><li><code>socat UDP6-LISTEN:8110,reuseaddr,fork UDP4:192.168.1.10:80&amp;</code></li></ol></li></ol><h3 id="2-4-安全设置"><a href="#2-4-安全设置" class="headerlink" title="2.4 安全设置"></a>2.4 安全设置</h3><p>为了安全，需要设置ipv6只能访问指定端口。</p><h4 id="2-4-1-更改路由访问端口"><a href="#2-4-1-更改路由访问端口" class="headerlink" title="2.4.1 更改路由访问端口"></a>2.4.1 更改路由访问端口</h4><p>（1）更改SSH端口</p><p>选择“<code>系统</code>”-“<code>管理权</code>”菜单，切换至“<code>SSH访问</code>”选项卡，在“<code>端口</code>”编辑框中输入自己所需的端口即可。（默认：22）</p><p>（2）更改Web端口</p><ol><li>使用SSH工具登录路由器；</li><li>输入“<code>vi /etc/config/uhttpd</code>”命令；</li><li>修改“<code>list listen_http 0.0.0.0:80</code>”和“<code>list listen_http [::]:80</code>”中的<code>80</code>为指定端口号，保存退出；</li><li>打开防火墙相应端口；</li><li>此时通过“<code>动态域名:指定端口</code>”即可访问web管理页面。</li></ol><p>未完待续。。。</p><h2 id="三：-frp的方法-次推荐"><a href="#三：-frp的方法-次推荐" class="headerlink" title="三： frp的方法(次推荐)"></a>三： frp的方法(次推荐)</h2><p><strong>需要一台有公网IP的云主机或者VPS</strong>，自己的域名，受限于服务器的带宽。</p><h3 id="3-1-云主机上安装一键脚本"><a href="#3-1-云主机上安装一键脚本" class="headerlink" title="3.1 云主机上安装一键脚本"></a>3.1 云主机上安装一键脚本</h3><p>直接使用 <code>GitHub</code> 上的一键脚本 <a href="https://github.com/MvsCode/frps-onekey">MvsCode / frps-onekey</a></p><h4 id="3-1-1-Install（安装）"><a href="#3-1-1-Install（安装）" class="headerlink" title="3.1.1 Install（安装）"></a>3.1.1 Install（安装）</h4><p>Aliyun</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget https://code.aliyun.com/MvsCode/frps-onekey/raw/master/install-frps.sh -O ./install-frps.sh<br>chmod 700 ./install-frps.sh<br>./install-frps.sh install<br></code></pre></div></td></tr></table></figure><p>Uninstall（卸载）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">./install-frps.sh uninstall<br></code></pre></div></td></tr></table></figure><p>Update（更新）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">./install-frps.sh update<br>Server management（服务管理器）<br>Usage: /etc/init.d/frps &#123;start|stop|restart|status|config|version&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-1-2-配置"><a href="#3-1-2-配置" class="headerlink" title="3.1.2 配置"></a>3.1.2 配置</h4><p>执行<code>frps start</code>。</p><blockquote><p>2021-2-5运行失败，winscp打开<code>/usr/bin/frps</code>，将里面的<code>$PID</code>全部替换为<code>&quot;$PID&quot;</code>，如果运行成功，则无视。</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment"># [common] is integral section</span><br><span class="hljs-section">[common]</span><br><span class="hljs-comment"># 默认即可</span><br><span class="hljs-attr">bind_addr</span> = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">5443</span><br><span class="hljs-comment"># frps的默认端口，默认，也可改为你自己的端口</span><br><span class="hljs-attr">kcp_bind_port</span> = <span class="hljs-number">5443</span><br><span class="hljs-comment"># frps网页控制端口</span><br><span class="hljs-attr">dashboard_port</span> = <span class="hljs-number">6443</span><br><span class="hljs-comment"># 网页端口账号和密码</span><br><span class="hljs-attr">dashboard_user</span> = 网页端账号<br><span class="hljs-attr">dashboard_pwd</span> = 网页端密码<br><span class="hljs-comment"># 设置http和https的访问端口，PS如被占用改为其他</span><br><span class="hljs-attr">vhost_http_port</span> = <span class="hljs-number">80</span><br><span class="hljs-attr">vhost_https_port</span> = <span class="hljs-number">443</span><br><span class="hljs-comment"># 默认即可</span><br><span class="hljs-attr">log_file</span> = ./frps.log<br><span class="hljs-comment"># 默认即可</span><br><span class="hljs-attr">log_level</span> = info<br><span class="hljs-attr">log_max_days</span> = <span class="hljs-number">3</span><br><span class="hljs-comment"># 认证密匙，改为自己的token</span><br><span class="hljs-attr">token</span> = 改为自己的token<br><span class="hljs-comment"># 改为你的域名，需要在域名ddns解析里面解析到自己的云主机ip上</span><br><span class="hljs-comment"># 如果要使用二级域名1）在域名控制台，“主机记录”处填写fr，解析到你的服务器ip;2）“主机记录”处填写*.fr，将记录解析到你的服务器ip。</span><br><span class="hljs-attr">subdomain_host</span> = fr.域名.com<br><span class="hljs-comment"># 默认即可</span><br><span class="hljs-comment">#allow_ports = 1-65535</span><br><span class="hljs-comment"># 默认即可</span><br><span class="hljs-attr">max_pool_count</span> = <span class="hljs-number">50</span><br><span class="hljs-comment"># 默认即可</span><br><span class="hljs-attr">tcp_mux</span> = <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>配置完成后，可以通过 <code>http://你的云主机ip:6443</code> 或 <code>http://fr.你的域名:6443/</code> 访问你的 <code>frps</code> 控制界面。</p><p>在云主机上通过如下方式控制 <code>frps</code>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">frps status manage : frps &#123;start|stop|restart|status|config|version&#125;<br>Example:<br>  start: frps start<br>   stop: frps stop<br>restart: frps restart<br></code></pre></div></td></tr></table></figure><h3 id="3-2-本地客户端操作"><a href="#3-2-本地客户端操作" class="headerlink" title="3.2 本地客户端操作"></a>3.2 本地客户端操作</h3><h4 id="3-2-1-通用方法"><a href="#3-2-1-通用方法" class="headerlink" title="3.2.1 通用方法"></a>3.2.1 通用方法</h4><p>可以下载 <a href="https://github.com/fatedier/frp">fatedier/frp</a>，使用里面的frpc； 或者 使用 <a href="https://github.com/dylanbai8/frpspro/raw/master/FrpsPro.zip">windows的便携脚本</a>,配置文件参考→<a href="https://github.com/fatedier/frp/blob/master/README_zh.md">官方文档</a>。</p><p>配置<code>FrpsPro</code>文件夹里面的<code>frpc.ini</code>，配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment"># 绑定你的 frps 服务器：</span><br><span class="hljs-comment"># 1.服务器IP地址或域名 2.密钥 3.端口</span><br><span class="hljs-comment"># 如网络卡慢，可删除最后一行注释标签“#”开启kcp传输</span><br><br><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = XXX.XXX.XXX.XXX<br><span class="hljs-attr">token</span> = 你的token<br><span class="hljs-attr">server_port</span> = <span class="hljs-number">5443</span><br><span class="hljs-comment"># protocol = kcp</span><br><br><br><span class="hljs-comment"># http 端口转发设置</span><br><span class="hljs-comment"># custom_domains 可以是域名或者服务器 IP</span><br><span class="hljs-comment"># 如需开启密码访问，删除最后两行注释标签“#”即可</span><br><br><span class="hljs-section">[http_001]</span><br><span class="hljs-attr">type</span> = http<br><span class="hljs-attr">local_port</span> = http访问端口，需要开启<br><span class="hljs-attr">custom_domains</span> = 你的域名<br><span class="hljs-comment"># http_user = admin</span><br><span class="hljs-comment"># http_pwd = admin</span><br><br><br><span class="hljs-comment"># https 端口转发，需要使用时删除掉每行注释标签“#”即可</span><br><br><span class="hljs-comment"># [https_001]</span><br><span class="hljs-comment"># type = https</span><br><span class="hljs-comment"># local_port = 443</span><br><span class="hljs-comment"># custom_domains = super-brain.ml</span><br><br><span class="hljs-comment"># 开启本机文件共享</span><br><br><span class="hljs-section">[share_file]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">8080</span><br><span class="hljs-attr">plugin</span> = static_file<br><span class="hljs-comment"># 要对外暴露的文件目录</span><br><span class="hljs-attr">plugin_local_path</span> = D:\<br><span class="hljs-attr">plugin_strip_prefix</span> = static<br><span class="hljs-attr">plugin_http_user</span> = 账号<br><span class="hljs-attr">plugin_http_passwd</span> = 密码<br><span class="hljs-comment"># 修改链接内为自己的服务器IP，通过浏览器访问 http://170.130.142.170:8080/static/</span><br><span class="hljs-comment"># 来查看位于 C:\ 目录下的文件，会要求输入已设置好的用户名和密码（如不需要可以注释掉）</span><br><span class="hljs-comment"># 提示：此功能可以用于搭建静态博客</span><br><br><span class="hljs-comment"># 远程桌面，无需修改。如不需要此项可在每行前加“#”号注释掉</span><br><span class="hljs-comment"># 默认远程桌面连接端口为：9090</span><br><br><span class="hljs-section">[remote_desktop]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-comment"># windows的默认远程桌面端口为3389，可修改</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">3389</span><br><span class="hljs-comment"># 默认域名:9090访问frpc，可设置</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">9090</span><br></code></pre></div></td></tr></table></figure><p><img src="https://www.moerats.com/usr/picture/Frps_shell(2).png" alt="windows的便携脚本"></p><h4 id="3-2-2-openwrt-上插件"><a href="#3-2-2-openwrt-上插件" class="headerlink" title="3.2.2 openwrt 上插件"></a>3.2.2 openwrt 上插件</h4><p>因为我使用的 <code>openwrt</code> 路由器固件自带 <code>frp 内网穿透</code> 插件，直接在上面设置即可，<code>openwrt</code>上参考配置如下。</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">基本设置</span> <span class="hljs-string">→</span> <span class="hljs-string">启用</span><br>   <span class="hljs-string">服务器</span> <span class="hljs-string">→</span> <span class="hljs-string">你的域名或云主机ip</span><br>   <span class="hljs-string">端口</span> <span class="hljs-string">→</span> <span class="hljs-string">上面的bind_port端口，默认5443</span><br>   <span class="hljs-string">令牌</span> <span class="hljs-string">→</span> <span class="hljs-string">上面的token</span><br>   <span class="hljs-string">HTTP服务端口</span> <span class="hljs-string">→</span> <span class="hljs-string">默认80，跟上面一致</span><br>   <span class="hljs-string">HTTPS服务端口</span> <span class="hljs-string">→</span> <span class="hljs-string">默认443，跟上面一致</span><br><br><span class="hljs-string">服务列表</span> <span class="hljs-string">→</span> <span class="hljs-string">添加</span><br>   <span class="hljs-string">开启状态</span> <span class="hljs-string">→</span> <span class="hljs-string">启用</span><br>   <span class="hljs-string">Frp</span> <span class="hljs-string">协议类型</span> <span class="hljs-string">→</span> <span class="hljs-string">HTTP或TCP，网页访问就是http，远程ssh连接就是TCP</span><br>   <span class="hljs-attr">HTTP:</span><br>      <span class="hljs-string">域名类型</span> <span class="hljs-string">→</span> <span class="hljs-string">子域名</span><br>      <span class="hljs-string">子域名</span> <span class="hljs-string">→</span> <span class="hljs-string">如nas,pi,openwrt</span><br>   <span class="hljs-attr">TCP:</span><br>      <span class="hljs-string">远程主机端口</span> <span class="hljs-string">→</span> <span class="hljs-string">随意，需要在云主机安全组开放此端口</span><br>   <span class="hljs-string">内网主机地址</span> <span class="hljs-string">→</span> <span class="hljs-string">你内网提供服务的内网ip</span><br>   <span class="hljs-string">内网主机端口</span> <span class="hljs-string">→</span> <span class="hljs-string">如网页服务一般是80，nas是5000，ssh连接的一般是22</span><br>   <span class="hljs-string">数据加密</span> <span class="hljs-string">→</span> <span class="hljs-string">开启</span><br>   <span class="hljs-string">使用压缩</span> <span class="hljs-string">→</span> <span class="hljs-string">开启</span><br>   <span class="hljs-string">服务备注名</span> <span class="hljs-string">→</span> <span class="hljs-string">唯一即可</span><br></code></pre></div></td></tr></table></figure><p>【示例】 远程控制win 10主机(需要打开win 10的远程控制，还要先使用网络唤醒，然后才能远程控制)</p><table><thead><tr><th>服务备注名</th><th>Frp协议类型</th><th>域名/子域名</th><th>远程主机端口</th><th>内网主机地址</th><th>内网主机端口</th></tr></thead><tbody><tr><td>my_pc</td><td>tcp</td><td>域名</td><td>9090</td><td>windows主机内网ip地址</td><td>3389</td></tr></tbody></table><h2 id="四：-反向代理"><a href="#四：-反向代理" class="headerlink" title="四： 反向代理"></a>四： 反向代理</h2><h3 id="4-1-准备工作（局域网主机上操作）"><a href="#4-1-准备工作（局域网主机上操作）" class="headerlink" title="4.1 准备工作（局域网主机上操作）"></a>4.1 准备工作（局域网主机上操作）</h3><ol><li>局域网主机生成密匙(如果已经生成，请跳过)<br>打开终端，输入。<br><code>ssh-keygen</code> # 然后连续按三次Enter</li><li>输入如下命令：<br><code>ssh-copy-id -i ~/.ssh/id_rsa.pub 中文改为你的云主机用户名@中文改为你的云主机外网IP</code></li><li>使pi默认可以root登录<br><code>sudo passwd root</code> # 修改pi的root密码<br><code>sudo nano /etc/ssh/sshd_config</code><br>找到PermitRootLogin这一行，将前面的‘#’去掉，这一行改为<code>PermitRootLogin yes</code>。</li></ol><h3 id="4-2-反向代理的操作"><a href="#4-2-反向代理的操作" class="headerlink" title="4.2 反向代理的操作"></a>4.2 反向代理的操作</h3><p>原理图：</p><table><thead><tr><th>编号</th><th>IP</th><th>用户名</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>192.168.1.A</td><td>U_a</td><td>目标 计算机，（即树莓派），在局域网中，可以访问 A</td></tr><tr><td>B</td><td>B.B.B.B</td><td>U_b</td><td>代理服务器（我们的 vps 或云主机），在外网中，无法访问 A</td></tr><tr><td>C</td><td>-</td><td>U_c</td><td>外部的计算机，比如公司的电脑，可以访问B，无法直接访问 A</td></tr></tbody></table><h4 id="4-2-1-设计方案"><a href="#4-2-1-设计方案" class="headerlink" title="4.2.1 设计方案"></a>4.2.1 设计方案</h4><p>在 A 机器上做到 B 机器的反向代理；在 B 机器上做正向代理本地端口转发</p><h4 id="4-2-2环境需求"><a href="#4-2-2环境需求" class="headerlink" title="4.2.2环境需求"></a>4.2.2环境需求</h4><ul><li>每台机器上都需要 SSH 客户端</li><li>A、B 两台机器上需要 SSH 服务器端。通常是 openssh-server。</li></ul><p>ubuntu和debian上安装ssh代码如下：<br><code>sudo apt install openssl-server</code></p><h4 id="4-2-3-SSH-参数解释"><a href="#4-2-3-SSH-参数解释" class="headerlink" title="4.2.3 SSH 参数解释"></a>4.2.3 SSH 参数解释</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">-f 后台运行<br>-C 允许压缩数据<br>-N 不执行任何命令<br>-R 将端口绑定到远程服务器，反向代理<br>-L 将端口绑定到本地客户端，正向代理<br><br>*******************区分大小写啊各位亲******************<br></code></pre></div></td></tr></table></figure><h3 id="4-3-具体步骤"><a href="#4-3-具体步骤" class="headerlink" title="4.3 具体步骤"></a>4.3 具体步骤</h3><h4 id="4-3-1-登录云主机上开启自动端口转发【云主机上操作】"><a href="#4-3-1-登录云主机上开启自动端口转发【云主机上操作】" class="headerlink" title="4.3.1 登录云主机上开启自动端口转发【云主机上操作】"></a>4.3.1 登录云主机上开启自动端口转发【云主机上操作】</h4><p><code>sudo vi /etc/ssh/sshd_config</code></p><p>找到GatewayPorts把前面的#去掉,后面改成yes，开启自动端口转发</p><h4 id="4-3-2-为-B-机器上端口，用来与-A-机器上的22端口绑定-【云主机上操作】"><a href="#4-3-2-为-B-机器上端口，用来与-A-机器上的22端口绑定-【云主机上操作】" class="headerlink" title="4.3.2 为 B 机器上端口，用来与 A 机器上的22端口绑定 【云主机上操作】"></a>4.3.2 为 B 机器上端口，用来与 A 机器上的22端口绑定 【云主机上操作】</h4><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><br>`ssh -fCNL <span class="hljs-string">&#x27;*:&lt;port_b2&gt;:localhost:&lt;port_b1&gt;&#x27;</span> localhost`<br><span class="hljs-comment"># 其中&lt;port_b1&gt;跟上面的端口相同</span><br><span class="hljs-comment"># &lt;port_b2&gt;改为和&lt;port_b1&gt;不同的大于1000端口号，如12345</span><br><span class="hljs-comment"># 代码示例：</span><br>ssh -fCNL <span class="hljs-string">&#x27;*:12345:localhost:7280&#x27;</span> localhost<br><br><br><span class="hljs-comment"># 查看ssh进程</span><br>ps aux | grep ssh<br><br><br><span class="hljs-comment"># 将云主机设为开机就正向代理</span><br><span class="hljs-built_in">which</span> rc.local<br><span class="hljs-comment"># cd进入上面的路径,我这边的路径是/etc/</span><br>sudo vi /etc/rc.local<br><br><span class="hljs-comment">#按i编辑，最后一行添加如下代码，:qw保存退出</span><br>sshpass -p <span class="hljs-string">&#x27;云主机密码&#x27;</span> ssh -fCNL <span class="hljs-string">&#x27;*:12345:localhost:7280&#x27;</span> localhost<br></code></pre></div></td></tr></table></figure><h3 id="4-4-autossh-反向代理"><a href="#4-4-autossh-反向代理" class="headerlink" title="4.4 autossh 反向代理"></a>4.4 autossh 反向代理</h3><h4 id="4-4-1-局域网主机（树莓派）开启autossh反向代理"><a href="#4-4-1-局域网主机（树莓派）开启autossh反向代理" class="headerlink" title="4.4.1 局域网主机（树莓派）开启autossh反向代理"></a>4.4.1 局域网主机（树莓派）开启autossh反向代理</h4><p><strong>在上文中，我们已经能够在C 计算机通过 B 计算机访问 A 计算机，但这个代理是暂时的，会出现代理随时断开或者下次重启树莓派又要重新开启，步骤麻烦。因此，我们把方案优化，升级 ssh 的代理工具，使用 autossh 这个工具。</strong></p><p>我们先要安装 autossh,在局域网主机（树莓派）上。<br><code>sudo apt install autossh -y</code><br><code>sudo apt install sshpass -y</code></p><p>然后输入命令绑定<br><code>autossh -M 5678 -NR &lt;port_b1&gt;:localhost:22 云主机用户名@云主机外网IP</code><br>代码示例：<br><code>sudo sshpass -p &#39;云主机密码&#39; autossh -M 5678 -CNR 7280:localhost:22 root@123.123.123.123</code></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH"><span class="hljs-comment">#ssh密码登录</span><br>sudo nano /etc/rc.local<br>sudo sshpass -p <span class="hljs-string">&#x27;云主机密码&#x27;</span> autossh -M 5678 -CNR 7280:localhost:22 root@123.123.123.123<br></code></pre></div></td></tr></table></figure><p>就这样开启了反向代理，作用跟前面的一致。但，这里当代理连接断开后，会自动重连，不需要担心，突然连不上自己的 树莓派 了。</p><p>但我们的 pi 重启后，也是要输入上述 autossh 的命令，为了更加自动化，把autossh 加入开机启动里(需要ssh免密码登录)</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH"><span class="hljs-comment"># ssh免密码登录</span><br>sudo nano /etc/rc.local<br><br><span class="hljs-comment"># 光标移动到exit 0 的上一行，输入命令。比如花生壳是用phddns.start启动，再这里加入后花生壳就会自动启动了。</span><br>/bin/su -c /usr/bin/autossh -M 5678 -CNR 7280:localhost:22 root@123.123.123.123<br></code></pre></div></td></tr></table></figure><p>-M 5678参数，负责通过5678端口监视连接状态，连接有问题时就会自动重连.</p><h4 id="4-4-2-通过其他电脑手机访问局域网主机（树莓派）"><a href="#4-4-2-通过其他电脑手机访问局域网主机（树莓派）" class="headerlink" title="4.4.2 通过其他电脑手机访问局域网主机（树莓派）"></a>4.4.2 通过其他电脑手机访问局域网主机（树莓派）</h4><p><code>ssh -p &lt;port_b2&gt; 你的云主机用户名@你的云主机外网IP</code><br><code>&lt;port_b2&gt;</code>改成上面的端口号，如1234</p><p>代码示例：<br><code>ssh -p12345 root@123.123.123.123</code></p><h2 id="五：-参考文档"><a href="#五：-参考文档" class="headerlink" title="五： 参考文档"></a>五： 参考文档</h2><p><a href="https://qimajiang.com/2017/02/25/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BA%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/?tdsourcetag=s_pctim_aiomsg">参考文档</a></p><p><a href="https://zhuanlan.zhihu.com/p/36156129">参考文档2</a></p><p><a href="https://post.smzdm.com/p/a25gmdoq/">参考文档3</a></p><p><a href="https://post.smzdm.com/p/a78zwo4g/">参考文档4</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>frp</tag>
      
      <tag>外网访问</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>资料分析</title>
    <link href="/2020/06/13/%E5%85%AC%E8%80%83/Data%20Analysis/"/>
    <url>/2020/06/13/%E5%85%AC%E8%80%83/Data%20Analysis/</url>
    
    <content type="html"><![CDATA[<blockquote><p>资料分析：主要测查应试人员对各种形式的文字、图表等资料的综合理解与分析加工能力，这部分内容通常由统计性的图表、数字及文字材料构成。</p></blockquote><hr><blockquote><p>快速口诀：</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-number">1</span><span class="hljs-string">.</span> <span class="hljs-string">扫材料，10s内</span><br><span class="hljs-number">2</span><span class="hljs-string">.</span> <span class="hljs-string">读问题，看时间</span><br><span class="hljs-number">3</span><span class="hljs-string">.</span> <span class="hljs-string">列公式，找数据</span><br><span class="hljs-number">4</span><span class="hljs-string">.</span> <span class="hljs-string">看选项，后计算</span><br></code></pre></div></td></tr></table></figure><hr><h2 id="一：-统计术语"><a href="#一：-统计术语" class="headerlink" title="一： 统计术语"></a>一： 统计术语</h2><h3 id="1-1-基期与现期等"><a href="#1-1-基期与现期等" class="headerlink" title="1.1 基期与现期等"></a>1.1 基期与现期等</h3><ol><li>基期：<ol><li>识别： 问题时间在材料之前</li><li>公式： 基期 = 现期-增量 = $\frac{现期}{(1+r)}$</li></ol></li><li>现期：<ol><li>识别： 问题时间在材料之后</li><li>公式： 现期 = 基期+增量 = $基期×(1+r)$</li></ol></li><li>贸易顺差、逆差<ol><li>顺差： 出口多(于进口),卖的多就顺</li><li>逆差： 出口小(于进口),买的多就逆</li></ol></li><li>GDP = 一产(农业) + 二产(工业) + 三产(服务业)</li></ol><h3 id="1-2-增长率和增长量等"><a href="#1-2-增长率和增长量等" class="headerlink" title="1.2 增长率和增长量等"></a>1.2 增长率和增长量等</h3><ol><li>增长量：<ol><li>识别： 增长+具体单位(元、吨、人)；最多或最少</li><li>公式： 增长量 = 现期-基期 = $基期×r$ = $\frac{现期×r}{(1+r)}$</br></br></li></ol></li><li>增长率 <strong>r</strong>：<ol><li>识别： 增长+%、倍、成；最快或最慢；增长速度、增长幅度</li><li>公式： r = $\frac{增长量}{基期}$ = $\frac{现期-基期}{基期}$ = $\frac{增长量}{现期-增长量}=\frac{现期量}{N+1}$</br></br></li></ol></li><li>拉动增长 = $\frac{部分增量}{整体基期}$</br></br>贡献率 = $\frac{部分增量}{整体增量}$</br></br></li><li>利润率 = $利润÷收入$</br></br>产销率 = $销量÷产量$</li><li>平均数：<ol><li>识别： 均、每、单位(面积)</li><li>公式： $后面÷前面$</li><li>例： 人均时间=总时间÷人数；每户消费=消费÷户数；单位面积产量=产量÷面积</li></ol></li></ol><h3 id="1-3-易错点辨析"><a href="#1-3-易错点辨析" class="headerlink" title="1.3 易错点辨析"></a>1.3 易错点辨析</h3><ol><li>同比与环比：<ol><li>同比： 与上年同期相比</li><li>环比： 与紧紧相邻的上一时期相比，如上个月</li></ol></li><li>百分数与百分点：<ol><li>百分数： 百分数是表示一个数是另一个数的百分之几，通常采用符号“%”（百分号）来表示。</li><li>百分点： 表示相对量的变化关系，用以表达<strong>不同百分数之间差</strong>的正确单位。</li></ol></li><li>增长率、降幅、变化幅度：<ol><li>增长率： 可正可负，且负的小于正的</li><li>降幅： 必须要下降，再比较幅度</li><li>变化幅度： 直接比较增长率的绝对值</li></ol></li><li>增长了[+%]、现期比基期多或少+%，增长到，翻番，(ps：[]内是可选内容)：<ol><li>增长了[+%]、现期比基期多或+少%： r倍 = $\frac{现期}{基期}-1$</li><li>增长到n倍： 就是原来的n倍</li><li>翻n番代表变成2的n次方倍</li></ol></li></ol><h2 id="二：-速算技巧"><a href="#二：-速算技巧" class="headerlink" title="二： 速算技巧"></a>二： 速算技巧</h2><p><strong>PS:所有速算技巧都是在很熟练的前提下才能加快速度，否则不如不用，需要多加练习。</strong></p><h3 id="2-1-加"><a href="#2-1-加" class="headerlink" title="2.1 加"></a>2.1 加</h3><p>① 高位叠加法：按照位数从最高位开始进行加和，然后再叠加。常用于多个多位数加和。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//例： 591 + 483 = ？</span><br><span class="hljs-comment">//先从最高位计算，5+4=9，然后对各个位数的和进行错位叠加，每个数都错开一位，如下</span><br>  <span class="hljs-number">9</span><br>  <span class="hljs-number">17</span><br>   <span class="hljs-number">04</span><br>------<br> <span class="hljs-number">1074</span><br></code></pre></div></td></tr></table></figure><p>可以不用算全，从高位开始加和，看答案再比较，便可以适时停止。</p><p>② 尾数相加法： 求解的是多个数的和或差，并且选项精确到了最后一位，选项尾数各不相同。直接加多位数的尾数。</p><h3 id="2-2-减"><a href="#2-2-减" class="headerlink" title="2.2 减"></a>2.2 减</h3><ol><li>削峰填谷（求平均数）<ol><li>取各项接近的数，每个数减这个数的差，求差之和，再补回去。</li></ol></li><li>倒减法<ol><li>$532-387=(500-300)-(87-32)=200-55=145$</li></ol></li></ol><h3 id="2-3-乘"><a href="#2-3-乘" class="headerlink" title="2.3 乘"></a>2.3 乘</h3><p>一个数×1.5，等于这个数加本身一半；<br>一个数×1.1，等于这个数错位相加；<br>一个数×0.9，等于这个数错位相减；</p><hr><p><strong>两数和相近，两数越接近，其乘积越大。</strong></p><hr><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/PingFangShu.jpg" alt="平方数"></p><h3 id="2-4-除"><a href="#2-4-除" class="headerlink" title="2.4 除"></a>2.4 除</h3><p>截位直除法:</p><p>应用场景：除法计算，多位数除以多位数（三位数及以上为多位数）<br>具体操作：</p><ol><li>截谁？只截分母</li><li>怎么截？<ol><li><strong>截两位：① 选项首位不同，② 选项首位相同且次位差大于首位。</strong>比如【999/234.56】，分母截两位就是【999/23】</li><li><strong>截三位：选项首位相同且次位差小于或等于首位。</strong>比如【999/234.56】，分母截两位就是【999/235】</li></ol></li></ol><hr><p>拆分法：只将被除数进行拆分，除数一般情况下不予拆分。</p><p>例：$\frac{175.5}{13}=\frac{(169+6.5)}{13}=\frac{169}{13}+\frac{6.5}{13}=13+0.5=13.5$</p><hr><p>分数比较：</p><ol><li>分子大则分数大，分子小则分数小；</li><li>同大同小比速度</li><li>差分法<ol><li>分子分母较大的叫‘大分数’，较小的叫‘小分数’，两个分数分子分母差叫‘差分数’</li><li>若差分数比小分数大，则大分数＞小分数；</li><li>若差分数比小分数小，则大分数＜小分数；</li></ol></li></ol><p>例：$\frac{7}{4}$和$\frac{9}{5}$比较：<br>差分数为$\frac{2}{1}$，因为$\frac{7}{4}＜\frac{2}{1}$,所以$\frac{7}{4}＜\frac{9}{5}$</p><hr><p>小技巧：<br>一个数÷5，等于这个数×2，小数点向前一位；<br>一个数÷25，等于这个数×4，小数点向前二位；<br>一个数÷125，等于这个数×8，小数点向前三位；</p><hr><ol><li>除数多位数都小于等于4用截位直除</li><li>除数多位数都大于4用拆分法</li></ol><h3 id="2-5-其他"><a href="#2-5-其他" class="headerlink" title="2.5 其他"></a>2.5 其他</h3><h4 id="2-5-1-求增长量之415分法"><a href="#2-5-1-求增长量之415分法" class="headerlink" title="2.5.1 求增长量之415分法"></a>2.5.1 求增长量之415分法</h4><p>适用于选项差距较大 且 增长率 <code>r&gt;10%</code> ：</p><p>将增长率<code>X%</code>转化为分数<code>1/N</code>，根据以下的推导，可以得出$增长量=\frac{现期量}{N+1}$。</p><p>$增长量=\frac{现期量}{1+X}×X=\frac{现期量}{1+\frac{1}{N}}×\frac{1}{N}=\frac{现期量×N}{N+1}×\frac{1}{N}=\frac{现期量}{N+1}$</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/BaiHuaFen.jpg" alt="百化分"></p><blockquote><p>若$r=13.3$<code>%</code>，可取$N=7$，但计算使用的增长率为$14.3$<code>%</code>，实际增长率略小，所以实际增长量也比取$N=7$求出来的增长量小。同理，若实际增长率略大，实际增长量也略大。</p></blockquote><hr><h4 id="2-5-2-求增长量之分配法"><a href="#2-5-2-求增长量之分配法" class="headerlink" title="2.5.2 求增长量之分配法"></a>2.5.2 求增长量之分配法</h4><p>适用于选项差距小 或 增长率 <code>r&lt;10%</code>：</p><p><strong>核心思想：通过假设基期量，不断逼近真实的增长量</strong><br>具体操作：</p><p>例:【材料】2016年6月份，城镇消费品零售额23082亿元，同比增长10.5%</p><p>【问题】求2016年城镇消费品零售额比上年同期增加多少？<br>A.380亿元 B.2169亿元 C.1193亿元 D.2193亿元</p><p>这道题正常列式应该是【23082/1.105 * 10.5%】，硬算太费时间了。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/FenPeiFa.jpg" alt="分配法"></p><ol><li>假设23082拆分为基期20000，增长10.5%，增长量是2100</li><li>23082-(20000+2100)=982</li><li>982拆分为900和它的增长量94.5</li><li>982-(900+94.5)=-12.5</li><li>-12.5拆分为-10和它的增长量-1.05</li><li>差不多了，误差很小，不用算了，增长量为(2100+94.5-1.05)=2193，选D</li></ol><hr><h4 id="2-5-3-求基期之化除为乘"><a href="#2-5-3-求基期之化除为乘" class="headerlink" title="2.5.3 求基期之化除为乘"></a>2.5.3 <strong>求基期之化除为乘</strong></h4><p>适用于选项差距大，且增长率 <code>r</code> 满足 <code>-25%&lt;r&lt;25%</code> 的时候</p><p>$\frac{X}{1-r}≈X(1+r)$</p><p>$\frac{X}{1+r}≈X(1-r)$</p><blockquote><p>PS: r为<code>25%</code>时，与计算出的答案之间的误差率为<code>5%</code>。r在<code>5%</code>内时，基本没误差。</p></blockquote><h4 id="2-5-4-基期比重速算"><a href="#2-5-4-基期比重速算" class="headerlink" title="2.5.4 基期比重速算"></a>2.5.4 基期比重速算</h4><p>公式：$\frac{A}{B}×\frac{1+b}{1+a}≈\frac{A}{B}×(1+b-a)$(适用于a，b相差5%以内的情况)</p><p>【例】设$\frac{A}{B}=78.5％$，$\frac{1+b}{1+a}=\frac{1+12.7％}{1+8.9％}$，求结果</p><p>先求$b-a=3.8％=0.038$，再用$78.5％✖(1+0.038)=(78.5％✖1)+(78.5％✖0.038)=78.5％+3％≈81.5％$</p><h2 id="三：-增长率"><a href="#三：-增长率" class="headerlink" title="三： 增长率"></a>三： 增长率</h2><h3 id="3-1-混合增长率"><a href="#3-1-混合增长率" class="headerlink" title="3.1 混合增长率"></a>3.1 混合增长率</h3><p>概念：就是已知A的增长率、B的增长率，求A+B的增长率。</p><p>算法：混合增长率居中但偏向基数较大的。</p><h3 id="3-2-间隔增长率"><a href="#3-2-间隔增长率" class="headerlink" title="3.2 间隔增长率"></a>3.2 间隔增长率</h3><p>概念：<br>把主要年份分成三年：今年、去年、前年，其中今年的增长率为r1，去年的增长率为r2，求今年比前年增长了多少。</p><p>算法：<br>$前年产量(1+r2)=去年产量$<br>$去年产量(1+r1)=今年产量$<br>由以上两个式子可以推出：$前年产量(1+r1)(1+r2)=今年产量$<br>得公式：$间隔增长率=r1+r2+r1×r2=(今年产量/前年产量)-1$</p><p>速算：<br>若$r1$、$r2$均小于<code>10%</code>，则$r1×r2$忽略不计。</p><h3 id="3-3-年均增长率"><a href="#3-3-年均增长率" class="headerlink" title="3.3 年均增长率"></a>3.3 年均增长率</h3><p>概念：<br>指一定年限内，平均每年增长的速度。</p><p>算法：<br>$（1+r）^{n}=\frac{末期}{初期}$</p><p>速算：</p><ol><li>比较大小：若n相同，直接比$\frac{末期}{初期}$；</li><li>计算：结合代入法，居中代入，运用平方数。</li></ol><h3 id="3-4-赶超问题"><a href="#3-4-赶超问题" class="headerlink" title="3.4 赶超问题"></a>3.4 赶超问题</h3><p>概念：<br>基期产量为A，增长率r不变，n年后，现期产量达到B，再过n年，产量C是多少？</p><p>速算：<br>等比数列：$C=\frac{B^{2}}{A}$</p><h2 id="四：-增长量"><a href="#四：-增长量" class="headerlink" title="四： 增长量"></a>四： 增长量</h2><h3 id="4-1-赶超问题"><a href="#4-1-赶超问题" class="headerlink" title="4.1 赶超问题"></a>4.1 赶超问题</h3><p>概念：<br>基期为A，保持增长量不变，n年后，现期是达到B，求n？</p><p>速算：<br>等差数列：$现期B=基期A+n×增长量$，(n向上取整)</p><h3 id="4-2-比较"><a href="#4-2-比较" class="headerlink" title="4.2 比较"></a>4.2 比较</h3><p>识别：已知增长率r、现期B，增长最多，最少的是？</p><p>算法：</p><ol><li>大大则大</li><li>一大一小，看乘积</li><li>方法②失效，则现期量起的作用更大一些。</li></ol><h2 id="五：-比重"><a href="#五：-比重" class="headerlink" title="五： 比重"></a>五： 比重</h2><p>设现期的部分值为A、增长率为a；现期的整体值为B、增长率为b。</p><h3 id="5-1-现期比重"><a href="#5-1-现期比重" class="headerlink" title="5.1 现期比重"></a>5.1 现期比重</h3><p>公式：$\frac{A}{B}$</p><h3 id="5-2-基期比重"><a href="#5-2-基期比重" class="headerlink" title="5.2 基期比重"></a>5.2 基期比重</h3><p>公式：$\frac{A}{B}×\frac{1+b}{1+a}$</p><h3 id="5-3-两期比重比较"><a href="#5-3-两期比重比较" class="headerlink" title="5.3 两期比重比较"></a>5.3 两期比重比较</h3><p>公式推导：<br>$\frac{A}{B}-\frac{A}{B}×\frac{1+b}{1+a}=\frac{A}{B}×\frac{a-b}{1+a}&lt;|a-b|$</p><p>快速判断：<br>若$a&gt;b$，比重上升；若$a&lt;b$，比重下降；若$a＝b$，比重不变。</p><p>两期比重具体差值：</p><ol><li>判正负方向</li><li>求大小，问具体上升下降几个百分点，则$百分点&lt;|a-b|$（如果四个选项都满足此范围，则需要用截位法计算）</li></ol><h2 id="六：-倍数"><a href="#六：-倍数" class="headerlink" title="六： 倍数"></a>六： 倍数</h2><p>识别：A是B的多少倍？A的增长率为a，B的增长率为b，增长了多少倍？</p><h3 id="6-1-现期倍数"><a href="#6-1-现期倍数" class="headerlink" title="6.1 现期倍数"></a>6.1 现期倍数</h3><p>公式：$\frac{A}{B}$</p><h3 id="6-2-基期倍数"><a href="#6-2-基期倍数" class="headerlink" title="6.2 基期倍数"></a>6.2 基期倍数</h3><p>公式：$\frac{A}{B}×\frac{1+b}{1+a}$</p><h3 id="6-3-增长倍数"><a href="#6-3-增长倍数" class="headerlink" title="6.3 增长倍数"></a>6.3 增长倍数</h3><p>增长了多少倍？<br>公式：$\frac{A}{B}-1$</p><h2 id="七：-平均数"><a href="#七：-平均数" class="headerlink" title="七： 平均数"></a>七： 平均数</h2><p>识别：均、每、单位(面积)</p><h3 id="7-1-现期平均数"><a href="#7-1-现期平均数" class="headerlink" title="7.1 现期平均数"></a>7.1 现期平均数</h3><p>公式：$\frac{A}{B}$</p><h3 id="7-2-基期平均数"><a href="#7-2-基期平均数" class="headerlink" title="7.2 基期平均数"></a>7.2 基期平均数</h3><p>公式：$\frac{A}{B}×\frac{1+b}{1+a}$</p><h3 id="7-3-两期平均数比较"><a href="#7-3-两期平均数比较" class="headerlink" title="7.3 两期平均数比较"></a>7.3 两期平均数比较</h3><h4 id="7-3-1-判断大小"><a href="#7-3-1-判断大小" class="headerlink" title="7.3.1 判断大小"></a>7.3.1 判断大小</h4><p>公式推导：<br>$\frac{A}{B}-\frac{A}{B}×\frac{1+b}{1+a}=\frac{A}{B}×\frac{a-b}{1+a}&lt;|a-b|$</p><p>判断：<br>若$a&gt;b$，平均数上升；若$a&lt;b$，平均数下降；若$a＝b$，平均数不变。</p><h4 id="7-3-2-平均数增长量"><a href="#7-3-2-平均数增长量" class="headerlink" title="7.3.2 平均数增长量"></a>7.3.2 平均数增长量</h4><p>识别：平均增长+单位</p><p>公式：$\frac{A}{B}-\frac{A}{B}×\frac{1+b}{1+a}=\frac{A}{B}×\frac{a-b}{1+a}$</p><h4 id="7-3-3-平均数增长率"><a href="#7-3-3-平均数增长率" class="headerlink" title="7.3.3 平均数增长率"></a>7.3.3 平均数增长率</h4><p>识别：平均+%</p><p>公式：$r=\frac{a-b}{1+b}$  <strong>(★分母是1+b)</strong></p><h2 id="八：-其他类型"><a href="#八：-其他类型" class="headerlink" title="八： 其他类型"></a>八： 其他类型</h2><h3 id="8-1-线段法-十字交叉法-★"><a href="#8-1-线段法-十字交叉法-★" class="headerlink" title="8.1 线段法(十字交叉法)★"></a>8.1 线段法(十字交叉法)★</h3><p>识别：对某个整体中的两个部分量进行比较或者确定部分量的比值，但是却无法确定这两个部分量的具体取值。</p><p>方法：整体r放中间，部分ab放两边，则这两个部分量AB的比值与对应线段的长度(r-b与a-r)成反比。</p><p>原型公式：$Aa+Bb=（A+B)r=Ar+Br$</p><hr><p>【例1】2014年，某地区生态移民人均可支配收入5084元，其中县内移民人均可支配收入4933元，县外移民人均可支配收入5253元，2014年该地区生态移民人均可支配收入比农村居民人均可支配收入低3326元，比该地区山区九县农村居民人均可支配收入低1099元。</p><p>2014年，该地区生态移民中，县内移民与县外移民人数之比与以下哪一项最接近（B）<br>A．8∶5    B．10∶9<br>C．5∶8    D．9∶10</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/XianDuanFa1.jpg" alt="例1解题方法"></p><hr><p>【例2】2015年6月某市统计局对应届毕业生的抽样调查显示：有593名受访者打算创业，占28.6%。其中，大专生打算创业的比重比平均水平高7.0个百分点，本科生打算创业的比重比平均水平低3.9个百分点，31.4%的研究生打算创业，有34.5%的受访男生打算创业，比女生高11.2个百分点。</p><p>问：受访男的比女的少？ 正确。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/XianDuanFa2.jpg" alt="例2解题方法"></p><hr><p>【例3】老王家去年收入15万元，增长率5%，老李家去年收入30万元，增长率10%，求两家收入同比平均增长?</p><p>根据题意关系，设两家收入同比平均增长率为x%，按照线段法在草稿纸上画出下图（<strong>★用基期数据带入计算，若题目只提供现期，则要先求出基期</strong>）。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/XianDuanFa3.jpg" alt="例3解题方法"></p><hr><p>【例4】受访居民在一天的活动中，有酬劳动平均用时4小时24分钟。其中……工作日4小时50分钟，休息日3小时19分钟。…受访居民无酬劳动平均用时2小时42分钟。其中…工作日2小时34分钟。</p><p>问：受访居民休息日无酬劳动平均用时是多少？  3小时2分钟</p><p>【答】：<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/XianDuanFa4.jpg" alt="例4解题方法"></p><h3 id="8-2-容斥原理★"><a href="#8-2-容斥原理★" class="headerlink" title="8.2 容斥原理★"></a>8.2 容斥原理★</h3><h4 id="8-2-1-两集合相加大于全集，必有重合"><a href="#8-2-1-两集合相加大于全集，必有重合" class="headerlink" title="8.2.1 两集合相加大于全集，必有重合"></a>8.2.1 两集合相加大于全集，必有重合</h4><p>【例】调查显示，关于家庭存书共享意愿的问题，选择“无条件愿意”“有条件愿意”“不愿意”“不知道/不清楚”的受访市民所占比重分别是60.8%、15.1%、20.6%、3.5%。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/RongChiYuanLi1.jpg" alt="容斥1"></p><p>选择“无条件愿意”共享家庭存书的受访市民中，一定有人的家庭存书为：</p><p>A.50册及以下 B.51-100册<br>C.101-300册 D.301册及以上</p><p>【答】由材料第一段可知，选择“无条件愿意”的受访市民所占比重是60.8%，和由饼状图可知受访市民家庭存书情况中50册及以下的比重为40.1%，因为60.8%+40.1%&gt;100%，所以必然有重合部分，故答案选A。</p><h4 id="8-2-2-容斥极值和两者容斥"><a href="#8-2-2-容斥极值和两者容斥" class="headerlink" title="8.2.2 容斥极值和两者容斥"></a>8.2.2 容斥极值和两者容斥</h4><p>$\text{原理：}$<br>$\text{两者容斥：}I=A+B-A \cap B+X$<br>$\text{容斥极值：}(A \bigcap B)_{\min }=A+B-I$</p><p>【例】</p><table><thead><tr><th>原因</th><th>青年</th><th>中年</th><th>老年</th></tr></thead><tbody><tr><td>中老年人的正常锻炼娱乐活动</td><td>66</td><td>54.6</td><td>60.8</td></tr><tr><td>有利于中老年人扩大社交、排解孤独</td><td>64.7</td><td>61.7</td><td>54.3</td></tr></tbody></table><p>此次调查中，在支持广场舞等活动的受访青年市民中，同时选择“中老年人正常锻炼等娱乐活动”和“有利于中老年人扩大社交、排解孤独”等原因的至少有( )</p><p>A.64.7% B.35.3% C.30.7% D.28.6%</p><p>【答】由表格可得，在支持广场舞等活动的受访青年市民中，选择“中老年人正常锻炼等”占66%，“有利于中老年人”占64.7%，求同时选择两个原因的青年人比例最小值，即求两个集合的交集的最小值，利用集合关系和容斥原理基本公式，可得为64.7%+66%-100%=30.7%，故答案为C。</p><h4 id="8-2-3-三集合容斥"><a href="#8-2-3-三集合容斥" class="headerlink" title="8.2.3 三集合容斥"></a>8.2.3 三集合容斥</h4><p>$\text{三集合容斥求最多：求选择三项z的最多为多少？}$<br>$x+y+z=100①$<br>$x+2y+3z=I②$<br>$②-①=y+2z=I-100③$<br>$\text{若要z最大，则}y=0，z=\frac{I-100}{2}$</p><p>【例】</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/Public_Test/RongChiYuanLi2.jpg" alt="容斥2"><br>已知受访者网购原因（限选3项），问选择三种网购原因的占比至多为？</p><p>先求出比例总和，设选择一个选项的受访者为$x$，选择两个选项的受访者为$y$，选择三个选项的受访者为$z$，则$x+y+z=100①$，$x+2y+3z=\text{所有原因之和}=192.4②$,则$②-①=y+2z=92.4$,若要$z$最大，则$y=0，z=46.2$。</p>]]></content>
    
    
    <categories>
      
      <category>公考</category>
      
      <category>资料分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Github Acitons在GitHub、Gitee、Coding上自动部署Hexo</title>
    <link href="/2020/05/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Github/GithubAcitonsDeployHexoBlog/"/>
    <url>/2020/05/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Github/GithubAcitonsDeployHexoBlog/</url>
    
    <content type="html"><![CDATA[<blockquote><p>首先，非常感谢辣椒大大的悉心指导，在此记录下踩的坑。<br><a href="https://jupitersh.gitee.io/2020/05/githubactionforhexo/">辣椒大大的教程</a><br><a href="https://help.github.com/cn/actions">GitHub Actions 操作文档</a></p></blockquote><h2 id="一：-前言"><a href="#一：-前言" class="headerlink" title="一： 前言"></a>一： 前言</h2><p><code>Github Actions</code>真香。</p><p>简单介绍下 <code>GitHub Actions</code> 中的术语：</p><ul><li><code>workflow</code>：表示一次持续集成的过程</li><li><code>job</code>：构建任务，一个 <code>workflow</code> 可以由一个或者多个 <code>job</code> 组成，可支持并发执行 <code>job</code></li><li><code>step</code>：一个 <code>job</code> 由一个或多个 <code>step</code> 组成，按顺序依次执行</li><li><code>action</code>：每个 <code>step</code> 由一个或多个 <code>action</code> 组成，按顺序依次执行</li></ul><h2 id="二：-工作流及添加密匙"><a href="#二：-工作流及添加密匙" class="headerlink" title="二： 工作流及添加密匙"></a>二： 工作流及添加密匙</h2><h3 id="2-1-创建工作流"><a href="#2-1-创建工作流" class="headerlink" title="2.1 创建工作流"></a>2.1 创建工作流</h3><p>在博客目录下创建 <code>.github/workflows/main.yml</code> 文件，文件内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Blog</span>                                       <span class="hljs-comment"># Actions 显示的名字，随意设置</span><br><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]<br><br><span class="hljs-comment">#on:</span><br><span class="hljs-comment">#  push:</span><br><span class="hljs-comment">#    branches:</span><br><span class="hljs-comment">#      - hexo</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">ref:</span> <span class="hljs-string">master</span>                                 <span class="hljs-comment"># 改为你的源码分支</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;10.x&quot;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Generate</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        rm -f .yarnclean</span><br><span class="hljs-string">        yarn --frozen-lockfile --ignore-engines --ignore-optional --non-interactive --silent --ignore-scripts --production=false</span><br><span class="hljs-string">        rm -rf ./public</span><br><span class="hljs-string">        yarn run hexo clean</span><br><span class="hljs-string">        yarn run hexo generate</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Deploy</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">SSH_PRIVATE:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PRIVATE</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">GIT_NAME:</span> <span class="hljs-string">xxx</span>                                  <span class="hljs-comment"># 你 GitHub 用户名  </span><br>        <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">xxxx</span>                                <span class="hljs-comment"># 你 GitHub 邮箱</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        mkdir -p ~/.ssh/</span><br><span class="hljs-string">        echo &quot;$SSH_PRIVATE&quot; | tr -d &#x27;\r&#x27; &gt; ~/.ssh/id_rsa</span><br><span class="hljs-string">        chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">        ssh-keyscan gitee.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">        ssh-keyscan e.coding.net &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">        git config --global user.name &quot;$GIT_NAME&quot;</span><br><span class="hljs-string">        git config --global user.email &quot;$GIT_EMAIL&quot;</span><br><span class="hljs-string">        yarn run hexo deploy</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">Gitee</span> <span class="hljs-string">Pages</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">yanglbme/gitee-pages-action@master</span><br>      <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">gitee-username:</span> <span class="hljs-string">xxx</span>                              <span class="hljs-comment"># 你的 Gitee 用户名</span><br>          <span class="hljs-attr">gitee-password:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITEE_PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">gitee-repo:</span> <span class="hljs-string">xxxx/xxxx</span>                            <span class="hljs-comment"># 你的 Gitee 仓库</span><br></code></pre></div></td></tr></table></figure><ol><li>如果你是 <code>master</code> 作为最终部署分支，名为 <code>hexo</code> 分支作为源码分支，那么把 <code>on: [push]</code> 注释掉，然后下面4行取消注释。 <code>ref: master</code> 改为 <code>ref: hexo</code>。</li><li>如果不用coding，则把 <code>ssh-keyscan e.coding.net &gt;&gt; ~/.ssh/known_hosts</code> 这行删掉;Coding的域名是<code>e.coding.net</code>，这边卡了好久，一直报错。</li><li>带 <code>#</code> 的地方修改下，其他默认。</li></ol><h3 id="2-2-添加密匙"><a href="#2-2-添加密匙" class="headerlink" title="2.2 添加密匙"></a>2.2 添加密匙</h3><p>在 <code>GitHub</code> 中博客仓库中按照 <code>Settings-&gt;Secrets-&gt;new secrets</code> 找到对应的页面，然后进行私钥添加。</p><p><code>secrets</code> 分别名为 <code>GITEE_PASSWORD</code> 和 <code>SSH_PRIVATE</code> ，其中 <code>GITEE_PASSWORD</code> 是你 <code>Gitee</code> 的登陆密码，<code>SSH_PRIVATE</code> 是你的部署私钥。</p><p>PS:如果成功，可能会提示非常用IP地址登录，需要验证码。这个时候就需要手动部署Gitee了。（登录多了，就不会要验证码了。手动滑稽！！！）</p><h2 id="三：-部署成功"><a href="#三：-部署成功" class="headerlink" title="三： 部署成功"></a>三： 部署成功</h2><p>博客仓库 <code>Acitons</code> -&gt; <code>Blog</code> -&gt; <code>commit</code> 名前有 <code>√</code> ，则成功了，enjoying!</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>爬虫实战</title>
    <link href="/2020/05/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    <url>/2020/05/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h2 id="一：-requests"><a href="#一：-requests" class="headerlink" title="一： requests"></a>一： requests</h2><h3 id="1-1-豆瓣影讯之xpath"><a href="#1-1-豆瓣影讯之xpath" class="headerlink" title="1.1 豆瓣影讯之xpath"></a>1.1 豆瓣影讯之xpath</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment">## 1.获取目标网站源码</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&quot;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&quot;https://cn.bing.com/&quot;</span><br>&#125;<br><br>url = <span class="hljs-string">&#x27;https://movie.douban.com/cinema/nowplaying/beijing/&#x27;</span><br>res = requests.get(url, headers=headers)<br><br><span class="hljs-comment"># 网页源码存为text</span><br>text = res.text<br><br><span class="hljs-comment"># response.text 返回的是Unicode格式的数据</span><br><span class="hljs-comment"># response.content返回的字节流数据，是bytes类型</span><br><br><br><span class="hljs-comment">## 2. 按一定规则提取数据</span><br><br><span class="hljs-comment"># 从字符串常量解析HTML文档。</span><br>html = etree.HTML(text)<br><br><span class="hljs-comment"># 获取正在上映[0],即将上映[1]。通过xpath表达式来定位class=&#x27;lists&#x27;</span><br>ul = html.xpath(<span class="hljs-string">&quot;//ul[@class=&#x27;lists&#x27;]&quot;</span>)[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># print(etree.tostring(ul, encoding=&#x27;utf-8&#x27;).decode(&#x27;utf-8&#x27;))</span><br><br><span class="hljs-comment"># 通过xpath表达式来定位li标签，存为lis列表</span><br>lis = ul.xpath(<span class="hljs-string">&quot;./li&quot;</span>)<br><br><span class="hljs-comment">#构建movies字典</span><br>movies = []<br><br><span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> lis:<br>    <span class="hljs-comment"># print(etree.tostring(li, encoding=&#x27;utf-8&#x27;).decode(&#x27;utf-8&#x27;))</span><br>    title = li.xpath(<span class="hljs-string">&quot;@data-title&quot;</span>)<br>    score = li.xpath(<span class="hljs-string">&quot;@data-score&quot;</span>)<br>    duration = li.xpath(<span class="hljs-string">&quot;@data-duration&quot;</span>)<br>    region = li.xpath(<span class="hljs-string">&quot;@data-region&quot;</span>)<br>    direcotr = li.xpath(<span class="hljs-string">&quot;@data-direcotr&quot;</span>)<br>    actors = li.xpath(<span class="hljs-string">&quot;@data-actors&quot;</span>)<br>    thumbnail = li.xpath(<span class="hljs-string">&quot;.//img/@src&quot;</span>)<br>    movie = &#123;<br>        <span class="hljs-string">&#x27;title&#x27;</span>: title,<br>        <span class="hljs-string">&#x27;score&#x27;</span>: score,<br>        <span class="hljs-string">&#x27;duration&#x27;</span>: duration,<br>        <span class="hljs-string">&#x27;region&#x27;</span>: region,<br>        <span class="hljs-string">&#x27;direcotr&#x27;</span>: direcotr,<br>        <span class="hljs-string">&#x27;actors&#x27;</span>: actors,<br>        <span class="hljs-string">&#x27;thumbnail&#x27;</span>: thumbnail<br>    &#125;<br>    movies.append(movie)<br><br><span class="hljs-keyword">for</span> movie <span class="hljs-keyword">in</span> movies:<br>    <span class="hljs-built_in">print</span>(movie)<br></code></pre></div></td></tr></table></figure><h3 id="1-2-电影天堂之xpath"><a href="#1-2-电影天堂之xpath" class="headerlink" title="1.2 电影天堂之xpath"></a>1.2 电影天堂之xpath</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> requests<br><br>BASE_DOMAIN = <span class="hljs-string">&#x27;https://dytt8.net&#x27;</span><br><br>HEADERS = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&quot;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&quot;http://whois.chinaz.com/dytt8.net&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 获取每一部电影详情页的url</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_detail_urls</span>(<span class="hljs-params">url</span>):</span><br>    res = requests.get(url, headers=HEADERS)<br>    <span class="hljs-comment"># requests库，会默认使用自己猜测得编码方式进行解码，有时会猜错，需要手动指定解码</span><br>    text = res.content.decode(<span class="hljs-string">&#x27;gbk&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>)<br>    html = etree.HTML(text)  <span class="hljs-comment"># &lt;Element html at 0x168712c4540&gt;</span><br>    detail_urls = html.xpath(<span class="hljs-string">&quot;//table[@class=&#x27;tbspan&#x27;]//a/@href&quot;</span>)<br><br>    <span class="hljs-comment"># 注释掉得等同于下面得列表表达式</span><br>    <span class="hljs-comment"># def abc(url):</span><br>    <span class="hljs-comment">#     return BASE_DOMAIN+url</span><br>    <span class="hljs-comment"># index = 0</span><br>    <span class="hljs-comment"># for detail_url in detail_urls:</span><br>    <span class="hljs-comment">#     detail_url = abc(detail_url)</span><br>    <span class="hljs-comment">#     detail_urls[index] = detail_url</span><br>    <span class="hljs-comment">#     index += 1</span><br><br>    <span class="hljs-comment"># 列表表达式</span><br>    <span class="hljs-comment"># map() 会根据提供的函数对指定序列做映射。</span><br>    <span class="hljs-comment"># 处理详情页的url，获取的url加上BASE_DOMAIN才是正确的url</span><br>    detail_urls = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> url: BASE_DOMAIN + url, detail_urls)<br><br>    <span class="hljs-keyword">return</span> detail_urls<br><br><span class="hljs-comment"># 解析详情页面</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_detail_page</span>(<span class="hljs-params">url</span>):</span><br>    movie = &#123;&#125;<br>    response = requests.get(url, headers=HEADERS)<br>    text = response.content.decode(<span class="hljs-string">&#x27;gbk&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>)<br>    html = etree.HTML(text)<br>    <span class="hljs-comment"># 标题，返回一个字典，加上0就正常了</span><br>    <span class="hljs-comment"># title = html.xpath(&quot;//div[@class=&#x27;title_all&#x27;]//font[@color=&#x27;#07519a&#x27;]/text()&quot;)[0]</span><br>    title = html.xpath(<span class="hljs-string">&quot;//h1/font/text()&quot;</span>)[<span class="hljs-number">0</span>]<br>    movie[<span class="hljs-string">&#x27;title&#x27;</span>] = title<br>    <span class="hljs-comment"># 海报</span><br>    zoomE = html.xpath(<span class="hljs-string">&quot;//div[@id=&#x27;Zoom&#x27;]&quot;</span>)[<span class="hljs-number">0</span>]<br>    imgs = zoomE.xpath(<span class="hljs-string">&quot;.//img/@src&quot;</span>)<br>    cover = imgs[<span class="hljs-number">0</span>]<br>    movie[<span class="hljs-string">&#x27;cover&#x27;</span>] = cover<br>    <span class="hljs-comment"># 详情</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_info</span>(<span class="hljs-params">info, rule</span>):</span><br>        <span class="hljs-keyword">return</span> info.replace(rule, <span class="hljs-string">&quot;&quot;</span>).strip()<br>    infos = zoomE.xpath(<span class="hljs-string">&quot;.//text()&quot;</span>)<br>    <span class="hljs-keyword">for</span> index, info <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(infos):<br>        <span class="hljs-keyword">if</span> info.startswith(<span class="hljs-string">&quot;◎年　　代&quot;</span>):<br>            <span class="hljs-comment"># 把&#x27;◎年　　代&#x27;替换掉，strip()消除year前后空格</span><br>            info = parse_info(info, <span class="hljs-string">&quot;◎年　　代&quot;</span>)<br>            movie[<span class="hljs-string">&#x27;year&#x27;</span>] = info<br>        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">&quot;◎产　　地&quot;</span>):<br>            info = parse_info(info, <span class="hljs-string">&quot;◎产　　地&quot;</span>)<br>            movie[<span class="hljs-string">&#x27;country&#x27;</span>] = info<br>        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">&quot;◎类　　别&quot;</span>):<br>            info = parse_info(info, <span class="hljs-string">&quot;◎类　　别&quot;</span>)<br>            movie[<span class="hljs-string">&#x27;category&#x27;</span>] = info<br>        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">&quot;◎豆瓣评分&quot;</span>):<br>            info = parse_info(info, <span class="hljs-string">&quot;◎豆瓣评分&quot;</span>)<br>            movie[<span class="hljs-string">&#x27;douban_rating&#x27;</span>] = info<br>        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">&quot;◎片　　长&quot;</span>):<br>            info = parse_info(info, <span class="hljs-string">&quot;◎片　　长&quot;</span>)<br>            movie[<span class="hljs-string">&#x27;duration&#x27;</span>] = info<br>        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">&quot;◎导　　演&quot;</span>):<br>            info = parse_info(info, <span class="hljs-string">&quot;◎导　　演&quot;</span>)<br>            movie[<span class="hljs-string">&#x27;director&#x27;</span>] = info<br>        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">&quot;◎主　　演&quot;</span>):<br>            info = parse_info(info, <span class="hljs-string">&quot;◎主　　演&quot;</span>)<br>            actors = [info]<br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(index + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(infos)):<br>                actor = infos[x].strip()<br>                <span class="hljs-keyword">if</span> actor.startswith(<span class="hljs-string">&quot;◎&quot;</span>):<br>                    <span class="hljs-keyword">break</span><br>                actors.append(actor)<br>            movie[<span class="hljs-string">&#x27;actors&#x27;</span>] = info<br>        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">&quot;◎简　　介&quot;</span>):<br>            info = infos[index + <span class="hljs-number">1</span>].strip()<br>            movie[<span class="hljs-string">&quot;profile&quot;</span>] = info<br>    <span class="hljs-comment"># 下载地址</span><br>    downloadUrl = html.xpath(<span class="hljs-string">&quot;//td[@bgcolor=&#x27;#fdfddf&#x27;]/a/text()&quot;</span>)[<span class="hljs-number">0</span>]<br>    movie[<span class="hljs-string">&quot;downloadUrl&quot;</span>] = downloadUrl<br>    <span class="hljs-keyword">return</span> movie<br><br><span class="hljs-comment"># 爬取</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">spider</span>():</span><br>    base_url = <span class="hljs-string">&#x27;https://dytt8.net/html/gndy/dyzz/list_23_&#123;&#125;.html&#x27;</span><br>    <span class="hljs-comment"># 获取1到n页</span><br>    movies = []<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>        <span class="hljs-comment"># format 格式化函数 x替代&#123;&#125;</span><br>        url = base_url.<span class="hljs-built_in">format</span>(x)<br>        detail_urls = get_detail_urls(url)<br>        <span class="hljs-comment"># 遍历详情页内信息</span><br>        <span class="hljs-keyword">for</span> detail_url <span class="hljs-keyword">in</span> detail_urls:<br>            movie = parse_detail_page(detail_url)<br>            movies.append(movie)<br>            <span class="hljs-built_in">print</span>(movie)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    spider()<br></code></pre></div></td></tr></table></figure><h3 id="1-3-古诗文之正则表达式re"><a href="#1-3-古诗文之正则表达式re" class="headerlink" title="1.3 古诗文之正则表达式re"></a>1.3 古诗文之正则表达式re</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_page</span>(<span class="hljs-params">url</span>):</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&quot;</span><br>    &#125;<br>    response = requests.get(url, headers)<br>    text = response.text<br>    <span class="hljs-comment"># 获取古诗文标题</span><br>    <span class="hljs-comment"># .不能匹配\n，所以加上re.DOTALL</span><br>    titles = re.findall(<span class="hljs-string">r&#x27;&lt;div\sclass=&quot;cont&quot;&gt;.*?&lt;b&gt;(.*?)&lt;/b&gt;&#x27;</span>, text, re.DOTALL)<br>    <span class="hljs-comment"># 朝代 ,re.S == re.DOTALL</span><br>    dynasties = re.findall(<span class="hljs-string">r&#x27;&lt;p class=&quot;source&quot;&gt;.*?&lt;a.*?&gt;(.*?)&lt;/a&gt;&#x27;</span>, text, re.S)<br>    <span class="hljs-comment"># 作者</span><br>    authors = re.findall(<span class="hljs-string">r&#x27;&lt;p class=&quot;source&quot;&gt;.*?&lt;a.*?&gt;.*?&lt;a.*?&gt;(.*?)&lt;/a&gt;&#x27;</span>,  text, re.S)<br>    <span class="hljs-comment"># 诗文正文</span><br>    content_tags = re.findall(<span class="hljs-string">r&#x27;&lt;div class=&quot;contson&quot; .*?&gt;(.*?)&lt;/div&gt;&#x27;</span>,  text, re.S)<br>    contents = []<br>    <span class="hljs-keyword">for</span> content <span class="hljs-keyword">in</span> content_tags:<br>        <span class="hljs-comment"># .strip()去掉换行</span><br>        content = re.sub(<span class="hljs-string">r&#x27;&lt;.*?&gt;|\n&#x27;</span>, <span class="hljs-string">&quot;&quot;</span>, content).strip()<br>        contents.append(content)<br>    <span class="hljs-comment"># 整理格式</span><br>    poems = []<br>    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(titles, dynasties, authors, contents):<br>        title, dynasty, author, content = value<br>        poem = &#123;<br>            <span class="hljs-string">&#x27;title&#x27;</span>: title,<br>            <span class="hljs-string">&#x27;dynasty&#x27;</span>: dynasty,<br>            <span class="hljs-string">&#x27;author&#x27;</span>: author,<br>            <span class="hljs-string">&#x27;content&#x27;</span>: content<br>        &#125;<br>        poems.append(poem)<br>    <span class="hljs-keyword">for</span> poem <span class="hljs-keyword">in</span> poems:<br>        <span class="hljs-built_in">print</span>(poem)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    url = <span class="hljs-string">&#x27;https://www.gushiwen.org/default_1.aspx&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>):<br>        url = <span class="hljs-string">&#x27;https://www.gushiwen.org/default_%s.aspx&#x27;</span> % i<br>        parse_page(url)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><h2 id="二：-文件存储之json和csv"><a href="#二：-文件存储之json和csv" class="headerlink" title="二： 文件存储之json和csv"></a>二： 文件存储之json和csv</h2><h3 id="2-1-json"><a href="#2-1-json" class="headerlink" title="2.1 json"></a>2.1 json</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> json<br><br>persons = [<br>    &#123;<br>        <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>        <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>,<br>        <span class="hljs-string">&#x27;city&#x27;</span>: <span class="hljs-string">&#x27;beijing&#x27;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,<br>        <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>,<br>        <span class="hljs-string">&#x27;city&#x27;</span>: <span class="hljs-string">&#x27;shanghai&#x27;</span><br>    &#125;<br>]<br><span class="hljs-comment"># 打印用dumps，存为json文件用dump，有中文则需指定ensure_ascii=False</span><br><span class="hljs-built_in">print</span>(json.dumps(persons, ensure_ascii=<span class="hljs-literal">False</span>))<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;persons.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    json.dump(persons, fp, ensure_ascii=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 读取json文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;persons.json&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    persons = json.load(fp)<br>    <span class="hljs-built_in">print</span>(persons)<br></code></pre></div></td></tr></table></figure><h3 id="2-2-csv"><a href="#2-2-csv" class="headerlink" title="2.2 csv"></a>2.2 csv</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> csv<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_list</span>():</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;temp.csv&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        <span class="hljs-comment"># reader是一个迭代器</span><br>        reader = csv.reader(fp)<br>        <span class="hljs-comment"># 不获取第一行</span><br>        <span class="hljs-built_in">next</span>(reader)<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> reader:<br>            time = x[<span class="hljs-number">1</span>]<br>            volumn = x[-<span class="hljs-number">2</span>]<br>            <span class="hljs-built_in">print</span>(&#123;<span class="hljs-string">&#x27;time&#x27;</span>: time, <span class="hljs-string">&#x27;volumn&#x27;</span>: volumn&#125;)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_dict</span>():</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;temp1.csv&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        <span class="hljs-comment"># 不包含标题那行数据</span><br>        reader = csv.DictReader(fp)<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> reader:<br>            <span class="hljs-built_in">print</span>(x)<br><br>students = [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;height&#x27;</span>]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_list</span>():</span><br>    values = [<br>        &#123;<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">170</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">180</span>&#125;<br>    ]<br>    <span class="hljs-comment"># newline=&#x27;\n&#x27;为默认，连续多行则指定为空字符串</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;temp.csv&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        writer = csv.writer(fp)<br>        writer.writerow(students)<br>        <span class="hljs-comment"># 写入多行</span><br>        writer.writerows(values)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_dict</span>():</span><br>    values = [<br>        &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;height&#x27;</span>:<span class="hljs-number">170</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;height&#x27;</span>:<span class="hljs-number">190</span>&#125;<br>    ]<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;temp1.csv&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        writer = csv.DictWriter(fp, students)<br>        <span class="hljs-comment"># 写入表头数据的时候，需要调用writeheader方法</span><br>        writer.writeheader()<br>        writer.writerows(values)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><h2 id="三：-数据库操作之MySQL"><a href="#三：-数据库操作之MySQL" class="headerlink" title="三： 数据库操作之MySQL"></a>三： 数据库操作之MySQL</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> pymysql<br><br>db = pymysql.connect(host=<span class="hljs-string">&#x27;192.168.2.4&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, passwd=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                     db=<span class="hljs-string">&#x27;test&#x27;</span>, port=<span class="hljs-number">3306</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_db</span>(<span class="hljs-params">cursor</span>):</span><br>    <span class="hljs-comment"># 如果是变量，必须都用%s</span><br>    sql = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        insert into students(class_id,name,gender,score) values(%s,%s,%s,%s)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    class_id = <span class="hljs-string">&#x27;4&#x27;</span>;name = <span class="hljs-string">&#x27;小龙&#x27;</span>;gender = <span class="hljs-string">&#x27;M&#x27;</span>;score = <span class="hljs-string">&#x27;99&#x27;</span><br>    <span class="hljs-comment"># 执行sql语句</span><br>    cursor.execute(sql, (class_id, name, gender, score))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_db</span>(<span class="hljs-params">cursor</span>):</span><br>    sql = <span class="hljs-string">&quot;&quot;&quot;select * from students&quot;&quot;&quot;</span><br>    cursor.execute(sql)<br>    <span class="hljs-comment"># print(cursor.fetchall()[-1])</span><br>    result = cursor.fetchall()<br>    <span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> result:<br>        <span class="hljs-built_in">print</span>(temp)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_db</span>(<span class="hljs-params">cursor</span>):</span><br>    sql = <span class="hljs-string">&quot;&quot;&quot;update students set score=&#x27;100&#x27; where name=&#x27;小龙&#x27;&quot;&quot;&quot;</span><br>    cursor.execute(sql)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_db</span>(<span class="hljs-params">cursor</span>):</span><br>    sql = <span class="hljs-string">&quot;&quot;&quot;delete from students where name=&#x27;小龙&#x27;&quot;&quot;&quot;</span><br>    cursor.execute(sql)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    cursor = db.cursor()<br>    insert_db(cursor)<br>    update_db(cursor)<br>    delete_db(cursor)<br>    find_db(cursor)<br>    db.commit()<br>    db.close()<br></code></pre></div></td></tr></table></figure><h2 id="四：-多线程"><a href="#四：-多线程" class="headerlink" title="四： 多线程"></a>四： 多线程</h2><h3 id="4-1-多线程类操作"><a href="#4-1-多线程类操作" class="headerlink" title="4.1 多线程类操作"></a>4.1 多线程类操作</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> threading, time<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CodingThread</span>(<span class="hljs-params">threading.Thread</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在写代码%s&#x27;</span> % threading.current_thread())<br>            time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DrawingThread</span>(<span class="hljs-params">threading.Thread</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在画图%s&#x27;</span> % threading.current_thread())<br>            time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    t1 = CodingThread()<br>    t2 = DrawingThread()<br>    t1.start()<br>    t2.start()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><h3 id="4-2-多线程加锁解锁"><a href="#4-2-多线程加锁解锁" class="headerlink" title="4.2 多线程加锁解锁"></a>4.2 多线程加锁解锁</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> threading<br><br>VALUE = <span class="hljs-number">0</span><br>gLock = threading.Lock()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_value</span>():</span><br>    <span class="hljs-keyword">global</span> VALUE<br>    <span class="hljs-comment"># 加锁</span><br>    gLock.acquire()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>        VALUE += <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 解锁</span><br>    gLock.release()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;value: %d&#x27;</span> % VALUE)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        <span class="hljs-comment"># 注意函数名后面不要加括号，加上括号返回的则是函数的返回值</span><br>        t = threading.Thread(target=add_value)<br>        t.start()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><h3 id="4-3-Condition锁"><a href="#4-3-Condition锁" class="headerlink" title="4.3 Condition锁"></a>4.3 Condition锁</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br>gMoney = <span class="hljs-number">1000</span><br>gCondition = threading.Condition()<br>gTimes = <span class="hljs-number">0</span><br>gTotalTimes = <span class="hljs-number">5</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span>(<span class="hljs-params">threading.Thread</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">global</span> gMoney<br>        <span class="hljs-keyword">global</span> gCondition<br>        <span class="hljs-keyword">global</span> gTimes<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            money = random.randint(<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>)<br>            gCondition.acquire()<br>            <span class="hljs-keyword">if</span> gTimes &gt;= gTotalTimes:<br>                gCondition.release()<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前生产者总共生产了%s次&#x27;</span> % gTimes)<br>                <span class="hljs-keyword">break</span><br>            gMoney += money<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s当前存入%s元钱，剩余%s元钱&#x27;</span> % (threading.current_thread(), money, gMoney))<br>            gTimes += <span class="hljs-number">1</span><br>            time.sleep(<span class="hljs-number">0.5</span>)<br>            gCondition.notify_all()<br>            gCondition.release()<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span>(<span class="hljs-params">threading.Thread</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">global</span> gMoney<br>        <span class="hljs-keyword">global</span> gCondition<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            money = random.randint(<span class="hljs-number">100</span>, <span class="hljs-number">500</span>)<br>            gCondition.acquire()<br>            <span class="hljs-comment"># 这里要给个while循环判断，因为等轮到这个线程的时候</span><br>            <span class="hljs-comment"># 条件有可能又不满足了</span><br>            <span class="hljs-keyword">while</span> gMoney &lt; money:<br>                <span class="hljs-keyword">if</span> gTimes &gt;= gTotalTimes:<br>                    gCondition.release()<br>                    <span class="hljs-keyword">return</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s准备取%s元钱，剩余%s元钱，不足！&#x27;</span> % (threading.current_thread(), money, gMoney))<br>                gCondition.wait()<br>            gMoney -= money<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s当前取出%s元钱，剩余%s元钱&#x27;</span> % (threading.current_thread(), money, gMoney))<br>            time.sleep(<span class="hljs-number">0.5</span>)<br>            gCondition.release()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        Consumer(name=<span class="hljs-string">&#x27;消费者线程%d&#x27;</span> % x).start()<br><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        Producer(name=<span class="hljs-string">&#x27;生产者线程%d&#x27;</span> % x).start()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><h3 id="4-4-斗图啦"><a href="#4-4-斗图啦" class="headerlink" title="4.4 斗图啦"></a>4.4 斗图啦</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><br><span class="hljs-comment"># 获取每个表情的url</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span>(<span class="hljs-params">threading.Thread</span>):</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, page_queue, img_queue, *args, **kwargs</span>):</span><br>        <span class="hljs-built_in">super</span>(Producer, self).__init__(*args, **kwargs)<br>        self.page_queue = page_queue<br>        self.img_queue = img_queue<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">if</span> self.page_queue.empty():<br>                <span class="hljs-keyword">break</span><br>            url = self.page_queue.get()<br>            self.parse_page(url)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_page</span>(<span class="hljs-params">self, url</span>):</span><br>        response = requests.get(url, headers=self.headers)<br>        text = response.text<br>        html = etree.HTML(text)<br>        <span class="hljs-comment"># 获取class不等于gif的图片内容</span><br>        imgs = html.xpath(<span class="hljs-string">&quot;//div[@class=&#x27;page-content text-center&#x27;]//img[@class!=&#x27;gif&#x27;]&quot;</span>)<br>        <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> imgs:<br>            img_url = img.get(<span class="hljs-string">&#x27;data-original&#x27;</span>)<br>            <span class="hljs-comment"># img_url = img.xpath(&quot;.//@data-original&quot;)[0]</span><br>            <span class="hljs-comment"># 提取图片url的后缀名</span><br>            suffix = os.path.splitext(img_url)[<span class="hljs-number">1</span>]<br>            <span class="hljs-comment"># suffix = &#x27;.&#x27; + img_url.split(&#x27;.&#x27;)[-1]</span><br>            alt = img.get(<span class="hljs-string">&#x27;alt&#x27;</span>)<br>            <span class="hljs-comment"># alt = img.xpath(&quot;.//@alt&quot;)[0]</span><br>            <span class="hljs-comment"># 替换掉文件名中的，。？?,/\\·等不支持的文件名字符</span><br>            alt = re.sub(<span class="hljs-string">r&#x27;[，。？?,/\\·*！《]&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, alt)<br>            img_name = alt + suffix<br>            <span class="hljs-comment"># 图片的url和name放入队列</span><br>            self.img_queue.put((img_url, img_name))<br><br><span class="hljs-comment"># 下载表情</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span>(<span class="hljs-params">threading.Thread</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, page_queue, img_queue, *args, **kwargs</span>):</span><br>        <span class="hljs-built_in">super</span>(Consumer, self).__init__(*args, **kwargs)<br>        self.page_queue = page_queue<br>        self.img_queue = img_queue<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">if</span> self.img_queue.empty() <span class="hljs-keyword">and</span> self.page_queue.empty():<br>                <span class="hljs-keyword">return</span><br>            url, filename = self.img_queue.get(block=<span class="hljs-literal">True</span>)<br>            <span class="hljs-comment"># 下载图片放入images目录下</span><br>            request.urlretrieve(url, <span class="hljs-string">&#x27;images/&#x27;</span> + filename)<br>            <span class="hljs-built_in">print</span>(filename + <span class="hljs-string">&#x27;  下载完成！&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    page_queue = Queue(<span class="hljs-number">100</span>)<br>    img_queue = Queue(<span class="hljs-number">500</span>)<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>        url = <span class="hljs-string">&quot;http://www.doutula.com/photo/list/?page=%d&quot;</span> % x<br>        <span class="hljs-comment"># url 添加到队列中</span><br>        page_queue.put(url)<br><br>    <span class="hljs-comment"># 判断是否创建images目录用于存放图片</span><br>    <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&#x27;images/&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>        os.makedirs(<span class="hljs-string">&#x27;images/&#x27;</span>)<br><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        t = Producer(page_queue, img_queue)<br>        t.start()<br><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        t = Consumer(page_queue, img_queue)<br>        t.start()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><h2 id="五：-selenium"><a href="#五：-selenium" class="headerlink" title="五： selenium"></a>五： selenium</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">import</span> xlwt<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.options <span class="hljs-keyword">import</span> Options<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><br>frontCar = <span class="hljs-string">&#x27;1234&#x27;</span><br>countNum = <span class="hljs-number">0</span><br><span class="hljs-comment"># 此处改为具体姓名信息</span><br>class_one = [<span class="hljs-string">&#x27;小马&#x27;</span>]<br>class_two = [<span class="hljs-string">&#x27;大飞&#x27;</span>, <span class="hljs-string">&#x27;小猪&#x27;</span>]<br>class_three = [<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>]<br>class_four = [<span class="hljs-string">&quot;张三&quot;</span>]<br><br><span class="hljs-comment"># 登录模块</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">DengLu</span>(<span class="hljs-params">driver</span>):</span><br>    <span class="hljs-comment"># 访问网页</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;即将打开登录界面&#x27;</span>)<br><br>    <span class="hljs-comment"># 平台登录界面 # 此处改为查验url</span><br>    driver.get(<span class="hljs-string">&quot;你的查验url&quot;</span>)<br><br>    <span class="hljs-comment"># 输入账号 # 改为你的账号</span><br>    driver.find_element_by_xpath(<span class="hljs-string">&#x27;/html/body/ngx-app/rt-login/div[2]/div[2]/input&#x27;</span>).send_keys(<br>        <span class="hljs-string">&quot;改为你的账号&quot;</span>)<br><br>    <span class="hljs-comment"># 输入密码</span><br>    driver.find_element_by_xpath(<span class="hljs-string">&#x27;/html/body/ngx-app/rt-login/div[2]/div[3]/input&#x27;</span>).send_keys(<span class="hljs-string">&quot;改为你的密码&quot;</span>)<br><br>    <span class="hljs-comment"># 手动输入验证码并登录</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请手动输入图片验证码并登录...&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;登录后请点开需要查验的第一辆...&quot;</span>)<br><br>    <span class="hljs-comment"># 输入拉取次数</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 如果输入是一个整数，开始拉取数据</span><br>            n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入拉取得数据个数：&#x27;</span>))<br>            <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">5000</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数字太大了,请重新输入:&quot;</span>)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输入的不是整数，请重新输入:&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> n<br><br><br><span class="hljs-comment"># 获取数据模块</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">StartGetDate</span>(<span class="hljs-params">driver, fp, sheet, i, n</span>):</span><br>    <span class="hljs-comment"># 全局变量frontCar</span><br>    <span class="hljs-keyword">global</span> frontCar, countNum<br><br>    <span class="hljs-comment"># 查验时间</span><br>    ChaYanFullTime = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;app-root&quot;]/app-main-layout/div/div/div/app-check-manage/app-check-manage-detial/div/app-ireport/div/div[2]/table/tbody/tr[7]/td[5]/span&#x27;</span>).text<br><br>    <span class="hljs-comment"># 牌</span><br>    chepai = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;app-root&quot;]/app-main-layout/div/div/div/app-check-manage/app-check-manage-detial/div/app-ireport/div/div[2]/table/tbody/tr[5]/td[3]/span&#x27;</span>).text<br><br>    localCar = ChaYanFullTime + chepai<br><br>    <span class="hljs-comment"># 如何当前和上一辆一致，则获取上一辆失败，再次点击</span><br>    <span class="hljs-keyword">while</span> frontCar == localCar:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 点击上一辆以供查看</span><br>            driver.find_element_by_xpath(<br>                <span class="hljs-string">&#x27;//*[@id=&quot;app-root&quot;]/app-main-layout/div/div/div/app-check-manage/app-check-manage-detial/div/div[2]/img[1]&#x27;</span>).click()<br>            <span class="hljs-comment"># 等待牌加载完成</span><br>            element = WebDriverWait(driver, <span class="hljs-number">60</span>).until(<br>                EC.presence_of_element_located((By.XPATH,<br>                                                <span class="hljs-string">&#x27;//*[@id=&quot;app-root&quot;]/app-main-layout/div/div/div/app-check-manage/app-check-manage-detial/div/app-ireport/div/div[2]/table/tbody/tr[5]/td[3]/span&#x27;</span>))<br>            )<br>            <span class="hljs-comment"># 等待时间加载完成</span><br>            element = WebDriverWait(driver, <span class="hljs-number">60</span>).until(<br>                EC.presence_of_element_located((By.XPATH,<br>                                                <span class="hljs-string">&#x27;//*[@id=&quot;app-root&quot;]/app-main-layout/div/div/div/app-check-manage/app-check-manage-detial/div/app-ireport/div/div[2]/table/tbody/tr[7]/td[5]/span&#x27;</span>))<br>            )<br>            <span class="hljs-comment"># 等待上一辆填充完成</span><br>            element = WebDriverWait(driver, <span class="hljs-number">60</span>).until(<br>                EC.presence_of_element_located((By.XPATH,<br>                                                <span class="hljs-string">&#x27;//*[@id=&quot;app-root&quot;]/app-main-layout&#x27;</span>))<br>            )<br>            time.sleep(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">except</span> find_element_by_class_xpath:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已经全部拉取完毕。&quot;</span>)<br>            <span class="hljs-comment"># driver.quit()</span><br>        <span class="hljs-keyword">finally</span>:<br>            time.sleep(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><br>        <span class="hljs-comment"># 查验时间</span><br>        ChaYanFullTime = driver.find_element_by_xpath(<br>            <span class="hljs-string">&#x27;//*[@id=&quot;app-root&quot;]/app-main-layout/div/div/div/app-check-manage/app-check-manage-detial/div/app-ireport/div/div[2]/table/tbody/tr[7]/td[5]/span&#x27;</span>).text<br><br>        <span class="hljs-comment"># 牌</span><br>        chepai = driver.find_element_by_xpath(<br>            <span class="hljs-string">&#x27;//*[@id=&quot;app-root&quot;]/app-main-layout/div/div/div/app-check-manage/app-check-manage-detial/div/app-ireport/div/div[2]/table/tbody/tr[5]/td[3]/span&#x27;</span>).text<br><br>        localCar = ChaYanFullTime + chepai<br><br>    <span class="hljs-comment"># 查验日期</span><br>    ChaYanDate = ChaYanFullTime.split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># 查验时间</span><br>    ChaYanTime = ChaYanFullTime.split(<span class="hljs-string">&#x27; &#x27;</span>)[-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-comment"># 辆类型</span><br>    cheliangleixing = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;app-root&quot;]/app-main-layout/div/div/div/app-check-manage/app-check-manage-detial/div/app-ireport/div/div[2]/table/tbody/tr[5]/td[5]/span&#x27;</span>).text<br><br>    <span class="hljs-comment"># 金额</span><br>    jinE = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;app-root&quot;]/app-main-layout/div/div/div/app-check-manage/app-check-manage-detial/div/app-ireport/div/div[2]/table/tbody/tr[8]/td[3]/span&#x27;</span>).text<br><br>    shouFeiYuan = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;app-root&quot;]/app-main-layout/div/div/div/app-check-manage/app-check-manage-detial/div/app-ireport/div/div[2]/table/tbody/tr[11]/td[7]/span&#x27;</span>).text<br><br>    <span class="hljs-comment"># 稽查员</span><br>    jiChaYuan = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;app-root&quot;]/app-main-layout/div/div/div/app-check-manage/app-check-manage-detial/div/app-ireport/div/div[2]/table/tbody/tr[12]/td[3]/span&#x27;</span>).text<br><br>    <span class="hljs-comment"># 班次</span><br>    <span class="hljs-keyword">if</span> jiChaYuan <span class="hljs-keyword">in</span> class_three:<br>        banci = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">elif</span> jiChaYuan <span class="hljs-keyword">in</span> class_one:<br>        banci = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> jiChaYuan <span class="hljs-keyword">in</span> class_two:<br>        banci = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">elif</span> jiChaYuan <span class="hljs-keyword">in</span> class_four:<br>        banci = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">else</span>:<br>        banci = <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment"># 查验结果</span><br>    chayanResult = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;app-root&quot;]/app-main-layout/div/div/div/app-check-manage/app-check-manage-detial/div/app-ireport/div/div[2]/table/tbody/tr[9]/td[3]/span&#x27;</span>).text<br><br>    <span class="hljs-comment"># 开始打印</span><br>    <span class="hljs-built_in">print</span>(i + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;/&quot;</span>, n, <span class="hljs-string">&#x27;:  &#x27;</span>, banci, ChaYanFullTime, shouFeiYuan, jiChaYuan, chepai, cheliangleixing, jinE, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>(ChaYanFullTime, banci, shouFeiYuan, jiChaYuan, chepai, cheliangleixing, jinE, end=<span class="hljs-string">&#x27; &#x27;</span>, file=fp)<br><br>    <span class="hljs-comment"># 写入不同得数据</span><br>    sheet.write(i + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, i + <span class="hljs-number">1</span>)<br>    sheet.write(i + <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, ChaYanDate)<br>    sheet.write(i + <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, ChaYanTime)<br>    sheet.write(i + <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, banci)<br>    <span class="hljs-comment"># sheet.write(i + 2, 4, daoKou)</span><br>    sheet.write(i + <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, shouFeiYuan)<br>    sheet.write(i + <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, jiChaYuan)<br>    sheet.write(i + <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, chepai)<br>    sheet.write(i + <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, cheliangleixing)<br><br>    <span class="hljs-comment"># 不合格则添加不符原因</span><br>    <span class="hljs-keyword">if</span> chayanResult == <span class="hljs-string">&#x27;不合格&#x27;</span>:<br>        <span class="hljs-comment"># 不合格原因</span><br>        buhege = driver.find_element_by_xpath(<br>            <span class="hljs-string">&#x27;/html/body/ngx-app/app-main-layout/div/div/div/app-check-manage/app-check-manage-detial/div/app-ireport/div/div[2]/table/tbody/tr[10]/td[3]/span&#x27;</span>).text<br>        <span class="hljs-built_in">print</span>(buhege, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-built_in">print</span>(buhege, end=<span class="hljs-string">&#x27; &#x27;</span>, file=fp)<br>        sheet.write(i + <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, buhege)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-built_in">print</span>(end=<span class="hljs-string">&#x27; &#x27;</span>, file=fp)<br>        sheet.write(i + <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br><br>    sheet.write(i + <span class="hljs-number">2</span>, <span class="hljs-number">10</span>, jinE)<br><br>    <span class="hljs-comment"># 换行</span><br>    <span class="hljs-built_in">print</span>(end=<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(end=<span class="hljs-string">&#x27;\n&#x27;</span>, file=fp)<br><br>    <span class="hljs-comment"># 后赋予前</span><br>    frontCar = localCar<br><br>    <span class="hljs-comment"># 统计打印数量</span><br>    countNum = countNum + <span class="hljs-number">1</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br><br>    <span class="hljs-comment"># 实例化一个启动参数对象,获取chrome的配置</span><br>    options = Options()<br><br>    <span class="hljs-comment"># 设置启动浏览器窗口大小</span><br>    options.add_argument(<span class="hljs-string">&#x27;--window-size=1366,768&#x27;</span>)<br><br>    <span class="hljs-comment"># 启动浏览器</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Launch browser&#x27;</span>)<br>    <span class="hljs-comment"># 获取driver对象</span><br>    driver = webdriver.Chrome(chrome_options=options)<br><br>    <span class="hljs-comment"># 删除cookie</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Delete cookies&#x27;</span>)<br>    driver.delete_all_cookies()<br><br>    <span class="hljs-comment"># 开始登录</span><br>    n = DengLu(driver)<br><br>    <span class="hljs-comment"># 统计开始时间</span><br>    startTime = time.time()<br><br>    <span class="hljs-comment"># 写入文件</span><br>    fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;temp.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-comment"># 写入excel</span><br>    workbook = xlwt.Workbook()<br>    sheet = workbook.add_sheet(<span class="hljs-string">&quot;sheet1&quot;</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        StartGetDate(driver, fp, sheet, i, n)<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">10</span> == <span class="hljs-number">9</span>:<br>            <span class="hljs-comment"># 每10辆保存一次</span><br>            workbook.save(<span class="hljs-string">&#x27;temp.xls&#x27;</span>)<br><br>    <span class="hljs-comment"># 关闭文件</span><br>    fp.close()<br>    <span class="hljs-comment"># 保存为temp.xls</span><br>    workbook.save(<span class="hljs-string">&#x27;temp.xls&#x27;</span>)<br><br>    <span class="hljs-comment"># 脚本运行成功,退出浏览器</span><br>    driver.quit()<br><br>    <span class="hljs-comment"># 统计结束时间</span><br>    endTime = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;共 %d 辆&quot;</span> % countNum)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;共花费时间： %d 秒&quot;</span> % (endTime - startTime))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1aJ411C7oM">Python爬虫教程</a></p><p><a href="https://selenium-python.readthedocs.io/">selenium官方docs</a></p><p><a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/">selenium-python中文文档</a></p><p><a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html">Scrapy中文文档</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理-读书笔记</title>
    <link href="/2020/05/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/05/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络原理-读书笔记</title>
    <link href="/2020/05/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/05/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="先学习计算机组成原理和操作系统…"><a href="#先学习计算机组成原理和操作系统…" class="headerlink" title="先学习计算机组成原理和操作系统…"></a>先学习计算机组成原理和操作系统…</h2>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openwrt的编译及其使用</title>
    <link href="/2020/05/02/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/openwrt%E7%9A%84%E7%BC%96%E8%AF%91%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/05/02/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/openwrt%E7%9A%84%E7%BC%96%E8%AF%91%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于coolsnowwolf大神源码编译,<a href="https://github.com/coolsnowwolf/lede">源码地址</a></p></blockquote><h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>自己编译需要linux知识、装系统的知识和能够全局的访问外网，而折腾openwrt需要部分计算机网络原理的知识。</p><p>如果不能自己编译，可以下载<a href="https://github.com/coolsnowwolf/lede/releases">Lean大编译好的固件</a></p><p>也可以下载<a href="https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh">eSir大佬基于L大源码编译的固件。</a></p><h2 id="二、-编译"><a href="#二、-编译" class="headerlink" title="二、 编译"></a>二、 编译</h2><h3 id="2-1-搭建编译环境"><a href="#2-1-搭建编译环境" class="headerlink" title="2.1 搭建编译环境"></a>2.1 搭建编译环境</h3><p>首先打开Lean大的GitHub项目地址，仔细阅读说明，其实很简单，直接复制黏贴命令行就行。</p><p>然后虚拟机安装<a href="http://releases.ubuntu.com/18.04/ubuntu-18.04.4-live-server-amd64.iso.torrent?_ga=2.101048392.870121867.1588423003-365844835.1588423003">Ubuntu 18 LTS x64 Server版本</a></p><p>然后ssh登录Ubuntu，后面命令需要全局外网来进行编译了。</p><p>输入如下命令行</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH"><span class="hljs-comment"># 命令行输入</span><br>sudo apt-get update<br><br><span class="hljs-comment"># 然后输入</span><br>sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf<br><br><span class="hljs-comment"># 下载好源代码</span><br>git <span class="hljs-built_in">clone</span> https://github.com/coolsnowwolf/lede<br><span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> lede<br><br>./scripts/feeds update -a<br><br>./scripts/feeds install -a<br><br>make menuconfig<br></code></pre></div></td></tr></table></figure><h3 id="2-2-定制配置"><a href="#2-2-定制配置" class="headerlink" title="2.2 定制配置"></a>2.2 定制配置</h3><p><code>make menuconfig</code>后，会有一个编译管理器，在里面可以选择型号、OP功能组件，需要用到方向键、回车键、空格键。方向键是移动光标，回车键是确认，空格键是选择（在选项框按下空格键，*号是编译进固件，M是编译但是不编译进固件）</p><p>下面的假如没有说明，就是默认选项。</p><p>①. Target System（Atheros AR7xxx…）<br>    选择CPU型号,看你的CPU架构，软路由或虚拟机一般是是X86<br>②. Subtarget(x86_64)<br>    选择多少位系统，默认64即可<br>③. Target Profile<br>    选择路由型号，默认即可<br>④. Target Images<br>    勾选上squashfs（new）即可，然后其他默认<br>⑤. Base system<br>    选择默认的dnsmasq-full即可,另外2个dnsmasq切记不要选。<br>⑥. Administration<br>    根据你的需求选择。<br>⑦. LuCI-&gt;Applications<br>    整个系统精华所在，非常重要，<a id="常用配置">常用配置如下</a></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH"><span class="hljs-comment"># 选择LuCI常用配置 添加常用插件应用：</span><br><span class="hljs-comment">#-----------------------------------------------------------------------------------------</span><br>LuCI ---&gt; Applications ---&gt; luci-app-accesscontrol  <span class="hljs-comment">#访问时间控制</span><br>LuCI ---&gt; Applications ---&gt; luci-app-adbyby-plus   <span class="hljs-comment">#广告屏蔽大师Plus +</span><br>LuCI ---&gt; Applications ---&gt; luci-app-aria2 <span class="hljs-comment"># Aria2下载工具</span><br>LuCI ---&gt; Applications ---&gt; luci-app-arpbind  <span class="hljs-comment">#IP/MAC绑定</span><br>LuCI ---&gt; Applications ---&gt; luci-app-autoreboot  <span class="hljs-comment">#支持计划重启</span><br>LuCI ---&gt; Applications ---&gt; luci-app-ddns   <span class="hljs-comment">#动态域名 DNS（集成阿里DDNS客户端）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-filetransfer  <span class="hljs-comment">#文件传输（可web安装ipk包）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-firewall   <span class="hljs-comment">#添加防火墙</span><br>LuCI ---&gt; Applications ---&gt; luci-app-hd-idle  <span class="hljs-comment">#硬盘休眠</span><br>LuCI ---&gt; Applications ---&gt; luci-app-flowoffload  <span class="hljs-comment">#Turbo ACC网络加速（集成FLOW,BBR,NAT,DNS...</span><br>LuCI ---&gt; Applications ---&gt; luci-app-sfe  <span class="hljs-comment">#Turbo ACC网络加速（flowoffload二选一）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-frpc   <span class="hljs-comment">#内网穿透 Frp</span><br>LuCI ---&gt; Applications ---&gt; luci-app-ipsec-virtual**d  <span class="hljs-comment">#virtual**服务器 IPSec</span><br>LuCI ---&gt; Applications ---&gt; luci-app-mwan3   <span class="hljs-comment">#MWAN3负载均衡</span><br>LuCI ---&gt; Applications ---&gt; luci-app-mwan3helper   <span class="hljs-comment">#MWAN3分流助手</span><br>LuCI ---&gt; Applications ---&gt; luci-app-nlbwmon   <span class="hljs-comment">#网络带宽监视器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-ramfree  <span class="hljs-comment">#释放内存</span><br>LuCI ---&gt; Applications ---&gt; luci-app-samba   <span class="hljs-comment">#网络共享（Samba）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-sqm  <span class="hljs-comment">#流量智能队列管理（QOS）</span><br><span class="hljs-comment">#-------------------------------------------------------------------------------------------</span><br>LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料-plus   <span class="hljs-comment">#乳酸菌饮料低调上网Plus+</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include s-s v贰瑞 Plugin  <span class="hljs-comment">#SS v贰瑞插件   *</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include v贰瑞  <span class="hljs-comment">#v贰瑞代理</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include Trojan  <span class="hljs-comment">#Trojan代理</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include red---socks2  <span class="hljs-comment">#red---socks2代理   *</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include Kcptun  <span class="hljs-comment">#Kcptun加速</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include 违禁软件 Server  <span class="hljs-comment">#乳酸菌饮料服务器</span><br><span class="hljs-comment">#-------------------------------------------------------------------------------------------</span><br>LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料server-python  <span class="hljs-comment">#软件的Python服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-syncdial  <span class="hljs-comment">#多拨虚拟网卡（原macvlan）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-unblockmusic  <span class="hljs-comment">#解锁网易云灰色歌曲3合1新版本</span><br>    UnblockNeteaseMusic Golang Version  <span class="hljs-comment">#Golang版本   *</span><br>    UnblockNeteaseMusic NodeJS Version  <span class="hljs-comment">#NodeJS版本   *</span><br>LuCI ---&gt; Applications ---&gt; luci-app-upnp   <span class="hljs-comment">#通用即插即用UPnP（端口自动转发）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-vlmcsd  <span class="hljs-comment">#KMS服务器激活win和office</span><br>LuCI ---&gt; Applications ---&gt; luci-app-vsftpd  <span class="hljs-comment">#FTP服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-wifischedule  <span class="hljs-comment">#WiFi 计划</span><br>LuCI ---&gt; Applications ---&gt; luci-app-wirele违禁软件egdb  <span class="hljs-comment">#WiFi无线</span><br>LuCI ---&gt; Applications ---&gt; luci-app-wol   <span class="hljs-comment">#WOL网络唤醒</span><br>LuCI ---&gt; Applications ---&gt; luci-app-wrtbwmon  <span class="hljs-comment">#实时流量监测</span><br>LuCI ---&gt; Applications ---&gt; luci-app-xlnetacc  <span class="hljs-comment">#迅雷快鸟</span><br>LuCI ---&gt; Applications ---&gt; luci-app-zerotier  <span class="hljs-comment">#ZeroTier内网穿透</span><br>Extra packages  ---&gt;  ipv6helper  <span class="hljs-comment">#支持 ipv6</span><br>Utilities  ---&gt;  open-vm-tools  <span class="hljs-comment">#打开适用于VMware的VM Tools</span><br></code></pre></div></td></tr></table></figure><p><a href="#2-4-全部LuCI-gt-Applications配置">查看详细LuCI配置</a></p><p>⑧. Network-&gt;Download Manager<br>    选择ariaNG<br>⑨. Utilities-&gt;Editors<br>    1. 选择默认编辑器-&gt;nano，习惯vim的选择vim<br>    2. 打开适用于VMware的VM Tools<br>        Utilities  —&gt;  open-vm-tools<br>⑩. 如果要支持 iPv6，勾选下面的选项：<br>    Extra packages  —&gt;  ipv6helper  （选定这个后下面几项自动选择了）<br>      Network  —&gt;  odhcp6c<br>      Network  —&gt;  odhcpd-ipv6only<br>      LuCI  —&gt;  Protocols  —&gt;  luci-proto-ipv6<br>      LuCI  —&gt;  Protocols  —&gt;  luci-proto-ppp</p><p>离开选择功能界面，EXIT-&gt;YES</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH"><span class="hljs-comment">#  下载dl库</span><br>make -j8 download V=s<br><br><span class="hljs-comment"># 进行编译，初次编译看配置，可能会4小时以上，以后会快一点</span><br><span class="hljs-comment"># （-j1 后面是线程数。第一次编译推荐用单线程）即可开始编译你要的固件了。</span><br>make -j1 V=s<br></code></pre></div></td></tr></table></figure><h3 id="2-3-功能不满意？二次编译"><a href="#2-3-功能不满意？二次编译" class="headerlink" title="2.3 功能不满意？二次编译"></a>2.3 功能不满意？二次编译</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH"><span class="hljs-comment"># 编译完成后清除之前的编译作业（使用这个命令前，记得把编译好的固件备份出来，不然会被删除掉，切记）</span><br>make clean<br><br><span class="hljs-comment"># 进入LEDE目录</span><br><span class="hljs-built_in">cd</span> lede<br><br><span class="hljs-comment"># 同步更新大雕源码</span><br>git pull<br><br><span class="hljs-comment"># 更新Feeds</span><br>./scripts/feeds update -a &amp;&amp; ./scripts/feeds install -a<br><br><span class="hljs-comment"># 清除编译配置和缓存</span><br>rm -rf ./tmp &amp;&amp; rm -rf .config<br><br><span class="hljs-comment"># 进入编译配置菜单</span><br>make menuconfig<br><br><span class="hljs-comment"># 开始编译 n=线程数+1，例如4线程的I5填-j5</span><br>make -jn V=99<br></code></pre></div></td></tr></table></figure><h3 id="2-4-全部LuCI-gt-Applications配置"><a href="#2-4-全部LuCI-gt-Applications配置" class="headerlink" title="2.4 全部LuCI-&gt;Applications配置"></a>2.4 全部LuCI-&gt;Applications配置</h3><p><a href="#常用配置">返回常用LuCI配置</a></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH"><span class="hljs-comment"># 以下是详细配置：               注：应用后面标记 “ * ” 为最近新添加</span><br><span class="hljs-comment"># -----------------------------------------------------------------------------------------</span><br>LuCI ---&gt; Applications ---&gt; luci-app-accesscontrol  <span class="hljs-comment">#访问时间控制</span><br>LuCI ---&gt; Applications ---&gt; luci-app-acme  <span class="hljs-comment">#ACME自动化证书管理环境</span><br>LuCI ---&gt; Applications ---&gt; luci-app-adblock   <span class="hljs-comment">#ADB广告过滤</span><br>LuCI ---&gt; Applications ---&gt; luci-app-adbyby-plus  <span class="hljs-comment">#广告屏蔽大师Plus +</span><br>LuCI ---&gt; Applications ---&gt; luci-app-adbyby   <span class="hljs-comment">#广告过滤大师（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-adkill   <span class="hljs-comment">#广告过滤（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-advanced-reboot  <span class="hljs-comment">#Linksys高级重启</span><br>LuCI ---&gt; Applications ---&gt; luci-app-ahcp  <span class="hljs-comment">#支持AHCPd</span><br>LuCI ---&gt; Applications ---&gt; luci-app-airplay2   <span class="hljs-comment">#AirPlay音乐推流(安卓+IOS)   *</span><br>LuCI ---&gt; Applications ---&gt; luci-app-aliddns   <span class="hljs-comment">#阿里DDNS客户端（已弃，集成至ddns）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-amule  <span class="hljs-comment">#aMule下载工具</span><br>LuCI ---&gt; Applications ---&gt; luci-app-aria2 <span class="hljs-comment"># Aria2下载工具</span><br>LuCI ---&gt; Applications ---&gt; luci-app-arpbind  <span class="hljs-comment">#IP/MAC绑定</span><br>LuCI ---&gt; Applications ---&gt; luci-app-asterisk  <span class="hljs-comment">#支持Asterisk电话服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-attendedsysupgrade  <span class="hljs-comment">#固件更新升级相关</span><br>LuCI ---&gt; Applications ---&gt; luci-app-autoreboot  <span class="hljs-comment">#支持计划重启</span><br>LuCI ---&gt; Applications ---&gt; luci-app-baidupcs-web  <span class="hljs-comment">#百度网盘管理</span><br>LuCI ---&gt; Applications ---&gt; luci-app-bcp38  <span class="hljs-comment">#BCP38网络入口过滤（不确定）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-bird1-ipv4  <span class="hljs-comment">#对Bird1-ipv4的支持</span><br>LuCI ---&gt; Applications ---&gt; luci-app-bird1-ipv6  <span class="hljs-comment">#对Bird1-ipv6的支持</span><br>LuCI ---&gt; Applications ---&gt; luci-app-bird4   <span class="hljs-comment">#Bird 4（未知）（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-bird6   <span class="hljs-comment">#Bird 6（未知）（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-bmx6  <span class="hljs-comment">#BMX6路由协议</span><br>LuCI ---&gt; Applications ---&gt; luci-app-bmx7  <span class="hljs-comment">#BMX7路由协议</span><br>LuCI ---&gt; Applications ---&gt; luci-app-caldav  <span class="hljs-comment">#联系人（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-cifs-mount   <span class="hljs-comment">#CIFS/SMB挂载设置   *</span><br>LuCI ---&gt; Applications ---&gt; luci-app-cifsd  <span class="hljs-comment">#CIFS/SMB网络共享   *</span><br>LuCI ---&gt; Applications ---&gt; luci-app-cjdns  <span class="hljs-comment">#加密IPV6网络相关</span><br>LuCI ---&gt; Applications ---&gt; luci-app-clamav  <span class="hljs-comment">#ClamAV杀毒软件</span><br>LuCI ---&gt; Applications ---&gt; luci-app-commands   <span class="hljs-comment">#Shell命令模块</span><br>LuCI ---&gt; Applications ---&gt; luci-app-cshark   <span class="hljs-comment">#CloudShark捕获工具</span><br>LuCI ---&gt; Applications ---&gt; luci-app-ddns   <span class="hljs-comment">#动态域名 DNS（集成阿里DDNS客户端）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-diag-core   <span class="hljs-comment">#core诊断工具</span><br>LuCI ---&gt; Applications ---&gt; luci-app-diskman   <span class="hljs-comment">#磁盘管理工具   *</span><br>    luci-app-diskman ---&gt; Include btrfs-progs   <span class="hljs-comment">#新型的写时复制 (COW)</span><br>    luci-app-diskman ---&gt; Include lsblk   <span class="hljs-comment">#lsblk命令 用于列出所有可用块设备的信息</span><br>    luci-app-diskman ---&gt; Include mdadm   <span class="hljs-comment">#mdadm命令 用于创建、管理、监控RAID设备的工具</span><br>    luci-app-diskman ---&gt; Include kmod-md-raid456   <span class="hljs-comment">#RAID 4,5,6 驱动程序模块</span><br>    luci-app-diskman ---&gt; Include kmod-md-linear   <span class="hljs-comment">#RAID 驱动程序模块</span><br>LuCI ---&gt; Applications ---&gt; luci-app-dnscrypt-proxy  <span class="hljs-comment">#DNSCrypt解决DNS污染</span><br>LuCI ---&gt; Applications ---&gt; luci-app-dnsforwarder  <span class="hljs-comment">#DNSForwarder防DNS污染</span><br>LuCI ---&gt; Applications ---&gt; luci-app-dnspod  <span class="hljs-comment">#DNSPod动态域名解析（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-dockerman  <span class="hljs-comment">#Docker容器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-dump1090  <span class="hljs-comment">#民航无线频率（不确定）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-dynapoint  <span class="hljs-comment">#DynaPoint（未知）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-e2guardian   <span class="hljs-comment">#Web内容过滤器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-familycloud   <span class="hljs-comment">#家庭云盘</span><br>LuCI ---&gt; Applications ---&gt; luci-app-filetransfer  <span class="hljs-comment">#文件传输（可web安装ipk包）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-firewall   <span class="hljs-comment">#添加防火墙</span><br>LuCI ---&gt; Applications ---&gt; luci-app-flowoffload  <span class="hljs-comment">#Turbo ACC网络加速（集成FLOW,BBR,NAT,DNS...</span><br>LuCI ---&gt; Applications ---&gt; luci-app-freifunk-diagnostics   <span class="hljs-comment">#freifunk组件 诊断（未知）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-freifunk-policyrouting  <span class="hljs-comment">#freifunk组件 策略路由（未知）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-freifunk-widgets  <span class="hljs-comment">#freifunk组件 索引（未知）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-frpc   <span class="hljs-comment">#内网穿透Frp客户端</span><br>LuCI ---&gt; Applications ---&gt; luci-app-frps   <span class="hljs-comment">#内网穿透Frp服务端   *</span><br>LuCI ---&gt; Applications ---&gt; luci-app-fwknopd  <span class="hljs-comment">#Firewall Knock Operator服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-guest-wifi   <span class="hljs-comment">#WiFi访客网络</span><br>LuCI ---&gt; Applications ---&gt; luci-app-gfwlist   <span class="hljs-comment">#GFW域名列表（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-haproxy-tcp   <span class="hljs-comment">#HAProxy负载均衡-TCP</span><br>LuCI ---&gt; Applications ---&gt; luci-app-hd-idle  <span class="hljs-comment">#硬盘休眠</span><br>LuCI ---&gt; Applications ---&gt; luci-app-hnet  <span class="hljs-comment">#Homenet Status家庭网络控制协议</span><br>LuCI ---&gt; Applications ---&gt; luci-app-ipsec-virtual**d  <span class="hljs-comment">#virtual**服务器 IPSec</span><br>LuCI ---&gt; Applications ---&gt; luci-app-kodexplorer  <span class="hljs-comment">#KOD可道云私人网盘</span><br>LuCI ---&gt; Applications ---&gt; luci-app-kooldns  <span class="hljs-comment">#virtual**服务器 ddns替代方案（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-koolproxy  <span class="hljs-comment">#KP去广告（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-lxc   <span class="hljs-comment">#LXC容器管理</span><br>LuCI ---&gt; Applications ---&gt; luci-app-meshwizard <span class="hljs-comment">#网络设置向导</span><br>LuCI ---&gt; Applications ---&gt; luci-app-minidlna   <span class="hljs-comment">#完全兼容DLNA / UPnP-AV客户端的服务器软件</span><br>LuCI ---&gt; Applications ---&gt; luci-app-mjpg-streamer   <span class="hljs-comment">#兼容Linux-UVC的摄像头程序</span><br>LuCI ---&gt; Applications ---&gt; luci-app-mtwifi  <span class="hljs-comment">#MTWiFi驱动的支持</span><br>LuCI ---&gt; Applications ---&gt; luci-app-mmc-over-gpio   <span class="hljs-comment">#添加SD卡操作界面（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-multiwan   <span class="hljs-comment">#多拨虚拟网卡（已弃，移至syncdial）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-mwan   <span class="hljs-comment">#MWAN负载均衡（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-music-remote-center   <span class="hljs-comment">#DAAP遥控音乐服务器   *</span><br>LuCI ---&gt; Applications ---&gt; luci-app-mwan3   <span class="hljs-comment">#MWAN3负载均衡</span><br>LuCI ---&gt; Applications ---&gt; luci-app-mwan3helper   <span class="hljs-comment">#MWAN3分流助手</span><br>LuCI ---&gt; Applications ---&gt; luci-app-n2n_v2   <span class="hljs-comment">#N2N内网穿透 N2N v2 virtual**服务</span><br>LuCI ---&gt; Applications ---&gt; luci-app-netdata  <span class="hljs-comment">#Netdata实时监控（图表）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-nfs   <span class="hljs-comment">#NFS网络共享   *</span><br>LuCI ---&gt; Applications ---&gt; luci-app-nft-qos  <span class="hljs-comment">#QOS流控 Nftables版</span><br>LuCI ---&gt; Applications ---&gt; luci-app-ngrokc  <span class="hljs-comment">#Ngrok 内网穿透（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-nlbwmon   <span class="hljs-comment">#网络带宽监视器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-noddos  <span class="hljs-comment">#NodDOS Clients 阻止DDoS攻击</span><br>LuCI ---&gt; Applications ---&gt; luci-app-ntpc   <span class="hljs-comment">#NTP时间同步服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-ocserv  <span class="hljs-comment">#OpenConnect virtual**服务</span><br>LuCI ---&gt; Applications ---&gt; luci-app-olsr  <span class="hljs-comment">#OLSR配置和状态模块</span><br>LuCI ---&gt; Applications ---&gt; luci-app-olsr-services  <span class="hljs-comment">#OLSR服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-olsr-viz   <span class="hljs-comment">#OLSR可视化</span><br>LuCI ---&gt; Applications ---&gt; luci-app-openvirtual**  <span class="hljs-comment">#Openvirtual**客户端</span><br>LuCI ---&gt; Applications ---&gt; luci-app-openvirtual**-server  <span class="hljs-comment">#易于使用的Openvirtual**服务器 Web-UI</span><br>LuCI ---&gt; Applications ---&gt; luci-app-oscam   <span class="hljs-comment">#OSCAM服务器（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-p910nd   <span class="hljs-comment">#打印服务器模块</span><br>LuCI ---&gt; Applications ---&gt; luci-app-pagekitec   <span class="hljs-comment">#Pagekite内网穿透客户端</span><br>LuCI ---&gt; Applications ---&gt; luci-app-polipo  <span class="hljs-comment">#Polipo代理(是一个小型且快速的网页缓存代理)</span><br>LuCI ---&gt; Applications ---&gt; luci-app-pppoe-relay  <span class="hljs-comment">#PPPoE NAT穿透 点对点协议（PPP）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-p p t p-server  <span class="hljs-comment">#virtual**服务器 p p t p（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-privoxy  <span class="hljs-comment">#Privoxy网络代理(带过滤无缓存)</span><br>LuCI ---&gt; Applications ---&gt; luci-app-qbittorrent  <span class="hljs-comment">#BT下载工具（qBittorrent）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-qos   <span class="hljs-comment">#流量服务质量(QoS)流控</span><br>LuCI ---&gt; Applications ---&gt; luci-app-radicale   <span class="hljs-comment">#CalDAV/CardDAV同步工具</span><br>LuCI ---&gt; Applications ---&gt; luci-app-ramfree  <span class="hljs-comment">#释放内存</span><br>LuCI ---&gt; Applications ---&gt; luci-app-rp-pppoe-server  <span class="hljs-comment">#Roaring Penguin PPPoE Server 服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-samba   <span class="hljs-comment">#网络共享（Samba）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-samba4   <span class="hljs-comment">#网络共享（Samba4）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-sfe  <span class="hljs-comment">#Turbo ACC网络加速（flowoffload二选一）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-s-s   <span class="hljs-comment">#SS低调上网（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-s-s-libes  <span class="hljs-comment">#SS-libev服务端</span><br>LuCI ---&gt; Applications ---&gt; luci-app-shairplay  <span class="hljs-comment">#支持AirPlay功能</span><br>LuCI ---&gt; Applications ---&gt; luci-app-siitwizard  <span class="hljs-comment">#SIIT配置向导  SIIT-Wizzard</span><br>LuCI ---&gt; Applications ---&gt; luci-app-simple-adblock  <span class="hljs-comment">#简单的广告拦截</span><br>LuCI ---&gt; Applications ---&gt; luci-app-smartdns  <span class="hljs-comment">#SmartDNS本地服务器（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-softethervirtual**  <span class="hljs-comment">#SoftEther virtual**服务器  NAT穿透</span><br>LuCI ---&gt; Applications ---&gt; luci-app-splash  <span class="hljs-comment">#Client-Splash是无线MESH网络的一个热点认证系统</span><br>LuCI ---&gt; Applications ---&gt; luci-app-sqm  <span class="hljs-comment">#流量智能队列管理（QOS）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-squid   <span class="hljs-comment">#Squid代理服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料-plus   <span class="hljs-comment">#乳酸菌饮料低调上网Plus+</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include s-s New Version  <span class="hljs-comment">#新SS代理（已弃）</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include s-s Simple-obfs Plugin  <span class="hljs-comment">#simple-obfs简单混淆工具（已弃）</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include s-s v贰瑞 Plugin  <span class="hljs-comment">#SS v贰瑞插件   *</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include v贰瑞  <span class="hljs-comment">#v贰瑞代理</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include Trojan  <span class="hljs-comment">#Trojan代理</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include red---socks2  <span class="hljs-comment">#red---socks2代理   *</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include Kcptun  <span class="hljs-comment">#Kcptun加速</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include 违禁软件 Server  <span class="hljs-comment">#乳酸菌饮料服务器</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include DNS2SOCKS  <span class="hljs-comment">#DNS服务器（已弃）</span><br>    luci-app-乳酸菌饮料-plus ---&gt; Include 违禁软件 Socks and Tunnel（已弃）<br>    luci-app-乳酸菌饮料-plus ---&gt; Include Socks Server  <span class="hljs-comment">#socks代理服务器（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料-pro  <span class="hljs-comment">#乳酸菌饮料-Pro（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料server-python  <span class="hljs-comment">#违禁软件 Python服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-statistics  <span class="hljs-comment">#流量监控工具</span><br>LuCI ---&gt; Applications ---&gt; luci-app-syncdial  <span class="hljs-comment">#多拨虚拟网卡（原macvlan）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-tinyproxy  <span class="hljs-comment">#Tinyproxy是 HTTP(S)代理服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-transmission   <span class="hljs-comment">#BT下载工具</span><br>LuCI ---&gt; Applications ---&gt; luci-app-travelmate  <span class="hljs-comment">#旅行路由器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-ttyd   <span class="hljs-comment">#网页终端命令行</span><br>LuCI ---&gt; Applications ---&gt; luci-app-udpxy  <span class="hljs-comment">#udpxy做组播服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-uhttpd  <span class="hljs-comment">#uHTTPd Web服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-unblockmusic  <span class="hljs-comment">#解锁网易云灰色歌曲3合1新版本</span><br>    UnblockNeteaseMusic Golang Version  <span class="hljs-comment">#Golang版本   *</span><br>    UnblockNeteaseMusic NodeJS Version  <span class="hljs-comment">#NodeJS版本   *</span><br>LuCI ---&gt; Applications ---&gt; luci-app-unblockneteasemusic-go  <span class="hljs-comment">#解除网易云音乐（合并）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-unblockneteasemusic-mini  <span class="hljs-comment">#解除网易云音乐（合并）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-unbound  <span class="hljs-comment">#Unbound DNS解析器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-upnp   <span class="hljs-comment">#通用即插即用UPnP（端口自动转发）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-usb-printer   <span class="hljs-comment">#USB 打印服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-v贰瑞-server   <span class="hljs-comment">#v贰瑞 服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-v贰瑞-pro  <span class="hljs-comment">#v贰瑞透明代理（已弃，集成乳酸菌饮料）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-verysync  <span class="hljs-comment">#微力同步</span><br>LuCI ---&gt; Applications ---&gt; luci-app-vlmcsd  <span class="hljs-comment">#KMS服务器设置</span><br>LuCI ---&gt; Applications ---&gt; luci-app-vnstat   <span class="hljs-comment">#vnStat网络监控（图表）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-virtual**bypass  <span class="hljs-comment">#virtual** BypassWebUI  绕过virtual**设置</span><br>LuCI ---&gt; Applications ---&gt; luci-app-vsftpd  <span class="hljs-comment">#FTP服务器</span><br>LuCI ---&gt; Applications ---&gt; luci-app-watchcat  <span class="hljs-comment">#断网检测功能与定时重启</span><br>LuCI ---&gt; Applications ---&gt; luci-app-webadmin  <span class="hljs-comment">#Web管理页面设置</span><br>LuCI ---&gt; Applications ---&gt; luci-app-webshell  <span class="hljs-comment">#网页命令行终端（已弃）</span><br>LuCI ---&gt; Applications ---&gt; luci-app-wifischedule  <span class="hljs-comment">#WiFi 计划</span><br>LuCI ---&gt; Applications ---&gt; luci-app-wireguard  <span class="hljs-comment">#virtual**服务器 WireGuard状态</span><br>LuCI ---&gt; Applications ---&gt; luci-app-wirele违禁软件egdb  <span class="hljs-comment">#WiFi无线</span><br>LuCI ---&gt; Applications ---&gt; luci-app-wol   <span class="hljs-comment">#WOL网络唤醒</span><br>LuCI ---&gt; Applications ---&gt; luci-app-wrtbwmon  <span class="hljs-comment">#实时流量监测</span><br>LuCI ---&gt; Applications ---&gt; luci-app-xlnetacc  <span class="hljs-comment">#迅雷快鸟</span><br>LuCI ---&gt; Applications ---&gt; luci-app-zerotier  <span class="hljs-comment">#ZeroTier内网穿透</span><br></code></pre></div></td></tr></table></figure><h3 id="2-5-自动编译"><a href="#2-5-自动编译" class="headerlink" title="2.5 自动编译"></a>2.5 自动编译</h3><p><a href="https://github.com/esirplayground/AutoBuild-OpenWrt">项目地址</a></p><p>自定义编译前需要在编译环境中运行<code>./scripts/diffconfig.sh &gt; diffconfig</code></p><p>然后把<code>/lede/diffconfig</code>里内容替换项目里面相应的.config文件内容。</p><p><a href="https://www.youtube.com/watch?v=9YO7nxNry-4">自动编译视频教程</a></p><h2 id="三、-使用"><a href="#三、-使用" class="headerlink" title="三、 使用"></a>三、 使用</h2><h3 id="3-1-初始设置"><a href="#3-1-初始设置" class="headerlink" title="3.1 初始设置"></a>3.1 初始设置</h3><p>winscp登录Ubuntu系统，在<code>/home/you_name/lede/bin/targets/x86/64/</code>下面</p><p><code>openwrt-x86-x64-combined-squashfs.img</code>就是我们需要的镜像文件了</p><p>把镜像文件下载下来，通过<code>winPE</code>的U盘安装烧录到路由器硬盘里，也可以烧写到U盘里，通过U盘启动</p><p>网线连接到路由器的Lan口，默认登陆IP <code>192.168.1.1</code>, 密码 <code>password</code>，进行配置(也可以通过PUTTY连接，端口22)</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH"><span class="hljs-comment"># 修改LAN口固定IP</span><br>vi /etc/config/network<br><span class="hljs-comment"># option ipaddr可以改为你想要管理路由的IP地址，比如&#x27;192.168.10.1&#x27;</span><br><br><span class="hljs-comment"># 重启网络</span><br>/etc/init.d/network restart<br></code></pre></div></td></tr></table></figure><p>网页地址栏输入<code>192.168.10.1</code>，进行配置。</p><p>接线配置可参考如下2张图片</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="家庭网络结构图"></p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%9B%BE.png" alt="家庭网络配置图"></p><h3 id="3-2-openwrt内部配置"><a href="#3-2-openwrt内部配置" class="headerlink" title="3.2 openwrt内部配置"></a>3.2 openwrt内部配置</h3><ol><li><p>网络 -&gt; 接口 -&gt; LAN口修改 -&gt; IPv4地址 修改为访问路由的地址 -&gt; 网关为路由ip地址 -&gt;<strong>DNS</strong>填写114.114.114.114,119.29.29.29,223.5.5.5和<strong>你的网络运营商提供的DNS</strong>(可以在命令行中用ping ip来查看哪个DNS访问的最快) -&gt; IPv6分配长度停用 -&gt; 旁路由关闭DHCP，主路由开启动态DHCP</p></li><li><p>Turbo ACC 网络加速设置 -&gt; 除了HWNAT硬件加速全选 -&gt; 上游 DNS 服务器(国内) -&gt; 查询填入你所在的网络运营商所提供的DNS<a href="https://ip.cn/dns.html">查询地址1</a>、<a href="https://cloud.tencent.com/developer/article/1352604">查询地址2</a></p></li><li><p>旁路由不用设置wan口，主路由自行设置wan口，不用ipv6，最好关闭ipv6.</p></li><li><p>某科学的超电磁炮设置，①客户端—&gt;分流服务器和主服务器相同，ip模式，DNS为默认8.8.4.4。②第二项自行添加。③高级设置开启自动切换。④服务端不设置不开启。⑤访问控制按需设置。</p></li></ol><h3 id="3-3-单网口openwrt小主机旁路由设置"><a href="#3-3-单网口openwrt小主机旁路由设置" class="headerlink" title="3.3 单网口openwrt小主机旁路由设置"></a>3.3 单网口openwrt小主机旁路由设置</h3><ol><li>登录主路由，设置LAN口IP地址,子网掩码为255.255.255.0 -&gt; DHCP服务关闭 -&gt; 保存。</li><li>网络 -&gt; 接口 -&gt; LAN修改 -&gt; 基本设置 -&gt; ip4地址 -&gt; 网关为主路由LAN口IP地址 -&gt; DNS服务器参考上面设置 -&gt; IP6停用 -&gt; 物理设置 -&gt; 桥接接口不要勾选 -&gt; 接口选择旁路由LAN口 -&gt;  -&gt; 下方 -&gt;  -&gt;  -&gt; DHCP服务器（启用即不要勾选忽略此接口） -&gt; DHCP服务器高级设置 -&gt; 勾选动态DHCP，强制 -&gt; IP6设置可以关掉 -&gt; 保存并应用。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/coolsnowwolf/lede">Lean大源码地址</a></p><p><a href="https://www.right.com.cn/forum/thread-3682029-1-1.html">OpenWrt 编译 LuCI -&gt; Applications 添加插件应用说明</a></p><p><a href="https://www.youtube.com/watch?v=ZMh-AvQV8n0&t=57s">How to build your own Openwrt firmware</a></p><p><a href="https://www.youtube.com/watch?v=zy16nR8MlX0">openwrt基础设置</a></p><p><a href="https://zhuanlan.zhihu.com/p/112484256">OpenWrt中，旁路由的设置与使用</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>openwrt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>openwrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker学习笔记</title>
    <link href="/2020/04/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/04/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://docs.docker.com/">docker官方文档</a></p></blockquote><h2 id="一、-安装及加速"><a href="#一、-安装及加速" class="headerlink" title="一、 安装及加速"></a>一、 安装及加速</h2><p>安装适用于ubuntu,其他系统请参考官方文档。基础配置及加速通用。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装（根据系统自行选择方式）</span><br>sudo apt install docker.io<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看版本</span><br>docker -v<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 配置docker镜像加速</span><br><span class="hljs-meta">#</span><span class="bash"> 阿里云镜像获取地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，登陆后，左侧菜单选中镜像加速器就可以看到你的专属地址了</span><br><span class="hljs-meta">#</span><span class="bash"> 按照页面的操作文档配置加速</span><br>sudo mkdir -p /etc/docker<br><br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://改为你的加速器地址.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br><br>sudo systemctl daemon-reload<br><br>sudo systemctl restart docker<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 下载 Docker 图形化界面 portainer</span><br>sudo docker pull portainer/portainer<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建 portainer 容器</span><br>sudo docker volume create portainer_data<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 运行 portainer(需要9000端口没有被占用，如被占用，自行更换第一个宿主机端口)</span><br>sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 浏览器输入ip:9000登录图形管理界面</span><br></code></pre></div></td></tr></table></figure><h2 id="二、-基础命令"><a href="#二、-基础命令" class="headerlink" title="二、 基础命令"></a>二、 基础命令</h2><h3 id="2-1-安装、启动及停止"><a href="#2-1-安装、启动及停止" class="headerlink" title="2.1 安装、启动及停止"></a>2.1 安装、启动及停止</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH"><span class="hljs-comment"># 安装命令：</span><br>apt-get install docker.io<br><br><span class="hljs-comment"># 关闭docker服务，命令：</span><br>service docker stop<br><br><span class="hljs-comment"># 启动docker 服务，命令：</span><br>service docker start<br></code></pre></div></td></tr></table></figure><h3 id="2-2-常用命令"><a href="#2-2-常用命令" class="headerlink" title="2.2 常用命令"></a>2.2 常用命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH"><span class="hljs-comment"># 查看docker版本，命令：</span><br>docker version<br><br><span class="hljs-comment"># 搜索可用docker镜像，命令：如搜索mysql</span><br>docker search mysql<br><br><span class="hljs-comment"># 下载容器镜像，命令：如拉取mysql镜像</span><br>docker pull mysql<br><br><span class="hljs-comment"># 查看docker镜像及镜像id，命令：</span><br>docker images<br><br><span class="hljs-comment"># 运行一个容器，命令：基于mysql镜像运行一个容器(需要3310端口没有被占用，如被占用，自行更换第一个宿主机端口)</span><br>docker run --name firstMysql -p 3310:3306 -e MYSQL\_ROOT\_PASSWORD=123456 -d mysql<br></code></pre></div></td></tr></table></figure><p><a href="#3-1-docker-run命令参数">跳转到docker run的命令参数详解</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SHELL"><span class="hljs-meta">#</span><span class="bash"> 查看在运行的容器，及容器id，命令：</span><br>docker ps<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看所有容器（包括未运行的容器）及容器id，命令:</span><br>docker ps -a<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 停止一个容器，命令：</span><br>docker stop 容器id<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除一个容器（正在运行的容器，必须先停止才能删除），命令：</span><br>docker rm 容器id<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除一个镜像（镜像下有容器，必须先删除容器，才能删除镜像），命令：</span><br>docker rmi 镜像id<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动所有容器，命令：</span><br>docker start $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 关闭所有容器，命令：</span><br>docker stop $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除所有容器，命令：</span><br>docker rm $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除所有镜像（先关闭所有的容器，再删除所有容器，才能删除所有镜像），命令：</span><br>docker rmi $(docker images | awk &#x27;&#123;print $3&#125;&#x27; |tail -n +2)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看镜像详细信息，命令：</span><br>docker inspect 镜像id<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 进入运行的容器修改相关参数</span><br>docker exec -it 容器名称 bash<br><span class="hljs-meta">#</span><span class="bash"> 其中bash为进入容器后执行的命令。</span><br><span class="hljs-meta">#</span><span class="bash"> 其中  -d :分离模式: 在后台运行</span><br><span class="hljs-meta">#</span><span class="bash">       -i :即使没有附加也保持STDIN 打开</span><br><span class="hljs-meta">#</span><span class="bash">       -t :分配一个伪终端</span><br><br></code></pre></div></td></tr></table></figure><h2 id="三、-进阶命令"><a href="#三、-进阶命令" class="headerlink" title="三、 进阶命令"></a>三、 进阶命令</h2><h3 id="3-1-docker-run命令参数"><a href="#3-1-docker-run命令参数" class="headerlink" title="3.1 docker run命令参数"></a>3.1 docker run命令参数</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH">Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br><br>-d, --detach=<span class="hljs-literal">false</span>     指定容器运行于前台还是后台，默认为<span class="hljs-literal">false</span><br>-i, --interactive=<span class="hljs-literal">false</span>    打开STDIN，用于控制台交互<br>-t, --tty=<span class="hljs-literal">false</span>            分配tty设备，该可以支持终端登录，默认为<span class="hljs-literal">false</span><br>-u, --user=<span class="hljs-string">&quot;&quot;</span>              指定容器的用户<br>-a, --attach=[]            登录容器（必须是以docker run -d启动的容器）  <br>-w, --workdir=<span class="hljs-string">&quot;&quot;</span>           指定容器的工作目录<br>-c, --cpu-shares=0         设置容器CPU权重，在CPU共享场景使用<br>-e, --env=[]               指定环境变量，容器中可以使用该环境变量<br>-m, --memory=<span class="hljs-string">&quot;&quot;</span>            指定容器的内存上限<br>-P, --publish-all=<span class="hljs-literal">false</span>    指定容器暴露的端口<br>-p, --publish=[]           指定容器暴露的端口<br>-h, --hostname=<span class="hljs-string">&quot;&quot;</span>          指定容器的主机名<br>-v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录<br>--volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录  <br>--cap-add=[]               添加权限，权限清单详见：http://linux.die.net/man/7/capabilities<br>--cap-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/7/capabilities<br>--cidfile=<span class="hljs-string">&quot;&quot;</span>               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法<br>--cpuset=<span class="hljs-string">&quot;&quot;</span>                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU<br>--device=[]                添加主机设备给容器，相当于设备直通<br>--dns=[]                   指定容器的dns服务器<br>--dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件<br>--entrypoint=<span class="hljs-string">&quot;&quot;</span>            覆盖image的入口点<br>--env-file=[]              指定环境变量文件，文件格式为每行一个环境变量<br>--expose=[]                指定容器暴露的端口，即修改镜像的暴露端口<br>--link=[]                  指定容器间的关联，使用其他容器的IP、env等信息<br>--lxc-conf=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用<br>--name=<span class="hljs-string">&quot;&quot;</span>                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字<br>--net=<span class="hljs-string">&quot;bridge&quot;</span>             容器网络设置:  <br>                              bridge 使用docker daemon指定的网桥<br>                              host    //容器使用主机的网络<br>                              container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源<br>                              none 容器使用自己的网络（类似--net=bridge），但是不进行配置<br>--privileged=<span class="hljs-literal">false</span>         指定容器是否为特权容器，特权容器拥有所有的capabilities<br>--restart=<span class="hljs-string">&quot;no&quot;</span>             指定容器停止后的重启策略:  <br>                              no：容器退出时不重启<br>                              on-failure：容器故障退出（返回值非零）时重启<br>                              always：容器退出时总是重启<br>--rm=<span class="hljs-literal">false</span>                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)<br>--sig-proxy=<span class="hljs-literal">true</span>           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理<br></code></pre></div></td></tr></table></figure><h3 id="3-2-进入docker容器及拷贝"><a href="#3-2-进入docker容器及拷贝" class="headerlink" title="3.2 进入docker容器及拷贝"></a>3.2 进入docker容器及拷贝</h3><p>一：如何进入docker容器？比较简答的方法如下：</p><ol><li>首先<code>docker ps</code>查看容器id；</li><li>假设容器id前5位是<code>faf2b</code>，执行<code>docker exec -it faf2b /bin/bash</code>，就进入了容器内部。</li></ol><p>二：如何向容器内拷贝文件？</p><ol><li>首先<code>docker ps</code>查看容器id；</li><li>假设容器id前5位是<code>faf2b</code>，执行<code>docker cp /root/拷贝的文件名 faf2b:/home/其余路径</code></li><li><code>docker exec -it faf2b /bin/bash</code>，进入容器查看文件是否拷贝成功。</li></ol><p>未完待续。。。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://odcn.top/2019/02/13/2529/">Docker run命令参数中文介绍</a></p><p><a href="https://www.youtube.com/watch?v=lb5wFaquqas">Play with Docker，second round，hands on</a></p><p><a href="https://www.youtube.com/redirect?event=video_description&v=lb5wFaquqas&redir_token=-EHPdTiyLT7PYyQ3D_AubsTWnFd8MTU4ODUwMTg2OUAxNTg4NDE1NDY5&q=https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh">eSirPG on googleDrive with play openwrt</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DNF搭建说明</title>
    <link href="/2020/04/21/games/DNF/DNF%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/04/21/games/DNF/DNF%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2756b17f8892306877064e5ce98b0889e71fedcf0e39a54291ab65b590e87394"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>games</category>
      
      <category>DNF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DNF</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>按键精灵语法</title>
    <link href="/2020/04/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/VB/%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5/%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5%E8%AF%AD%E6%B3%95/"/>
    <url>/2020/04/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/VB/%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5/%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>windows或者Android(需要root权限)下按键精灵有时候写一些简单的脚本还是挺好用的。没有最好的语言，只有最适合的工具。在此记录下常用的基本语法。</p><h2 id="一：句柄及后台运行"><a href="#一：句柄及后台运行" class="headerlink" title="一：句柄及后台运行"></a>一：句柄及后台运行</h2><p>句柄可以获取后台窗口的类名或者标题，以达到获取坐标或后台运行脚本的目的。<br><strong>后台只支持部分窗口，以实际测试为准。</strong></p><p>句柄的类名或者标题，可以用按键精灵自带的抓抓工具抓取。</p><figure class="highlight vb"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vb">//声明窗口句柄变量，窗口大小变量<br><span class="hljs-keyword">Dim</span> Hwnd, sRect<br>//声明数组<br><span class="hljs-keyword">Dim</span> Array<br><br>//Plugin.Window.Find()--命令功能-查找窗口类名或者标题<br>//下面这句是查找窗口类名(<span class="hljs-string">&quot;Notepad&quot;</span>)或者标题(<span class="hljs-number">0</span>),返回找到的句柄Hwnd<br>Hwnd = Plugin.Window.Find(<span class="hljs-string">&quot;Notepad&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>)<br><br>//调试输出句柄-功能-在调试窗口打印文字<br>TracePrint Hwnd<br><br>//该函数返回窗口大小<br>sRect = Plugin.Window.GetWindowRect(Hwnd)<br><br>//窗口大小转为数组，可以获得窗口左上角的坐标<br>//语法 Split(expression[, delimiter[, count[, start]]])<br>//字符串为sRect，分割方式‘|’<br>Array = Split(sRect, <span class="hljs-string">&quot;|&quot;</span>)<br><br>//左上角坐标的X,Y轴坐标<br>TracePrint Array(<span class="hljs-number">0</span>)<br>TracePrint Array(<span class="hljs-number">1</span>)<br><br>//下拉型自定义变量<br>//格式: UserVar 变量名=DropList&#123;选项<span class="hljs-number">0</span>:值<span class="hljs-number">0</span>|选项<span class="hljs-number">1</span>:值<span class="hljs-number">1</span>|选项<span class="hljs-number">2</span>:值<span class="hljs-number">2</span>&#125;=默认显示的选项编号 &#123;注释&#125;<br>//解释:这个命令预先设定多个变量值，用户可在基面通过下拉方式进行选择<br>//示例<br>UserVar Var1=DropList&#123;<span class="hljs-string">&quot;低于10%时补血&quot;</span>:<span class="hljs-number">0.1</span>|<span class="hljs-string">&quot;低于20%时补血&quot;</span>:<span class="hljs-number">0.2</span>|<span class="hljs-string">&quot;低于30%时补血&quot;</span>:<span class="hljs-number">0.3</span>&#125;=<span class="hljs-number">2</span> <span class="hljs-string">&quot;自动补血设置&quot;</span><br><br>//左键点击<span class="hljs-number">5</span>次<br>LeftClick <span class="hljs-number">5</span><br><br>//<span class="hljs-keyword">Function</span>函数<br><span class="hljs-keyword">Function</span> increase(x,y)<br>    <span class="hljs-keyword">If</span> v = <span class="hljs-number">1</span> <span class="hljs-keyword">Then</span><br>        //键盘输入enter<br>        KeyPress <span class="hljs-string">&quot;Enter&quot;</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">Else</span><br>        //鼠标移动到指定坐标<br>        MoveTo Array(<span class="hljs-number">0</span>)+<span class="hljs-number">406</span>, Array(<span class="hljs-number">1</span>)+<span class="hljs-number">342</span><br>    <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br>//调用函数或子程序<br><span class="hljs-keyword">call</span> Function_name<br><br>//LeftClick 左键单击<br>//命令功能 向后台窗口句柄送一个鼠标左键单击 (注意：只支持部分窗口，以实际测试为准。)<br><span class="hljs-keyword">Call</span> Plugin.Bkgnd.LeftClick(Hwnd, <span class="hljs-number">550</span>, <span class="hljs-number">262</span>)<br>//后台输入按键enter，<span class="hljs-number">13</span>是按键码，可以在按键精灵中与实际按键互相转换<br><span class="hljs-keyword">Call</span> Plugin.Bkgnd.KeyPress(Hwnd, <span class="hljs-number">13</span>)<br><br>//添加延迟，单位毫秒ms<br>Delay <span class="hljs-number">500</span><br><br>//<span class="hljs-keyword">For</span>循环<br><span class="hljs-keyword">For</span> i=<span class="hljs-number">0</span> <span class="hljs-keyword">To</span> <span class="hljs-number">5</span><br>    <span class="hljs-keyword">For</span> j=<span class="hljs-number">0</span> <span class="hljs-keyword">TO</span> <span class="hljs-number">7</span><br>        <span class="hljs-keyword">Call</span> increase(x, y)<br>        x = x + <span class="hljs-number">30</span><br>    <span class="hljs-keyword">Next</span><br>    x = <span class="hljs-number">488</span><br>    y = y + <span class="hljs-number">30</span><br><span class="hljs-keyword">Next</span><br></code></pre></div></td></tr></table></figure><h2 id="二：带GUI的脚本"><a href="#二：带GUI的脚本" class="headerlink" title="二：带GUI的脚本"></a>二：带GUI的脚本</h2><p>先要在界面画出窗体（form）及各种输入框，下拉框，标签，按钮等。。。</p><p>下面是QQ后台刷屏脚本，先画4个标签，4个输入框，1个下拉框，1个按钮</p><figure class="highlight vb"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VB">//事件：form是窗体，load是加载，定义下拉框属性<br><span class="hljs-keyword">Event</span> Form1.Load<br>    //窗体<span class="hljs-number">1</span>中的ComboBox1下拉框<span class="hljs-number">1</span>有是和否<span class="hljs-number">2</span>个选择<br>    Form1.ComboBox1.List = <span class="hljs-string">&quot;是|否&quot;</span><br>    //窗体下拉框初始选项<br>    Form1.ComboBox1.ListIndex = <span class="hljs-number">0</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Event</span><br><br>//定义窗体<span class="hljs-number">1</span>的按钮<span class="hljs-number">1</span>的点击触发事件<br><span class="hljs-keyword">Event</span> Form1.Button1.Click<br>    //窗体<span class="hljs-number">1</span>的输入框<span class="hljs-number">1</span>的文本赋予变量title<br>    title = Form1.InputBox1.<span class="hljs-keyword">Text</span><br>    //找到QQ窗口句柄<br>    Hwnd=Plugin.Window.Find(<span class="hljs-string">&quot;TXGuiFoundation&quot;</span>,title)<br>    t = <span class="hljs-number">1</span><br>    //窗体<span class="hljs-number">1</span>的输入框<span class="hljs-number">4</span>的文本转化为int赋予变量times<br>    times = Int(Form1.InputBox4.<span class="hljs-keyword">Text</span>)<br>    //数组真假赋予subfix<br>    subfix=Array(<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>)<br>    <span class="hljs-keyword">text</span> = Form1.InputBox2.<span class="hljs-keyword">Text</span><br>    rate = Form1.InputBox3.<span class="hljs-keyword">Text</span><br>    //<span class="hljs-keyword">while</span>循环<br>    <span class="hljs-keyword">While</span> t &lt;= times <span class="hljs-built_in">OR</span> times = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">If</span> subfix(Form1.ComboBox1.ListIndex) <span class="hljs-keyword">Then</span><br>            //后台发送文本加自增计数变量<br>            <span class="hljs-keyword">Call</span> Plugin.Bkgnd.SendString(Hwnd,<span class="hljs-keyword">text</span> &amp; t)<br>        <span class="hljs-keyword">Else</span><br>            //后台发送文本<span class="hljs-keyword">text</span><br>            <span class="hljs-keyword">Call</span> Plugin.Bkgnd.SendString(Hwnd,<span class="hljs-keyword">text</span>)<br>        <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br>        //输入enter<br>        <span class="hljs-keyword">Call</span> Plugin.Bkgnd.KeyPress(Hwnd, <span class="hljs-number">13</span>)<br>        t = t + <span class="hljs-number">1</span><br>        //发送事件间隔为变量rate<br>        Delay rate<br>    Wend<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Event</span><br></code></pre></div></td></tr></table></figure><h2 id="三：多线程"><a href="#三：多线程" class="headerlink" title="三：多线程"></a>三：多线程</h2><figure class="highlight vb"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VB">DimEnv T1<br>DimEnv T2<br><span class="hljs-keyword">Call</span> start_1<br><span class="hljs-keyword">Sub</span> start_1<br>    //线程<span class="hljs-number">1</span><br>    T1 = BeginThread(thread1)<br>    T2 = BeginThread(thread2)<br>    BeginThread <span class="hljs-keyword">Stop</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br><span class="hljs-keyword">Sub</span> thread1<br>    name_1 = <span class="hljs-string">&quot;测试1&quot;</span><br>    t_1 = <span class="hljs-number">0</span><br>    rate_1 = <span class="hljs-number">1000</span><br>    times_1 = <span class="hljs-number">100</span><br>    subfix_1=<span class="hljs-literal">true</span><br>    test_1 = <span class="hljs-string">&quot;测试&quot;</span><br>    //<span class="hljs-keyword">while</span>循环<br>    Hwnd_1 = Plugin.Window.Find(<span class="hljs-number">0</span>, name_1)<br>    //当输入t=-<span class="hljs-number">1</span>时则循环发送消息至按终止键为止<br>    <span class="hljs-keyword">While</span> t_1 &lt;= times_1 <span class="hljs-built_in">OR</span> times_1 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">If</span> subfix_1 <span class="hljs-keyword">Then</span><br>            //后台发送文本加自增计数变量<br>            <span class="hljs-keyword">Call</span> Plugin.Bkgnd.SendString(Hwnd_1,test_1 &amp; t_1)<br>        <span class="hljs-keyword">Else</span><br>            //后台发送文本test_1<br>            <span class="hljs-keyword">Call</span> Plugin.Bkgnd.SendString(Hwnd_1,test_1)<br>        <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br>        <span class="hljs-keyword">Call</span> Plugin.Bkgnd.KeyPress(Hwnd_1, <span class="hljs-number">13</span>)<br>        t_1 = t_1 + <span class="hljs-number">1</span><br>        //发送事件间隔为变量rate_1<br>        Delay rate_1<br>    Wend<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br><span class="hljs-keyword">Sub</span> thread2<br>    name_2 = <span class="hljs-string">&quot;测试2&quot;</span><br>    t_2 = <span class="hljs-number">0</span><br>    rate_2 = <span class="hljs-number">1000</span><br>    times_2 = <span class="hljs-number">100</span><br>    subfix_2=<span class="hljs-literal">true</span><br>    test_2 = <span class="hljs-string">&quot;测试&quot;</span><br>    //<span class="hljs-keyword">while</span>循环<br>    Hwnd_2 = Plugin.Window.Find(<span class="hljs-number">0</span>,name_2)<br>    <span class="hljs-keyword">While</span> t_2 &lt;= times_2 <span class="hljs-built_in">OR</span> times_2 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">If</span> subfix_2 <span class="hljs-keyword">Then</span><br>            //后台发送文本加自增计数变量<br>            <span class="hljs-keyword">Call</span> Plugin.Bkgnd.SendString(Hwnd_2,test_2 &amp; t_2)<br>        <span class="hljs-keyword">Else</span><br>            //后台发送文本test_2<br>            <span class="hljs-keyword">Call</span> Plugin.Bkgnd.SendString(Hwnd_2,test_2)<br>        <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br>        <span class="hljs-keyword">Call</span> Plugin.Bkgnd.KeyPress(Hwnd_2, <span class="hljs-number">13</span>)<br>        t_2 = t_2 + <span class="hljs-number">1</span><br>        //发送事件间隔为变量rate_2<br>        Delay rate_2<br>    Wend<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br><span class="hljs-keyword">Sub</span> <span class="hljs-keyword">stop</span><br>    s_1 = <span class="hljs-string">&quot;A&quot;</span><br>    s_2 = <span class="hljs-string">&quot;Z&quot;</span><br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">While</span> <span class="hljs-literal">True</span><br>        //监听按键<br>        s = Waitkey<br>        <span class="hljs-keyword">If</span> s = Asc(s_1) <span class="hljs-built_in">and</span> running  <span class="hljs-keyword">Then</span><br>            PauseThread T1<br>            running = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">ElseIf</span> s = Asc(s_1) <span class="hljs-built_in">and</span> <span class="hljs-built_in">not</span> running <span class="hljs-keyword">Then</span><br>            PauseThread T1<br>            running = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">ElseIf</span> s = Asc(s_2) <span class="hljs-keyword">Then</span><br>            StopThread T2<br>        <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br>    Wend<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br><br></code></pre></div></td></tr></table></figure><h2 id="四：一个简单的脚本示例"><a href="#四：一个简单的脚本示例" class="headerlink" title="四：一个简单的脚本示例"></a>四：一个简单的脚本示例</h2><figure class="highlight vb"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VB">//声明窗口句柄变量<br><span class="hljs-keyword">Dim</span> Hwnd, sRect<br><span class="hljs-keyword">Dim</span> Array<br>//下面这句是查找窗口类名(<span class="hljs-string">&quot;Notepad&quot;</span>)或者标题(<span class="hljs-number">0</span>),返回找到的句柄Hwnd<br>Hwnd = Plugin.Window.Find(<span class="hljs-string">&quot;DNF Taiwan&quot;</span>,<span class="hljs-string">&quot;DNF Taiwan&quot;</span>)<br>//调试输出<br>TracePrint Hwnd<br>//返回窗口大小<br>sRect = Plugin.Window.GetWindowRect(Hwnd)<br>//窗口大小转为数组<br>Array = Split(sRect, <span class="hljs-string">&quot;|&quot;</span>)<br>TracePrint Array(<span class="hljs-number">0</span>)<br>TracePrint Array(<span class="hljs-number">1</span>)<br><br>//功能选择<br>UserVar Var0 = DropList&#123;<span class="hljs-string">&quot;自动增幅&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>|<span class="hljs-string">&quot;娃娃机&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>|<span class="hljs-string">&quot;先娃娃机再增幅&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>|<span class="hljs-string">&quot;鼠标左键连点&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>|<span class="hljs-string">&quot;自动锻造&quot;</span>:<span class="hljs-string">&quot;5&quot;</span>&#125;=<span class="hljs-number">3</span> <span class="hljs-string">&quot;功能选择&quot;</span><br><br>//选择窗口，选择力量还是智力<br>UserVar Var1 = DropList&#123;<span class="hljs-string">&quot;增幅力量&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>|<span class="hljs-string">&quot;增幅智力&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>&#125;=<span class="hljs-number">0</span> <span class="hljs-string">&quot;选择增幅力量还是智力&quot;</span><br>//选择窗口，选择<span class="hljs-number">15</span>还是<span class="hljs-number">13</span>增幅券<br>UserVar Var2 = DropList&#123;<span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-number">13</span>|<span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-number">15</span>&#125;=<span class="hljs-number">1</span> <span class="hljs-string">&quot;选择13还是15增幅券&quot;</span><br>//设置鼠标点击延迟<br>UserVar Yanshi=<span class="hljs-number">50</span> <span class="hljs-string">&quot;两次点击的时间间隔（毫秒）&quot;</span><br><br>//强打增幅<span class="hljs-number">1</span>件装备<br><span class="hljs-keyword">Function</span> increase(x,y)<br>    //使用强打书<br>    KeyPress <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">1</span><br>    //延迟<br>    Delay <span class="hljs-number">200</span><br>    //点击力量增幅<br>    <span class="hljs-keyword">If</span> var1 = <span class="hljs-number">1</span> <span class="hljs-keyword">Then</span><br>        MoveTo Array(<span class="hljs-number">0</span>)+<span class="hljs-number">406</span>, Array(<span class="hljs-number">1</span>)+<span class="hljs-number">300</span><br>        LeftClick <span class="hljs-number">1</span><br>        //点击智力增幅<br>    <span class="hljs-keyword">Else</span><br>        MoveTo Array(<span class="hljs-number">0</span>)+<span class="hljs-number">406</span>, Array(<span class="hljs-number">1</span>)+<span class="hljs-number">342</span><br>        LeftClick <span class="hljs-number">1</span><br>    <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br>    Delay <span class="hljs-number">200</span><br>    //点击使用<br>    MoveTo Array(<span class="hljs-number">0</span>)+<span class="hljs-number">374</span>, Array(<span class="hljs-number">1</span>)+<span class="hljs-number">391</span><br>    LeftClick <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">200</span><br>    //点击第一格装备<br>    MoveTo Array(<span class="hljs-number">0</span>)+x, Array(<span class="hljs-number">1</span>)+y<br>    LeftClick <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">200</span><br>    //确定<br>    KeyPress <span class="hljs-string">&quot;Enter&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">200</span><br>    KeyPress <span class="hljs-string">&quot;Enter&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">200</span><br>    //使用增幅书<br>    KeyPress <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">200</span><br>    //点击第一格装备<br>    MoveTo Array(<span class="hljs-number">0</span>)+x, Array(<span class="hljs-number">1</span>)+y<br>    LeftClick <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">200</span><br>    //确定<br>    KeyPress <span class="hljs-string">&quot;Enter&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">200</span><br>    <span class="hljs-keyword">If</span> var2 = <span class="hljs-number">13</span> <span class="hljs-keyword">Then</span><br>        KeyPress <span class="hljs-string">&quot;Enter&quot;</span>, <span class="hljs-number">1</span><br>        Delay <span class="hljs-number">200</span><br>    <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br>    //一格装备完成<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br>//增幅装备栏<br><span class="hljs-keyword">Function</span> zengfu()<br>    //主程序<br>    x = <span class="hljs-number">488</span><br>    y = <span class="hljs-number">288</span><br>    <span class="hljs-keyword">For</span> i=<span class="hljs-number">0</span> <span class="hljs-keyword">To</span> <span class="hljs-number">5</span><br>        <span class="hljs-keyword">For</span> j=<span class="hljs-number">0</span> <span class="hljs-keyword">TO</span> <span class="hljs-number">7</span><br>            <span class="hljs-keyword">Call</span> increase(x, y)<br>            x = x + <span class="hljs-number">30</span><br>        <span class="hljs-keyword">Next</span><br>        x = <span class="hljs-number">488</span><br>        y = y + <span class="hljs-number">30</span><br>    <span class="hljs-keyword">Next</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br>//抽娃娃机<br><span class="hljs-keyword">Function</span> wawaji()<br>    <span class="hljs-keyword">For</span> temp=<span class="hljs-number">0</span> <span class="hljs-keyword">TO</span> <span class="hljs-number">46</span><br>        //投币<br>        MoveTo Array(<span class="hljs-number">0</span>)+<span class="hljs-number">152</span>, Array(<span class="hljs-number">1</span>)+<span class="hljs-number">402</span><br>        LeftClick <span class="hljs-number">1</span><br>        Delay <span class="hljs-number">200</span><br>        //确认<br>        MoveTo Array(<span class="hljs-number">0</span>)+<span class="hljs-number">358</span>, Array(<span class="hljs-number">1</span>)+<span class="hljs-number">345</span><br>        LeftClick <span class="hljs-number">1</span><br>        Delay <span class="hljs-number">200</span><br>        //停止<br>        MoveTo Array(<span class="hljs-number">0</span>)+<span class="hljs-number">200</span>, Array(<span class="hljs-number">1</span>)+<span class="hljs-number">402</span><br>        LeftClick <span class="hljs-number">1</span><br>        Delay <span class="hljs-number">5500</span><br>        //确定<br>        KeyPress <span class="hljs-string">&quot;Enter&quot;</span>, <span class="hljs-number">1</span><br>        Delay <span class="hljs-number">200</span><br>    <span class="hljs-keyword">Next</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br>//抽娃娃机和增幅装备栏<br><span class="hljs-keyword">Function</span> wawajiandzengfu()<br>    <span class="hljs-keyword">Call</span> wawaji()<br>    KeyPress <span class="hljs-string">&quot;Esc&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">200</span><br>    KeyPress <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">200</span><br>    <span class="hljs-keyword">Call</span> zengfu()<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br>//鼠标左击<br><span class="hljs-keyword">Function</span> autoLeftClick()<br>    <span class="hljs-keyword">While</span> <span class="hljs-literal">True</span><br>        //说明：按照一定频率反复点击鼠标左键<br>        //<span class="hljs-number">1</span>秒 = <span class="hljs-number">1000</span>毫秒<br>        LeftClick <span class="hljs-number">1</span><br>        Delay Yanshi<br>    Wend<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br><br>//自动锻造<br><span class="hljs-keyword">Function</span> autoDuanZao()<br>    SetSimMode <span class="hljs-number">0</span><br>    <span class="hljs-keyword">While</span> <span class="hljs-literal">True</span><br>        //拖拽第一格装备到锻造炉<br>        MoveTo Array(<span class="hljs-number">0</span>) + <span class="hljs-number">488</span>, Array(<span class="hljs-number">1</span>) + <span class="hljs-number">288</span><br>        LeftDownS <span class="hljs-number">1</span><br>        Delay <span class="hljs-number">200</span><br>        MoveTo Array(<span class="hljs-number">0</span>) + <span class="hljs-number">331</span>, Array(<span class="hljs-number">1</span>) + <span class="hljs-number">295</span><br>        Delay <span class="hljs-number">200</span><br>        LeftUpS <span class="hljs-number">1</span><br>        //确定<br>        MoveTo Array(<span class="hljs-number">0</span>) + <span class="hljs-number">336</span>, Array(<span class="hljs-number">1</span>) + <span class="hljs-number">375</span><br>        Delay <span class="hljs-number">200</span><br>        LeftClick <span class="hljs-number">1</span><br>        //延迟<br>        Delay <span class="hljs-number">6500</span><br>        //确定<br>        KeyPress <span class="hljs-string">&quot;Enter&quot;</span>, <span class="hljs-number">1</span><br>        Delay <span class="hljs-number">200</span><br>    Wend<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br>//主程序<br><span class="hljs-keyword">If</span> Var0 = <span class="hljs-number">1</span> <span class="hljs-keyword">Then</span><br>    <span class="hljs-keyword">Call</span> zengfu()<br><span class="hljs-keyword">ElseIf</span> Var0 = <span class="hljs-number">2</span> <span class="hljs-keyword">Then</span><br>    <span class="hljs-keyword">Call</span> wawaji()<br><span class="hljs-keyword">ElseIf</span> Var0 = <span class="hljs-number">3</span> <span class="hljs-keyword">Then</span><br>    <span class="hljs-keyword">Call</span> wawajiandzengfu()<br><span class="hljs-keyword">ElseIf</span> Var0 = <span class="hljs-number">4</span> <span class="hljs-keyword">Then</span><br>    <span class="hljs-keyword">Call</span> autoLeftClick()<br><span class="hljs-keyword">ElseIf</span>  Var0 = <span class="hljs-number">5</span> <span class="hljs-keyword">Then</span><br>    <span class="hljs-keyword">Call</span> autoDuanZao()<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br></code></pre></div></td></tr></table></figure><h2 id="五：大漠插件后台"><a href="#五：大漠插件后台" class="headerlink" title="五：大漠插件后台"></a>五：大漠插件后台</h2><p>先下载大漠插件(免费版即可)，将<code>dm.dll</code>和<code>RegDll.dll</code>两个文件添加到附件。</p><figure class="highlight vb"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vb">//解压大漠插件， 释放附件<br>//PutAttachment <span class="hljs-string">&quot;G:\code\C#\dmAll\dm&quot;</span>, <span class="hljs-string">&quot;RegDll.dll&quot;</span><br>//PutAttachment <span class="hljs-string">&quot;G:\code\C#\dmAll\dm&quot;</span>,<span class="hljs-string">&quot;dm.dll&quot;</span><br><br>//插件注册开始<br>//<span class="hljs-keyword">Call</span> Plugin.RegDll.Reg(<span class="hljs-string">&quot;G:\code\C#\dmAll\dm\dm.dll&quot;</span>)<br><br>//声明大漠对象<br><span class="hljs-keyword">Set</span> dm = createobject(<span class="hljs-string">&quot;dm.dmsoft&quot;</span>)<br><br>//判断插件是否成功<br>ver = dm.Ver()<br><span class="hljs-keyword">If</span> len(ver) = <span class="hljs-number">0</span> <span class="hljs-keyword">Then</span><br>//如果返回值<span class="hljs-string">&quot;ver&quot;</span>的长度为<span class="hljs-number">0</span>，则插件注册失败<br>    MessageBox <span class="hljs-string">&quot;插件注册失败,检查系统是否禁用了vbs脚本权限&quot;</span><br>    //结束脚本<br>    EndScript<br><span class="hljs-keyword">Else</span><br>    //否则,注册成功<br>    TracePrint <span class="hljs-string">&quot;插件注册成功&quot;</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br><br>//这里设置插件基本目录<br>dm.SetPath(<span class="hljs-string">&quot;G:\code\C#\dmAll\dm&quot;</span>)<br><br>//声明句柄变量<br><span class="hljs-keyword">Dim</span> Hwnd, sRect<br><br>//获取句柄<br>Hwnd = dm.FindWindow(<span class="hljs-string">&quot;SDL_app&quot;</span>, <span class="hljs-string">&quot;Jin Shu QunXia&quot;</span>)<br>TracePrint Hwnd<br><br>//声明后台模式<br>dm_ret = dm.BindWindow(Hwnd, <span class="hljs-string">&quot;normal&quot;</span>, <span class="hljs-string">&quot;normal&quot;</span>, <span class="hljs-string">&quot;windows&quot;</span>, <span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">Function</span> XiuLianDian()<br>    //KeyPress <span class="hljs-string">&quot;Space&quot;</span>, <span class="hljs-number">1</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">3600</span><br><br>    dm.KeyPress <span class="hljs-number">67</span><br>    //KeyPress <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">39</span><br>    //KeyPressS <span class="hljs-number">39</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    //KeyPress <span class="hljs-string">&quot;Space&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    //KeyPress <span class="hljs-string">&quot;Space&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">1600</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br><span class="hljs-keyword">Function</span> JiWuGong()<br>    //KeyPress <span class="hljs-string">&quot;Space&quot;</span>, <span class="hljs-number">1</span><br>    dm.KeyPress <span class="hljs-number">65</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">5</span>*<span class="hljs-number">1000</span><br>    dm.KeyPress <span class="hljs-number">17</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">17</span><br>    Delay <span class="hljs-number">50</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br><span class="hljs-keyword">For</span> i=<span class="hljs-number">1</span> <span class="hljs-keyword">To</span> <span class="hljs-number">125</span><br>    <span class="hljs-keyword">Call</span> XiuLianDian()<br>    //<span class="hljs-keyword">Call</span> JiWuGong()<br><span class="hljs-keyword">Next</span><br><br>//释放句柄<br>dm_ret = dm.UnBindWindow()<br><br>//脚本停止运行<br>EndScript<br></code></pre></div></td></tr></table></figure><h2 id="六：-图片识别"><a href="#六：-图片识别" class="headerlink" title="六： 图片识别"></a>六： 图片识别</h2><p>先用大漠综合工具把图片处理下，图片四个角的像素点染成同一种颜色(默认为背景色)，稍微把背景色染成相同的颜色，处理一下。</p><figure class="highlight vb"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VB"><span class="hljs-type">long</span> FindPic(x1, y1, x2, y2, pic_name, delta_color,sim, dir,intX, intY)<br><br>//参数定义:<br><br>//x1 整形数:区域的左上X坐标<br>//y1 整形数:区域的左上Y坐标<br>//x2 整形数:区域的右下X坐标<br>//y2 整形数:区域的右下Y坐标<br>//pic_name 字符串:图片名,可以是多个图片,比如<span class="hljs-string">&quot;test.bmp|test2.bmp|test3.bmp&quot;</span><br>//delta_color 字符串:颜色色偏比如<span class="hljs-string">&quot;203040&quot;</span> 表示RGB的色偏分别是<span class="hljs-number">20</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> (这里是<span class="hljs-number">16</span>进制表示)<br>//sim 双精度浮点数:相似度,取值范围<span class="hljs-number">0.1</span>-<span class="hljs-number">1.0</span><br>//dir 整形数:查找方向 <span class="hljs-number">0</span>: 从左到右,从上到下 <span class="hljs-number">1</span>: 从左到右,从下到上 <span class="hljs-number">2</span>: 从右到左,从上到下 <span class="hljs-number">3</span>: 从右到左, 从下到上<br>//intX 变参指针:返回图片左上角的X坐标<br>//intY 变参指针:返回图片左上角的Y坐标<br><br>//整形数:返回找到的图片的序号,从<span class="hljs-number">0</span>开始索引.如果没找到返回-<span class="hljs-number">1</span><br><br>//示例:<br>dm_ret = dm.FindPic(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2000</span>,<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;1.bmp|2.bmp|3.bmp&quot;</span>,<span class="hljs-string">&quot;000000&quot;</span>,<span class="hljs-number">0.9</span>,<span class="hljs-number">0</span>,intX,intY)<br><span class="hljs-keyword">If</span> intX &gt;= <span class="hljs-number">0</span> <span class="hljs-built_in">and</span> intY &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">Then</span><br>    MessageBox <span class="hljs-string">&quot;找到&quot;</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br></code></pre></div></td></tr></table></figure><p>简单源码示例：</p><figure class="highlight vb"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs VB"><span class="hljs-keyword">Dim</span> 索引, 次数, 索引<span class="hljs-number">2</span>, 第n列<br>索引 = Array(<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">12</span>,<span class="hljs-number">15</span>)  //设置下拉框选项<br>次数 = 索引(Form1.ComboBox1.ListIndex)//得到下拉框内的数值<br><br>索引<span class="hljs-number">2</span> = Array(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)  //设置下拉框选项<br>第n列 = 索引<span class="hljs-number">2</span>(Form1.ComboBox2.ListIndex)     //得到下拉框内的数值<br><br><span class="hljs-keyword">Event</span> Form1.Load   //界面初始值设置   <br>    Form1.ComboBox1.List=<span class="hljs-string">&quot;5|7|10|12|15&quot;</span>  <br>    Form1.ComboBox1.ListIndex = <span class="hljs-number">0</span><br>    Form1.ComboBox2.List=<span class="hljs-string">&quot;1|2|3|4|5|6|7&quot;</span>  <br>    Form1.ComboBox2.ListIndex = <span class="hljs-number">1</span>   <br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Event</span>  <br><br><br>//释放“附件”中自己添加的文件到C:\test_game目录中，释放Regdll.dll到plugin目录中<br>//PutAttachment <span class="hljs-string">&quot;C:\test_game&quot;</span>, <span class="hljs-string">&quot;*.*&quot;</span><br>//PutAttachment <span class="hljs-string">&quot;.\plugin&quot;</span>,<span class="hljs-string">&quot;RegDll.dll&quot;</span><br><br>//调用regdll.dll,注册大漠插件<br>//<span class="hljs-keyword">Call</span> Plugin.RegDll.Reg(<span class="hljs-string">&quot;C:\test_game\dm.dll&quot;</span>)<br><br>//创建一个大漠对象<br><span class="hljs-keyword">Set</span> dm = createobject(<span class="hljs-string">&quot;dm.dmsoft&quot;</span>)<br><br>//判断插件是否成功<br>ver = dm.Ver()<br><span class="hljs-keyword">If</span> len(ver) = <span class="hljs-number">0</span> <span class="hljs-keyword">Then</span> <br>//如果返回值<span class="hljs-string">&quot;ver&quot;</span>的长度为<span class="hljs-number">0</span>，则插件注册失败<br>    MessageBox <span class="hljs-string">&quot;插件注册失败,检查系统是否禁用了vbs脚本权限&quot;</span><br>    //结束脚本<br>    EndScript<br><span class="hljs-keyword">Else</span> <br>    //否则,注册成功<br>    TracePrint <span class="hljs-string">&quot;插件注册成功,当前使用的版本是:&quot;</span>&amp;ver<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br><br>//这里设置插件基本目录为注册的目录<br><span class="hljs-keyword">Call</span> dm.SetPath(dm.GetBasePath())<br><br>//声明句柄变量<br><span class="hljs-keyword">Dim</span> Hwnd, sRect<br><br>//获取句柄<br>Hwnd = dm.FindWindow(<span class="hljs-string">&quot;SDL_app&quot;</span>, <span class="hljs-string">&quot;Jin Shu QunXia&quot;</span>)<br>TracePrint Hwnd<br><br>//声明后台模式<br>dm_ret = dm.BindWindow(Hwnd, <span class="hljs-string">&quot;normal&quot;</span>, <span class="hljs-string">&quot;normal&quot;</span>, <span class="hljs-string">&quot;windows&quot;</span>, <span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">Function</span> XiuLianDian()<br>    //KeyPress <span class="hljs-string">&quot;Space&quot;</span>, <span class="hljs-number">1</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">3600</span><br><br>    dm.KeyPress <span class="hljs-number">67</span><br>    //KeyPress <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">39</span><br>    //KeyPressS <span class="hljs-number">39</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    //KeyPress <span class="hljs-string">&quot;Space&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">500</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    //KeyPress <span class="hljs-string">&quot;Space&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">1600</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br><span class="hljs-keyword">Function</span> QunXiu()<br>    //KeyPress <span class="hljs-string">&quot;Space&quot;</span>, <span class="hljs-number">1</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">100</span><br>    dm.KeyPress <span class="hljs-number">38</span><br>    Delay <span class="hljs-number">100</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">38</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    //进入战斗等待时间<br>    Delay <span class="hljs-number">3</span>*<span class="hljs-number">1000</span><br><br>    dm.KeyPress <span class="hljs-number">67</span><br>    //KeyPress <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">39</span><br>    //KeyPressS <span class="hljs-number">39</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    //KeyPress <span class="hljs-string">&quot;Space&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">1500</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    //KeyPress <span class="hljs-string">&quot;Space&quot;</span>, <span class="hljs-number">1</span><br>    Delay <span class="hljs-number">1600</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br><span class="hljs-keyword">Function</span> JiWuGong()<br>    //KeyPress <span class="hljs-string">&quot;Space&quot;</span>, <span class="hljs-number">1</span><br>    dm.KeyPress <span class="hljs-number">65</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">5</span>*<span class="hljs-number">1000</span><br>    dm.KeyPress <span class="hljs-number">17</span><br>    Delay <span class="hljs-number">50</span><br>    dm.KeyPress <span class="hljs-number">17</span><br>    Delay <span class="hljs-number">50</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br><span class="hljs-keyword">Function</span> WaBaoZang()<br>    dm.KeyPress <span class="hljs-number">17</span><br>    Delay <span class="hljs-number">200</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">400</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">400</span><br>    dm.KeyPress <span class="hljs-number">40</span><br>    Delay <span class="hljs-number">400</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">400</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">400</span><br>    dm.KeyPress <span class="hljs-number">40</span><br>    Delay <span class="hljs-number">400</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">400</span><br>    dm.KeyPress <span class="hljs-number">32</span><br>    Delay <span class="hljs-number">400</span><br>    <span class="hljs-keyword">For</span> 第n列-<span class="hljs-number">1</span><br>        dm.KeyPress <span class="hljs-number">39</span><br>        Delay <span class="hljs-number">100</span><br>    <span class="hljs-keyword">Next</span><br>    <span class="hljs-keyword">For</span> 次数-<span class="hljs-number">1</span><br>        dm.KeyPress <span class="hljs-number">32</span><br>        Delay <span class="hljs-number">400</span><br>        dm.KeyPress <span class="hljs-number">40</span><br>        Delay <span class="hljs-number">400</span><br>    <span class="hljs-keyword">Next</span><br>    //获取宝藏个数，若为<span class="hljs-number">0</span>则读档，若不为<span class="hljs-number">0</span>，则存档<br>    dm_ret = dm.FindPic(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1920</span>, <span class="hljs-number">1080</span>, <span class="hljs-string">&quot;Attachment:\0.bmp&quot;</span>, <span class="hljs-string">&quot;000000&quot;</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0</span>, intX, intY)<br>    <span class="hljs-keyword">If</span> intX &gt;= <span class="hljs-number">0</span> <span class="hljs-built_in">and</span> intY &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">Then</span> <br>        TracePrint <span class="hljs-string">&quot;没找到&quot;</span><br>        dm.KeyPress <span class="hljs-number">32</span><br>        Delay <span class="hljs-number">400</span><br>        <span class="hljs-keyword">For</span> i=<span class="hljs-number">1</span> <span class="hljs-keyword">To</span> <span class="hljs-number">20</span><br>            dm.Keypress <span class="hljs-number">17</span><br>            Delay <span class="hljs-number">100</span><br>        <span class="hljs-keyword">Next</span><br>        //读档<br>        dm.KeyPress <span class="hljs-number">76</span><br>        Delay <span class="hljs-number">400</span><br>        dm.KeyPress <span class="hljs-number">32</span><br>        Delay <span class="hljs-number">1000</span><br>    <span class="hljs-keyword">Else</span> <br>        TracePrint <span class="hljs-string">&quot;找到&quot;</span><br>        dm.KeyPress <span class="hljs-number">32</span><br>        Delay <span class="hljs-number">400</span><br>        <span class="hljs-keyword">For</span> i=<span class="hljs-number">1</span> <span class="hljs-keyword">To</span> <span class="hljs-number">20</span><br>            dm.Keypress <span class="hljs-number">17</span><br>            Delay <span class="hljs-number">100</span><br>        <span class="hljs-keyword">Next</span><br>        //存档<br>        dm.KeyPress <span class="hljs-number">83</span><br>        Delay <span class="hljs-number">400</span><br>        dm.KeyPress <span class="hljs-number">32</span><br>        Delay <span class="hljs-number">1000</span><br>    <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br><span class="hljs-keyword">For</span> i=<span class="hljs-number">1</span> <span class="hljs-keyword">To</span> <span class="hljs-number">125</span><br>    //<span class="hljs-keyword">Call</span> XiuLianDian()<br>    //<span class="hljs-keyword">Call</span> JiWuGong()<br>    //<span class="hljs-keyword">Call</span> QunXiu()<br>    <span class="hljs-keyword">Call</span> WaBaoZang()<br><span class="hljs-keyword">Next</span><br><br>//释放句柄<br>dm_ret = dm.UnBindWindow()<br><br>//脚本停止运行<br>EndScript<br></code></pre></div></td></tr></table></figure><h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><p><a href="https://space.bilibili.com/3196036/channel/detail?cid=100704">https://space.bilibili.com/3196036/channel/detail?cid=100704</a></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>VB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>按键精灵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL语言学习笔记</title>
    <link href="/2020/04/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/SQL%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/04/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/SQL%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、SQL简介"><a href="#一、SQL简介" class="headerlink" title="一、SQL简介"></a>一、SQL简介</h2><h3 id="1-1-SQL是什么"><a href="#1-1-SQL是什么" class="headerlink" title="1.1 SQL是什么"></a>1.1 SQL是什么</h3><blockquote><p>SQL是结构化查询语言，它是一种用于存储，操作和检索存储在关系数据库中的数据的计算机语言</p></blockquote><p>关系型数据库可以通过E-R图转换而来，E-R图中矩形是实体集，菱形是关系，椭圆是属性。</p><h3 id="1-2-SQL命令"><a href="#1-2-SQL命令" class="headerlink" title="1.2 SQL命令"></a>1.2 SQL命令</h3><h4 id="1）-DDL——数据定义语言"><a href="#1）-DDL——数据定义语言" class="headerlink" title="1） DDL——数据定义语言"></a>1） DDL——数据定义语言</h4><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>CREATE</td><td>用于在数据库中创建新表，表视图或其他对象</td></tr><tr><td>2</td><td>ALTER</td><td>用于修改现有数据库对象，例如：表</td></tr><tr><td>3</td><td>DROP</td><td>用于删除整个表，数据库中的表或其他对象的视图</td></tr></tbody></table><h4 id="2）-DML——数据操纵语言"><a href="#2）-DML——数据操纵语言" class="headerlink" title="2） DML——数据操纵语言"></a>2） DML——数据操纵语言</h4><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>SELECT</td><td>从一个或多个表中检索某些记录</td></tr><tr><td>2</td><td>INSERT</td><td>创建一条记录</td></tr><tr><td>3</td><td>UPDATE</td><td>用于修改(更新)记录</td></tr><tr><td>4</td><td>DELETE</td><td>删除记录</td></tr></tbody></table><h4 id="3）-DCL——数据控制语言"><a href="#3）-DCL——数据控制语言" class="headerlink" title="3） DCL——数据控制语言"></a>3） DCL——数据控制语言</h4><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GRANT</td><td>为用户提供权限</td></tr><tr><td>2</td><td>REVOKE</td><td>撤销用户授予的权限</td></tr></tbody></table><h3 id="1-3-数据的完整性"><a href="#1-3-数据的完整性" class="headerlink" title="1.3 数据的完整性"></a>1.3 数据的完整性</h3><p>每个RDBMS(关系型数据库)都存在以下类别的数据完整性</p><ul><li><p>实体完整性 - 表中没有重复的行。</p></li><li><p>域完整性 - 通过限制值的类型，格式或范围，为给定列强制执行有效条目。</p></li><li><p>参照完整性 - 其他记录使用(引用)导致这些行无法删除。</p></li><li><p>用户定义的完整性 - 实施一些不属于实体，域或参照完整性的特定业务规则</p></li></ul><h3 id="1-4-SQL约束"><a href="#1-4-SQL约束" class="headerlink" title="1.4 SQL约束"></a>1.4 SQL约束</h3><ul><li><p><a href="https://www.yiibai.com/sql/sql-not-null.html">NOT NULL约束</a> - 确保列不能具有NULL值。</p></li><li><p><a href="https://www.yiibai.com/sql/sql-default.html">默认值约束</a> - 在未指定列时为列提供默认值。</p></li><li><p><a href="https://www.yiibai.com/sql/sql-unique.html">唯一约束</a> - 确保列中的所有值都不同。</p></li><li><p><a href="https://www.yiibai.com/sql/sql-primary-key.html">主键</a> - 唯一标识数据库表中的每一行/记录。</p></li><li><p><a href="https://www.yiibai.com/sql/sql-foreign-key.html">外键</a> - 唯一标识任何其他数据库表中的行/记录。</p></li><li><p><a href="https://www.yiibai.com/sql/sql-check.html">检查约束</a> - CHECK约束确保列中的所有值都满足特定条件。</p></li><li><p><a href="https://www.yiibai.com/sql/sql-index.html">索引</a> - 用于非常快速地从数据库创建和检索数据。</p></li></ul><h3 id="1-5-数据库范式"><a href="#1-5-数据库范式" class="headerlink" title="1.5 数据库范式"></a>1.5 数据库范式</h3><h4 id="1）-第一范式（1NF）"><a href="#1）-第一范式（1NF）" class="headerlink" title="1） 第一范式（1NF）"></a>1） 第一范式（1NF）</h4><ol><li>在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。</li><li>所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式（1NF）中表的每一行只包含一个实例的信息。</li><li>简而言之，第一范式就是无重复的列。</li></ol><h4 id="2）-第二范式（2NF）"><a href="#2）-第二范式（2NF）" class="headerlink" title="2） 第二范式（2NF）"></a>2） 第二范式（2NF）</h4><ol><li>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被唯一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。这个唯一属性列被称为主关键字或主键、主码。</li><li>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。</li><li>简而言之，第二范式就是非主属性<strong>部分依赖于主关键字</strong>。</li></ol><h4 id="3）-第三范式（3NF）"><a href="#3）-第三范式（3NF）" class="headerlink" title="3） 第三范式（3NF）"></a>3） 第三范式（3NF）</h4><ol><li>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</li><li>例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。</li><li>简而言之，第三范式就是属性<strong>不依赖于其它非主属性</strong>。</li></ol><h3 id="1-6-运算符"><a href="#1-6-运算符" class="headerlink" title="1.6 运算符"></a>1.6 运算符</h3><p>假设变量a的值是：10，变量b的值是：20</p><h4 id="1）-SQL算术运算符"><a href="#1）-SQL算术运算符" class="headerlink" title="1） SQL算术运算符"></a>1） SQL算术运算符</h4><table><thead><tr><th>操作符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法，执行加法运算。</td><td>a + b = 30</td></tr><tr><td>-</td><td>减法，执行减法运算。</td><td>a + b = -10</td></tr><tr><td>*</td><td>除法，执行除法运算</td><td>a * b = 200</td></tr><tr><td>/</td><td>用左操作数除右手操作数</td><td>b / a = 2</td></tr><tr><td>%</td><td>用左手操作数除左手操作数并返回余数</td><td>b % a = 0</td></tr></tbody></table><h3 id="1-7-在MySQL中创建表的示例"><a href="#1-7-在MySQL中创建表的示例" class="headerlink" title="1.7 在MySQL中创建表的示例"></a>1.7 在MySQL中创建表的示例</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> database test <span class="hljs-keyword">default</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 <span class="hljs-keyword">collate</span> utf8_general_ci;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> regions (<br>    region_id <span class="hljs-type">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    region_name <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">25</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> countries (<br>    country_id <span class="hljs-type">CHAR</span> (<span class="hljs-number">2</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>    country_name <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    region_id <span class="hljs-type">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">FOREIGN</span> KEY (region_id) <span class="hljs-keyword">REFERENCES</span> regions (region_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE <span class="hljs-keyword">ON</span> UPDATE CASCADE<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> locations (<br>    location_id <span class="hljs-type">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    street_address <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    postal_code <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">12</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    city <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    state_province <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">25</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    country_id <span class="hljs-type">CHAR</span> (<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">FOREIGN</span> KEY (country_id) <span class="hljs-keyword">REFERENCES</span> countries (country_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE <span class="hljs-keyword">ON</span> UPDATE CASCADE<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> jobs (<br>    job_id <span class="hljs-type">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    job_title <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">35</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    min_salary <span class="hljs-type">DECIMAL</span> (<span class="hljs-number">8</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    max_salary <span class="hljs-type">DECIMAL</span> (<span class="hljs-number">8</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> departments (<br>    department_id <span class="hljs-type">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    department_name <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    location_id <span class="hljs-type">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">FOREIGN</span> KEY (location_id) <span class="hljs-keyword">REFERENCES</span> locations (location_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE <span class="hljs-keyword">ON</span> UPDATE CASCADE<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employees (<br>    employee_id <span class="hljs-type">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    first_name <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    last_name <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">25</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    email <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    phone_number <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    hire_date <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    job_id <span class="hljs-type">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    salary <span class="hljs-type">DECIMAL</span> (<span class="hljs-number">8</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    manager_id <span class="hljs-type">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    department_id <span class="hljs-type">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">FOREIGN</span> KEY (job_id) <span class="hljs-keyword">REFERENCES</span> jobs (job_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE <span class="hljs-keyword">ON</span> UPDATE CASCADE,<br>    <span class="hljs-keyword">FOREIGN</span> KEY (department_id) <span class="hljs-keyword">REFERENCES</span> departments (department_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE <span class="hljs-keyword">ON</span> UPDATE CASCADE,<br>    <span class="hljs-keyword">FOREIGN</span> KEY (manager_id) <span class="hljs-keyword">REFERENCES</span> employees (employee_id)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> dependents (<br>    dependent_id <span class="hljs-type">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    first_name <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    last_name <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    relationship <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">25</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    employee_id <span class="hljs-type">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">FOREIGN</span> KEY (employee_id) <span class="hljs-keyword">REFERENCES</span> employees (employee_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE <span class="hljs-keyword">ON</span> UPDATE CASCADE<br>);<br></code></pre></div></td></tr></table></figure><h2 id="二、SQL数据库操作"><a href="#二、SQL数据库操作" class="headerlink" title="二、SQL数据库操作"></a>二、SQL数据库操作</h2><p>语句<code>SHOW DATABASES;</code>用于查看可用数据库列表。</p><h3 id="2-0-帮助命令-help"><a href="#2-0-帮助命令-help" class="headerlink" title="2.0 帮助命令 help"></a>2.0 帮助命令 help</h3><p>如果不知道命令或者函数怎么用，可以使用help命令，mariaDB里面都会罗列出语法。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--示例1</span><br>help<br><br><span class="hljs-comment">/*示例2*/</span><br>help <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span><br>help <span class="hljs-keyword">join</span><br>help <span class="hljs-keyword">trigger</span><br>help <span class="hljs-keyword">grant</span><br></code></pre></div></td></tr></table></figure><h3 id="2-1-Create-Database-语句"><a href="#2-1-Create-Database-语句" class="headerlink" title="2.1 Create Database 语句"></a>2.1 Create Database 语句</h3><p>SQL中<code>CREATE DATABASE</code>语句用于创建新的SQL数据库：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">CREATE</span> &#123;DATABASE<span class="hljs-operator">|</span>SCHEMA&#125; [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] database_name<br>[<span class="hljs-keyword">DEFAULT</span>] <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> [<span class="hljs-operator">=</span>]charset_name<span class="hljs-operator">|</span>[<span class="hljs-keyword">DEFAULT</span>] <span class="hljs-keyword">COLLATE</span> [<span class="hljs-operator">=</span>]collation_name;<br><span class="hljs-comment">/*[]标记其内容为可选，|用于分隔跨括号中的选择项，DEFAULT用于指定默认值，关键字CHARACTER SET用于指定数据库字符集，关键字COLLATE用于指定字符集的校对规则*/</span><br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">CREATE</span> DATABASE testdb;<br><br><span class="hljs-comment">/*查看*/</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> databases;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> Database           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> information_schema <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql              <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> testdb             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></div></td></tr></table></figure><p><strong>数据库名称(<code>database_name</code>)在<code>RDBMS(关系数据库管理系统)</code>中必须是唯一的</strong></p><h3 id="2-2-Drop-Database-语句"><a href="#2-2-Drop-Database-语句" class="headerlink" title="2.2 Drop Database 语句"></a>2.2 Drop Database 语句</h3><p>SQL中<code>DROP DATABASE</code>语句用于删除SQL模式中已存在的数据库。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">DROP</span> DATABASE database_name;<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">DROP</span> DATABASE testdb;<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> databases;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> Database           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> information_schema <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql              <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></div></td></tr></table></figure><h3 id="2-3-Rename-Database-语句"><a href="#2-3-Rename-Database-语句" class="headerlink" title="2.3 Rename Database 语句"></a>2.3 Rename Database 语句</h3><p>当需要更改数据库的名称时，将使用SQL <code>RENAME DATABASE</code></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL">RENAME DATABASE old_db_name <span class="hljs-keyword">TO</span> new_db_name;<br><br><span class="hljs-keyword">ALTER</span> DATABASE old_name MODIFY NAME <span class="hljs-operator">=</span> new_name;<br></code></pre></div></td></tr></table></figure><h3 id="2-4-Use-语句"><a href="#2-4-Use-语句" class="headerlink" title="2.4 Use 语句"></a>2.4 Use 语句</h3><p>如果SQL模式中有多个数据库，那么在开始操作之前，需要选择一个将执行操作的数据库。</p><p>SQL中的<code>USE</code>语句用于选择SQL模式中的任何现有数据库。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br>USE database_name;<br><br><span class="hljs-comment">/*示例*/</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> DATABASES;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> Database           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> information_schema <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql              <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> test               <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br><br>USE test;<br></code></pre></div></td></tr></table></figure><h2 id="三、表操作"><a href="#三、表操作" class="headerlink" title="三、表操作"></a>三、表操作</h2><h3 id="3-1-创建表-Create-Table"><a href="#3-1-创建表-Create-Table" class="headerlink" title="3.1 创建表 Create Table"></a>3.1 创建表 Create Table</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> [TEMPORARY] <span class="hljs-keyword">TABLE</span> table_name(<br>     column_name_1 data_type <span class="hljs-keyword">default</span> <span class="hljs-keyword">value</span> column_constraint,<br>     column_name_2 data_type <span class="hljs-keyword">default</span> <span class="hljs-keyword">value</span> column_constraint,<br>     ...,<br>     table_constraint<br>);<br></code></pre></div></td></tr></table></figure><ul><li>由table_name指定的表名在数据库中必须是唯一的</li><li>每个列定义由列名，列的<a href="https://www.yiibai.com/sql/sql-data-types.html">数据类型</a>，默认值和一个或多个列约束组成</li><li>列的数据类型指定列可以存储的数据类型。 列的数据类型可以是数字，字符，日期等</li><li>列约束控制可以存储在列中的值的类型。 例如，<code>NOT NULL</code>约束确保列不包含<code>NULL</code>值。列可能有多个列约束。 例如，<code>users</code>表的<code>username</code>列可以同时具有<code>NOT NULL</code>和<a href="https://www.yiibai.com/sql/sql-unique-constraint.html"><code>UNIQUE</code>约束</a>。</li><li>如果约束包含多个列，则使用表约束。 例如，如果表的主键包含两列，则在这种情况下，必须使用<code>PRIMARY KEY</code><a href="https://www.yiibai.com/sql/sql-primary-key.html">主键约束</a>。</li><li><code>TEMPORARY</code>关键字用于创建临时表，当断开与数据库连接时，mysql会自动删除它们。</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> courses (<br>    course_id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    course_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">courses课程表有两列：course_id和course_name;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">course_id是课程表的主键列。 每个表都有一个且只有一个主键，用于唯一标识表中的每一行</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">course_id的数据类型是整数，由INT关键字表示。 此外，course_id列的值为AUTO_INCREMENT(自动递增)。表示表中数据类为整型的列设置自增属性，自动设置为“此前表中该列的最大值加1”，同时每个表智能有一个AUTO_INCREMENT列，并且它必须被索引。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">course_name存储课程名称。 其数据类型是最大长度为50的可变长度的字符串(VARCHAR)。NOT NULL约束确保course_name列中不存储NULL值。</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--示例</span><br><span class="hljs-comment">/*有了课程表。 要存储训练数据，请按如下方式创建名为training的新表。*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> trainings (<br>    employee_id <span class="hljs-type">INT</span>,<br>    course_id <span class="hljs-type">INT</span>,<br>    taken_date <span class="hljs-type">DATE</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (employee_id , course_id)<br>);<br><span class="hljs-comment">/*trainings表包含三列：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">employee_id列存储参加课程的员工的ID。</span><br><span class="hljs-comment">course_id列存储员工所采用的课程。</span><br><span class="hljs-comment">taken_date列存储员工参加课程的日期。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">因为trainings表的主键由两列组成：employee_id和course_id，所以必须使用PRIMARY KEY表约束。*/</span><br></code></pre></div></td></tr></table></figure><h3 id="3-2-更新表-Alter-Table"><a href="#3-2-更新表-Alter-Table" class="headerlink" title="3.2 更新表 Alter Table"></a>3.2 更新表 Alter Table</h3><p>使用SQL <code>ALTER TABLE</code>更改数据库中现有表的结构</p><p><code>ALTER TABLE</code>语句用于对现有表执行以下操作：</p><ul><li>使用<code>ADD</code>子句添加新列。</li><li>使用<code>CHANGE</code>子句用于修改表中的列名称和数据类型。</li><li>使用<code>ALTER SET DEFAULT</code>子句修改或删除表中指定列的默认值。</li><li>使用<code>MODIFY</code>子句修改列的属性，例如：约束，默认值等。</li><li>使用<code>DROP</code>子句删除列。</li></ul><h4 id="3-2-1-ALTER-TABLE-ADD列"><a href="#3-2-1-ALTER-TABLE-ADD列" class="headerlink" title="3.2.1 ALTER TABLE ADD列"></a>3.2.1 ALTER TABLE ADD列</h4><p>该子句的作用是向表中添加一个或多个新列</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br><span class="hljs-keyword">ADD</span> [<span class="hljs-keyword">COLUMN</span>] column_name data_type column_constraint [AFTER existing_column];<br><span class="hljs-comment">/*要向表中添加一个或多个列，需要执行以下步骤：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">首先，在ALTER TABLE子句之后指定要添加table_name，表示列所在的表。</span><br><span class="hljs-comment">其次，将新列定义放在ADD子句之后。 如果要在表中指定新列的顺序，可以使用可选子句AFTER existing_column。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 以下语句将一个名称为credit_hours的新列添加到courses表中。*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> courses <span class="hljs-keyword">ADD</span> credit_hours <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> courses<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> fee <span class="hljs-type">NUMERIC</span> (<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) AFTER course_name,<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> max_limit <span class="hljs-type">INT</span> AFTER course_name;<br></code></pre></div></td></tr></table></figure><h4 id="3-2-2-ALTER-TABLE-CHANGE列名称和属性"><a href="#3-2-2-ALTER-TABLE-CHANGE列名称和属性" class="headerlink" title="3.2.2 ALTER TABLE CHANGE列名称和属性"></a>3.2.2 ALTER TABLE CHANGE列名称和属性</h4><p><code>CHANGE</code>子句用于修改表中的列名称和数据类型。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br>CHANGE [<span class="hljs-keyword">COLUMN</span>] column_name new_column_name column_properties;<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students<br>CHANGE students_name names <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></div></td></tr></table></figure><h4 id="3-2-3-ALTER-TABLE-ALTER-SET-DEFAULT列"><a href="#3-2-3-ALTER-TABLE-ALTER-SET-DEFAULT列" class="headerlink" title="3.2.3 ALTER TABLE ALTER SET DEFAULT列"></a>3.2.3 ALTER TABLE ALTER SET DEFAULT列</h4><p><code>ALTER [COLUMN] SET</code>子句修改或删除表中指定列的默认值。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br><span class="hljs-keyword">ALTER</span> [<span class="hljs-keyword">COLUMN</span>] column_name <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;xxx&#x27;</span>;<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> customers<br><span class="hljs-keyword">ALTER</span> city <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;beijing&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h4 id="3-2-4-ALTERE-TABLE-MODIFY列"><a href="#3-2-4-ALTERE-TABLE-MODIFY列" class="headerlink" title="3.2.4 ALTERE TABLE MODIFY列"></a>3.2.4 ALTERE TABLE MODIFY列</h4><p>MODIFY子句用于更改现有列的数据类型。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br>MODIFY [<span class="hljs-keyword">COLUMN</span>] column_name column_properties;<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students MODIFY name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></div></td></tr></table></figure><h4 id="3-2-5-ALTER-TABLE-DROP列"><a href="#3-2-5-ALTER-TABLE-DROP列" class="headerlink" title="3.2.5 ALTER TABLE DROP列"></a>3.2.5 ALTER TABLE DROP列</h4><p>当表的列已过时且未被任何其他数据库对象(如触发器，视图，存储过程和存储过程)使用时，将其从表中删除，请使用以下语法：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br><span class="hljs-keyword">DROP</span> [<span class="hljs-keyword">COLUMN</span>] column_name,<br><span class="hljs-keyword">DROP</span> [<span class="hljs-keyword">COLUMN</span>] column_name,<br>...<br><br><span class="hljs-comment">/*示例1-删除一列*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> courses <span class="hljs-keyword">DROP</span> fee;<br><br><span class="hljs-comment">/*示例2-删除多列*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> courses<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> max_limit,<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> credit_hours;<br></code></pre></div></td></tr></table></figure><h4 id="3-2-6-ALTER-TABLE-RENAME-TO"><a href="#3-2-6-ALTER-TABLE-RENAME-TO" class="headerlink" title="3.2.6 ALTER TABLE RENAME TO"></a>3.2.6 ALTER TABLE RENAME TO</h4><p><code>RENAME TO</code>子句为表重新赋予一个表名。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br>RENAME [<span class="hljs-keyword">TO</span>] new_table_name;<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> classes<br>RENAME new_classes;<br></code></pre></div></td></tr></table></figure><h3 id="3-3-删除表-DROP-TABLE"><a href="#3-3-删除表-DROP-TABLE" class="headerlink" title="3.3 删除表 DROP TABLE"></a>3.3 删除表 DROP TABLE</h3><p>使用SQL <code>DROP TABLE</code>语句删除数据库中的一个或多个表</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">DROP</span> [TEMPORARY] <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] table_name [ RESTRICT <span class="hljs-operator">|</span> CASCADE ];<br><span class="hljs-comment">--为了防止删除不存在的表的错误，使用可选子句IF EXISTS。</span><br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> students;<br><br><span class="hljs-comment">/*删除多个表*/</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> table_name1,table_name2,...;<br></code></pre></div></td></tr></table></figure><ul><li><p>DROP TABLE语句永久删除表的数据和结构，某些数据库系统要求表中的记录必须为空时才能从数据库中删除。这有助于防止意外删除仍在使用的表。</p></li><li><p>要删除表中的所有数据，可以使用<a href="https://www.yiibai.com/sql/sql-delete.html">DELETE</a>或<a href="https://www.yiibai.com/sql/sql-truncate-table.html">TRUNCATE TABLE</a>语句。</p></li><li><p>要删除由另一个表的外键约束引用的表，必须在删除表之前禁用或删除外部约束。</p></li></ul><h3 id="3-4-快速删除表-TURNCATE-TABLE"><a href="#3-4-快速删除表-TURNCATE-TABLE" class="headerlink" title="3.4 快速删除表 TURNCATE TABLE"></a>3.4 快速删除表 TURNCATE TABLE</h3><p>使用SQL <code>TRUNCATE TABLE</code>语句高效，快速地删除表中的所有数据</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> table_name;     <span class="hljs-comment">/*快速删除大表中的所有行*/</span><br><br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> table_name1, table_name2, ...;<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> students, teachers;<br></code></pre></div></td></tr></table></figure><h3 id="3-5-重命名表-RENAME-TABLE"><a href="#3-5-重命名表-RENAME-TABLE" class="headerlink" title="3.5 重命名表 RENAME TABLE"></a>3.5 重命名表 RENAME TABLE</h3><p>SQL RENAME TABLE用于更改表的名称。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式1</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br>RENAME [<span class="hljs-keyword">TO</span>] new_table_name;<br><span class="hljs-comment">--语法格式2</span><br>RENAME <span class="hljs-keyword">TABLE</span> old_table_name <span class="hljs-keyword">To</span> new_table_name;<br><br><span class="hljs-comment">/*示例1*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Students<br>RENAME Student_bank;<br><span class="hljs-comment">/*示例2*/</span><br>RENAME <span class="hljs-keyword">TABLE</span> Student_bank <span class="hljs-keyword">TO</span> Students;<br></code></pre></div></td></tr></table></figure><h3 id="3-6-复制表-amp-临时表"><a href="#3-6-复制表-amp-临时表" class="headerlink" title="3.6 复制表&amp;临时表"></a>3.6 复制表&amp;临时表</h3><h4 id="1）-复制表"><a href="#1）-复制表" class="headerlink" title="1） 复制表"></a>1） 复制表</h4><p>如果要将SQL表复制到同一数据库中的另一个表中，可以使用<code>select</code>语句。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式1</span><br><span class="hljs-comment">--从一个表复制到另一个表的语法如下：</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">INTO</span> <span class="hljs-operator">&lt;</span>destination_table<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>source_table<span class="hljs-operator">&gt;</span><br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">INTO</span> my_table_2 <span class="hljs-keyword">FROM</span> my_table_1;<br></code></pre></div></td></tr></table></figure><blockquote><p>注意：<code>SELECT INTO</code>与<code>INSERT INTO</code>语句完全不同。</p></blockquote><h4 id="2）-临时表"><a href="#2）-临时表" class="headerlink" title="2） 临时表"></a>2） 临时表</h4><p>临时表可以在运行时创建，并且可以像普通表一样执行各种操作，这些临时表是在<code>tempdb</code>数据库中创建的。</p><p>根据行为和范围，有如下两种类型的临时表。1. 局部临时变量。 2. 全局临时变量。</p><p>① 局部临时变量</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例*/</span><br><span class="hljs-comment">/*局部临时变量表仅在当前连接时可用。 当用户与实例断开连接时，它会自动删除。 它以哈希(#)符号开头*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> #<span class="hljs-keyword">local</span> temp <span class="hljs-keyword">table</span> (  <br>    User_id <span class="hljs-type">int</span>,  <br>    User_name <span class="hljs-type">varchar</span> (<span class="hljs-number">50</span>),  <br>    User_address <span class="hljs-type">varchar</span> (<span class="hljs-number">150</span>)  <br>)<br></code></pre></div></td></tr></table></figure><p>② 全局临时变量</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">/*全局临时表名称以双哈希(##)开头。 创建此表后，它就像一个永久表。 它始终为所有用户准备好，并且在撤消总连接之前不会被删除。*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ##<span class="hljs-keyword">new</span> <span class="hljs-keyword">global</span> temp <span class="hljs-keyword">table</span> (  <br>    User_id <span class="hljs-type">int</span>,  <br>    User_name <span class="hljs-type">varchar</span> (<span class="hljs-number">50</span>),  <br>    User_address <span class="hljs-type">varchar</span> (<span class="hljs-number">150</span>)  <br></code></pre></div></td></tr></table></figure><h3 id="3-7-查看表"><a href="#3-7-查看表" class="headerlink" title="3.7 查看表"></a>3.7 查看表</h3><h4 id="3-7-1-查看表的名称"><a href="#3-7-1-查看表的名称" class="headerlink" title="3.7.1 查看表的名称"></a>3.7.1 查看表的名称</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SHOW</span> [<span class="hljs-keyword">FULL</span>] TABLES [&#123; <span class="hljs-keyword">FROM</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">IN</span> &#125; table_name]<br>[ <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;pattern&#x27;</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">WHERE</span> expr];<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">SHOW</span> TABLES;<br></code></pre></div></td></tr></table></figure><h4 id="3-7-2-显示表的结构"><a href="#3-7-2-显示表的结构" class="headerlink" title="3.7.2 显示表的结构"></a>3.7.2 显示表的结构</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SHOW</span> [<span class="hljs-keyword">FULL</span>] COLUMNS &#123;<span class="hljs-keyword">FROM</span><span class="hljs-operator">|</span><span class="hljs-keyword">IN</span>&#125; table_name [&#123; <span class="hljs-keyword">FROM</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">IN</span> &#125; table_name]<br>[ <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;pattern&#x27;</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">WHERE</span> expr];<br><span class="hljs-comment">--或者使用DESCRIBE语句</span><br>&#123;<span class="hljs-keyword">DESCRIBE</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DESC</span>&#125; table_name [ col_name <span class="hljs-operator">|</span> wild ];<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">DESC</span> test.classes;<br></code></pre></div></td></tr></table></figure><h2 id="四、数据操作语句"><a href="#四、数据操作语句" class="headerlink" title="四、数据操作语句"></a>四、数据操作语句</h2><h3 id="4-1-INSERT语句"><a href="#4-1-INSERT语句" class="headerlink" title="4.1 INSERT语句"></a>4.1 INSERT语句</h3><p>SQL提供了<code>INSERT</code>语句，用于将一行或多行插入表中。 <code>INSERT</code>语句用于：</p><ul><li>向表中插入一行</li><li>向表中插入多行</li><li>将行从一个表复制到另一个表中。</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式1</span><br><span class="hljs-comment">--插入一行,不建议省略column_name。</span><br><span class="hljs-keyword">INSERT</span> [<span class="hljs-keyword">INTO</span>] table_name [(col_name,...)]<br>&#123;<span class="hljs-keyword">VALUES</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">VALUE</span>&#125;<br>    (&#123;expr <span class="hljs-operator">|</span> <span class="hljs-keyword">DEFAULT</span>&#125;,...),(...),...;<br><span class="hljs-comment">--语法格式2</span><br><span class="hljs-keyword">INSERT</span> [<span class="hljs-keyword">INTO</span>] table_name<br>    <span class="hljs-keyword">SET</span> col_name<span class="hljs-operator">=</span>&#123;expr <span class="hljs-operator">|</span> <span class="hljs-keyword">DEFAULT</span>&#125;,...<br><span class="hljs-comment">/*&quot;expr&quot;，表示一个常量、变量或一个表达式，也可以是空值NULL</span><br><span class="hljs-comment">“DEFAULT”关键字，用于指定此列值为该列的默认值，前提是该列已经有默认值。*/</span><br><br><span class="hljs-comment">--从其他表复制行记录</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table1 (column1, column2,...)<br><span class="hljs-keyword">SELECT</span><br>    column1,<br>    column2<br><span class="hljs-keyword">FROM</span><br>    table2<br><span class="hljs-keyword">WHERE</span><br>    condition1;<br><br><span class="hljs-comment">/*示例1*/</span><br><span class="hljs-keyword">INSERT</span> students(class_id,name,gender,score)<br><span class="hljs-keyword">VALUE</span><br>    (<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;小绿&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;95&#x27;</span>);<br><br><span class="hljs-comment">/*示例2*/</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> temp(id,name)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;xiaoli&#x27;</span>),<br>    (<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;xiaowang&#x27;</span>),<br>    (<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;xiaojun&#x27;</span>);<br><br><span class="hljs-comment">/*示例3*/</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers<br>    <span class="hljs-keyword">SET</span> cust_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;李四&#x27;</span>,cust_address<span class="hljs-operator">=</span><span class="hljs-string">&#x27;武汉市&#x27;</span>,cust_sex<span class="hljs-operator">=</span><span class="hljs-keyword">DEFAULT</span>;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-Insert-Into-Select"><a href="#4-2-Insert-Into-Select" class="headerlink" title="4.2 Insert Into Select"></a>4.2 Insert Into Select</h3><p>在表中插入多行，可以将<code>Insert</code>与<code>select</code>语句结合使用。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> &quot;table 1&quot; (&quot;column1&quot;, &quot;column2&quot;,....)  <br><span class="hljs-keyword">SELECT</span> &quot;column3&quot;, &quot;column4&quot;,....  <br><span class="hljs-keyword">FROM</span> &quot;table2&quot;;<br></code></pre></div></td></tr></table></figure><p><code>INSERT INTO</code>语句还可以包含许多子句，如：<code>SELECT</code>，<code>GROUP BY</code>，<code>HAVING</code>以及<code>JOIN</code>和<code>ALIAS</code>。 因此，<code>insert into select</code>语句可能会有些复杂。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> store (store_name, sales, transaction_date)  <br><span class="hljs-keyword">SELECT</span> store_name, <span class="hljs-built_in">sum</span> (sales), transaction_date  <br><span class="hljs-keyword">FROM</span> sales_information  <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> store_name, transaction_date;<br></code></pre></div></td></tr></table></figure><h3 id="4-3-Update语句"><a href="#4-3-Update语句" class="headerlink" title="4.3 Update语句"></a>4.3 Update语句</h3><p>使用SQL <code>UPDATE</code>语句来修改表中现有行的数据</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br>UPDATE table_name<br>    <span class="hljs-keyword">SET</span> col_name1<span class="hljs-operator">=</span>&#123;expr1 <span class="hljs-operator">|</span> <span class="hljs-keyword">DEFAULT</span>&#125;<br>        [,col_name2 <span class="hljs-operator">=</span> &#123;expr2 <span class="hljs-operator">|</span> <span class="hljs-keyword">DEFAULT</span>&#125;] ...<br>    [<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>]<br>    [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ...]<br>    [LIMIT row_count];<br><span class="hljs-comment">/*在上面的语法中</span><br><span class="hljs-comment">首先，在SET子句中指定要修改的列。 SET子句中未列出的列的值不会被修改。</span><br><span class="hljs-comment">其次，指定WHERE子句中要更新的行。</span><br><span class="hljs-comment">第三，WHERE子句是可选的，如果省略它，表中的所有行都将受到影响。*/</span><br><br><span class="hljs-comment">/*示例1--小于3000的工资改为3000*/</span><br>UPDATE<br>    workers<br><span class="hljs-keyword">SET</span><br>    salary<span class="hljs-operator">=</span><span class="hljs-number">3000</span><br><span class="hljs-keyword">WHERE</span><br>    salary<span class="hljs-operator">&lt;</span><span class="hljs-number">3000</span>;<br><br><span class="hljs-comment">/*示例2--确保子项dependents的last_name始终与employees表中的last_name匹配*/</span><br>UPDATE dependents<br><span class="hljs-keyword">SET</span> last_name <span class="hljs-operator">=</span> (<br>    <span class="hljs-keyword">SELECT</span><br>        last_name<br>    <span class="hljs-keyword">FROM</span><br>        employees<br>    <span class="hljs-keyword">WHERE</span><br>        employee_id <span class="hljs-operator">=</span> dependents.employee_id<br>);<br><br><span class="hljs-comment">/*示例3--给工资超过100000美元的教师涨3%的工资，其余教师涨5%*/</span><br>UPDATE instructor<br><span class="hljs-keyword">SET</span> salary<span class="hljs-operator">=</span><span class="hljs-keyword">case</span><br>        <span class="hljs-keyword">when</span> salary<span class="hljs-operator">&lt;=</span><span class="hljs-number">100000</span> <span class="hljs-keyword">then</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">1.05</span><br>        <span class="hljs-keyword">else</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">1.03</span><br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure><h3 id="4-4-UPDATE-amp-JOIN语句"><a href="#4-4-UPDATE-amp-JOIN语句" class="headerlink" title="4.4 UPDATE &amp; JOIN语句"></a>4.4 UPDATE &amp; JOIN语句</h3><p><code>UPDATE JOIN</code>可使用一个表和连接条件来更新另一个表。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">/*假设有一个客户表，要用最新数据来更新客户表。可使用客户ID来连接在目标表和源表之间执行连接*/</span><br><br><span class="hljs-comment">/*语法格式*/</span><br>UPDATE customer_table  <br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>  <br>Customer_table  <br><span class="hljs-keyword">ON</span> customer_table.rel_cust_name <span class="hljs-operator">=</span> customer_table.cust_id  <br><span class="hljs-keyword">SET</span> customer_table.rel_cust_name <span class="hljs-operator">=</span> customer_table.cust_name<br><br><span class="hljs-comment">--示例</span><br><span class="hljs-comment">/*在table2中共有3行，假设想要将table1中的值更新为table2中column1为21和31行的值。</span><br><span class="hljs-comment">仅更新column2和column3的值。</span><br><span class="hljs-comment">最简单和最常用的方法是在update语句中使用join子句并在update语句中使用多个表。*/</span><br>UPDATE table1 t1<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span>  table2 t2<br><span class="hljs-keyword">ON</span> t1.column1 <span class="hljs-operator">=</span> t2.column1<br><span class="hljs-keyword">SET</span> t1.column2 <span class="hljs-operator">=</span> t2.column2,  <br>t1.column3 <span class="hljs-operator">=</span> t2.column3<br><span class="hljs-keyword">where</span> t1.column1 <span class="hljs-keyword">in</span>(<span class="hljs-number">21</span>,<span class="hljs-number">31</span>);<br></code></pre></div></td></tr></table></figure><h3 id="4-5-更新日期数据"><a href="#4-5-更新日期数据" class="headerlink" title="4.5 更新日期数据"></a>4.5 更新日期数据</h3><p>要在SQL中更新日期和时间字段，则应使用以下查询。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br>UPDATE <span class="hljs-keyword">table</span><br><span class="hljs-keyword">SET</span> Column_Name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;YYYY-MM-DD HH:MM:SS&#x27;</span>  <br><span class="hljs-keyword">WHERE</span> Id <span class="hljs-operator">=</span> <span class="hljs-keyword">value</span><br><br><span class="hljs-comment">/*示例*/</span><br>UPDATE table1<br><span class="hljs-keyword">SET</span> EndDate <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2019-03-16 00:00:00.000&#x27;</span><br><span class="hljs-keyword">WHERE</span> id <span class="hljs-keyword">in</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br></code></pre></div></td></tr></table></figure><h3 id="4-6-DELETE语句"><a href="#4-6-DELETE语句" class="headerlink" title="4.6 DELETE语句"></a>4.6 DELETE语句</h3><p>使用SQL <code>DELETE</code>语句删除表中的一行或多行。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span><br>    table_name<br><span class="hljs-keyword">WHERE</span><br>    <span class="hljs-keyword">condition</span>;<br><span class="hljs-comment">/*1. 提供要删除行的表名称(table_name)。</span><br><span class="hljs-comment">2. 在WHERE子句中指定条件以标识需要删除的行记录。 如果省略WHERE子句，则将删除表中的所有行记录。 因此，应始终谨慎使用DELETE语句。*/</span><br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> dependents<br><span class="hljs-keyword">WHERE</span><br>    employee_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">100</span> , <span class="hljs-number">101</span>, <span class="hljs-number">102</span>);<br></code></pre></div></td></tr></table></figure><h2 id="五、SQL查询语句"><a href="#五、SQL查询语句" class="headerlink" title="五、SQL查询语句"></a>五、SQL查询语句</h2><p>SQL查询语句的通用形式：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-operator">&lt;</span>[<span class="hljs-keyword">distinct</span>] c1，c2…<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">from</span> <span class="hljs-operator">&lt;</span>r1,……<span class="hljs-operator">&gt;</span><br>[<span class="hljs-keyword">where</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">condition</span><span class="hljs-operator">&gt;</span>]<br>[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-operator">&lt;</span>c1，c2.…<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">having</span> <span class="hljs-operator">&lt;</span>cond2<span class="hljs-operator">&gt;</span>]]<br>[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><span class="hljs-operator">&lt;</span>c1[<span class="hljs-keyword">desc</span>] ,[c2[<span class="hljs-keyword">desc</span><span class="hljs-operator">|</span><span class="hljs-keyword">asc</span>],…]<span class="hljs-operator">&gt;</span><br></code></pre></div></td></tr></table></figure><p>SQL查询语句执行顺序：<br><code>from→where→group（aggregate）→having→select→order by</code></p><h3 id="5-1-SELECT语句"><a href="#5-1-SELECT语句" class="headerlink" title="5.1 SELECT语句"></a>5.1 SELECT语句</h3><p>除了<code>SELECT</code>和<code>FROM</code>子句之外，<code>SELECT</code>语句还可以包含许多其他子句，例如 -</p><ul><li><a href="https://www.yiibai.com/sql/sql-where.html">WHERE</a> - 用于根据指定条件过滤数据</li><li><a href="https://www.yiibai.com/sql/sql-inner-join.html">JOIN</a> - 用于查询来自多个相关表的数据</li><li><a href="https://www.yiibai.com/sql/sql-group-by.html">GROUP BY</a> - 用于根据一列或多列对数据进行分组</li><li><a href="https://www.yiibai.com/sql/sql-having.html">HAVING</a> - 用于过滤分组</li><li><a href="https://www.yiibai.com/sql/sql-order-by.html">ORDER BY</a> - 用于对结果集进行排序</li><li><a href="https://www.yiibai.com/sql/sql-limit.html">LIMIT</a> - 用于限制返回的行</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span><br>    [<span class="hljs-keyword">ALL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DISTINCT</span> <span class="hljs-operator">|</span> DISTINCTROW ]<br>    select_expr [, select_expr ...]<br>    [<span class="hljs-keyword">FROM</span> table_references<br>    [<span class="hljs-keyword">WHERE</span> where_condition]<br>    [<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> &#123;col_name <span class="hljs-operator">|</span> expr <span class="hljs-operator">|</span> position&#125;<br>      [<span class="hljs-keyword">ASC</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DESC</span>], ... [<span class="hljs-keyword">WITH</span> <span class="hljs-keyword">ROLLUP</span>]]<br>    [<span class="hljs-keyword">HAVING</span> where_condition]<br>    [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> &#123;col_name <span class="hljs-operator">|</span> expr <span class="hljs-operator">|</span> position&#125;<br>      [<span class="hljs-keyword">ASC</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DESC</span>], ...]<br>    [LIMIT &#123;[<span class="hljs-keyword">offset</span>,] row_count <span class="hljs-operator">|</span> row_count <span class="hljs-keyword">OFFSET</span> <span class="hljs-keyword">offset</span>&#125;]<br><span class="hljs-comment">/*select子句的使用顺序需要按照上述语法格式依次输入执行。</span><br><span class="hljs-comment">[ALL | DISTINCT | DISTINCTROW ]指定是否返回结果集中的重复行，默认ALL。</span><br><span class="hljs-comment">SELECT * FROM table_name查询tbl_name中所有行列。*/</span><br><br><span class="hljs-comment">--语法格式附加</span><br><span class="hljs-comment">--替换查询结果集中的数据</span><br><span class="hljs-keyword">CASE</span><br><span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 表达式<span class="hljs-number">1</span><br>    <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 表达式<span class="hljs-number">2</span><br>    ...<br>    <span class="hljs-keyword">WHEN</span> 条件n <span class="hljs-keyword">THEN</span> 表达式n<br><span class="hljs-keyword">ELSE</span> 表达式n<br><span class="hljs-keyword">END</span><br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-comment">/*查询特定的列*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id,<br>    first_name,<br>    last_name,<br>    hire_date<br><span class="hljs-keyword">FROM</span><br>    employees;<br><br><span class="hljs-comment">/*示例2*/</span><br><span class="hljs-comment">/*以下查询使用FLOOR()，DATEDIFF()和CURRENT_DATE函数计算员工的服务年份。要计算服务年份，将DATEDIFF()函数的结果除以365。FLOOR()函数返回小于或等于数值表达式结果的最大整数。YoS是下面表达式的列别名。*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id,<br>    first_name,<br>    last_name,<br>    <span class="hljs-built_in">FLOOR</span>(DATEDIFF(NOW(), hire_date) <span class="hljs-operator">/</span> <span class="hljs-number">365</span>) <span class="hljs-keyword">AS</span> YoS<br><span class="hljs-keyword">FROM</span><br>    employees;<br><br><span class="hljs-comment">/*示例3--判断结果集中的值，如果值为M，输出男，否则为女，同时列名为性别*/</span><br><span class="hljs-keyword">SELECT</span> name,<br>    <span class="hljs-keyword">CASE</span><br>    <span class="hljs-keyword">WHEN</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;M&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;男&#x27;</span><br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;女&#x27;</span><br>    <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> 性别<br><span class="hljs-keyword">FROM</span> students;<br></code></pre></div></td></tr></table></figure><h3 id="5-2-ORDER-BY排序"><a href="#5-2-ORDER-BY排序" class="headerlink" title="5.2 ORDER BY排序"></a>5.2 ORDER BY排序</h3><p>SQL <code>ORDER BY</code>子句根据指定的标准按升序或降序对结果集进行排序。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span><br>    column1, column2<br><span class="hljs-keyword">FROM</span><br>    table_name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column1 <span class="hljs-keyword">ASC</span> ,  <span class="hljs-comment">--默认升序</span><br>         column2 <span class="hljs-keyword">DESC</span>;  <span class="hljs-comment">--降序</span><br><span class="hljs-comment">/*在此语法中，ORDER BY子句放在FROM子句之后。 如果SELECT语句包含WHERE子句，则ORDER BY子句必须放在WHERE子句之后。</span><br><span class="hljs-comment">要指定要排序的列以及排序顺序的类型：</span><br><span class="hljs-comment">1. 升序(使用：ASC表示，默认是升序)</span><br><span class="hljs-comment">2. 降序(使用：DESC表示)*/</span><br><br><span class="hljs-comment">/*示例--班级id按人数多少升序排列*/</span><br><span class="hljs-keyword">select</span> class_id,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> &quot;人数&quot;<br>    <span class="hljs-keyword">FROM</span> students<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> class_id<br>    <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">1</span><br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>);<br></code></pre></div></td></tr></table></figure><h3 id="5-3-DISTINCT运算符"><a href="#5-3-DISTINCT运算符" class="headerlink" title="5.3 DISTINCT运算符"></a>5.3 DISTINCT运算符</h3><p>使用SQL <code>DISTINCT</code>运算符从结果集中删除重复数据项。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>    column1,column2......<br><span class="hljs-keyword">FROM</span><br>    table1;<br><span class="hljs-comment">/*DISTINCT运算符将所有NULL值视为相同的值。因此在结果集中，DISTINCT运算符只保留一个NULL值，并从结果集中删除其它的NULL值。*/</span><br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>    job_id,<br>    salary<br><span class="hljs-keyword">FROM</span><br>    employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    job_id,<br>    salary <span class="hljs-keyword">DESC</span>;<br></code></pre></div></td></tr></table></figure><h3 id="5-4-LIMIT子句"><a href="#5-4-LIMIT子句" class="headerlink" title="5.4 LIMIT子句"></a>5.4 LIMIT子句</h3><p>使用SQL <code>LIMIT</code>子句来限制<code>SELECT</code>语句返回的行数。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-comment">--使用LIMIT和OFFSET子句。</span><br>LIMIT &#123;[<span class="hljs-keyword">offset</span>,] row_count <span class="hljs-operator">|</span> row_count <span class="hljs-keyword">OFFSET</span> <span class="hljs-keyword">offset</span>&#125;<br><span class="hljs-comment">/*1. row_count用于返回数据的行数。</span><br><span class="hljs-comment">2. OFFSET可选项，默认为0。用于指定返回数据的第一行在SELECT语句结果集中的偏移量，其必须是非负的整数常量。</span><br><span class="hljs-comment">3.row_count OFFSET offset:从第offset+1行开始，取row_count行。*/</span><br><br><span class="hljs-comment">/*示例--跳过三行并获取接下来的五行,即显示4-8行*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id, first_name, last_name<br><span class="hljs-keyword">FROM</span><br>    employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> first_name<br>LIMIT <span class="hljs-number">5</span> <span class="hljs-keyword">OFFSET</span> <span class="hljs-number">3</span>;<br><span class="hljs-comment">/*LIMIT 5 OFFSET 3等同于LIMIT 3,5*/</span><br><br><span class="hljs-comment">/*示例2-获取薪水最高的前5名*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id, first_name, last_name, salary<br><span class="hljs-keyword">FROM</span><br>    employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">5</span>;<br><br><span class="hljs-comment">/*示例3-获取薪水排名第三高的人名*/</span><br><span class="hljs-comment">/*通过嵌套子查询，先查出第三高的是多少salary，然后查name*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id, first_name, last_name, salary<br><span class="hljs-keyword">FROM</span><br>    employees<br><span class="hljs-keyword">WHERE</span><br>    salary <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>            salary<br>        <span class="hljs-keyword">FROM</span><br>            employees<br>        <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">DESC</span><br>        LIMIT <span class="hljs-number">2</span> , <span class="hljs-number">1</span>);<br></code></pre></div></td></tr></table></figure><h3 id="5-5-ALL-ANY-SOME语句"><a href="#5-5-ALL-ANY-SOME语句" class="headerlink" title="5.5 ALL,ANY,SOME语句"></a>5.5 ALL,ANY,SOME语句</h3><p>SQL <code>ALL</code>与集合中所有元素比较；<code>ANY</code>和<code>SOME</code>与集合中的某些元素比较。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--找出所有 工资至少比生物系一个教师的工资要高 的教师*/</span><br><span class="hljs-keyword">SELECT</span> name<br><span class="hljs-keyword">FROM</span> instructor<br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SOME</span>(<span class="hljs-keyword">SELECT</span> salary<br>                    <span class="hljs-keyword">FROM</span> instructor<br>                    <span class="hljs-keyword">WHERE</span> dept_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Biology&#x27;</span>);<br><br><span class="hljs-comment">/*示例2--找出平均工资最高的系*/</span><br><span class="hljs-keyword">SELECT</span> dept_name<br><span class="hljs-keyword">FROM</span> instructor<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_name<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">avg</span>(salary) <span class="hljs-operator">&gt;=</span> <span class="hljs-keyword">ALL</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">avg</span>(salary)<br>                          <span class="hljs-keyword">FROM</span> instructor<br>                          <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_name);<br></code></pre></div></td></tr></table></figure><h3 id="5-6-BETWEEN-IN-LIKE-NULL"><a href="#5-6-BETWEEN-IN-LIKE-NULL" class="headerlink" title="5.6 BETWEEN | IN | LIKE | NULL"></a>5.6 BETWEEN | IN | LIKE | NULL</h3><h4 id="5-6-1-BETWEEN"><a href="#5-6-1-BETWEEN" class="headerlink" title="5.6.1 BETWEEN"></a>5.6.1 BETWEEN</h4><p>SQL <code>BETWEEN</code>运算符选择指定范围内的值。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br>expression <span class="hljs-keyword">BETWEEN</span> low <span class="hljs-keyword">AND</span> high;<br>expression <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> low <span class="hljs-keyword">AND</span> high;<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id, first_name, last_name, hire_date<br><span class="hljs-keyword">FROM</span><br>    employees<br><span class="hljs-keyword">WHERE</span><br>    hire_date <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">&#x27;1999-01-01&#x27;</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">&#x27;2000-12-31&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> hire_date;<br><br><span class="hljs-comment">/*1. BETWEEN运算符需要低值和高值。如果低值大于高值，将得到一个空的结果集。</span><br><span class="hljs-comment">2. 2000-12-31默认为2000-12-31  00:00:00.000000*/</span><br></code></pre></div></td></tr></table></figure><h4 id="5-6-2-IN"><a href="#5-6-2-IN" class="headerlink" title="5.6.2 IN"></a>5.6.2 IN</h4><p>SQL <code>IN</code>运算符将列中的值与括号内的一组值进行比较。<br>要比较连续的值可用<code>LIMIT</code>，比如5-100。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br>expression <span class="hljs-keyword">IN</span> (value1,value2,...)<br>expression <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (value1, value2,...)<br><br><span class="hljs-comment">/*示例--查找工作ID不是8,9或10的所有员工*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id, first_name, last_name, job_id<br><span class="hljs-keyword">FROM</span><br>    employees<br><span class="hljs-keyword">WHERE</span><br>    job_id <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    job_id;<br></code></pre></div></td></tr></table></figure><h4 id="5-6-3-LIKE"><a href="#5-6-3-LIKE" class="headerlink" title="5.6.3 LIKE"></a>5.6.3 LIKE</h4><p>SQL <code>LIKE</code>运算符来测试表达式是否与模式匹配。</p><p>要构造模式，请使用两个SQL通配符：</p><ul><li><code>%</code> 百分号匹配零个，一个或多个字符。</li><li><code>_</code> 下划线符号匹配单个字符</li></ul><p>下表说明了一些模式及其含义：</p><table><thead><tr><th>模式</th><th>含义</th></tr></thead><tbody><tr><td>LIKE ‘Yii%’</td><td>匹配以Yii开始的字符串</td></tr><tr><td>LIKE ‘%su’</td><td>匹配以su结尾的字符串</td></tr><tr><td>LIKE ‘%ch%</td><td>匹配包含ch的字符串</td></tr><tr><td>LIKE ‘Luc_’</td><td>以Luc开始，后面只有一个字符，例如：Lucy，LucC等</td></tr><tr><td>LIKE ‘_cy’</td><td>以cy结尾，前面只有一个字符，例如：Lcy，ucy等</td></tr><tr><td>LIKE ‘%yiiBai_’</td><td>包含yiiBai，以任意数量的字符开头，最多以一个字符结尾。</td></tr><tr><td>LIKE ‘_yiiBai%’</td><td>包含yiiBai，最多以一个字符开头，以任意数量的字符结尾。</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br>expression <span class="hljs-keyword">LIKE</span> <span class="hljs-keyword">pattern</span><br><br><span class="hljs-comment">/*如果要匹配通配符%或_，则必须使用反斜杠字符\来对其进行转义。 如果要使用其它的转义字符而不是反斜杠，可以在LIKE表达式中使用ESCAPE子句，如下所示：*/</span><br>expression <span class="hljs-keyword">LIKE</span> <span class="hljs-keyword">pattern</span> <span class="hljs-keyword">ESCAPE</span> escape_character<br><br><span class="hljs-comment">/*示例--要查找名字以M开头但不以Ma开头的所有员工，请使用以下语句：*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id, first_name, last_name<br><span class="hljs-keyword">FROM</span><br>    employees<br><span class="hljs-keyword">WHERE</span><br>    first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;M%&#x27;</span><br><span class="hljs-keyword">AND</span> first_name <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;Ma%&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    first_name;<br></code></pre></div></td></tr></table></figure><h4 id="5-6-4-NULL"><a href="#5-6-4-NULL" class="headerlink" title="5.6.4 NULL"></a>5.6.4 NULL</h4><p>使用SQL <code>IS NULL</code>和<code>IS NOT NULL</code>运算符来测试表达式是否为<code>NULL</code>。</p><p><code>NULL</code>表示数据未知的值，在数据库中缺少数据。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br>expression <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-comment">/*示例--查找具有电话号码的所有员工，请使用IS NOT NULL，如以下语句所示：*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id,<br>    first_name,<br>    last_name,<br>    phone_number<br><span class="hljs-keyword">FROM</span><br>    employees<br><span class="hljs-keyword">WHERE</span><br>    phone_number <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></div></td></tr></table></figure><p>注意：</p><ol><li>不能使用比较运算符的等于(=)将值与<code>NULL</code>值进行比较</li><li><code>NULL</code>值是特殊的，任何与<code>NULL</code>值的比较都不会返回<code>true</code>或<code>false</code>，而是返回未知</li></ol><h3 id="5-7-SQL别名"><a href="#5-7-SQL别名" class="headerlink" title="5.7 SQL别名"></a>5.7 SQL别名</h3><p>SQL别名，包括表和列别名，使查询更短，更易理解。</p><p>使用关键词<code>AS</code>，可省略。</p><h4 id="5-7-1-列别名"><a href="#5-7-1-列别名" class="headerlink" title="5.7.1 列别名"></a>5.7.1 列别名</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">SELECT</span><br>    inv_no <span class="hljs-keyword">AS</span> invoice_no,<br>    amount,<br>    due_date <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;截止日期&#x27;</span>,<br>    cust_no <span class="hljs-string">&#x27;客户编号&#x27;</span><br><span class="hljs-keyword">FROM</span><br>    invoices;<br><span class="hljs-comment">/*别名包含空格，必须使用单引号(&#x27;)或双引号(&quot;)来包围别名。*/</span><br></code></pre></div></td></tr></table></figure><h4 id="5-7-2-表别名"><a href="#5-7-2-表别名" class="headerlink" title="5.7.2 表别名"></a>5.7.2 表别名</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span><br>    d.department_name<br><span class="hljs-keyword">FROM</span><br>    departments <span class="hljs-keyword">AS</span> d<br><br><span class="hljs-comment">/*示例一--以下查询使用inner join子句从employees和departments表中选择数据。*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id,<br>    first_name,<br>    last_name,<br>    e.department_id,<br>    department_name<br><span class="hljs-keyword">FROM</span><br>    employees e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id <span class="hljs-operator">=</span> e.department_id<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    first_name;<br><br><span class="hljs-comment">/*示例二--以下查询使用self-join将employee表自联接。*/</span><br><span class="hljs-keyword">SELECT</span><br>    e.first_name <span class="hljs-keyword">AS</span> employee,<br>    m.first_name <span class="hljs-keyword">AS</span> manager<br><span class="hljs-keyword">FROM</span><br>    employees e<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> employees m <span class="hljs-keyword">ON</span> m.employee_id <span class="hljs-operator">=</span> e.manager_id<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    manager;<br></code></pre></div></td></tr></table></figure><h3 id="5-8-JOIN操作"><a href="#5-8-JOIN操作" class="headerlink" title="5.8 JOIN操作"></a>5.8 JOIN操作</h3><p><code>SELECT</code>语句不仅能从单个表中查询数据，而且可以将多个表链接在一起。连接表的过程称为<code>Join</code>。</p><p>SQL提供了多种连接，如内连接，左连接，右连接，全外连接等。</p><h4 id="5-8-1-INNER-JOIN"><a href="#5-8-1-INNER-JOIN" class="headerlink" title="5.8.1 INNER JOIN"></a>5.8.1 INNER JOIN</h4><p>SQL <code>INNER JOIN</code>内连接子句来查询来自两个或多个表的数据。</p><p>内连接子句消除了与另一个表的行不匹配的行，相当于交集。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span><br>  A.n<br><span class="hljs-keyword">FROM</span> A<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> B.n <span class="hljs-operator">=</span> A.n<br><br><span class="hljs-comment">/*示例--employees表中的department_id列是将员工链接到departments表的外键列。*/</span><br><span class="hljs-keyword">SELECT</span><br>    first_name,<br>    last_name,<br>    employees.department_id,<br>    departments.department_id,<br>    department_name<br><span class="hljs-keyword">FROM</span><br>    employees<br>        <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span><br>    departments <span class="hljs-keyword">ON</span> departments.department_id <span class="hljs-operator">=</span> employees.department_id<br><span class="hljs-keyword">WHERE</span><br>    employees.department_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><br><span class="hljs-comment">--语法格式</span><br><span class="hljs-comment">/*INNER JOIN子句可以连接三个或更多表，只要它们具有关系，通常是外键关系。*/</span><br><span class="hljs-keyword">SELECT</span><br>  A.n<br><span class="hljs-keyword">FROM</span> A<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> B.n <span class="hljs-operator">=</span> A.n<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> C <span class="hljs-keyword">ON</span> C.n <span class="hljs-operator">=</span> A.n;<br><br><span class="hljs-comment">/*示例--使用内部联接子句连接3个表：员工，部门和工作岗位，以获取在部门ID为：1,2和3中工作的员工的信息。*/</span><br><span class="hljs-keyword">SELECT</span><br>    first_name, last_name, job_title, department_name<br><span class="hljs-keyword">FROM</span><br>    employees e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id <span class="hljs-operator">=</span> e.department_id<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> jobs j <span class="hljs-keyword">ON</span> j.job_id <span class="hljs-operator">=</span> e.job_id<br><span class="hljs-keyword">WHERE</span><br>    e.department_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></div></td></tr></table></figure><h4 id="5-8-2-LEFT-JOIN"><a href="#5-8-2-LEFT-JOIN" class="headerlink" title="5.8.2 LEFT JOIN"></a>5.8.2 LEFT JOIN</h4><p>左连接将返回左表中的所有行，而不管右表中是否存在匹配的行，相当于AB交集后显示A。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span><br>    A.n<br><span class="hljs-keyword">FROM</span><br>    A<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> B.n <span class="hljs-operator">=</span> A.n;<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">SELECT</span><br>    c.country_name, c.country_id, l.country_id, l.street_address, l.city<br><span class="hljs-keyword">FROM</span><br>    countries c<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> locations l <span class="hljs-keyword">ON</span> l.country_id <span class="hljs-operator">=</span> c.country_id<br><span class="hljs-keyword">WHERE</span><br>    c.country_id <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;US&#x27;</span>, <span class="hljs-string">&#x27;UK&#x27;</span>, <span class="hljs-string">&#x27;CN&#x27;</span>)<br><span class="hljs-comment">/*右表中的非匹配行使用NULL值填充*/</span><br></code></pre></div></td></tr></table></figure><h4 id="5-8-3-FULL-OUTER-JOIN"><a href="#5-8-3-FULL-OUTER-JOIN" class="headerlink" title="5.8.3 FULL OUTER JOIN"></a>5.8.3 FULL OUTER JOIN</h4><p>完全外连接是左连接和右连接的组合。完整外连接包括连接表中的所有行，相当于并集。</p><p>如果连接表中的行不匹配，则使用NULL值填充。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span> column_list<br><span class="hljs-keyword">FROM</span> A<br><span class="hljs-keyword">FULL</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> B.n <span class="hljs-operator">=</span> A.n;<br><br><span class="hljs-comment">/*示例--查找不存储任何水果的空篮子*/</span><br><span class="hljs-keyword">SELECT</span><br>    basket_name,<br>    fruit_name<br><span class="hljs-keyword">FROM</span><br>    fruits<br><span class="hljs-keyword">FULL</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> baskets <span class="hljs-keyword">ON</span> baskets.basket_id <span class="hljs-operator">=</span> fruits.basket_id<br><span class="hljs-keyword">WHERE</span><br>    fruit_name <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></div></td></tr></table></figure><h4 id="5-8-4-Cross-Join"><a href="#5-8-4-Cross-Join" class="headerlink" title="5.8.4 Cross Join"></a>5.8.4 Cross Join</h4><p>SQL <code>Cross Join</code>交叉连接是一种连接操作，它生成两个或多个表的笛卡尔积。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span> column_list<br><span class="hljs-keyword">FROM</span> table_A<br><span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> table_B;<br><span class="hljs-comment">/*在SQL中，假设A表有n行，而B表有m行，那么A和B表的交叉连接结果有n x m行*/</span><br><br><span class="hljs-comment">/*以下语句等同于使用上面的CROSS JOIN子句的语句*/</span><br><span class="hljs-keyword">SELECT</span><br>    column_list<br><span class="hljs-keyword">FROM</span><br>    table_A,table_B;<br></code></pre></div></td></tr></table></figure><h4 id="5-8-5-自连接"><a href="#5-8-5-自连接" class="headerlink" title="5.8.5 自连接"></a>5.8.5 自连接</h4><p>SQL自连接技术将表连接到自身。</p><p>我们将一张表连接到自身来评估同一个表中其他行的行。 要执行自联接，我们使用内连接或左连接子句。</p><p>因为同一张表在单个查询中出现两次，所以必须使用表别名。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span><br>    column1,<br>    column2,<br>    column3,<br>        ...<br><span class="hljs-keyword">FROM</span><br>    table1 A<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> table1 B <span class="hljs-keyword">ON</span> B.column1 <span class="hljs-operator">=</span> A.column2;<br><span class="hljs-comment">/*在此语句中，使用INNER JOIN子句将table1连接到自身。 A和B是table1的表别名。 B.column1 = A.column2是连接条件。*/</span><br><br><span class="hljs-comment">/*示例一--查询每位员工的上级经理信息。*/</span><br><span class="hljs-keyword">SELECT</span><br>    CONCAT(e.first_name, <span class="hljs-string">&#x27; &#x27;</span>, e.last_name) <span class="hljs-keyword">as</span> employee,<br>    CONCAT(m.first_name, <span class="hljs-string">&#x27; &#x27;</span>, m.last_name) <span class="hljs-keyword">as</span> manager<br><span class="hljs-keyword">FROM</span><br>    employees e<br>        <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span><br>    employees m <span class="hljs-keyword">ON</span> m.employee_id <span class="hljs-operator">=</span> e.manager_id<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> manager;<br><br><span class="hljs-comment">/*示例二--查询每位员工的上级经理信息。包含最高领导。*/</span><br><span class="hljs-keyword">SELECT</span><br>    CONCAT(e.first_name, <span class="hljs-string">&#x27; &#x27;</span>, e.last_name) <span class="hljs-keyword">as</span> employee,<br>    CONCAT(m.first_name, <span class="hljs-string">&#x27; &#x27;</span>, m.last_name) <span class="hljs-keyword">as</span> manager<br><span class="hljs-keyword">FROM</span><br>    employees e<br>        <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span><br>    employees m <span class="hljs-keyword">ON</span> m.employee_id <span class="hljs-operator">=</span> e.manager_id<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> manager;<br></code></pre></div></td></tr></table></figure><h2 id="六、聚合函数"><a href="#六、聚合函数" class="headerlink" title="六、聚合函数"></a>六、聚合函数</h2><p>SQL聚合函数计算一组值并返回单个值。</p><p>因为聚合函数对一组值进行操作，所以它通常与<code>SELECT</code>语句的<code>GROUP BY</code>子句一起使用。<code>GROUP BY</code>子句将结果集划分为值分组，聚合函数为每个分组返回单个值。</p><p>以下是常用的SQL聚合函数：</p><ul><li>AVG() - 返回集合的平均值。</li><li>COUNT() - 返回集合中的项目数。</li><li>MAX() - 返回集合中的最大值。</li><li>MIN() - 返回集合中的最小值</li><li>SUM() - 返回集合中所有或不同值的总和。</li></ul><h3 id="6-1-AVG-（平均）"><a href="#6-1-AVG-（平均）" class="headerlink" title="6.1  AVG （平均）"></a>6.1  AVG （平均）</h3><p><code>AVG()</code>函数返回集合中的平均值</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-built_in">AVG</span>([<span class="hljs-keyword">ALL</span><span class="hljs-operator">|</span><span class="hljs-keyword">DISTINCT</span>] expression)<br><span class="hljs-comment">/*ALL关键字计算所有值的平均值，而DISTINCT关键字强制函数仅对不同的值进行操作。默认情况下，使用ALL选项*/</span><br><br><span class="hljs-comment">/*示例1*/</span><br><span class="hljs-keyword">SELECT</span><br>    <span class="hljs-built_in">AVG</span>(salary)<br><span class="hljs-keyword">FROM</span><br>    employees;<br><span class="hljs-keyword">SELECT</span><br>    ROUND(<span class="hljs-built_in">AVG</span>(<span class="hljs-keyword">DISTINCT</span> salary), <span class="hljs-number">2</span>)<br><span class="hljs-keyword">FROM</span><br>    employees;<br><span class="hljs-comment">--使用ROUND函数，结果舍入为2位小数</span><br><br><span class="hljs-comment">/*示例2 ： 与分组一起使用*/</span><br><span class="hljs-keyword">SELECT</span><br>    department_id,<br>    <span class="hljs-built_in">AVG</span>(salary)<br><span class="hljs-keyword">FROM</span><br>    employees<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    department_id;<br><br><span class="hljs-comment">/*示例3：与JOIN一起使用*/</span><br><span class="hljs-keyword">SELECT</span><br>    e.department_id,<br>    department_name,<br>    <span class="hljs-built_in">AVG</span>(salary)<br><span class="hljs-keyword">FROM</span><br>    employees e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id <span class="hljs-operator">=</span> e.department_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    e.department_id;<br><br><span class="hljs-comment">/*示例4 ： 与HAVING一起使用*/</span><br><span class="hljs-keyword">SELECT</span><br>    e.department_id,<br>    department_name,<br>    <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">AS</span> avgsalary<br><span class="hljs-keyword">FROM</span><br>    employees e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id <span class="hljs-operator">=</span> e.department_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    e.department_id<br><span class="hljs-keyword">HAVING</span> avgsalary<span class="hljs-operator">&lt;</span><span class="hljs-number">5000</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">/*示例5： 子查询*/</span><br><span class="hljs-keyword">SELECT</span><br>    <span class="hljs-built_in">AVG</span>(employee_sal_avg)<br><span class="hljs-keyword">FROM</span><br>    (<br>        <span class="hljs-keyword">SELECT</span><br>            <span class="hljs-built_in">AVG</span>(salary) employee_sal_avg<br>        <span class="hljs-keyword">FROM</span><br>            employees<br>        <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>            department_id<br>    ) t;<br></code></pre></div></td></tr></table></figure><h3 id="6-2-COUNT（统计）"><a href="#6-2-COUNT（统计）" class="headerlink" title="6.2 COUNT（统计）"></a>6.2 COUNT（统计）</h3><p>SQL <code>COUNT</code>函数来获取组中的项目数。它返回符合条件行数。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-built_in">COUNT</span> ([<span class="hljs-keyword">ALL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DISTINCT</span>] expression);<br><span class="hljs-comment">/*COUNT(*)函数返回表中的行数，包括包含NULL值的行。*/</span><br><br><span class="hljs-comment">/*示例1 ： 与GROUP BY一起使用*/</span><br><span class="hljs-keyword">SELECT</span><br>    e.department_id,<br>    department_name,<br>    <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">FROM</span><br>    employees e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id <span class="hljs-operator">=</span> e.department_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    e.department_id;<br><br><span class="hljs-comment">/*示例2 ：与HAVING一起使用 */</span><br><span class="hljs-comment">/*要按COUNT(*)函数的结果过滤分组，需要在COUNT(*)函数使用HAVING子句*/</span><br><span class="hljs-keyword">SELECT</span><br>    e.department_id,<br>    department_name,<br>    <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">FROM</span><br>    employees e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id <span class="hljs-operator">=</span> e.department_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    e.department_id<br><span class="hljs-keyword">HAVING</span><br>    <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">DESC</span>;<br></code></pre></div></td></tr></table></figure><h3 id="6-3-SUM（求和）"><a href="#6-3-SUM（求和）" class="headerlink" title="6.3 SUM（求和）"></a>6.3 SUM（求和）</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-built_in">SUM</span>([<span class="hljs-keyword">ALL</span><span class="hljs-operator">|</span><span class="hljs-keyword">DISTINCT</span>] expression)<br><span class="hljs-comment">/*只能将SUM函数应用于数字列，SUM函数忽略NULL值。*/</span><br><br><span class="hljs-comment">/*示例1 ：与HAVING 以及 GROUP BY一起使用*/</span><br><span class="hljs-keyword">SELECT</span><br>    e.department_id,<br>    department_name,<br>    <span class="hljs-built_in">SUM</span>(salary)<br><span class="hljs-keyword">FROM</span><br>    employees e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id <span class="hljs-operator">=</span> e.department_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    e.department_id<br><span class="hljs-keyword">HAVING</span><br>    <span class="hljs-built_in">SUM</span>(salary) <span class="hljs-operator">&gt;</span> <span class="hljs-number">30000</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    <span class="hljs-built_in">SUM</span>(salary) <span class="hljs-keyword">DESC</span>;<br></code></pre></div></td></tr></table></figure><h3 id="6-4-MAX-amp-MIN"><a href="#6-4-MAX-amp-MIN" class="headerlink" title="6.4 MAX &amp; MIN"></a>6.4 MAX &amp; MIN</h3><p>SQL <code>Max</code>函数查找组中的最大值，<code>Min</code>函数查找组中的最小值。。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-built_in">MAX</span>(expression)<br><span class="hljs-built_in">MIN</span>(expression)<br><br><span class="hljs-comment">/*示例1 ： 用于子查询中*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id,<br>    first_name,<br>    last_name,<br>    salary<br><span class="hljs-keyword">FROM</span><br>    employees<br><span class="hljs-keyword">WHERE</span><br>    salary <span class="hljs-operator">=</span> (<br>        <span class="hljs-keyword">SELECT</span><br>            <span class="hljs-built_in">MAX</span>(salary)<br>        <span class="hljs-keyword">FROM</span><br>            employees<br>    );<br><br><span class="hljs-comment">/*示例2 ： 返回每个部门中员工的最高工资，并根据最高工资对结果集进行排序。*/</span><br><span class="hljs-keyword">SELECT</span><br>    d.department_id,<br>    department_name,<br>    <span class="hljs-built_in">MAX</span>(salary)<br><span class="hljs-keyword">FROM</span><br>    employees e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id <span class="hljs-operator">=</span> e.department_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    e.department_id<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    <span class="hljs-built_in">MAX</span>(salary) <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">/*示例3 ： 获得具有最高薪水大于12000的员工的部门*/</span><br><span class="hljs-keyword">SELECT</span><br>    d.department_id,<br>    department_name,<br>    <span class="hljs-built_in">MAX</span>(salary)<br><span class="hljs-keyword">FROM</span><br>    employees e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id <span class="hljs-operator">=</span> e.department_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    e.department_id<br><span class="hljs-keyword">HAVING</span><br>    <span class="hljs-built_in">MAX</span>(salary) <span class="hljs-operator">&gt;</span> <span class="hljs-number">12000</span>;<br></code></pre></div></td></tr></table></figure><h3 id="6-6-Group-By子句"><a href="#6-6-Group-By子句" class="headerlink" title="6.6 Group By子句"></a>6.6 Group By子句</h3><p><code>GROUP BY</code>子句是<code>SELECT</code>语句的可选子句，它根据指定列中的匹配值将行组合成组，每组返回一行。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br>[<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> &#123;col_name <span class="hljs-operator">|</span> expr <span class="hljs-operator">|</span> position&#125;<br>      [<span class="hljs-keyword">ASC</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DESC</span>], ... [<span class="hljs-keyword">WITH</span> <span class="hljs-keyword">ROLLUP</span>]]<br><span class="hljs-comment">/*1. col_name:指定用于分组的选择列，可指定多列，彼此间用逗号分隔。</span><br><span class="hljs-comment">2.expr:指定用于分组的表达式</span><br><span class="hljs-comment">3.position:指定用于分组的选择列在SELECT语句结果集中的位置，通常是一个正整数。</span><br><span class="hljs-comment">4.ASC | DESC:升降序排列，默认ASC升序。</span><br><span class="hljs-comment">5.WITH ROLLUP:用于指定在结果集中不仅包含由GROUP BY子句分组后的数据行，还包括各分组的汇总行，以及所有分组的整体汇总行。*/</span><br><br><span class="hljs-comment">/*示例--结果集包含相同地址的男性客户人数、女性客户人数、总人数以及客户的总人数*/</span><br><span class="hljs-keyword">SELECT</span> cust_address,cust_sex,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> &quot;人数&quot;<br>    <span class="hljs-keyword">FROM</span> customers<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> cust_address,cust_sex<br>    <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">ROLLUP</span>;<br></code></pre></div></td></tr></table></figure><h3 id="6-6-HAVING"><a href="#6-6-HAVING" class="headerlink" title="6.6 HAVING"></a>6.6 HAVING</h3><p>SQL <code>HAVING</code>子句，该子句用于为<code>GROUP BY</code>子句汇总的组指定条件，一般搭配<code>GROUP BY</code>子句使用。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span><br>    column1,<br>    column2,<br>    AGGREGATE_FUNCTION (column3)<br><span class="hljs-keyword">FROM</span><br>    table1<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    column1,<br>    column2<br><span class="hljs-keyword">HAVING</span><br>    group_condition;<br><span class="hljs-comment">/*注：需要注意的是，在GROUP BY子句之前应用WHERE子句之后应用HAVING子句之前*/</span><br><br><span class="hljs-comment">/*示例--统计人数大于1的班级*/</span><br><span class="hljs-keyword">SELECT</span> class_id,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> &quot;人数&quot;<br>    <span class="hljs-keyword">FROM</span> students<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> class_id<br>    <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure><h2 id="七、高级查询"><a href="#七、高级查询" class="headerlink" title="七、高级查询"></a>七、高级查询</h2><h3 id="7-1-GROUPING-SETS运算符"><a href="#7-1-GROUPING-SETS运算符" class="headerlink" title="7.1 GROUPING SETS运算符"></a>7.1 GROUPING SETS运算符</h3><p>使用SQL <code>GROUPING SETS</code>运算符生成多个分组集</p><p>分组集是一组使用<code>GROUP BY</code>子句进行分组的列。 通常，单个聚合查询定义单个分组集</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span><br>    c1,<br>    c2,<br>    aggregate (c3)<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">table</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    <span class="hljs-keyword">GROUPING</span> SETS (<br>        (c1, c2),<br>        (c1),<br>        (c2),<br>        ()<br>);<br></code></pre></div></td></tr></table></figure><h3 id="7-2-ROLLUP运算符"><a href="#7-2-ROLLUP运算符" class="headerlink" title="7.2 ROLLUP运算符"></a>7.2 ROLLUP运算符</h3><p><code>ROLLUP</code>是<code>GROUP BY</code>子句的扩展。<code>ROLLUP</code>选项允许包含表示小计的额外行，通常称为超级聚合行，以及总计行。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span><br>    c1, c2, aggregate_function(c3)<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">table</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">ROLLUP</span> (c1, c2);<br><span class="hljs-comment">/*ROLLUP假定输入列之间存在层次结构。 例如，如果输入列是(c1，c2)，则层次结构c1&gt; c2。</span><br><span class="hljs-comment">ROLLUP生成考虑此层次结构有意义的所有分组集。 这就是为什么我们经常使用ROLLUP来生成小计和总计以用于报告目的*/</span><br><br><span class="hljs-comment">/*示例1*/</span><br><span class="hljs-keyword">SELECT</span><br>    <span class="hljs-built_in">COALESCE</span>(warehouse, <span class="hljs-string">&#x27;All warehouses&#x27;</span>) <span class="hljs-keyword">AS</span> warehouse,<br>    <span class="hljs-built_in">SUM</span>(quantity)<br><span class="hljs-keyword">FROM</span><br>    inventory<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">ROLLUP</span> (warehouse);<br><br><span class="hljs-comment">/*示例2*/</span><br><span class="hljs-keyword">SELECT</span><br>    warehouse, product, <span class="hljs-built_in">SUM</span>(quantity)<br><span class="hljs-keyword">FROM</span><br>    inventory<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> warehouse, <span class="hljs-keyword">ROLLUP</span> (product);<br></code></pre></div></td></tr></table></figure><h3 id="7-3-UNION运算符-并集"><a href="#7-3-UNION运算符-并集" class="headerlink" title="7.3 UNION运算符 (并集)"></a>7.3 UNION运算符 (并集)</h3><p>使用SQL <code>UNION</code>组合来自多个查询的两个或多个结果集，<code>UNION</code>运算符将两个或多个<code>SELECT</code>语句的结果集合并到一个结果集中,相当于并集。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span><br>    column1, column2<br><span class="hljs-keyword">FROM</span><br>    table1<br><span class="hljs-keyword">UNION</span> [<span class="hljs-keyword">ALL</span>]<br><span class="hljs-keyword">SELECT</span><br>    column3, column4<br><span class="hljs-keyword">FROM</span><br>    table2;<br><span class="hljs-comment">/*带ALL参数不去重，不带ALL则去重*/</span><br></code></pre></div></td></tr></table></figure><h3 id="7-4-INTERSECT-交"><a href="#7-4-INTERSECT-交" class="headerlink" title="7.4 INTERSECT(交)"></a>7.4 INTERSECT(交)</h3><p>SQL <code>INTERSECT</code>运算符，来获取两个或多个查询的交集。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span><br>    id<br><span class="hljs-keyword">FROM</span><br>    a<br><span class="hljs-keyword">INTERSECT</span><br><span class="hljs-keyword">SELECT</span><br>    id<br><span class="hljs-keyword">FROM</span><br>    b;<br></code></pre></div></td></tr></table></figure><p>要使用<code>INTERSECT</code>运算符，<code>SELECT</code>语句的列需要遵循以下规则：</p><ul><li>列的数据类型必须兼容。</li><li><code>SELECT</code>语句中的列数及其顺序必须相同</li></ul><h3 id="7-5-MINUS（差）"><a href="#7-5-MINUS（差）" class="headerlink" title="7.5 MINUS（差）"></a>7.5 MINUS（差）</h3><p>SQL <code>MINUS</code>运算符从另一个结果集中减去一个结果集。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span><br>    id<br><span class="hljs-keyword">FROM</span><br>    A<br>MINUS<br><span class="hljs-keyword">SELECT</span><br>    id<br><span class="hljs-keyword">FROM</span><br>    B;<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id<br><span class="hljs-keyword">FROM</span><br>    employees<br>MINUS<br><span class="hljs-keyword">SELECT</span><br>    employee_id<br><span class="hljs-keyword">FROM</span><br>    dependents<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> employee_id;<br></code></pre></div></td></tr></table></figure><h3 id="7-6-子查询"><a href="#7-6-子查询" class="headerlink" title="7.6 子查询"></a>7.6 子查询</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id, first_name, last_name<br><span class="hljs-keyword">FROM</span><br>    employees<br><span class="hljs-keyword">WHERE</span><br>    department_id <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span><br>            department_id<br>        <span class="hljs-keyword">FROM</span><br>            departments<br>        <span class="hljs-keyword">WHERE</span><br>            location_id <span class="hljs-operator">=</span> <span class="hljs-number">1700</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> first_name , last_name;<br><br><span class="hljs-comment">/*示例2*/</span><br><span class="hljs-keyword">SELECT</span><br>    employee_id, first_name, last_name, salary<br><span class="hljs-keyword">FROM</span><br>    employees<br><span class="hljs-keyword">WHERE</span><br>    salary <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">SELECT</span><br>            <span class="hljs-built_in">AVG</span>(salary)<br>        <span class="hljs-keyword">FROM</span><br>            employees);<br></code></pre></div></td></tr></table></figure><h3 id="7-7-EXISTS运算符"><a href="#7-7-EXISTS运算符" class="headerlink" title="7.7 EXISTS运算符"></a>7.7 EXISTS运算符</h3><p><code>EXISTS</code>运算符用于指定子查询以测试行的存在。如果子查询包含任何行，则返回<code>true</code>。否则，它返回<code>false</code>。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">EXISTS</span> (subquery)<br><span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> (subquery)<br><br><span class="hljs-comment">/*示例--查找没有任何家属的员工*/</span><br><span class="hljs-keyword">SELECT</span><br>    department_name<br><span class="hljs-keyword">FROM</span><br>    departments d<br><span class="hljs-keyword">WHERE</span><br>    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>( <span class="hljs-keyword">SELECT</span><br>            <span class="hljs-number">1</span><br>        <span class="hljs-keyword">FROM</span><br>            employees e<br>        <span class="hljs-keyword">WHERE</span><br>            salary <span class="hljs-operator">&gt;</span> <span class="hljs-number">10000</span><br>                <span class="hljs-keyword">AND</span> e.department_id <span class="hljs-operator">=</span> d.department_id)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> department_name;<br></code></pre></div></td></tr></table></figure><h2 id="八、约束"><a href="#八、约束" class="headerlink" title="八、约束"></a>八、约束</h2><p>完整性约束保证授权用户对数据库所做的修改不会破坏数据的一致性。</p><h3 id="8-1-实体完整性-主键约束"><a href="#8-1-实体完整性-主键约束" class="headerlink" title="8.1 实体完整性-主键约束"></a>8.1 实体完整性-主键约束</h3><ul><li>每个表都有一个且只有一个主键。 主键不接受<code>NULL</code>或重复值。</li><li>如果主键由两列或更多列组成，则值可能在一列中重复，但主键中所有列的值组合必须是唯一的。</li><li>复合主键不能包含不必要的多余列。</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1 ： 主键由多列组成，用PRIMARY KEY定义主键*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> project_assignments (<br>    project_id <span class="hljs-type">INT</span>,<br>    employee_id <span class="hljs-type">INT</span>,<br>    join_date DATETIME <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">CONSTRAINT</span> pk_assgn <span class="hljs-keyword">PRIMARY</span> KEY (project_id , employee_id)<br>);<br><br><span class="hljs-comment">/*示例2-- 使用ALTER TABLE语句添加主键，将milestone_id列设置为主键。*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> project_milestones<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (milestone_id);<br><br><span class="hljs-comment">/*示例3-- 删除project_milestones表的主键约束*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> project_milestones<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> pk_milestone_id;<br></code></pre></div></td></tr></table></figure><h3 id="8-2-实体完整性-唯一约束"><a href="#8-2-实体完整性-唯一约束" class="headerlink" title="8.2 实体完整性-唯一约束"></a>8.2 实体完整性-唯一约束</h3><p>使用SQL <code>UNIQUE</code>约束强制列或一组列中值的唯一性</p><p><code>UNIQUE</code>约束定义了一个规则，该规则可防止存储在不参与主键的特定列中有重复值</p><p><code>UNIQUE</code>约束和<code>PRIMARY KEY</code>约束之间的区别：<br>比较项|<code>PRIMARY KEY</code>约束|<code>UNIQUE</code>约束<br>-|-|-<br>约束的数量|一个|多个<br>NULL值|不允许|允许</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--创建了UNIQUE约束作为列约束。*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users (<br>    user_id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>    password <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-comment">/*示例2--表约束语法创建的UNIQUE约束*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users (<br>    user_id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    password <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">CONSTRAINT</span> uc_username <span class="hljs-keyword">UNIQUE</span> (username)<br>);<br><br><span class="hljs-comment">/*示例3： 将UNIQUE约束添加到现有表*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> users<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> uc_username <span class="hljs-keyword">UNIQUE</span>(username);<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> users<br><span class="hljs-keyword">ADD</span> new_column data_type <span class="hljs-keyword">UNIQUE</span>;<br><br><span class="hljs-comment">/*示例4： 删除UNIQUE约束*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> unique_constraint_name;<br></code></pre></div></td></tr></table></figure><h3 id="8-3-参照完整性-外键约束"><a href="#8-3-参照完整性-外键约束" class="headerlink" title="8.3 参照完整性-外键约束"></a>8.3 参照完整性-外键约束</h3><p>SQL外键<code>FOREIGN KEY</code>约束以强制表之间的关系。</p><p>定义外码的主要目的是：让系统做参照完整性约束的检查。</p><p><strong>参照关系中外码的值必须在被参照关系中实际存在或为null</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-comment">--默认地，外码参照被参照关系中的主码，即下面FOREIGN KEY后面是外键，REFERENCES后面列是主键</span><br>[<span class="hljs-keyword">CONSTRAINT</span> [symbol]] <span class="hljs-keyword">FOREIGN</span> KEY<br>    [index_name] (index_col_name, ...)<br>    <span class="hljs-keyword">REFERENCES</span> tbl_name (index_col_name,...)<br>    [<span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> reference_option]<br>    [<span class="hljs-keyword">ON</span> UPDATE reference_option]<br><span class="hljs-comment">--其中reference_option的语法格式如下:</span><br>RESTRICT <span class="hljs-operator">|</span> CASCADE <span class="hljs-operator">|</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span> ACTION<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">相关语法说明如下：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. CONSTRAINT [symbol]：可以为外键约束指定名称。</span><br><span class="hljs-comment">2. tbl_name：指定外键所参照的表名，这个表称为被参照表，而外键所在表称为参照表。</span><br><span class="hljs-comment">3. index_col_name：指定被参照的列名。</span><br><span class="hljs-comment">4. ON DELETE/UPDATE：指定参照动作所对应的DELETE/UPDATE语句</span><br><span class="hljs-comment">5. reference_option：指定参照完整性约束的实现策略。RESTRICT是限制策略，同时也是默认策略，CASCADE是级联策略，SET NULL是置空策略，NO ACTION表示不采取实施策略。</span><br><span class="hljs-comment">6. RESTRICT限制策略：当要删除或更新被参照表中被参照列上在外键中出现的值时，拒绝对被参照表的删除或更新操作。默认策略。</span><br><span class="hljs-comment">7. CASCADE级联策略：即从被参照表中删除或更新记录行时，自动删除或更新参照表中匹配的记录行。</span><br><span class="hljs-comment">8. SET NULL置空策略：即在被参照表中操作时，设置参照表中与之对应的外键列值为NULL。</span><br><span class="hljs-comment">9. NO ACTION不采取实施策略：语义动作同RESTRICT限制策略。</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--创建表时创建FOREIGN KEY约束*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> project_milestones (<br>    milestone_id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    project_id <span class="hljs-type">INT</span>,<br>    milestone_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>),<br>    <span class="hljs-keyword">FOREIGN</span> KEY (project_id)<br>        <span class="hljs-keyword">REFERENCES</span> projects (project_id)<br>);<br><span class="hljs-comment">--FOREIGN KEY子句将project_milestones表的project_id设置为引用project表的project_id列的外键。</span><br><br><span class="hljs-comment">/*示例2--可以为FOREIGN KEY约束指定名称*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> project_milestones (<br>    milestone_id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    project_id <span class="hljs-type">INT</span>,<br>    milestone_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>),<br>    <span class="hljs-keyword">CONSTRAINT</span> fk_project <span class="hljs-keyword">FOREIGN</span> KEY (project_id)<br>        <span class="hljs-keyword">REFERENCES</span> projects (project_id)<br>);<br><span class="hljs-comment">--fk_project是FOREIGN KEY约束的名称。</span><br><br><span class="hljs-comment">/*示例3*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> orders<br>(<br>    order_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    order_product <span class="hljs-type">CHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    order_product_type <span class="hljs-type">CHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    cust_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    order_date DATETIME <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    order_price <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    order_amount <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY(order_id),<br>    <span class="hljs-keyword">FOREIGN</span> KEY(cust_id)<br>        <span class="hljs-keyword">REFERENCES</span> customers(cust_id)<br>            <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> RESTRICT<br>            <span class="hljs-keyword">ON</span> UPDATE RESTRICT<br>);<br><span class="hljs-comment">/*该外键参照完整性约束确保：插入表orders中的每一个订购客户id号都执行一次检测，查看这个订购客户id号是否已经出现在表customers的客户id号（主键）中，若没有，数据无法正常插入。*/</span><br><br><span class="hljs-comment">/*示例4--使用ALTER来向现有表中添加FOREIGN KEY约束*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_1<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> fk_name <span class="hljs-keyword">FOREIGN</span> KEY (fk_key_column)<br>   <span class="hljs-keyword">REFERENCES</span> table_2(pk_key_column)<br><br><span class="hljs-comment">/*示例5--删除外键约束*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> fk_name;<br></code></pre></div></td></tr></table></figure><h3 id="8-4-用户定义完整性-NOT-NULL"><a href="#8-4-用户定义完整性-NOT-NULL" class="headerlink" title="8.4 用户定义完整性-NOT NULL"></a>8.4 用户定义完整性-NOT NULL</h3><p><code>NOT NULL</code>约束是一个列约束，它定义将列限制为仅具有非<code>NULL</code>值的规则。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name(<br>   ...<br>   column_name data_type <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   ...<br>);<br><br><span class="hljs-comment">/*示例1*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> training (<br>    employee_id <span class="hljs-type">INT</span>,<br>    course_id <span class="hljs-type">INT</span>,<br>    taken_date <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (employee_id , course_id)<br>);<br><br><span class="hljs-comment">/*示例2--ALTER TABLE NOT NULL语句*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> training<br>MODIFY taken_date <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></div></td></tr></table></figure><h3 id="8-5-用户定义完整性-CHECK约束"><a href="#8-5-用户定义完整性-CHECK约束" class="headerlink" title="8.5 用户定义完整性-CHECK约束"></a>8.5 用户定义完整性-CHECK约束</h3><p><code>CHECK</code>约束是SQL中的完整性约束，它允许指定列或列集中的值必须满足布尔表达式</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-comment">--CHECK约束由关键字CHECK后跟括号中的布尔表达式组成：</span><br><span class="hljs-keyword">CHECK</span>(Boolean_expression)<br><span class="hljs-comment">--如果要为CHECK约束指定名称，请使用以下语法：</span><br><span class="hljs-keyword">CONSTRAINT</span> constraint_name <span class="hljs-keyword">CHECK</span>(Boolean_expression)<br><br><span class="hljs-comment">/*示例1--其products_price列中的值必须为正数*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products (<br>    product_id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    product_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    selling_price <span class="hljs-type">NUMERIC</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">CHECK</span> (selling_price <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>)<br>);<br><br><span class="hljs-comment">/*示例2--分配CHECK约束名称*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products (<br>    product_id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    product_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    selling_price <span class="hljs-type">NUMERIC</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">CONSTRAINT</span> positive_selling_price <span class="hljs-keyword">CHECK</span> (selling_price <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>)<br>);<br><br><span class="hljs-comment">/*示例3： 涉及多个列 （表约束）*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products (<br>    product_id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    product_name <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    selling_price <span class="hljs-type">NUMERIC</span> (<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">CHECK</span> (selling_price <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>),<br>    cost <span class="hljs-type">NUMERIC</span> (<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">CHECK</span> (cost <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>),<br>    <span class="hljs-keyword">CONSTRAINT</span> valid_selling_price  <span class="hljs-keyword">CHECK</span> (selling_price <span class="hljs-operator">&gt;</span> cost)<br>);<br></code></pre></div></td></tr></table></figure><h3 id="8-6-域约束"><a href="#8-6-域约束" class="headerlink" title="8.6 域约束"></a>8.6 域约束</h3><p><code>create domain</code>域约束是完整性约束的最基本形式，可用于检测插入到数据库中的数据的合法性</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--从现有数据类型可以创建新的域</span><br><span class="hljs-keyword">create</span> domain Dollars <span class="hljs-keyword">as</span> <span class="hljs-type">numeric</span>(<span class="hljs-number">12</span>，<span class="hljs-number">2</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><span class="hljs-keyword">create</span> domain Pounds <span class="hljs-keyword">as</span> <span class="hljs-type">numeric</span>(<span class="hljs-number">12</span>，<span class="hljs-number">2</span>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> instructor<br>    (ID <span class="hljs-type">char</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">primary</span> key,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    dept name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    salary Dollars,<br>    comm Pounds<br>    );<br></code></pre></div></td></tr></table></figure><h2 id="九、视图与索引"><a href="#九、视图与索引" class="headerlink" title="九、视图与索引"></a>九、视图与索引</h2><h3 id="9-1-视图"><a href="#9-1-视图" class="headerlink" title="9.1 视图"></a>9.1 视图</h3><p>在某些情况下，让所有用户看到整个逻辑模型是不合适的，视图就提供了这种机制：向用户隐藏特定的数据。</p><p>SQL允许通过查询来定义“虚关系”，它在概念上包含查询的结果，但并不预先计算并存储。像这种作为虚关系对用户可见的关系称为视图（view）。</p><h4 id="9-1-1-创建视图"><a href="#9-1-1-创建视图" class="headerlink" title="9.1.1 创建视图"></a>9.1.1 创建视图</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">OR</span> REPLACE] <span class="hljs-keyword">VIEW</span> view_name [(column_list)]<br>    <span class="hljs-keyword">AS</span> select_statement<br>    [<span class="hljs-keyword">WITH</span> [<span class="hljs-keyword">CASCADED</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">LOCAL</span>] <span class="hljs-keyword">CHECK</span> OPTION]<br><span class="hljs-comment">/*1. view_name:指定视图的名称，且必须唯一。不能重名。</span><br><span class="hljs-comment">2. column_list:可选项，用于为视图中每个列指定明确的名称，必须与select的列数相同，逗号分隔。</span><br><span class="hljs-comment">3.select_statement:指定创建视图的SELECT语句。</span><br><span class="hljs-comment">4.WITH CHECK OPTION:可选项，用于指定在可更新视图上所进行的修改都需要符合select_statement中所指定的限制条件，这样可以确保数据修改后，仍可以通过视图看到修改后的数据。</span><br><span class="hljs-comment">5.CASCADED | LOCAL:决定检查测试的范围。默认CASCADED，它会对所有视图进行检查。而LOCAL只对定义的视图进行检查。*/</span><br><br><span class="hljs-comment">/*示例--视图physics_fall_2009_Watson，列出于2009年秋季学期在Watson大楼开设的所有Physics课程的标识和教室号*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> physics_fall_2009_watson <span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> course_id, room_number<br><span class="hljs-keyword">from</span> physics_fall_2009<br><span class="hljs-keyword">where</span> building<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Watson&#x27;</span>;<br><br><span class="hljs-comment">/*示例2--创建视图customers_view,要求包含客户信息表中所有男性客户，并要求保证今后对该视图数据的修改都必须符和客户性别为男性这个条件。*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">VIEW</span> mysql_test.customers_view<br>    <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> mysql_test.customers<br>        <span class="hljs-keyword">WHERE</span> cust_sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;M&#x27;</span><br>    <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> OPTION;<br></code></pre></div></td></tr></table></figure><h4 id="9-1-2-删除视图"><a href="#9-1-2-删除视图" class="headerlink" title="9.1.2 删除视图"></a>9.1.2 删除视图</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> [IF <span class="hljs-keyword">EXISTS</span>]<br>    view_name [, view_name] ...<br>    [RESTRICT <span class="hljs-operator">|</span> CASCADE]<br></code></pre></div></td></tr></table></figure><h4 id="9-1-3-更新视图"><a href="#9-1-3-更新视图" class="headerlink" title="9.1.3 更新视图"></a>9.1.3 更新视图</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">VIEW</span> view_name [(column_list)]<br>    <span class="hljs-keyword">AS</span> select_statement<br>    [<span class="hljs-keyword">WITH</span> [<span class="hljs-keyword">CASCADED</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">LOCAL</span>] <span class="hljs-keyword">CHECK</span> OPTION]<br><span class="hljs-comment">/*语法与创建视图语法相似，也可以通过先删除再创建来实现修改视图*/</span><br></code></pre></div></td></tr></table></figure><h4 id="9-1-4-查看视图定义"><a href="#9-1-4-查看视图定义" class="headerlink" title="9.1.4 查看视图定义"></a>9.1.4 查看视图定义</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_name<br></code></pre></div></td></tr></table></figure><h4 id="9-1-5-更新视图数据"><a href="#9-1-5-更新视图数据" class="headerlink" title="9.1.5 更新视图数据"></a>9.1.5 更新视图数据</h4><p>一般地，如果定义视图的查询能满足下列条件，我们称SQL视图是可更新的（updatable），即视图上可以执行插入、更新或删除</p><ul><li><code>from</code>子句中只有一个数据库关系</li><li><code>select</code>子句中只包含关系的属性名，不包含任何表达式、聚集或<code>distinct</code>声明</li><li>任何没有出现在<code>select</code>子句中的属性可以取空值；即这些属性上没有<code>not null</code>约束，也不构成主码的一部分</li><li>查询中不含有<code>group by</code>或<code>having</code>子句</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--通过INSERT语句通过视图向基本表插入数据*/</span><br><span class="hljs-comment">--假设我们向视图faculty插入一条新元组，可写为：</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> faculty <span class="hljs-keyword">values</span>(‘<span class="hljs-number">30765</span><span class="hljs-string">&#x27;，‘Green&#x27;</span>，‘Music<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">/*该语句能够成功执行，是因为创建视图时添加了WITH CHECK OPTION*/</span><br><span class="hljs-string"></span><br><span class="hljs-string">/*示例2--使用UPDATE语句通过视图修改基本表的数据*/</span><br><span class="hljs-string">UPDATE mysql_test.customers_view</span><br><span class="hljs-string">    SET cust_address=&#x27;</span>上海市<span class="hljs-string">&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">/*示例3--使用DELETE语句通过视图删除基本表的数据*/</span><br><span class="hljs-string">DELETE FROM mysql_test.customers_view</span><br><span class="hljs-string">    WHERE cust_name=&#x27;</span>周明<span class="hljs-string">&#x27;;</span><br></code></pre></div></td></tr></table></figure><h3 id="9-2-索引"><a href="#9-2-索引" class="headerlink" title="9.2 索引"></a>9.2 索引</h3><h4 id="9-2-1-索引的创建"><a href="#9-2-1-索引的创建" class="headerlink" title="9.2.1 索引的创建"></a>9.2.1 索引的创建</h4><p>我们用<code>create index</code>命令，为关系中的某些属性创建索引。索引，就是DBMS根据表中的一列或若干列按照一定顺序建立的列值与记录行之间的对应关系表，因而索引实质上是一张描述索引列的列值与原表中的记录行之间一对应关系的有序表。</p><p>更新表的时候索引会被自动更新，因此索引提高查询速度，降低更新速度。</p><h5 id="9-2-1-1-使用CREATE-INDEX语句"><a href="#9-2-1-1-使用CREATE-INDEX语句" class="headerlink" title="9.2.1.1 使用CREATE INDEX语句"></a>9.2.1.1 使用CREATE INDEX语句</h5><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式全面</span><br><span class="hljs-keyword">CREATE</span> [ONLINE<span class="hljs-operator">|</span>OFFLINE] [<span class="hljs-keyword">UNIQUE</span><span class="hljs-operator">|</span>FULLTEXT<span class="hljs-operator">|</span>SPATIAL] INDEX index_name<br>    [index_type]<br>    <span class="hljs-keyword">ON</span> tbl_name (index_col_name,...)<br>    [index_option] ...<br><br><span class="hljs-comment">--语法格式常用</span><br><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">UNIQUE</span>] INDEX index_name <span class="hljs-keyword">ON</span> table_name (index_col_name,...);<br><span class="hljs-comment">/*其中index_col_name的格式为:</span><br><span class="hljs-comment">    col_name [(length)] [ASC | DESC]</span><br><span class="hljs-comment">可选项length指定前length个字符创建索引，可减少索引文件大小。</span><br><span class="hljs-comment">关键字[ASC | DESC]指定索引升序还是降序排列，默认ASC*/</span><br><br><span class="hljs-comment">/*示例--在students表上用学生name前三个字符创建名为index_students的索引*/</span><br><span class="hljs-keyword">CREATE</span> INDEX index_students <span class="hljs-keyword">ON</span> students(name(<span class="hljs-number">3</span>) <span class="hljs-keyword">ASC</span>);<br><br><span class="hljs-comment">--我们用`create unique index`命令，为关系中的某些属性创建唯一索引</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX uni_stu_index <span class="hljs-keyword">ON</span> student(ID,name);<br></code></pre></div></td></tr></table></figure><h5 id="9-2-1-2-使用CREATE-TABLE语句"><a href="#9-2-1-2-使用CREATE-TABLE语句" class="headerlink" title="9.2.1.2 使用CREATE TABLE语句"></a>9.2.1.2 使用CREATE TABLE语句</h5><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-comment">--在create table后面添加以下语法成分</span><br>&#123;INDEX <span class="hljs-operator">|</span> KEY&#125; [index_name] (index_col_name,...)<br><span class="hljs-comment">/*关键字KEY是关键字INDEX的同义词*/</span><br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> seller<br>    (<br>    seller_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    seller_name <span class="hljs-type">char</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    product_type <span class="hljs-type">int</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">NULL</span>,<br>    sales <span class="hljs-type">INT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY(seller_id,product_type),<br>    KEY index_seller(sales)<br>    );<br></code></pre></div></td></tr></table></figure><h5 id="9-2-1-3-使用ALTER-TABLE语句"><a href="#9-2-1-3-使用ALTER-TABLE语句" class="headerlink" title="9.2.1.3 使用ALTER TABLE语句"></a>9.2.1.3 使用ALTER TABLE语句</h5><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-comment">--在alter table后面添加以下语法成分</span><br><span class="hljs-keyword">ADD</span> &#123;INDEX <span class="hljs-operator">|</span> KEY&#125; [index_name] (index_col_name,...)<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> seller<br>    <span class="hljs-keyword">ADD</span> INDEX index_seller_name (seller_name);<br></code></pre></div></td></tr></table></figure><h4 id="9-2-2-索引的查看"><a href="#9-2-2-索引的查看" class="headerlink" title="9.2.2 索引的查看"></a>9.2.2 索引的查看</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SHOW</span> &#123;INDEX <span class="hljs-operator">|</span> INDEXES <span class="hljs-operator">|</span> KEYS&#125;<br>    &#123;<span class="hljs-keyword">FROM</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">IN</span>&#125; tbl_name<br>    [&#123;<span class="hljs-keyword">FROM</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">IN</span>&#125; db_name]<br>    [<span class="hljs-keyword">WHERE</span> expr]<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">SHOW</span> KEYS <span class="hljs-keyword">IN</span> seller;<br></code></pre></div></td></tr></table></figure><h4 id="9-2-3-索引的删除"><a href="#9-2-3-索引的删除" class="headerlink" title="9.2.3 索引的删除"></a>9.2.3 索引的删除</h4><h5 id="9-2-3-1-使用DROP-INDEX语句"><a href="#9-2-3-1-使用DROP-INDEX语句" class="headerlink" title="9.2.3.1 使用DROP INDEX语句"></a>9.2.3.1 使用DROP INDEX语句</h5><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">DROP</span> [ONLINE<span class="hljs-operator">|</span>OFFLINE] INDEX index_name <span class="hljs-keyword">ON</span> tbl_name<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">DROP</span> INDEX index_seller_name <span class="hljs-keyword">ON</span> seller;<br></code></pre></div></td></tr></table></figure><h5 id="9-2-3-2-使用ALTER-TABLE语句"><a href="#9-2-3-2-使用ALTER-TABLE语句" class="headerlink" title="9.2.3.2 使用ALTER TABLE语句"></a>9.2.3.2 使用ALTER TABLE语句</h5><p>在ALTER TABLE语句下面添加以下一项。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY;<br><span class="hljs-keyword">DROP</span> INDEX index_name;<br><span class="hljs-comment">/*删除主键也就是删除索引，主键也是一个索引*/</span><br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> seller<br>    <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    <span class="hljs-keyword">DROP</span> INDEX index_seller;<br></code></pre></div></td></tr></table></figure><h2 id="十、断言及触发器"><a href="#十、断言及触发器" class="headerlink" title="十、断言及触发器"></a>十、断言及触发器</h2><h3 id="10-1-断言"><a href="#10-1-断言" class="headerlink" title="10.1 断言"></a>10.1 断言</h3><p>断言（assertion）是表达要求数据库永远满足的条件的谓词（复杂check条件）</p><p>SQL中的断言形式如下：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> assertion <span class="hljs-operator">&lt;</span>assertion_name<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">check</span> <span class="hljs-operator">&lt;</span>predicate<span class="hljs-operator">&gt;</span><br></code></pre></div></td></tr></table></figure><p>创建了某断言之后，系统将检查它的合法性，并对每一个可能破坏该断言的数据库更新进行检测<br><strong>这种检测会产生大量的开销，因此断言的使用应非常谨慎</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--例2，每位教师不能在同一个学期的同一个时间段在两个不同的教室授</span><br><span class="hljs-keyword">create</span> assertion ins_teaches_constraint <span class="hljs-keyword">check</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> ID，name,section_id,semester,<span class="hljs-keyword">year</span>,time_slot_id,<br>    <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> building,room,number)<br><span class="hljs-keyword">from</span> instructor <span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> teaches <span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> section<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> (ID,name,section_id,semester,<span class="hljs-keyword">year</span>,time_slot_id)<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(building,room_number)<span class="hljs-operator">&gt;</span><span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><h3 id="10-2-触发器trigger"><a href="#10-2-触发器trigger" class="headerlink" title="10.2 触发器trigger"></a>10.2 触发器trigger</h3><p>触发器（trigger）是由数据库更新操作引起的被系统自动执行的语句。</p><p>设计触发器必须：</p><ul><li>指明触发器被执行的条件</li><li>指明触发器执行时所做的具体操作</li></ul><p>1） 创建触发器</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> trigger_name trigger_time trigger_event<br>    <span class="hljs-keyword">ON</span> tbl_name <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span> trigger_body<br><span class="hljs-comment">/*1. trigger_name：指定触发器名称，名称唯一。</span><br><span class="hljs-comment">2. trigger_time：指定触发器被触发的时刻。有2个选项，BEFORE和AFTER。</span><br><span class="hljs-comment">3. trigger_event：指定触发事件。可以是关键字INSERT,UPDATE,DELETE。</span><br><span class="hljs-comment">4. FOR EACH ROW：指定对于受触发事件影响的每一行都要激活触发器的动作。</span><br><span class="hljs-comment">5. trigger_body：指定触发器动作主体，即MYSQL语句块。</span><br><span class="hljs-comment">6. 每个表每个事件只允许一个触发器，即INSERT,UPDATE,DELETE的“之前”、“之后”，共最多支持6个触发器。</span><br><span class="hljs-comment">7. INSERT触发器代码内，可引用一个名为NEW的虚拟表，来访问被插入的行。</span><br><span class="hljs-comment">8. DELETE触发器代码内，可引用一个名为OLD的虚拟表，来访问被删除的行。</span><br><span class="hljs-comment">9. UPDATE触发器代码内，可引用名为NEW的虚拟表，来访问新更新的值，OLD访问以前的值。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*例1--INSERT触发器--每次插入数据时，设置用户变量str的值为新插入客户的id*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> mysql_test.customers_insert_trigger AFTER <span class="hljs-keyword">INSERT</span><br>    <span class="hljs-keyword">ON</span> mysql_test.customers <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span> <span class="hljs-keyword">SET</span> <span class="hljs-variable">@str</span><span class="hljs-operator">=</span>NEW.cust_id;<br><br><span class="hljs-comment">/*例2--UPDATE触发器--每次更新表时，将表中cust_address列的值设置为cust_contact列的值*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> mysql_test.customers_update_trigger BEFORE UPDATE<br>    <span class="hljs-keyword">ON</span> mysql_test.customers <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br>    <span class="hljs-keyword">SET</span> NEW.cust_address<span class="hljs-operator">=</span>OLD.cust_contact;<br><br><span class="hljs-comment">/*例3--使用触发器来确保关系section中属性time_slot_id的参照完整性*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> timeslot_check1 after <span class="hljs-keyword">insert</span><br>        <span class="hljs-keyword">ON</span> section<br>        <span class="hljs-keyword">referencing</span> <span class="hljs-keyword">new</span> <span class="hljs-type">row</span> <span class="hljs-keyword">as</span> nrow<br>        <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-type">row</span><br>        <span class="hljs-keyword">when</span> (nrow.time_slot_id <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span><br>            (<span class="hljs-keyword">select</span> time_slot_id <span class="hljs-keyword">from</span><br>                time_slot))<span class="hljs-comment">/*time_slot中不存在该time_slot_id*/</span><br><span class="hljs-keyword">begin</span> <span class="hljs-keyword">rollback</span> <span class="hljs-keyword">end</span>;<br><br><span class="hljs-comment">/*例4--某种物品库存量小到一定程度就发订货单或打开报警灯*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> reorder_trigger after update <span class="hljs-keyword">of</span> level <span class="hljs-keyword">on</span> inventory<br>    <span class="hljs-keyword">referencing</span> <span class="hljs-keyword">old</span> <span class="hljs-type">row</span> <span class="hljs-keyword">as</span> orow, <span class="hljs-keyword">new</span> <span class="hljs-type">row</span> <span class="hljs-keyword">as</span> nrow<br>    <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-type">row</span><br>    <span class="hljs-keyword">when</span> nrow.level<span class="hljs-operator">&lt;=</span><span class="hljs-comment">/*保证修改后库存量低于最小库存量,更新前库存大于最小库存*/</span><br>            (<span class="hljs-keyword">select</span> level<span class="hljs-comment">/*目的是只更新一次*/</span><br>            <span class="hljs-keyword">from</span> minlevel<br>            <span class="hljs-keyword">where</span> minlevel.item<span class="hljs-operator">=</span>nrow.item) <span class="hljs-keyword">and</span> orow.level<span class="hljs-operator">&gt;</span><br>                    (<span class="hljs-keyword">select</span> level<br>                    <span class="hljs-keyword">from</span> minlevel<br>                    <span class="hljs-keyword">where</span> minlevel.item<span class="hljs-operator">=</span> orow.item)<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> ordersbegin<br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> orders<br>            (<span class="hljs-keyword">select</span> item, amount<br>             <span class="hljs-keyword">from</span> reorder<br>             <span class="hljs-keyword">where</span> reorder.item<span class="hljs-operator">=</span> orow.item)<br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure><p>2） 删除触发器</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TRIGGER</span> [IF <span class="hljs-keyword">EXISTS</span>] [schema_name.]trigger_name<br><span class="hljs-comment">/*1. schema_name.：用于指定触发器所在数据库名称</span><br><span class="hljs-comment">2. 当删除一个表时，自动删除该表上的触发器。且触发器无法修改，只能删除再创建的方式来修改。*/</span><br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TRIGGER</span> IF <span class="hljs-keyword">EXISTS</span> mysql_test.customers_insert_trigger;<br></code></pre></div></td></tr></table></figure><h2 id="十一、-安全性"><a href="#十一、-安全性" class="headerlink" title="十一、 安全性"></a>十一、 安全性</h2><h3 id="11-1-用户账号管理"><a href="#11-1-用户账号管理" class="headerlink" title="11.1 用户账号管理"></a>11.1 用户账号管理</h3><h4 id="11-1-1-创建账户"><a href="#11-1-1-创建账户" class="headerlink" title="11.1.1 创建账户"></a>11.1.1 创建账户</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-keyword">user</span> [IDENTIFIED <span class="hljs-keyword">BY</span> [PASSWORD] <span class="hljs-string">&#x27;password&#x27;</span>]<br><span class="hljs-comment">/*1. user：指定创建用户账号，格式为&#x27;user_name&#x27;@&#x27;host_name&#x27;。其中host_name表示主机名,主机名默认为&#x27;%&#x27;。</span><br><span class="hljs-comment">1. IDENTIFIED BY:可选项，指定用户账号对应口令。</span><br><span class="hljs-comment">2. PASSWORD:可选项，用于指定散列口令，若需要使用明文设置口令，需忽略PASSWORD关键字。</span><br><span class="hljs-comment">3. &#x27;password&#x27;：指定用户账号的口令。</span><br><span class="hljs-comment">4. 创建的账户权限很少，只允许进行不需要权限的操作。*/</span><br><br><span class="hljs-comment">/*示例--添加2个新用户，用户名为zhangsan和lisi，主机名localhost，张三明文口令123，李四口令为456对应PASSWORD()函数返回的散列值*/</span><br><span class="hljs-keyword">SELECT</span> PASSWORD(<span class="hljs-number">456</span>);<br><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">*</span><span class="hljs-number">531E182</span>E2F72080AB0740FE2F2D689DBE0146E04<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;zhangsan&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123&#x27;</span>,<br>            <span class="hljs-string">&#x27;lisi&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> PASSWORD <span class="hljs-string">&#x27;*531E182E2F72080AB0740FE2F2D689DBE0146E04&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h4 id="11-1-2-删除账户"><a href="#11-1-2-删除账户" class="headerlink" title="11.1.2 删除账户"></a>11.1.2 删除账户</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> [IF <span class="hljs-keyword">EXISTS</span>] <span class="hljs-keyword">user</span> [, <span class="hljs-keyword">user</span>] ...<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> lisi<span class="hljs-variable">@localhost</span>;<br><span class="hljs-comment">/*用户删除不会影响他们创建的数据库对象，MYSQL并不记录是谁创建的。*/</span><br></code></pre></div></td></tr></table></figure><h4 id="11-1-3-修改用户账号"><a href="#11-1-3-修改用户账号" class="headerlink" title="11.1.3 修改用户账号"></a>11.1.3 修改用户账号</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br>RENAME <span class="hljs-keyword">USER</span> old_user <span class="hljs-keyword">TO</span> new_user<br>    [, old_user <span class="hljs-keyword">TO</span> new_user] ...<br><br><span class="hljs-comment">/*示例*/</span><br>RENAME <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;zhangsan&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;wangwu&#x27;</span>@<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h4 id="11-1-4-修改用户口令"><a href="#11-1-4-修改用户口令" class="headerlink" title="11.1.4 修改用户口令"></a>11.1.4 修改用户口令</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SET</span> PASSWORD [<span class="hljs-keyword">FOR</span> <span class="hljs-keyword">user</span>] <span class="hljs-operator">=</span><br>    &#123;<br>        PASSWORD(<span class="hljs-string">&#x27;cleartext password&#x27;</span>)<br>      <span class="hljs-operator">|</span> <span class="hljs-string">&#x27;encrypted password&#x27;</span><br>    &#125;<br><span class="hljs-comment">/*1. FOR user：格式为&#x27;user_name&#x27;@&#x27;host_name&#x27;，不加上的话默认当前账户。</span><br><span class="hljs-comment">2. 只能用PASSWORD(&#x27;cleartext password&#x27;)或&#x27;encrypted password&#x27;中一项，且必须一项。</span><br><span class="hljs-comment">3. cleartext password是明文，encrypted password是加密密码*/</span><br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">SET</span> PASSWORD <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;bob&#x27;</span>@<span class="hljs-string">&#x27;%.example.org&#x27;</span> <span class="hljs-operator">=</span> PASSWORD(<span class="hljs-string">&#x27;cleartext password&#x27;</span>);<br></code></pre></div></td></tr></table></figure><h3 id="11-2-用户权限管理"><a href="#11-2-用户权限管理" class="headerlink" title="11.2 用户权限管理"></a>11.2 用户权限管理</h3><p>新创建的账户没有访问权限，不能执行任何数据库操作。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--查看用户权限</span><br><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;user_name&#x27;</span>@<span class="hljs-string">&#x27;host_name&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h4 id="11-2-1-权限的授予"><a href="#11-2-1-权限的授予" class="headerlink" title="11.2.1 权限的授予"></a>11.2.1 权限的授予</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">GRANT</span><br>    priv_type [(column_list)]<br>      [, priv_type [(column_list)]] ...<br>    <span class="hljs-keyword">ON</span> [object_type] priv_level<br>    <span class="hljs-keyword">TO</span> user_specification [, user_specification] ...<br>    [<span class="hljs-keyword">WITH</span> with_option ...]<br><span class="hljs-comment">/*1. priv_type：用于指定权限的名称；</span><br><span class="hljs-comment">2. column_list：用于指定权限要授予给表中哪些具体的列；</span><br><span class="hljs-comment">3. ON: 用于指定权限授予的对象和级别；</span><br><span class="hljs-comment">4. object_type：可选项，指定权限授予的对象类型；</span><br><span class="hljs-comment">5. priv_level：指定权限的级别，可以授予的权限有：列权限、表权限、数据库权限和用户权限；&#x27;*&#x27;表示当前数据库中所有表，&#x27;*.*&#x27;表示所有数据库中所有表，&#x27;db_name.routine_name&#x27;表示某个数据库中某个存储程序或函数；</span><br><span class="hljs-comment">6. TO：用来设定用户口令，以及指定被授予权限的用户user。GRANT 语句也可以用来创建用户账户；</span><br><span class="hljs-comment">7. user_specification：语法格式为`user [IDENTIFIED BY [PASSWORD] &#x27;password&#x27;]`;</span><br><span class="hljs-comment">8. WITH with_option:用于权限转移；</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><p>其中<code>priv_type</code>可有以下选择:</p><ol><li><code>select</code>、<code>insert</code>、<code>update</code>、<code>delete</code>：允许读关系，或查询视图、插入元组、修改元组、删除元组</li><li><code>references</code>：创建关系时允许声明外键</li><li><code>CREATE</code>、<code>ALTER</code>、<code>DROP</code>: 允许创建表、修改表、删除表权限</li><li><code>INDEX</code>：允许定义索引权限</li><li><code>CREATE ROUTINE</code>、<code>ALTER ROUTINE</code>、<code>EXECUTE ROUTINE</code>：允许创建、更新/删除、调用特定数据库的存储过程和存储函数的权限</li><li><code>CREATE USER</code>、<code>SHOW DATABASES</code>:允许创建或删除新用户、查看已有数据库的定义的权限</li><li><code>all privileges</code>：所有权限</li><li><code>with grant option</code>：允许用户把被授予的权限再转授给其他用户</li></ol><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--授予张三再customers上拥有列cust_id和name的select权限*/</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> (cust_id,cust_name)<br>    <span class="hljs-keyword">ON</span> mysql_test.customers<br>    <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;zhangsan&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><br><span class="hljs-comment">/*示例2--创建李明和黄两个用户，并赋予表customers上SELECT和UPDATE权限*/</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>,UPDATE<br>    <span class="hljs-keyword">ON</span> mysql_test.customers<br>    <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;liming&#x27;</span>@<span class="hljs-string">&#x27;127.0.0.1&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123&#x27;</span><br>        <span class="hljs-string">&#x27;huang&#x27;</span>@<span class="hljs-string">&#x27;127.0.0.1&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;789&#x27;</span>;<br><br><span class="hljs-comment">/*示例3--授予王五mysql_test的所有表所有操作权限*/</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span><br>    <span class="hljs-keyword">ON</span> mysql_test.<span class="hljs-operator">*</span><br>    <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;wangwu&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><br><span class="hljs-comment">/*示例4--授予王五拥有创建用户权限*/</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span><br>    <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span><br>    <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;wangwu&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><br><span class="hljs-comment">/*示例5--授予用户可以SSH远程登录权限*/</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;登录密码&#x27;</span>;<br><span class="hljs-comment">--刷新权限</span><br>flush privileges;<br></code></pre></div></td></tr></table></figure><h4 id="11-2-2-权限的转移"><a href="#11-2-2-权限的转移" class="headerlink" title="11.2.2 权限的转移"></a>11.2.2 权限的转移</h4><p><code>with grant option</code>使用这条语句，可把自身拥有的权限赋予其他人</p><h4 id="11-2-3-权限的撤销"><a href="#11-2-3-权限的撤销" class="headerlink" title="11.2.3 权限的撤销"></a>11.2.3 权限的撤销</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">REVOKE</span><br>    priv_type [(column_list)]<br>      [, priv_type [(column_list)]] ...<br>    <span class="hljs-keyword">ON</span> [object_type] priv_level<br>    <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> [, <span class="hljs-keyword">user</span>] ...<br><br><span class="hljs-comment">/*语法格式--收回所有权限*/</span><br><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">ALL</span> PRIVILEGES, <span class="hljs-keyword">GRANT</span> OPTION <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> [,<span class="hljs-keyword">user</span>] ...<br><br><span class="hljs-comment">/*示例1*/</span><br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span><br>    <span class="hljs-keyword">on</span> mysql_test.customers <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;tom&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><span class="hljs-comment">/*从一用户收回权限可能导致其他用户也失去该权限，称为级联回收*/</span><br><br><span class="hljs-comment">/*示例2--指定restrict可以阻止级联回收*/</span><br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span><br>    <span class="hljs-keyword">on</span> instructor <span class="hljs-keyword">from</span> U1,U2,U3 restrict;<br><span class="hljs-comment">/*如果要求级联回收，则带有restrict的revoke命令将会失败*/</span><br></code></pre></div></td></tr></table></figure><h3 id="11-3-审计跟踪"><a href="#11-3-审计跟踪" class="headerlink" title="11.3 审计跟踪"></a>11.3 审计跟踪</h3><p>分为语句审计和对象审计</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式-语句审计</span><br>AUDIT <span class="hljs-operator">&lt;</span>st<span class="hljs-operator">-</span>opt<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">BY</span> <span class="hljs-operator">&lt;</span>users<span class="hljs-operator">&gt;</span>]<br>[<span class="hljs-keyword">BY</span> SESSION <span class="hljs-operator">|</span> ACCESS]<br>[<span class="hljs-keyword">WHENEVER</span> SUCCESSFUL <span class="hljs-operator">|</span> <span class="hljs-keyword">WHENEVER</span> <span class="hljs-keyword">NOT</span> SUCCESSFUL]<br><span class="hljs-comment">--当BY &lt;users&gt;缺省，对所有用户审计</span><br><span class="hljs-comment">--BY SESSION每次会话期间，相同类型的需审计的SQL语句仅记录一次</span><br><span class="hljs-comment">--常用的&lt;st-opt&gt;:table，view，role，index，……</span><br><span class="hljs-comment">--取消审计：NOAUDIT…（其余同audit语句）</span><br><br><span class="hljs-comment">/*示例--审计用户scott每次成功执行有关table的语句。*/</span><br>audit <span class="hljs-keyword">table</span> <span class="hljs-keyword">by</span> scott <span class="hljs-keyword">by</span> access <span class="hljs-keyword">whenever</span> successful;<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式-对象审计</span><br>AUDIT <span class="hljs-operator">&lt;</span>obj<span class="hljs-operator">-</span>opt<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ON</span> <span class="hljs-operator">&lt;</span>obj<span class="hljs-operator">&gt;</span><span class="hljs-operator">|</span><span class="hljs-keyword">DEFAULT</span><br>[<span class="hljs-keyword">BY</span> SESSION <span class="hljs-operator">|</span> <span class="hljs-keyword">BY</span> ACCESS]<br>[<span class="hljs-keyword">WHENEVER</span> SUCCESSFUL <span class="hljs-operator">|</span> <span class="hljs-keyword">WHENEVER</span> <span class="hljs-keyword">NOT</span> SUCCESSFUL]<br><span class="hljs-comment">--obj-opt:insert，delete，update，select，grant，…</span><br><span class="hljs-comment">--实体审计对所有的用户起作用</span><br><span class="hljs-comment">--ON&lt;obj&gt;指出审计对象表、视图名</span><br><span class="hljs-comment">--ONDEFAULT 对其后创建的所有对象起作用</span><br><span class="hljs-comment">--取消审计：NOAUDIT…</span><br><br><span class="hljs-comment">/*示例--审计所有用户对student表的delete和update操作*/</span><br>audit <span class="hljs-keyword">delete</span>,update <span class="hljs-keyword">on</span> student;<br></code></pre></div></td></tr></table></figure><h3 id="11-4-事务"><a href="#11-4-事务" class="headerlink" title="11.4 事务"></a>11.4 事务</h3><h4 id="11-4-1-事务的概念"><a href="#11-4-1-事务的概念" class="headerlink" title="11.4.1 事务的概念"></a>11.4.1 事务的概念</h4><p>当多个用户同时更新时，为了保证数据库的正确性，避免数据库的不一致性，控制这种并发操作的机制称为“并发控制”。而事务就是为保证数据的一致性而产生的一个概念和基本手段。</p><p><strong>事务（transaction）用户定义的一个数据操作序列，是一个完整的工作单元，要么全部执行，要么全部不执行。</strong></p><p>事务以<code>BEGIN TRANSACTION</code>语句开始。</p><p>下列SQL语句之一会结束一个事务：</p><ul><li><code>Commit</code>：提交当前事务，也就是将该事务所做的更新在数据库中持久保存。在事务被提交后，一个新的事务自动开始</li><li><code>Rollback</code>：回滚当前事务，即撤销该事务中所有SQL语句对数据库的更新。这样，数据库就恢复到执行该事务第一条语句之前的状态</li></ul><h4 id="11-4-2-事务的特征"><a href="#11-4-2-事务的特征" class="headerlink" title="11.4.2 事务的特征"></a>11.4.2 事务的特征</h4><p>为保证数据一致性和正确性，数据库确保事务具有如下4个特征，简称事务的ACID特征：</p><ol><li>原子性(Atomicity)：一组更新操作是原子不可分。</li><li>一致性(Consistency)：满足数据库完整性约束。</li><li>隔离性(Isolation)：事务彼此独立，隔离，不被其他事务干扰。一个执行完，另一个才能存取。</li><li>持续性(Durability)：一旦提交，对数据的改变是永久的。</li></ol><h4 id="11-4-3-并发操作问题"><a href="#11-4-3-并发操作问题" class="headerlink" title="11.4.3 并发操作问题"></a>11.4.3 并发操作问题</h4><p>事务的ACID特征可能遭到破坏的原因之一是多个事务对数据库的并发操作造成的。</p><p>典型的并发操作问题有如下三个：</p><ol><li>丢失更新：读入同一数据并修改，导致之前修改丢失。</li><li>不可重复读：读第一次和读第二次的结果不一样，因为别人在中间修改插入删除了某些数据<ol><li>事务T1读取某一数据后，T2对其修改，T1再次读到与之前不一样的值。</li><li>T1读取某一数据后，T2删除部分记录，T1再次读发现某些记录丢失了。</li><li>T1读取某一数据后，T2插入一些记录，T1再次读发现多了一些记录。</li></ol></li><li>读‘脏’数据：T1修改某一数据并写回，T2读取，T1撤销操作，T2的数据便是脏数据</li></ol><h4 id="11-4-4-封锁"><a href="#11-4-4-封锁" class="headerlink" title="11.4.4 封锁"></a>11.4.4 封锁</h4><p>封锁是最常用的并发控制技术。原理是：需要时，事务通过向系统请求对它所希望的数据对象加锁，确保它不被非预期改变。</p><h5 id="11-4-4-1-封锁类型"><a href="#11-4-4-1-封锁类型" class="headerlink" title="11.4.4.1 封锁类型"></a>11.4.4.1 封锁类型</h5><p>基本的封锁类型有两种：排他锁（X锁）、共享锁（S锁）。</p><ul><li><p><strong>排他锁：写锁</strong>。若事务T对数据对象A加上X锁，则只允许T读取和修改A，其他任何事务都不能再对A加任何类型的锁，直到T释放A上的锁为止。这就保证了其他事务在T释放A上的锁之前不能再读取和修改A。</p></li><li><p><strong>共享锁：读锁</strong>，若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁为止，这就保证了其他事务可以读A，但在T上释放A的S锁之前不能对A做任何修改。</p></li></ul><h5 id="11-4-4-2-封锁协议"><a href="#11-4-4-2-封锁协议" class="headerlink" title="11.4.4.2 封锁协议"></a>11.4.4.2 封锁协议</h5><ol><li><p>一级封锁协议：事务T在修改数据R前必须先对其加X锁，直到事务结束才释放。只能保证不发生丢失修改。</p></li><li><p>二级封锁协议：在一级封锁协议基础上，增加事务T在读取数据R前必须先对其加S锁，读完后即可释放S锁。增加保证了不发生读“脏”数据</p></li><li><p>三级封锁协议：在一级封锁协议的基础上，增加事务T在读取数据R前必须先对其加S锁，直到事务结束才释放进一步防止了不可重复读</p></li></ol><p>封锁协议级别越高，一致性程度越高</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/%E4%B8%8D%E5%90%8C%E7%BA%A7%E5%88%AB%E7%9A%84%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7%E4%BF%9D%E8%AF%81.png" alt="不同级别的封锁协议和一致性保证"></p><h5 id="11-4-4-3-活锁与死锁"><a href="#11-4-4-3-活锁与死锁" class="headerlink" title="11.4.4.3 活锁与死锁"></a>11.4.4.3 活锁与死锁</h5><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/%E6%B4%BB%E9%94%81.png" alt="活锁"></p><p>避免活锁最简单的方法是“先来先服务”。</p><p><strong>两个以上事务循环等待被同组中另一事务锁住的数据单元的情形，称为“死锁”。</strong></p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/%E6%AD%BB%E9%94%81.png" alt="死锁"></p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/%E6%AD%BB%E9%94%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.png" alt="死锁解决办法"></p><p>预防死锁的办法：</p><ol><li>一次封锁法：每个事务必须一次将所有要使用的数据全部加锁。<br> 缺点：降低了系统的并发度。而且数据是不断变化的，很难事先精确确定每个事务所要封锁的数据对象。</li><li>顺序封锁法：预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实现封锁。<br> 缺点：封锁的数据对象极多且在不断变化。事务的封锁请求随着事务的执行而动态地决定，很难事先确定。</li><li>序列化处理：通过应用设计为每一数据单元建立“主人程序”，所有请求发给“主人”，而“主人”以单道运行。<br> 缺点：系统性能、数据完整性可能受到影响。</li><li>资源剥夺：每当事务因锁请求不能满足而受阻，强行令冲突中的一方回滚，释放所有锁，然后重新运行。<br> 缺点：需要预防活锁发生。</li></ol><p>死锁的诊断与解除</p><ol><li>超时法：实现简单，用得最多<br> 缺点：可能误判。若时限太长不能及时发现</li><li>等待图法：精确判断死锁</li></ol><h5 id="11-4-4-4-可串行性"><a href="#11-4-4-4-可串行性" class="headerlink" title="11.4.4.4 可串行性"></a>11.4.4.4 可串行性</h5><p>定义：若一个调度等价于某一串行高度，即它所产生的结果与某一串行调度的结果一样，称这种调度是可串行化的。</p><p>两段封锁法是一种简单有效的保障封锁其调度是可串行性的方法。</p><p>两段封锁法：所有事务必须分两个阶段对数据项进行加锁和解锁</p><ul><li>在对任何数据进行读写操作之前，首先要申请并获得对该数据的封锁</li><li>在释放一个封锁之后，事务不再申请和获得任何其他封锁</li></ul><p>事务分为两个阶段：</p><ol><li>获得封锁，也称为扩展阶段，可以申请获得任何数据项上的任何类型的锁，不能释放任何锁</li><li>释放封锁，也称为收缩阶段，可以释放任何锁，但是不能申请任何锁</li></ol><p>可以证明，若并发执行的所有事务均遵守两段锁协议，则对这些事务的任何并发调度策略都是可串行化的（充分不必要条件），但是可能导致死锁。</p><h3 id="11-5-备份与恢复表"><a href="#11-5-备份与恢复表" class="headerlink" title="11.5 备份与恢复表"></a>11.5 备份与恢复表</h3><ol><li>用SELECT INTO … OUTFILE备份数据</li><li>用LOAD DATA…INFILE恢复数据</li></ol><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--备份语法格式</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">INTO</span> OUTFILE <span class="hljs-string">&#x27;file_name&#x27;</span> export_options<br>      <span class="hljs-operator">|</span> <span class="hljs-keyword">INTO</span> DUMPFILE <span class="hljs-string">&#x27;file_name&#x27;</span><br><span class="hljs-comment">/*其中export_options格式为*/</span><br>[&#123;FIELDS <span class="hljs-operator">|</span> COLUMNS&#125;<br>    [TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;string&#x27;</span>]<br>    [[OPTIONALLY] ENCLOSED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;char&#x27;</span>]<br>    [ESCAPED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;char&#x27;</span>]<br>]<br>[LINES TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;string&#x27;</span>]<br><span class="hljs-comment">/*1. FIELDS和LINES子句指定数据行在备份文件中存储的格式。</span><br><span class="hljs-comment">2. TERMINATED BY：指定字段值之间的符号；</span><br><span class="hljs-comment">3. ENCLOSED BY：指定包裹文件中字符值的符号；[OPTIONALLY]可选项，所有值都放在符号中。</span><br><span class="hljs-comment">4. ESCAPED BY：指定转义字符。</span><br><span class="hljs-comment">5. TERMINATED BY：指定数据行结束标志。</span><br><span class="hljs-comment">6. DUMPFILE：导出的所有数据行彼此紧挨，值与行之间没有标记。*/</span><br><br><span class="hljs-comment">--恢复语法格式</span><br>LOAD DATA INFILE <span class="hljs-string">&#x27;file_name&#x27;</span><br>    <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> tbl_name<br>    [&#123;FIELDS <span class="hljs-operator">|</span> COLUMNS&#125;<br>        [TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;string&#x27;</span>]<br>        [[OPTIONALLY] ENCLOSED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;char&#x27;</span>]<br>        [ESCAPED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;char&#x27;</span>]<br>    ]<br>    [LINES<br>        [STARTING <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;string&#x27;</span>]<br>        [TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;string&#x27;</span>]<br>    ]<br><span class="hljs-comment">/*STARTING BY：指定一个前缀，导入数据行时，忽略数据行中该前缀和前缀之间的内容。若某行不包括该前缀，则整个数据行被跳过。*/</span><br><br><span class="hljs-comment">/*示例--备份*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> mysql_test.customers<br>    <span class="hljs-keyword">INTO</span> OUTFILE <span class="hljs-string">&#x27;C:/BACKUP/backupfile.txt&#x27;</span><br>    FIELDS TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;,&#x27;</span><br>    OPTIONALLY ENCLOSED <span class="hljs-keyword">BY</span> &quot;&quot;<br>    LINES TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;?&#x27;</span>;<br><br><span class="hljs-comment">/*示例--恢复*/</span><br>LOAD DATA INFILE <span class="hljs-string">&#x27;C:/BACKUP/backupfile.txt&#x27;</span><br>    <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> mysql_test.customers_copy<br>    FIELDS TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;,&#x27;</span><br>    OPTIONALLY ENCLOSED <span class="hljs-keyword">BY</span> &quot;&quot;<br>    LINES TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;?&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p><strong>注意：多个用户使用MYSQL时，备份时在指定表上使用<code>LOCK TABLES table_name READ</code>语句做个读锁定，防止备份中被其他用户更新；恢复时使用<code>LOCK TABLES table_name WRITE</code>语句做个写锁定，防止数据冲突。备份恢复完成后，用<code>UNLOCK TABLES</code>语句对该表进行解锁。</strong></p><h2 id="十二、-数据库编程"><a href="#十二、-数据库编程" class="headerlink" title="十二、 数据库编程"></a>十二、 数据库编程</h2><h3 id="12-1-存储过程"><a href="#12-1-存储过程" class="headerlink" title="12.1 存储过程"></a>12.1 存储过程</h3><h4 id="12-1-1-存储过程的基本概念"><a href="#12-1-1-存储过程的基本概念" class="headerlink" title="12.1.1 存储过程的基本概念"></a>12.1.1 存储过程的基本概念</h4><p>存储过程是一组SQL语句编译成一个SQL。类似于批量处理的SQL脚本。</p><p>存储过程的好处：</p><ul><li>可增强SQL语言的功能和灵活性</li><li>良好的封装性</li><li>高性能</li><li>可减少网络流量</li><li>存储过程可作为一种安全机制来确保数据库的安全性和数据的完整性</li></ul><h4 id="12-1-2-创建存储过程"><a href="#12-1-2-创建存储过程" class="headerlink" title="12.1.2 创建存储过程"></a>12.1.2 创建存储过程</h4><p><code>delimiter</code>是<code>MySQL</code>中的命令，这个命令与存储过程没什么关系。</p><p>其实就是告诉<code>mysql</code>解释器，该段命令是否已经结束了，mysql是否可以执行了。即改变输入结束符。</p><p>默认情况下，<code>delimiter</code>是分号“;”。</p><p>但有时候，不希望<code>MySQL</code>这么做。因为可能输入较多的语句，且语句中包含有分号。</p><p>默认情况下，<code>mysql</code>一遇到分号，它就要自动执行。</p><p>这种情况下，就可以使用<code>delimiter</code>，把<code>delimiter</code>后面换成其它符号，如<code>//</code>或<code>$$</code>。</p><p>此时，<code>delimiter</code>作用就是对整个小段语句做一个简单的封装。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL">delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;<br></code></pre></div></td></tr></table></figure><p>每次使用完要记得换回原来的分号<code>;</code></p><p>使用<code>CREATE PROCEDURE</code>来创建存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> sp_name ([proc_parameter[,...]])<br>    routine_body<br><span class="hljs-comment">/*其中“proc_parameter”语法格式是[IN | OUT |INOUT]param_name type,</span><br><span class="hljs-comment">1.在此语法格式中，“sp_name”用于指定存储过程的名称，且默认在当前数据库中创建。</span><br><span class="hljs-comment">2.“proc_parameter”用于指定存储过程中的参数列表，“type”为SQL的数据类型。</span><br><span class="hljs-comment">3.IN | OUT |INOUT：表示输入、输出和输入/输出参数。输入参数传递参数给存储过程；输出参数用于存储过程返回一个操作结果；而输出/输出参数则两者皆可。</span><br><span class="hljs-comment">4.参数的取名不能和表中列名相同，会引发不可预知结果。</span><br><span class="hljs-comment">5.routine_body：表示存储过程的主体部分。以BEGIN开始，END结束。*/</span><br><br><span class="hljs-comment">/*示例*/</span><br>use test;<br>delimiter $$<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> sp_update_sex (<span class="hljs-keyword">IN</span> cid <span class="hljs-type">INT</span>,<span class="hljs-keyword">IN</span> csex <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>))<br><span class="hljs-keyword">BEGIN</span><br>    UPDATE customers <span class="hljs-keyword">SET</span> cust_sex<span class="hljs-operator">=</span>csex <span class="hljs-keyword">WHERE</span> cust_id<span class="hljs-operator">=</span>cid;<br><span class="hljs-keyword">END</span>$$<br>delimiter ;<br></code></pre></div></td></tr></table></figure><h4 id="12-1-3-存储过程体"><a href="#12-1-3-存储过程体" class="headerlink" title="12.1.3 存储过程体"></a>12.1.3 存储过程体</h4><h5 id="12-1-3-1-局部变量"><a href="#12-1-3-1-局部变量" class="headerlink" title="12.1.3.1 局部变量"></a>12.1.3.1 局部变量</h5><p>使用<code>DECLARE</code>语句来声明局部变量。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">DECLARE</span> var_name [, var_name] ... type [<span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">value</span>]<br><span class="hljs-comment">/*var_name:用于指定局部变量的名称。</span><br><span class="hljs-comment">type:用于声明局部变量的数据类型。</span><br><span class="hljs-comment">DEFAULT:用于为局部变量指定一个默认值，若没有指定，默认为NULL。*/</span><br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">DECLARE</span> cid <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>);<br><span class="hljs-comment">--局部变量智能在存储过程体的BEGIN...END语句块中声明使用。</span><br></code></pre></div></td></tr></table></figure><h5 id="12-1-3-2-SET语句"><a href="#12-1-3-2-SET语句" class="headerlink" title="12.1.3.2 SET语句"></a>12.1.3.2 SET语句</h5><p><code>SET</code>为局部变量赋值。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SET</span> var_name<span class="hljs-operator">=</span>expr [, var_name<span class="hljs-operator">=</span>expr] ...<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">SET</span> cid<span class="hljs-operator">=</span><span class="hljs-number">910</span>;<br></code></pre></div></td></tr></table></figure><h5 id="12-1-3-3-SELECT…INTO语句"><a href="#12-1-3-3-SELECT…INTO语句" class="headerlink" title="12.1.3.3 SELECT…INTO语句"></a>12.1.3.3 SELECT…INTO语句</h5><p><code>SELECT...INTO</code>语句把选定列的值直接存储到局部变量中。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span> col_name [,...] <span class="hljs-keyword">INTO</span> var_name [,...] table_expr<br><span class="hljs-comment">/*col_name用于指定列名。</span><br><span class="hljs-comment">var_name用于指定要赋值的变量名。</span><br><span class="hljs-comment">table_expr表示SELECT语句中FROM子句及其后面的语法部分。</span><br><span class="hljs-comment">SELECT...INTO语句返回的结果集只能有一行数据。*/</span><br></code></pre></div></td></tr></table></figure><h5 id="12-1-3-4-游标"><a href="#12-1-3-4-游标" class="headerlink" title="12.1.3.4 游标"></a>12.1.3.4 游标</h5><p>在使用<code>SELECT</code>语句检索时，返回的是一个结果集数据行，该结果集中有多行数据，这些数据无法被一行行的进行处理，此时，需要使用游标。</p><p>游标是一个被<code>SELECT</code>语句检索出来的结果集。在存储了游标后，应用程序或用户就可以根据需要滚动或浏览其中的数据。使用游标的步骤如下：</p><p>1） 声明游标</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">DECLARE</span> cursor_name <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> select_statement<br><span class="hljs-comment">/*1. cursor_name：用于指定要创建的游标的名称</span><br><span class="hljs-comment">2. select_statement:用于指定一个SELECT语句，返回一到多行数据。*/</span><br></code></pre></div></td></tr></table></figure><p>2） 打开游标</p><p>必须打开游标才能使用。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">OPEN</span> cursor_name;<br><span class="hljs-comment">/*游标可被打开多次，若其他用户或程序更新数据表，每次打开游标结果集可能不同*/</span><br></code></pre></div></td></tr></table></figure><p>3） 读取数据</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">FETCH</span> cursor_name <span class="hljs-keyword">INTO</span> var_name [,var_name] ...<br><span class="hljs-comment">/*cursor_name:用于指定已经打开的游标</span><br><span class="hljs-comment">var_name:指定存放数据的变量名*/</span><br></code></pre></div></td></tr></table></figure><p>4） 关闭游标</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">CLOSE</span> cursor_name;<br></code></pre></div></td></tr></table></figure><p>5） 示例</p><p>创建一个存储过程，用于计算表customers中数据行的行数。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL">delimiter $$<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> sp_sumofrow(<span class="hljs-keyword">out</span> <span class="hljs-keyword">rows</span> <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">declare</span> cid <span class="hljs-type">int</span>;<br>    <span class="hljs-keyword">declare</span> found <span class="hljs-type">boolean</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">declare</span> cur_cid <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br>        <span class="hljs-keyword">select</span> cust_id <span class="hljs-keyword">from</span> customers;<br>    <span class="hljs-keyword">declare</span> continue handler <span class="hljs-keyword">for</span> <span class="hljs-keyword">not</span> found<br>        <span class="hljs-keyword">set</span> found<span class="hljs-operator">=</span><span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">set</span> <span class="hljs-keyword">rows</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">open</span> cur_cid;<br>    <span class="hljs-keyword">fetch</span> cur_cid <span class="hljs-keyword">into</span> cid;<br>    while found do<br>        <span class="hljs-keyword">set</span> <span class="hljs-keyword">rows</span><span class="hljs-operator">=</span><span class="hljs-keyword">rows</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">fetch</span> cur_cid <span class="hljs-keyword">into</span> cid;<br>    <span class="hljs-keyword">end</span> while;<br>    <span class="hljs-keyword">close</span> cur_cid;<br><span class="hljs-keyword">end</span>$$<br>delimiter ;<br><span class="hljs-comment">/*定义一个CONTINUE HANDLER句柄，它是在条件出现时被执行的代码，用于控制循环语句，实现游标的下移。</span><br><span class="hljs-comment">定义局部变量必须在定义任意游标和句柄之前。*/</span><br><br><span class="hljs-comment">/*游标只能用于存储过程或存储函数中，不能单独在查询操作中使用。*/</span><br></code></pre></div></td></tr></table></figure><h4 id="12-1-4-调用存储过程"><a href="#12-1-4-调用存储过程" class="headerlink" title="12.1.4 调用存储过程"></a>12.1.4 调用存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">CALL</span> sp_name([<span class="hljs-keyword">parameter</span>[,...]]);<br><span class="hljs-keyword">CALL</span> sp_name[()];<br><span class="hljs-comment">/*sp_name:指定被调用的存储过程的名称。</span><br><span class="hljs-comment">parameter：指定调用存储过程所使用的参数*/</span><br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">CALL</span> sp_update_sex(<span class="hljs-number">909</span>,<span class="hljs-string">&#x27;M&#x27;</span>);<br></code></pre></div></td></tr></table></figure><h4 id="12-1-5-删除存储过程"><a href="#12-1-5-删除存储过程" class="headerlink" title="12.1.5 删除存储过程"></a>12.1.5 删除存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> [IF <span class="hljs-keyword">EXISTS</span>] sp_name;<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> IF <span class="hljs-keyword">EXISTS</span> sp_update_sex;<br></code></pre></div></td></tr></table></figure><h3 id="12-2-存储函数"><a href="#12-2-存储函数" class="headerlink" title="12.2 存储函数"></a>12.2 存储函数</h3><p>存储过程和存储函数的区别：</p><ul><li>存储函数不能拥有输出参数，自身即是输出参数；存储过程可以拥有输出参数</li><li>存储函数可以被直接调用，而存储过程必须通过CALL语句调用</li><li>存储函数中必须包含一条RETURN语句，而这条特殊的SQL语句不允许包含于存储过程中</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">--1.创建函数</span><br><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> sp_name ([func_parameter[,...]])<br>    <span class="hljs-keyword">RETURNS</span> type<br>    routine_body<br><br><span class="hljs-comment">/*示例--根据给定学生id号返回学生性别，如果没有给定id，则返回&quot;没有该学生&quot;*/</span><br>USE test;<br>DELIMITER $$<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> fn_search(cid <span class="hljs-type">INT</span>)<br>    <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> SEX <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">SELECT</span> gender <span class="hljs-keyword">INTO</span> SEX <span class="hljs-keyword">FROM</span> students<br>        <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span>cid;<br>    IF SEX <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">THEN</span><br>        <span class="hljs-keyword">RETURN</span>(<span class="hljs-keyword">SELECT</span> &quot;没有该学生&quot;);<br>    <span class="hljs-keyword">ELSE</span><br>        IF SEX<span class="hljs-operator">=</span><span class="hljs-string">&#x27;F&#x27;</span> <span class="hljs-keyword">THEN</span><br>            <span class="hljs-keyword">RETURN</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;女&#x27;</span>);<br>        <span class="hljs-keyword">ELSE</span><br>            <span class="hljs-keyword">RETURN</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;男&#x27;</span>);<br>        <span class="hljs-keyword">END</span> IF;<br>    <span class="hljs-keyword">END</span> IF;<br><span class="hljs-keyword">END</span>$$<br>DELIMITER ;<br><br><br><span class="hljs-comment">--2.调用函数</span><br><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">SELECT</span> sp_name([func_parameter[,...]])<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">SELECT</span> fn_search(<span class="hljs-number">10</span>);<br><br><br><span class="hljs-comment">--3.删除函数</span><br><span class="hljs-comment">--语法格式</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> [IF <span class="hljs-keyword">EXISTS</span>] sp_name<br><br><span class="hljs-comment">/*示例*/</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> IF <span class="hljs-keyword">EXISTS</span> fn_search;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用python控制鼠标和键盘</title>
    <link href="/2020/03/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E4%BD%BF%E7%94%A8python%E6%8E%A7%E5%88%B6%E9%BC%A0%E6%A0%87%E5%92%8C%E9%94%AE%E7%9B%98/"/>
    <url>/2020/03/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E4%BD%BF%E7%94%A8python%E6%8E%A7%E5%88%B6%E9%BC%A0%E6%A0%87%E5%92%8C%E9%94%AE%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<p>使用pyautogui这个库，来达到和按键精灵差不多的效果。可以运行在多平台。</p><p>PyAutoGUI的五个特点:</p><ul><li>移动鼠标点击或输入其他应用程序的窗口。</li><li>按键发送给应用程序(例如,填写表格)。</li><li>截图,给定一个图像(例如,一个按钮或复选框),在屏幕上找到它。</li><li>定位应用程序的窗口,和移动,调整,最大化、最小化、关闭(仅适用于windows,目前)</li><li>显示消息框进行用户交互,而您的GUI自动化脚本运行。</li></ul><h2 id="一：-安装pyautogui库"><a href="#一：-安装pyautogui库" class="headerlink" title="一： 安装pyautogui库"></a>一： 安装pyautogui库</h2><p><code>pip3 install pyautogui</code></p><p><strong>ubuntu系统，可能需要<code>sudo apt-get install python3-tk python3-dev</code>，如果安装不上，请参考<a href="https://pyautogui.readthedocs.io/en/latest/install.html">官方文档如何安装</a></strong></p><h2 id="二：-使用方法"><a href="#二：-使用方法" class="headerlink" title="二： 使用方法"></a>二： 使用方法</h2><p><a href="https://pyautogui.readthedocs.io/en/latest/">官方文档</a></p><h3 id="2-1-常规功能"><a href="#2-1-常规功能" class="headerlink" title="2.1 常规功能"></a>2.1 常规功能</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pyautogui<br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.position()  <span class="hljs-comment"># 当前鼠标 x， y坐标</span><br>(<span class="hljs-number">968</span>, <span class="hljs-number">56</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.size()  <span class="hljs-comment"># 当前屏幕分辨率宽和高</span><br>(<span class="hljs-number">1920</span>, <span class="hljs-number">1080</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.onScreen(x, y)  <span class="hljs-comment"># 鼠标坐标x且y，在屏幕内</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.PAUSE = <span class="hljs-number">2.5</span> <span class="hljs-comment"># 在每次PyAutoGUI调用之后设置2.5秒的暂停：</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-鼠标功能"><a href="#2-2-鼠标功能" class="headerlink" title="2.2 鼠标功能"></a>2.2 鼠标功能</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># XY坐标在屏幕的左上角具有0、0的原点。X向右增加，Y向向下增加。</span><br><br><span class="hljs-comment"># 移动鼠标</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.moveTo(x, y, duration=num_seconds)  <span class="hljs-comment"># num秒内移动鼠标到XY坐标</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.move(xOffset, yOffset, duration=num_seconds)  <span class="hljs-comment"># 相对于当前位置，鼠标移动XY</span><br><span class="hljs-comment"># 如果duration为0或未指定，则立即移动，duration以秒为单位。</span><br><span class="hljs-comment"># 例： pyautogui.move(300, 200, 2)</span><br><br><span class="hljs-comment"># 拖拽鼠标</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.dragTo(x, y, duration=num_seconds)  <span class="hljs-comment"># 拖拽鼠标到XY</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.drag(xOffset, yOffset, duration=num_seconds)  <span class="hljs-comment"># 相对于当前位置，鼠标拖拽XY</span><br><span class="hljs-comment"># 例： pyautogui.drag(300, 200, 2)</span><br><br><span class="hljs-comment"># 点击鼠标</span><br><span class="hljs-comment"># 调用click()即在鼠标的当前位置左键单击一次，但是关键字参数可以改变它：</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.click(x=moveToX, y=moveToY, clicks=num_of_clicks, interval=secs_between_clicks, button=<span class="hljs-string">&#x27;left&#x27;</span>)<br><span class="hljs-comment"># clicks关键字控制点击次数;interval关键字控制点击时间间隔。</span><br><span class="hljs-comment"># 该button关键字参数可以是&#x27;left&#x27;，&#x27;middle&#x27;或&#x27;right&#x27;。即左击，中击，右击。</span><br><span class="hljs-comment"># 例：pyautogui.click(300, 200,clicks=2,interval=3,button=&#x27;right&#x27;)</span><br><br><span class="hljs-comment"># 右击，中击及双、三击</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.rightClick(x=moveToX, y=moveToY)<br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.middleClick(x=moveToX, y=moveToY)<br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.doubleClick(x=moveToX, y=moveToY) <span class="hljs-comment"># 双击</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.tripleClick(x=moveToX, y=moveToY) <span class="hljs-comment"># 三击</span><br><br><span class="hljs-comment"># 鼠标中键滚动</span><br><span class="hljs-comment"># 正向滚动将向上滚动，负向滚动将向下滚动：</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.scroll(amount_to_scroll, x=moveToX, y=moveToY)<br><span class="hljs-comment"># 例： pyautogui.scroll(-10) </span><br><br><span class="hljs-comment"># 鼠标按下或者弹起：</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.mouseDown(x=moveToX, y=moveToY, button=<span class="hljs-string">&#x27;left&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.mouseUp(x=moveToX, y=moveToY, button=<span class="hljs-string">&#x27;left&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="2-3-键盘功能"><a href="#2-3-键盘功能" class="headerlink" title="2.3 键盘功能"></a>2.3 键盘功能</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># 在键盘光标所在的位置按键。</span><br><br><span class="hljs-comment"># 输入字符串</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.write(<span class="hljs-string">&#x27;Hello world!\n&#x27;</span>, interval=secs_between_keys)  <span class="hljs-comment"># 用于输入文本，回车换行</span><br><span class="hljs-comment"># interval是字母输入间隔时间</span><br><br><span class="hljs-comment"># 依次按下键盘</span><br><span class="hljs-comment"># 也可以传递键名列表：</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.write([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;backspace&#x27;</span>, <span class="hljs-string">&#x27;enter&#x27;</span>, <span class="hljs-string">&#x27;f1&#x27;</span>], interval=secs_between_keys)<br><span class="hljs-comment"># 键名的完整列表在pyautogui.KEYBOARD_KEYS中。</span><br><span class="hljs-comment"># 例： pyautogwrite([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], interval=0.25)</span><br><br><span class="hljs-comment"># 多次按键</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.press([<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;left&#x27;</span>])<br><span class="hljs-comment"># 或者你可以设置按多少次左键 :</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.press(<span class="hljs-string">&#x27;1&#x27;</span>, presses=<span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 键盘快捷键（如Ctrl-S或Ctrl-Shift-1）可以通过将键名列表传递给来完成hotkey()：</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.hotkey(<span class="hljs-string">&#x27;ctrl&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>)  <span class="hljs-comment"># ctrl-c to copy</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.hotkey(<span class="hljs-string">&#x27;ctrl&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>)  <span class="hljs-comment"># ctrl-v to paste</span><br><br><span class="hljs-comment"># 键盘按下和弹起可以分别调用：</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.keyDown(key_name)<br><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.keyUp(key_name)<br></code></pre></div></td></tr></table></figure><h3 id="2-4-消息框的功能"><a href="#2-4-消息框的功能" class="headerlink" title="2.4 消息框的功能"></a>2.4 消息框的功能</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># PyAutoGUI利用PyMsgBox消息框功能提供跨平台的,纯Python方法显示javascript式消息框。 有四个消息框功能。</span><br><br><span class="hljs-comment"># alert显示()函数 </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>alert(text=<span class="hljs-string">&#x27;&#x27;</span>, title=<span class="hljs-string">&#x27;&#x27;</span>, button=<span class="hljs-string">&#x27;OK&#x27;</span>)<br><span class="hljs-comment"># 显示一个简单的消息框,文本和一个OK按钮。 返回文本的按钮点击。</span><br><span class="hljs-comment"># 例：pyautogui.alert(&#x27;这将显示一些文本和OK按钮.&#x27;)</span><br><br><span class="hljs-comment"># confirm确认()函数 </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>confirm(text=<span class="hljs-string">&#x27;&#x27;</span>, title=<span class="hljs-string">&#x27;&#x27;</span>, buttons=[<span class="hljs-string">&#x27;OK&#x27;</span>, <span class="hljs-string">&#x27;Cancel&#x27;</span>])<br><span class="hljs-comment"># 显示一个消息框好和取消按钮。 数量和文本的按钮可以定制。 返回文本的按钮点击。</span><br><span class="hljs-comment"># 例： pyautogui.confirm(&#x27;显示文本和OK及取消键。&#x27;)</span><br><br><span class="hljs-comment"># prompt提示()函数 </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>prompt(text=<span class="hljs-string">&#x27;&#x27;</span>, title=<span class="hljs-string">&#x27;&#x27;</span> , default=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment"># 显示一个消息框,文本输入,OK和Cancel按钮。 返回输入的文本,或没有,如果点击取消。</span><br><span class="hljs-comment"># 例： pyautogui.prompt(text=&#x27;显示文本输入框，OK及取消键&#x27;, title=&#x27;标题&#x27; , default=&#x27;&#x27;)</span><br><br><span class="hljs-comment"># password密码()函数 </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>password(text=<span class="hljs-string">&#x27;&#x27;</span>, title=<span class="hljs-string">&#x27;&#x27;</span>, default=<span class="hljs-string">&#x27;&#x27;</span>, mask=<span class="hljs-string">&#x27;*&#x27;</span>)<br><span class="hljs-comment"># 显示一个消息框,文本输入,OK和Cancel按钮。 输入字符显示为 * 。 返回输入的文本,或没有,如果点击取消。</span><br><span class="hljs-comment"># 例： pyautogui.password(text=&#x27;显示文本输入框，OK及取消键&#x27;, title=&#x27;标题&#x27; , default=&#x27;默认密码&#x27; , mask=&#x27;*&#x27;)</span><br></code></pre></div></td></tr></table></figure><h3 id="2-5-屏幕截图功能"><a href="#2-5-屏幕截图功能" class="headerlink" title="2.5 屏幕截图功能"></a>2.5 屏幕截图功能</h3><p>在ubuntu系统中支持的不是很好，比较复杂。<br><a href="https://pyautogui.readthedocs.io/en/latest/screenshot.html">具体参照官方文档</a></p><p>还可以根据色块或图片返回对应的坐标。这个就比较强大啦。比如可以制作自动游戏脚本等等。</p><h2 id="三：-实战演练"><a href="#三：-实战演练" class="headerlink" title="三： 实战演练"></a>三： 实战演练</h2><h3 id="3-1-实时显示鼠标位置"><a href="#3-1-实时显示鼠标位置" class="headerlink" title="3.1 实时显示鼠标位置"></a>3.1 实时显示鼠标位置</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> pyautogui, sys<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Press Ctrl-C to quit.&#x27;</span>)<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        x, y = pyautogui.position()<br>        positionStr = <span class="hljs-string">&#x27;X: &#x27;</span> + <span class="hljs-built_in">str</span>(x).rjust(<span class="hljs-number">4</span>) + <span class="hljs-string">&#x27; Y: &#x27;</span> + <span class="hljs-built_in">str</span>(y).rjust(<span class="hljs-number">4</span>)<br>        <span class="hljs-built_in">print</span>(positionStr, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\b&#x27;</span> * <span class="hljs-built_in">len</span>(positionStr), end=<span class="hljs-string">&#x27;&#x27;</span>, flush=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">except</span> KeyboardInterrupt:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="3-2-画图软件中画出方形螺旋图"><a href="#3-2-画图软件中画出方形螺旋图" class="headerlink" title="3.2 画图软件中画出方形螺旋图"></a>3.2 画图软件中画出方形螺旋图</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> pyautogui<br>distance = <span class="hljs-number">200</span><br><span class="hljs-keyword">while</span> distance &gt; <span class="hljs-number">0</span>:<br>        pyautogui.drag(distance, <span class="hljs-number">0</span>, duration=<span class="hljs-number">0.5</span>)   <span class="hljs-comment"># move right</span><br>        distance -= <span class="hljs-number">5</span><br>        pyautogui.drag(<span class="hljs-number">0</span>, distance, duration=<span class="hljs-number">0.5</span>)   <span class="hljs-comment"># move down</span><br>        pyautogui.drag(-distance, <span class="hljs-number">0</span>, duration=<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># move left</span><br>        distance -= <span class="hljs-number">5</span><br>        pyautogui.drag(<span class="hljs-number">0</span>, -distance, duration=<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># move up</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>按键精灵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】 利用爬虫和树莓派打造萝莉音天气闹钟</title>
    <link href="/2020/03/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E3%80%90%E8%BD%AC%E3%80%91%C2%96%E5%88%A9%E7%94%A8%E7%88%AC%E8%99%AB%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%AD%E9%9F%B3%E5%A4%A9%E6%B0%94%E9%97%B9%E9%92%9F/"/>
    <url>/2020/03/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E3%80%90%E8%BD%AC%E3%80%91%C2%96%E5%88%A9%E7%94%A8%E7%88%AC%E8%99%AB%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%AD%E9%9F%B3%E5%A4%A9%E6%B0%94%E9%97%B9%E9%92%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://zhuanlan.zhihu.com/p/24983204?refer=woodenrobot">原帖地址</a></p></blockquote><h2 id="一、-前期准备"><a href="#一、-前期准备" class="headerlink" title="一、 前期准备"></a>一、 前期准备</h2><ol><li>树莓派一个</li><li>小音箱一对</li></ol><p><strong>获取所在位置天气</strong></p><p>这里选择墨迹天气获取实时天气信息，地址：</p><p><a href="http://tianqi.moji.com/">http://tianqi.moji.com/</a></p><p>进入墨迹天气的页面，墨迹天气会根据你的ip加载相应地区的天气。</p><p>这次我们主要抓取温度、天气、湿度、风力、空气质量和天气提示这几个数据。</p><p>这种小爬虫我们就使用requests和BeautifulSoup这两个超级好用的库可以快速实现。</p><h2 id="二、-环境"><a href="#二、-环境" class="headerlink" title="二、 环境"></a>二、 环境</h2><p>首先树莓派安装python3，python3-pip和requests、beautifulsoup4两个库及mplayer软件。</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sudo apt install python3 -y<br>sudo apt install python3-pip -y<br>pip3 install requests<br>pip3 install beautifulsoup4<br>sudo apt-get install mplayer -y<br></code></pre></div></td></tr></table></figure><p>至于Requests和Beautiful Soup的用法这里就先不多说了，大家可以去看他们的中文文档。</p><ol><li><a href="https://zh_cn/en/master/zh_CN/latest/index/">Requests中文wendnag</a></li><li><a href="https://beautifulsoup.readthedocs.io/zh_CN/latest/">Beautiful Soup中文文档</a></li></ol><p><strong>使用mplayer实现语音播放,通过以下命令安装mplayer:</strong></p><p>用法很简单输入以下命令即可播放本地音乐：</p><p><code>mplayer \xxx\xxx\xxx.mp3(绝对地址)</code></p><p>如果是在线音乐也可以用mplayer直接通过URL播放：</p><p><code>mplayer &quot;URl&quot;(URL外面一定要用双引号圈起来)</code></p><h2 id="三、-文字转语音"><a href="#三、-文字转语音" class="headerlink" title="三、 文字转语音"></a>三、 文字转语音</h2><p>刚开始想通过python的库实现本地文字转语音，在windows系统下没有问题，但树莓派3上中文无法转换。后来就找到了百度的文字转换语音API，地址：<a href="http://yuyin.baidu.com/#try">http://yuyin.baidu.com/#try</a></p><p>还可以选各种声音，调节语速。虽然它没有给出直接的api接口，但是我们利用Chrome浏览器的开发者模式可以找到api。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E5%88%A9%E7%94%A8%E7%88%AC%E8%99%AB%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE%E6%89%93%E9%80%A0%E8%90%9D%E8%8E%89%E9%9F%B3%E5%A4%A9%E6%B0%94%E9%97%B9%E9%92%9F.png" alt="百度语音识别"></p><p>打开开发者模式，点击播放的按钮，在network里就可以找到刚刚发出的请求。</p><p><a href="http://tts.baidu.com/text2audio?idx=1&amp;tex=1&amp;cuid=baidu_speech_demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=5&amp;per=4&amp;vol=5&amp;pit=5">http://tts.baidu.com/text2audio?idx=1&amp;tex=1&amp;cuid=baidu_speech_demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=5&amp;per=4&amp;vol=5&amp;pit=5</a></p><p>就我们要找的百度文字转语音API,其中per是参数是语音的类型，spd是语速，vol是音量，而tex则是需要转换的文字。通过以下代码就可以实现将特定的文字转换为语音。</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs PY"><span class="hljs-keyword">import</span> os<br>  <br>url = <span class="hljs-string">u&#x27;http://tts.baidu.com/text2audio?idx=1&amp;tex=&#123;0&#125;&amp;cuid=baidu_speech_&#x27;</span> \<br>      <span class="hljs-string">u&#x27;demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=4&amp;per=4&amp;vol=5&amp;pit=5&#x27;</span>.<span class="hljs-built_in">format</span>(text)<br>os.system(<span class="hljs-string">&#x27;mplayer &quot;%s&quot;&#x27;</span> % url)<br></code></pre></div></td></tr></table></figure><h2 id="四、-代码"><a href="#四、-代码" class="headerlink" title="四、 代码"></a>四、 代码</h2><p>numtozh()函数专门转换数字为中文。最后所有的代码整合起来就是这样啦。</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 新建weather_voice.py文件</span><br>touch weather_voice.py<br><span class="hljs-comment"># 黏贴如下代码</span><br>nano weather_voice.py<br></code></pre></div></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># !/usr/bin/python3</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime, timedelta<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit&#x27;</span><br>                  <span class="hljs-string">&#x27;/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safar&#x27;</span><br>                  <span class="hljs-string">&#x27;i/537.36&#x27;</span>,<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">numtozh</span>(<span class="hljs-params">num</span>):</span><br>    num_dict = &#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;一&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;二&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;三&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;四&#x27;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&#x27;五&#x27;</span>, <span class="hljs-number">6</span>: <span class="hljs-string">&#x27;六&#x27;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&#x27;七&#x27;</span>,<br>                <span class="hljs-number">8</span>: <span class="hljs-string">&#x27;八&#x27;</span>, <span class="hljs-number">9</span>: <span class="hljs-string">&#x27;九&#x27;</span>, <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;零&#x27;</span>&#125;<br>    num = <span class="hljs-built_in">int</span>(num)<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">100</span> &lt;= num &lt; <span class="hljs-number">1000</span>:<br>        b_num = num // <span class="hljs-number">100</span><br>        s_num = (num - b_num * <span class="hljs-number">100</span>) // <span class="hljs-number">10</span><br>        g_num = (num - b_num * <span class="hljs-number">100</span>) % <span class="hljs-number">10</span><br>        <span class="hljs-keyword">if</span> g_num == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> s_num == <span class="hljs-number">0</span>:<br>            num = <span class="hljs-string">&#x27;%s百&#x27;</span> % (num_dict[b_num])<br>        <span class="hljs-keyword">elif</span> s_num == <span class="hljs-number">0</span>:<br>            num = <span class="hljs-string">&#x27;%s百%s%s&#x27;</span> % (num_dict[b_num], num_dict.get(s_num, <span class="hljs-string">&#x27;&#x27;</span>), num_dict.get(g_num, <span class="hljs-string">&#x27;&#x27;</span>))<br>        <span class="hljs-keyword">elif</span> g_num == <span class="hljs-number">0</span>:<br>            num = <span class="hljs-string">&#x27;%s百%s十&#x27;</span> % (num_dict[b_num], num_dict.get(s_num, <span class="hljs-string">&#x27;&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            num = <span class="hljs-string">&#x27;%s百%s十%s&#x27;</span> % (num_dict[b_num], num_dict.get(s_num, <span class="hljs-string">&#x27;&#x27;</span>), num_dict.get(g_num, <span class="hljs-string">&#x27;&#x27;</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">10</span> &lt;= num &lt; <span class="hljs-number">100</span>:<br>        s_num = num // <span class="hljs-number">10</span><br>        g_num = (num - s_num * <span class="hljs-number">10</span>) % <span class="hljs-number">10</span><br>        <span class="hljs-keyword">if</span> g_num == <span class="hljs-number">0</span>:<br>            g_num = <span class="hljs-string">&#x27;&#x27;</span><br>        num = <span class="hljs-string">&#x27;%s十%s&#x27;</span> % (num_dict[s_num], num_dict.get(g_num, <span class="hljs-string">&#x27;&#x27;</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">0</span> &lt;= num &lt; <span class="hljs-number">10</span>:<br>        g_num = num<br>        num = <span class="hljs-string">&#x27;%s&#x27;</span> % (num_dict[g_num])<br>    <span class="hljs-keyword">elif</span> -<span class="hljs-number">10</span> &lt; num &lt; <span class="hljs-number">0</span>:<br>        g_num = -num<br>        num = <span class="hljs-string">&#x27;零下%s&#x27;</span> % (num_dict[g_num])<br>    <span class="hljs-keyword">elif</span> -<span class="hljs-number">100</span> &lt; num &lt;= -<span class="hljs-number">10</span>:<br>        num = -num<br>        s_num = num // <span class="hljs-number">10</span><br>        g_num = (num - s_num * <span class="hljs-number">10</span>) % <span class="hljs-number">10</span><br>        <span class="hljs-keyword">if</span> g_num == <span class="hljs-number">0</span>:<br>            g_num = <span class="hljs-string">&#x27;&#x27;</span><br>        num = <span class="hljs-string">&#x27;零下%s十%s&#x27;</span> % (num_dict[s_num], num_dict.get(g_num, <span class="hljs-string">&#x27;&#x27;</span>))<br>    <span class="hljs-keyword">return</span> num<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_weather</span>():</span><br>    <span class="hljs-comment"># 下载墨迹天气主页源码</span><br>    res = requests.get(<span class="hljs-string">&#x27;http://tianqi.moji.com/&#x27;</span>, headers=headers)<br>    <span class="hljs-comment"># 用BeautifulSoup获取所需信息</span><br>    soup = BeautifulSoup(res.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>    temp = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;wea_weather clearfix&#x27;</span>&#125;).em.getText()<br>    temp = numtozh(<span class="hljs-built_in">int</span>(temp))<br>    weather = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;wea_weather clearfix&#x27;</span>&#125;).b.getText()<br>    sd = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;wea_about clearfix&#x27;</span>&#125;).span.getText()<br>    sd_num = re.search(<span class="hljs-string">r&#x27;\d+&#x27;</span>, sd).group()<br>    sd_num_zh = numtozh(<span class="hljs-built_in">int</span>(sd_num))<br>    sd = sd.replace(sd_num, sd_num_zh)<br>    wind = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;wea_about clearfix&#x27;</span>&#125;).em.getText()<br>    aqi = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;wea_alert clearfix&#x27;</span>&#125;).em.getText()<br>    aqi_num = re.search(<span class="hljs-string">r&#x27;\d+&#x27;</span>, aqi).group()<br>    aqi_num_zh = numtozh(<span class="hljs-built_in">int</span>(aqi_num))<br>    aqi = aqi.replace(aqi_num, aqi_num_zh).replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;,空气质量&#x27;</span>)<br>    info = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;wea_tips clearfix&#x27;</span>&#125;).em.getText()<br>    sd = sd.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;百分之&#x27;</span>).replace(<span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    aqi = <span class="hljs-string">&#x27;aqi&#x27;</span> + aqi<br>    info = info.replace(<span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>)<br>    <span class="hljs-comment"># 获取今天的日期</span><br>    today = datetime.now().date().strftime(<span class="hljs-string">&#x27;%Y年%m月%d日&#x27;</span>)<br>    <span class="hljs-comment"># 将获取的信息拼接成一句话</span><br>    text = <span class="hljs-string">&#x27;早上好！今天是%s,天气%s,温度%s摄氏度,%s,%s,%s,%s&#x27;</span> % \<br>           (today, weather, temp, sd, wind, aqi, info)<br>    <span class="hljs-keyword">return</span> text<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">text2voice</span>(<span class="hljs-params">text</span>):</span><br>    url = <span class="hljs-string">&#x27;http://tts.baidu.com/text2audio?idx=1&amp;tex=&#123;0&#125;&amp;cuid=baidu_speech_&#x27;</span> \<br>          <span class="hljs-string">&#x27;demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=4&amp;per=4&amp;vol=5&amp;pit=5&#x27;</span>.<span class="hljs-built_in">format</span>(text)<br>    <span class="hljs-comment"># 直接播放语音</span><br>    os.system(<span class="hljs-string">&#x27;mplayer &quot;%s&quot;&#x27;</span> % url)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 获取需要转换语音的文字</span><br>    text = get_weather()<br>    <span class="hljs-built_in">print</span>(text)<br>    <span class="hljs-comment"># 获取音乐文件绝对地址</span><br>    mp3path2 = os.path.join(os.path.dirname(__file__), <span class="hljs-string">&#x27;2.mp3&#x27;</span>)<br>    <span class="hljs-comment"># 先播放渔舟唱晚cut版做为闹钟</span><br>    os.system(<span class="hljs-string">&#x27;mplayer %s&#x27;</span> % <span class="hljs-string">&quot;http://m7.music.126.net/20200321204545/92ef85b98df3233ebcf66b41529b1e0c/ymusic/714d/2975/d488/bcfd91fa30f23266c7151fbf43052634.mp3&quot;</span>)<br>    <span class="hljs-comment"># 播报语音天气</span><br>    text2voice(text)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><h2 id="五、-定时任务"><a href="#五、-定时任务" class="headerlink" title="五、 定时任务"></a>五、 定时任务</h2><p>输入如下命令添加定时任务。</p><p><code>crontab -e</code></p><p>每天8点语音天气。假设你的<code>weather_voice.py</code>绝对路径为<code>/home/pi/Documents/weather_voice.py</code>，则文末添加一句：</p><p><code>0 8 * * * /usr/bin/python3 /home/pi/Documents/weather_voice.py</code></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux VPS一键更换软件源脚本</title>
    <link href="/2020/03/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/Linux-VPS%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E8%84%9A%E6%9C%AC/"/>
    <url>/2020/03/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/Linux-VPS%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时候会遇到Linux的源更新速度非常的缓慢，特别是在国内使用默认的源，因为国内的网络环境，经常会出现无法更新，更新缓慢的情况。在这种情况下，更换一个更适合或者说更近，更快的软件源，会为你的Linux安装更新操作更加的流畅和顺利。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>系统要求</strong>：<code>CentOS 5+</code>、<code>Ubuntu 14.04+</code>、<code>Debian 7+</code></p><p>使用命令：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">#下载脚本</span><br>wget git.io/superupdate.sh<br><span class="hljs-comment">#运行脚本</span><br>bash superupdate.sh<br></code></pre></div></td></tr></table></figure><p>如果第一步你出现错误或执行后无任何输出，请检查是否安装<code>wget</code>和<code>ca-certificates</code>，使用命令：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">#Debian、Ubuntu</span><br>apt-get install -y wget &amp;&amp; apt-get install -y ca-certificates<br><span class="hljs-comment">#CentOS</span><br>yum install -y wget &amp;&amp; yum install -y ca-certificates<br></code></pre></div></td></tr></table></figure><p>对于Debian默认换源为<code>Fastly CDN</code>的<code>mirror</code>这个源有<code>Fastly</code>的加持对境外主机都有不错的速度。对于<code>Ubuntu</code>和 <code>CentOS</code>系统都默认换为阿里云的<code>mirror</code>，这个源有阿里云全球CDN的加持，全球都有不错的速度。</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>对于<code>Debian</code>系统还设置了四套其他的源，<code>阿里云</code>，<code>CloudFront CDN</code>，<code>网易163</code>，<code>中科大的源</code>，请根据需要使用参数一键设置如：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">bash superupdate.sh cn<br>bash superupdate.sh 163<br>bash superupdate.sh aliyun<br>bash superupdate.sh aws<br></code></pre></div></td></tr></table></figure><h2 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h2><p>如果配置的文件不满意，一键还原</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">bash superupdate.sh restore<br></code></pre></div></td></tr></table></figure><p><strong><a href="https://www.moerats.com/archives/784/">文章出处</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>换软件源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习之路 二：cookie</title>
    <link href="/2020/03/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%20%E4%BA%8C%EF%BC%9Acookie/"/>
    <url>/2020/03/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%20%E4%BA%8C%EF%BC%9Acookie/</url>
    
    <content type="html"><![CDATA[<h2 id="一：-查看cookie"><a href="#一：-查看cookie" class="headerlink" title="一： 查看cookie"></a>一： 查看cookie</h2><ol><li>查看cookie的方法：按下F12打开开发者工具。<br>在<code>network</code>中可以看到请求发送的信息，在返回头中，会带有服务器提供的设置cookie的信息。<br>在<code>application</code>当中，可以看到相应网站的所有cookie，并不是只有登录信息，也不是所有的网站都有cookie。</li><li>http协议是一个无状态的协议，用到cookie和session来保存访问中的一些状态。<br>cookie和session都是由服务器生成的，cookie将保存在浏览器的本地，session记录在服务端。</li><li>cookie的几大属性<ul><li>name：名字（键），cookie的必须字段。</li><li>value：值。</li><li>domain：域。cookie的作用域名。</li><li>path：表示路径。/表示当前域名下所有的网页都能使用该cookie。<br>domain和path结合在一起，限定了cookie的适用范围。</li><li>expires：生命周期。限定cookie的使用时间。如果生命周期为Session的，表示只在当前这次会话中cookie有效，关闭浏览器之后立即失效。</li><li>sessionID：本次访问的会话留下的ID号。</li></ul></li></ol><h2 id="二：-用request操作"><a href="#二：-用request操作" class="headerlink" title="二： 用request操作"></a>二： 用request操作</h2><h3 id="2-1-直接在headers中使用cookie"><a href="#2-1-直接在headers中使用cookie" class="headerlink" title="2.1 直接在headers中使用cookie"></a>2.1 直接在headers中使用cookie</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request<br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;按F12，在network中查看Cookie信息，复制进来即可&#x27;</span><br>&#125;<br>url = <span class="hljs-string">&#x27;http://www.renren.com/880151247/profile&#x27;</span><br><br>req = request.Request(url, headers=headers)<br>resp = request.urlopen(req)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;renren.html&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(resp.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></div></td></tr></table></figure><h3 id="2-2-cookie的文件存储与读取"><a href="#2-2-cookie的文件存储与读取" class="headerlink" title="2.2 cookie的文件存储与读取"></a>2.2 cookie的文件存储与读取</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 保存cookie到本地：</span><br><span class="hljs-comment"># 保存cookie到本地，可以使用cookiejar的save方法，并且需要指定一个文件名：</span><br><br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">from</span> http.cookiejar <span class="hljs-keyword">import</span> MozillaCookieJar<br><br>cookiejar = MozillaCookieJar(<span class="hljs-string">&quot;cookie.txt&quot;</span>)<br>handler = request.HTTPCookieProcessor(cookiejar)<br>opener = request.build_opener(handler)<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span><br>&#125;<br>req = request.Request(<span class="hljs-string">&#x27;http://httpbin.org/cookies&#x27;</span>,headers=headers)<br><br>resp = opener.<span class="hljs-built_in">open</span>(req)<br><span class="hljs-built_in">print</span>(resp.read())<br>cookiejar.save(ignore_discard=<span class="hljs-literal">True</span>,ignore_expires=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-comment"># 从本地加载cookie：</span><br><span class="hljs-comment"># 从本地加载cookie，需要使用cookiejar的load方法，并且也需要指定方法：</span><br><br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">from</span> http.cookiejar <span class="hljs-keyword">import</span> MozillaCookieJar<br><br>cookiejar = MozillaCookieJar(<span class="hljs-string">&quot;cookie.txt&quot;</span>)<br>cookiejar.load(ignore_expires=<span class="hljs-literal">True</span>,ignore_discard=<span class="hljs-literal">True</span>)<br>handler = request.HTTPCookieProcessor(cookiejar)<br>opener = request.build_opener(handler)<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span><br>&#125;<br>req = request.Request(<span class="hljs-string">&#x27;http://httpbin.org/cookies&#x27;</span>,headers=headers)<br><br>resp = opener.<span class="hljs-built_in">open</span>(req)<br><span class="hljs-built_in">print</span>(resp.read())<br></code></pre></div></td></tr></table></figure><h2 id="三：-用selenium操作"><a href="#三：-用selenium操作" class="headerlink" title="三： 用selenium操作"></a>三： 用selenium操作</h2><p>1 获取所有的cookie：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> cookie <span class="hljs-keyword">in</span> driver.get_cookies():<br>    <span class="hljs-built_in">print</span>(cookie)<br></code></pre></div></td></tr></table></figure><p>2 获取</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 获取cookie</span><br>driver.getcookie()<br><br><span class="hljs-comment"># 根据cookie的key获取value：</span><br>value = driver.get_cookie(key)<br></code></pre></div></td></tr></table></figure><p>3 删除所有的cookie：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">driver.delete_all_cookies()<br></code></pre></div></td></tr></table></figure><p>4 删除某个cookie：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">driver.delete_cookie(key)<br></code></pre></div></td></tr></table></figure><p>5 通过<code>driver.add_cookie(my_cookie)</code>的方法，加载cookie，在浏览器向服务端发起请求时带上cookie进行访问。</p><h2 id="四：-设置代理ip"><a href="#四：-设置代理ip" class="headerlink" title="四： 设置代理ip"></a>四： 设置代理ip</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br>options = webdriver.ChromeOptions()<br>options.add_argument(<span class="hljs-string">&quot;--proxy-server=http://110.73.2.248:8123&quot;</span>)<br>driver_path = <span class="hljs-string">r&quot;D:\chromedriver.exe&quot;</span><br>driver = webdriver.Chrome(executable_path=driver_path,chrome_options=options)<br><br>driver.get(<span class="hljs-string">&#x27;http://httpbin.org/ip&#x27;</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>cookie</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>cookie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派配置</title>
    <link href="/2020/03/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/03/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://gitee.com/openfans-community/Debian-Pi-Aarch64/blob/master/README_zh.md#3-2%E8%B4%A6%E6%88%B7%E5%8F%8A%E5%AF%86%E7%A0%81">64位系统Debian-Pi-Aarch64</a><br>集成了常用软件，配置简单。不需要换源，开箱即食。</p></blockquote><h2 id="零：-换源"><a href="#零：-换源" class="headerlink" title="零： 换源"></a>零： 换源</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/">清华大学源使用帮助</a></p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：</span><br><span class="hljs-string">deb</span> <span class="hljs-string">http://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os/raspbian/</span> <span class="hljs-string">buster</span> <span class="hljs-string">main</span> <span class="hljs-string">non-free</span> <span class="hljs-string">contrib</span> <span class="hljs-string">rpi</span><br><span class="hljs-string">deb-src</span> <span class="hljs-string">http://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os/raspbian/</span> <span class="hljs-string">buster</span> <span class="hljs-string">main</span> <span class="hljs-string">non-free</span> <span class="hljs-string">contrib</span> <span class="hljs-string">rpi</span><br><br><span class="hljs-comment"># 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：</span><br><span class="hljs-string">deb</span> <span class="hljs-string">http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/</span> <span class="hljs-string">buster</span> <span class="hljs-string">main</span> <span class="hljs-string">ui</span><br></code></pre></div></td></tr></table></figure><blockquote><p>注意：网址末尾的raspbian重复两次是必须的。因为 RPi OS 的仓库中除了APT软件源还包含其他代码。APT软件源不在仓库的根目录，而在raspbian/子目录下。<br>编辑镜像站后，请使用<code>sudo apt-get update</code>命令，更新软件源列表，同时检查您的编辑是否正确。</p></blockquote><h2 id="一-修改密码及时间"><a href="#一-修改密码及时间" class="headerlink" title="一: 修改密码及时间"></a>一: 修改密码及时间</h2><h3 id="1-1-开启SSH访问"><a href="#1-1-开启SSH访问" class="headerlink" title="1.1 开启SSH访问"></a>1.1 开启SSH访问</h3><p><code>sudo raspi-config</code></p><p>5 -&gt; P2 SSH -&gt; enable.</p><h3 id="1-2-设置su及pi密码"><a href="#1-2-设置su及pi密码" class="headerlink" title="1.2 设置su及pi密码"></a>1.2 设置su及pi密码</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo passwd pi                   # 修改 Pi 密码  <br>sudo passwd root                 # 设置 root 密码<br>su root                          # 切换到 root 用户  <br>su pi                            # 切换到 pi 用户<br><br>sudo nano /etc/ssh/sshd_config<br><span class="hljs-meta">#</span><span class="bash"> 编辑/etc/ssh/sshd_config文件，找到<span class="hljs-comment">#PermitRootLogin ...一行修改为：</span></span><br>PermitRootLogin yes<br>PubkeyAuthentication yes<br></code></pre></div></td></tr></table></figure><h3 id="1-3-修改时间"><a href="#1-3-修改时间" class="headerlink" title="1.3 修改时间"></a>1.3 修改时间</h3><p>使用date 语句查看时间，如不正确，则：首先在终端中用下面的命令安装ntpdate工具</p><p><code>sudo apt install ntpdate</code></p><p>启用NTP</p><p><code>sudo timedatectl set-ntp true</code></p><p>继续使用date语句查看时间，如不正确，则：</p><p><code>sudo dpkg-reconfigure tzdata</code></p><p>修改时区为Asia Shanghai，继续使用date语句查看时间并确认正确</p><h3 id="1-4-配置ssh"><a href="#1-4-配置ssh" class="headerlink" title="1.4 配置ssh"></a>1.4 配置ssh</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh-keygen -t rsa<br><span class="hljs-meta">#</span><span class="bash"> 连续回车</span><br><br>sudo cd ~/.ssh<br>sudo touch authorized_keys<br>sudo chmod 600 ~/.ssh/authorized_keys<br>sudo nano ~/.ssh/authorized_keys<br><span class="hljs-meta">#</span><span class="bash"> 将PC公匙复制进去，保存</span><br>service sshd restart<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 配置本地ssh无密码登录远程主机</span><br>ssh-copy-id username@remote-server<br><span class="hljs-meta">#</span><span class="bash"> 输入远程主机密码即可</span><br></code></pre></div></td></tr></table></figure><h2 id="二-中文环境"><a href="#二-中文环境" class="headerlink" title="二: 中文环境"></a>二: 中文环境</h2><h2 id="2-1-安装中文输入法"><a href="#2-1-安装中文输入法" class="headerlink" title="2.1 安装中文输入法"></a>2.1 安装中文输入法</h2><p><code>sudo apt install scim-pinyin</code></p><h2 id="2-2-配置中文环境"><a href="#2-2-配置中文环境" class="headerlink" title="2.2 配置中文环境"></a>2.2 配置中文环境</h2><p><code>sudo raspi-config</code></p><p>按4 -&gt; 1<br>在Configuring locales窗口中，找到zh_CN.UTF-8 UTF-8</p><p>空格选中，并在确认后再次选择zh_CN.UTF-8</p><h3 id="2-3-安装中文字库"><a href="#2-3-安装中文字库" class="headerlink" title="2.3 安装中文字库"></a>2.3 安装中文字库</h3><p><code>sudo apt install ttf-wqy-zenhei</code></p><p><code>reboot</code></p><h2 id="三-基本设置及软件"><a href="#三-基本设置及软件" class="headerlink" title="三: 基本设置及软件"></a>三: 基本设置及软件</h2><h3 id="3-1-设置为固定ip访问"><a href="#3-1-设置为固定ip访问" class="headerlink" title="3.1 设置为固定ip访问"></a>3.1 设置为固定ip访问</h3><p>先进入配置文件<br><code>sudo nano /etc/dhcpcd.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 有线设置</span><br>interface eth0<br><span class="hljs-meta">#</span><span class="bash"> 默认网关，即路由器ip</span><br>static routers=192.168.2.8<br><span class="hljs-meta">#</span><span class="bash"> DNS</span><br>static domain_name_servers=192.168.2.1 8.8.8.8<br>static ip_address=192.168.2.4/24<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 无线设置</span><br>interface wlan0<br><span class="hljs-meta">#</span><span class="bash"> 默认网关，即路由器ip</span><br>static routers=192.168.2.8<br><span class="hljs-meta">#</span><span class="bash"> DNS</span><br>static domain_name_servers=192.168.2.1 8.8.8.8<br>static ip_address=192.168.2.4/24<br></code></pre></div></td></tr></table></figure><p>如果是64位系统，设置如下文件：<br>修改 /boot/interfaces 文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> interfaces(5) file used by ifup(8) and ifdown(8)</span><br><span class="hljs-meta">#</span><span class="bash"> Include files from /etc/network/interfaces.d:</span><br>source-directory /etc/network/interfaces.d<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># Used dhcp ip address set eth0 inet to dhcp,</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># or used static ip address set eth0 to static</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># and change other ip settings.</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># If you wanna let settings to take effect,</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># uncomment symbol in front.</span></span><br><br>auto eth0<br>allow-hotplug eth0<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">iface eth0 inet dhcp</span><br>iface eth0 inet static<br>address 192.168.2.4<br>netmask 255.255.255.0<br>gateway 192.168.2.8<br>dns-nameservers 192.168.2.8 8.8.8.8<br></code></pre></div></td></tr></table></figure><h3 id="3-2-添加树莓派开机启动命令，如花生壳"><a href="#3-2-添加树莓派开机启动命令，如花生壳" class="headerlink" title="3.2 添加树莓派开机启动命令，如花生壳"></a>3.2 添加树莓派开机启动命令，如花生壳</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SH">sudo nano /etc/rc.local<br><br><span class="hljs-comment"># 在exit 0 的上一行输入命令。比如花生壳是用phddns.start启动，再这里加入后花生壳就会自动启动了。</span><br>sudo phddns.start<br></code></pre></div></td></tr></table></figure><h3 id="3-3-安装mysql-server"><a href="#3-3-安装mysql-server" class="headerlink" title="3.3 安装mysql-server"></a>3.3 安装mysql-server</h3><p>因mysql-server被收购，故安装mariadb-server，MariaDB是MySQL源代码的一个分支，一样用。</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sudo apt install mariadb-server -y<br><span class="hljs-comment"># 通过命令连接到MariaDB</span><br>sudo mysql<br></code></pre></div></td></tr></table></figure><p>接下来配置mysql密码访问。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL">use mysql;<br>UPDATE <span class="hljs-keyword">user</span> <span class="hljs-keyword">SET</span> password<span class="hljs-operator">=</span>password(<span class="hljs-string">&#x27;改为你的密码,比如root&#x27;</span>) <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span>;<br>UPDATE <span class="hljs-keyword">user</span> <span class="hljs-keyword">SET</span> plugin<span class="hljs-operator">=</span><span class="hljs-string">&#x27;mysql_native_password&#x27;</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;<br>flush privileges;<br>exit<br></code></pre></div></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 重启服务</span><br>sudo systemctl restart mariadb<br><span class="hljs-comment"># 密码登录mysql</span><br>mysql -u root -p<br></code></pre></div></td></tr></table></figure><p>下面配置MariaDB可远程连接</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># MariaDB默认只监听了127.0.0.1这个IP地址，是无法从外部连接到树莓派上MariaDB。故修改配置</span><br>sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf<br><span class="hljs-comment"># 注释其中的127.0.0.1所在一行，示例如下：</span><br><span class="hljs-comment"># bind-address            = 127.0.0.1</span><br><span class="hljs-comment"># 这样MariaDB就监听了所有的IP。</span><br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">--授权用户能够连接MariaDB Server</span><br>mysql <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;改为你的密码，如root&#x27;</span>;<br><span class="hljs-comment">--更新权限</span><br>FLUSH PRIVILEGES;<br></code></pre></div></td></tr></table></figure><h3 id="3-4-安装、配置和加速docker"><a href="#3-4-安装、配置和加速docker" class="headerlink" title="3.4 安装、配置和加速docker"></a>3.4 安装、配置和加速docker</h3><p><a href="https://shumeipai.nxez.com/2019/05/20/how-to-install-docker-on-your-raspberry-pi.html">安装教程</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 脚本安装</span><br>sudo curl -fsSL https://get.docker.com -o get-docker.sh | sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看版本</span><br>docker -v<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 配置docker镜像加速</span><br><span class="hljs-meta">#</span><span class="bash"> 阿里云镜像获取地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，登陆后，左侧菜单选中镜像加速器就可以看到你的专属地址了</span><br><span class="hljs-meta">#</span><span class="bash"> 按照页面的操作文档配置加速</span><br>sudo mkdir -p /etc/docker<br><br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://改为你的加速器地址.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br><br>sudo systemctl daemon-reload<br><br>sudo systemctl restart docker<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 下载 Docker 图形化界面 portainer</span><br>sudo docker pull portainer/portainer<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建 portainer 容器</span><br>sudo docker volume create portainer_data<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 运行 portainer</span><br>sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 输入树莓派ip:9000登录管理界面</span><br></code></pre></div></td></tr></table></figure><h3 id="3-5-其他常用软件"><a href="#3-5-其他常用软件" class="headerlink" title="3.5 其他常用软件"></a>3.5 其他常用软件</h3><p><code>sudo apt install git vim -y</code><br><code>sudo apt install tar gzip zip unzip bzip2 xz-utils -y</code></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关系数据库MySQL入门</title>
    <link href="/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93MySQL/"/>
    <url>/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93MySQL/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本文转载于GitHub项目<a href="https://github.com/jackfrued/Python-100-Days">Python - 100天从新手到大师</a></strong></p></blockquote><h3 id="一：-关系数据库概述"><a href="#一：-关系数据库概述" class="headerlink" title="一： 关系数据库概述"></a>一： 关系数据库概述</h3><ol><li><p>数据持久化 - 将数据保存到能够长久保存数据的存储介质中，在掉电的情况下数据也不会丢失。</p></li><li><p>数据库发展史 - 网状数据库、层次数据库、关系数据库、NoSQL数据库。</p><blockquote><p>1970年，IBM的研究员E.F.Codd在<em>Communication of the ACM</em>上发表了名为<em>A Relational Model of Data for Large Shared Data Banks</em>的论文，提出了关系模型的概念，奠定了关系模型的理论基础。后来Codd又陆续发表多篇文章，论述了范式理论和衡量关系系统的12条标准，用数学理论奠定了关系数据库的基础。</p></blockquote></li><li><p>关系数据库特点。</p><ul><li><p>理论基础：集合论和关系代数。</p></li><li><p>具体表象：用二维表（有行和列）组织数据。</p></li><li><p>编程语言：结构化查询语言（SQL）。</p></li></ul></li><li><p>ER模型（实体关系模型）和概念模型图。</p><p><strong>ER模型</strong>，全称为<strong>实体关系模型</strong>（Entity-Relationship Model），由美籍华裔计算机科学家陈品山先生提出，是概念数据模型的高层描述方式，如下图所示。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/er_diagram.png" alt="er_diagram.png"></p><ul><li>实体 - 矩形框</li><li>属性 - 椭圆框</li><li>关系 - 菱形框</li><li>重数 - 1:1（一对一） / 1:N（一对多） / M:N（多对多）</li></ul><p>实际项目开发中，我们可以利用数据库建模工具（如：PowerDesigner）来绘制概念数据模型（其本质就是ER模型），然后再设置好目标数据库系统，将概念模型转换成物理模型，最终生成创建二维表的SQL（很多工具都可以根据我们设计的物理模型图以及设定的目标数据库来导出SQL或直接生成数据表）。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/conceptual_model.png" alt="conceptual_model.png"></p></li><li><p>关系数据库产品。</p><ul><li><a href="https://www.oracle.com/index.html">Oracle</a> - 目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系数据库，它是一个完备关系的产品；作为分布式数据库，它实现了分布式处理的功能。在Oracle最新的12c版本中，还引入了多承租方架构，使用该架构可轻松部署和管理数据库云。</li><li><a href="https://www.ibm.com/analytics/us/en/db2/">DB2</a> - IBM公司开发的、主要运行于Unix（包括IBM自家的<a href="https://zh.wikipedia.org/wiki/AIX">AIX</a>）、Linux、以及Windows服务器版等系统的关系数据库产品。DB2历史悠久且被认为是最早使用SQL的数据库产品，它拥有较为强大的商业智能功能。</li><li><a href="https://www.microsoft.com/en-us/sql-server/">SQL Server</a> - 由Microsoft开发和推广的关系型数据库产品，最初适用于中小企业的数据管理，但是近年来它的应用范围有所扩展，部分大企业甚至是跨国公司也开始基于它来构建自己的数据管理系统。</li><li><a href="https://www.mysql.com/">MySQL</a> - MySQL是开放源代码的，任何人都可以在GPL（General Public License）的许可下下载并根据个性化的需要对其进行修改。MySQL因为其速度、可靠性和适应性而备受关注。</li><li><a href="">PostgreSQL</a> - 在BSD许可证下发行的开放源代码的关系数据库产品。</li></ul></li></ol><h3 id="二：-MySQL简介"><a href="#二：-MySQL简介" class="headerlink" title="二： MySQL简介"></a>二： MySQL简介</h3><p>MySQL最早是由瑞典的MySQL AB公司开发的一个开放源码的关系数据库管理系统，该公司于2008年被昇阳微系统公司（Sun Microsystems）收购。在2009年，甲骨文公司（Oracle）收购昇阳微系统公司，因此在这之后MySQL成为了Oracle旗下产品。</p><p>MySQL在过去由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用于中小型网站开发。随着MySQL的不断成熟，它也逐渐被应用于更多大规模网站和应用，比如维基百科、谷歌（Google）、脸书（Facebook）、淘宝网等网站都使用了MySQL来提供数据持久化服务。</p><p>甲骨文公司收购后昇阳微系统公司，大幅调涨MySQL商业版的售价，且甲骨文公司不再支持另一个自由软件项目<a href="https://zh.wikipedia.org/wiki/OpenSolaris">OpenSolaris</a>的发展，因此导致自由软件社区对于Oracle是否还会持续支持MySQL社区版（MySQL的各个发行版本中唯一免费的版本）有所担忧，MySQL的创始人麦克尔·维德纽斯以MySQL为基础，成立分支计划<a href="https://zh.wikipedia.org/wiki/MariaDB">MariaDB</a>（以他女儿的名字命名的数据库）。有许多原来使用MySQL数据库的公司（例如：维基百科）已经陆续完成了从MySQL数据库到MariaDB数据库的迁移。</p><ol><li><p>安装和配置</p><blockquote><p><strong>说明</strong>：下面的安装和配置都是以CentOS Linux环境为例，如果需要在其他系统下安装MySQL，读者可以自行在网络上查找对应的安装教程）。</p></blockquote><ul><li><p>刚才说过，MySQL有一个分支版本名叫MariaDB，该数据库旨在继续保持MySQL数据库在<a href="https://zh.wikipedia.org/wiki/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%AE%B8%E5%8F%AF%E8%AF%81">GNU GPL</a>下开源。如果要使用MariaDB作为MySQL的替代品，可以使用下面的命令进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">yum install mariadb mariadb-server<br></code></pre></div></td></tr></table></figure></li><li><p>如果要安装官方版本的MySQL，可以在<a href="https://www.mysql.com/">MySQL官方网站</a>下载安装文件。首先在下载页面中选择平台和版本，然后找到对应的下载链接。下面以MySQL 5.7.26版本和Red Hat Enterprise Linux为例，直接下载包含所有安装文件的归档文件，解归档之后通过包管理工具进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar<br>tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar<br></code></pre></div></td></tr></table></figure><p>如果系统上有MariaDB相关的文件，需要先移除MariaDB相关的文件。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">yum list installed | grep mariadb | awk &#x27;&#123;print $1&#125;&#x27; | xargs yum erase -y<br></code></pre></div></td></tr></table></figure><p>接下来可以按照如下所示的顺序用RPM（Redhat Package Manager）工具安装MySQL。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm<br></code></pre></div></td></tr></table></figure><p>可以使用下面的命令查看已经安装的MySQL相关的包。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">rpm -qa | grep mysql<br></code></pre></div></td></tr></table></figure></li><li><p>配置MySQL。</p><p>MySQL的配置文件在<code>/etc</code>目录下，名为<code>my.cnf</code>，默认的配置文件内容如下所示。如果对这个文件不理解并没有关系，什么时候用到这个配置文件什么时候再了解它就行了。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">cat /etc/my.cnf<br></code></pre></div></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs INI"><span class="hljs-comment"># For advice on how to change settings please see</span><br><span class="hljs-comment"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span><br><br><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="hljs-comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="hljs-comment"># innodb_buffer_pool_size = 128M</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="hljs-comment"># changes to the binary log between backups.</span><br><span class="hljs-comment"># log_bin</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="hljs-comment"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="hljs-comment"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="hljs-comment"># join_buffer_size = 128M</span><br><span class="hljs-comment"># sort_buffer_size = 2M</span><br><span class="hljs-comment"># read_rnd_buffer_size = 2M</span><br><span class="hljs-attr">datadir</span>=/var/lib/mysql<br><span class="hljs-attr">socket</span>=/var/lib/mysql/mysql.sock<br><br><span class="hljs-comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="hljs-attr">symbolic-links</span>=<span class="hljs-number">0</span><br><br><span class="hljs-attr">log-error</span>=/var/log/mysqld.log<br><span class="hljs-attr">pid-file</span>=/var/run/mysqld/mysqld.pid<br></code></pre></div></td></tr></table></figure></li><li><p>启动MySQL服务。</p><p>可以使用下面的命令来启动MySQL。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">service mysqld start<br></code></pre></div></td></tr></table></figure><p>在CentOS 7中，更推荐使用下面的命令来启动MySQL。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">systemctl start mysqld<br></code></pre></div></td></tr></table></figure><p>启动MySQL成功后，可以通过下面的命令来检查网络端口使用情况，MySQL默认使用3306端口。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">netstat -ntlp | grep mysql<br></code></pre></div></td></tr></table></figure><p>也可以使用下面的命令查找是否有名为mysqld的进程。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">pgrep mysqld<br></code></pre></div></td></tr></table></figure></li><li><p>使用MySQL客户端工具连接服务器。</p><p>命令行工具：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">mysql -u root -p<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：启动客户端时，<code>-u</code>参数用来指定用户名，MySQL默认的超级管理账号为<code>root</code>；<code>-p</code>表示要输入密码（用户口令）；如果连接的是其他主机而非本机，可以用<code>-h</code>来指定连接主机的主机名或IP地址。</p></blockquote><p>如果是首次安装MySQL，可以使用下面的命令来找到默认的初始密码。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">cat /var/log/mysqld.log | grep password<br></code></pre></div></td></tr></table></figure><p>上面的命令会查看MySQL的日志带有password的行，在显示的结果中<code>root@localhost:</code>后面的部分就是默认设置的初始密码。</p><p>修改超级管理员（root）的访问口令为<code>123456</code>。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password_policy<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password_length<span class="hljs-operator">=</span><span class="hljs-number">6</span>;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>说明</strong>：MySQL较新的版本默认不允许使用弱口令作为用户口令，所以我们通过上面的前两条命令修改了验证用户口令的策略和口令的长度。事实上我们不应该使用弱口令，因为存在用户口令被暴力破解的风险。近年来，攻击数据库窃取数据和劫持数据库勒索比特币的事件屡见不鲜，要避免这些潜在的风险，最为重要的一点是不要让数据库服务器暴露在公网上（最好的做法是将数据库置于内网，至少要做到不向公网开放数据库服务器的访问端口），另外要保管好<code>root</code>账号的口令，应用系统需要访问数据库时，通常不使用<code>root</code>账号进行访问，而是创建其他拥有适当权限的账号来访问。</p></blockquote><p>再次使用客户端工具连接MySQL服务器时，就可以使用新设置的口令了。在实际开发中，为了方便用户操作，可以选择图形化的客户端工具来连接MySQL服务器，包括：</p><ul><li>MySQL Workbench（官方提供的工具）</li><li>Navicat for MySQL（界面简单优雅，功能直观强大）</li><li>SQLyog for MySQL（强大的MySQL数据库管理员工具）</li></ul></li></ul></li><li><p>常用命令。</p><ul><li><p>查看服务器版本。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> version();<br></code></pre></div></td></tr></table></figure></li><li><p>查看所有数据库。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">show</span> databases;<br></code></pre></div></td></tr></table></figure></li><li><p>切换到指定数据库。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL">use mysql;<br></code></pre></div></td></tr></table></figure></li><li><p>查看数据库下所有表。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">show tables;<br></code></pre></div></td></tr></table></figure></li><li><p>获取帮助。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL">? contents;<br>? functions;<br>? <span class="hljs-type">numeric</span> functions;<br>? round;<br><br>? data types;<br>? longblob;<br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h3 id="三：-SQL详解"><a href="#三：-SQL详解" class="headerlink" title="三： SQL详解"></a>三： SQL详解</h3><h4 id="3-1-基本操作"><a href="#3-1-基本操作" class="headerlink" title="3.1 基本操作"></a>3.1 基本操作</h4><p>我们通常可以将SQL分为三类：DDL（数据定义语言）、DML（数据操作语言）和DCL（数据控制语言）。DDL主要用于创建（create）、删除（drop）、修改（alter）数据库中的对象，比如创建、删除和修改二维表；DML主要负责插入数据（insert）、删除数据（delete）、更新数据（update）和查询（select）；DCL通常用于授予权限（grant）和召回权限（revoke）。</p><blockquote><p>说明：SQL是不区分大小写的语言，为了书写方便，下面的SQL都使用了小写字母来书写。</p></blockquote><ol><li><p>DDL（数据定义语言）</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">-- 如果存在名为school的数据库就删除它</span><br><span class="hljs-keyword">drop</span> database if <span class="hljs-keyword">exists</span> school;<br><br><span class="hljs-comment">-- 创建名为school的数据库并设置默认的字符集和排序方式</span><br><span class="hljs-keyword">create</span> database school <span class="hljs-keyword">default</span> charset utf8;<br><br><span class="hljs-comment">-- 切换到school数据库上下文环境</span><br>use school;<br><br><span class="hljs-comment">-- 创建学院表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_college<br>(<br>collid <span class="hljs-type">int</span> auto_increment comment <span class="hljs-string">&#x27;编号&#x27;</span>,<br>collname <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;名称&#x27;</span>,<br>collintro <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> comment <span class="hljs-string">&#x27;介绍&#x27;</span>,<br><span class="hljs-keyword">primary</span> key (collid)<br>);<br><br><span class="hljs-comment">-- 创建学生表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_student<br>(<br>stuid <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;学号&#x27;</span>,<br>stuname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>stusex <span class="hljs-type">boolean</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1</span> comment <span class="hljs-string">&#x27;性别&#x27;</span>,<br>stubirth <span class="hljs-type">date</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;出生日期&#x27;</span>,<br>stuaddr <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> comment <span class="hljs-string">&#x27;籍贯&#x27;</span>,<br>collid <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;所属学院&#x27;</span>,<br><span class="hljs-keyword">primary</span> key (stuid),<br><span class="hljs-keyword">foreign</span> key (collid) <span class="hljs-keyword">references</span> tb_college (collid)<br>);<br><br><span class="hljs-comment">-- 创建教师表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_teacher<br>(<br>teaid <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;工号&#x27;</span>,<br>teaname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>teatitle <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;助教&#x27;</span> comment <span class="hljs-string">&#x27;职称&#x27;</span>,<br>collid <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;所属学院&#x27;</span>,<br><span class="hljs-keyword">primary</span> key (teaid),<br><span class="hljs-keyword">foreign</span> key (collid) <span class="hljs-keyword">references</span> tb_college (collid)<br>);<br><br><span class="hljs-comment">-- 创建课程表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_course<br>(<br>couid <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;编号&#x27;</span>,<br>couname <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;名称&#x27;</span>,<br>coucredit <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;学分&#x27;</span>,<br>teaid <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;授课老师&#x27;</span>,<br><span class="hljs-keyword">primary</span> key (couid),<br><span class="hljs-keyword">foreign</span> key (teaid) <span class="hljs-keyword">references</span> tb_teacher (teaid)<br>);<br><br><span class="hljs-comment">-- 创建选课记录表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_record<br>(<br>recid <span class="hljs-type">int</span> auto_increment comment <span class="hljs-string">&#x27;选课记录编号&#x27;</span>,<br>sid <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;选课学生&#x27;</span>,<br>cid <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;所选课程&#x27;</span>,<br>seldate datetime <span class="hljs-keyword">default</span> now() comment <span class="hljs-string">&#x27;选课时间日期&#x27;</span>,<br>score <span class="hljs-type">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;考试成绩&#x27;</span>,<br><span class="hljs-keyword">primary</span> key (recid),<br><span class="hljs-keyword">foreign</span> key (sid) <span class="hljs-keyword">references</span> tb_student (stuid),<br><span class="hljs-keyword">foreign</span> key (cid) <span class="hljs-keyword">references</span> tb_course (couid),<br><span class="hljs-keyword">unique</span> (sid, cid)<br>);<br></code></pre></div></td></tr></table></figure><p>上面的DDL有几个地方需要强调一下：</p><ul><li><p>创建数据库时，我们通过<code>default charset utf8</code>指定了数据库默认使用的字符集，我们推荐使用该字符集，因为utf8能够支持国际化编码。如果将来数据库中用到的字符可能包括类似于Emoji这样的图片字符，也可以将默认字符集设定为utf8mb4（最大4字节的utf-8编码）。查看MySQL支持的字符集可以执行下面的语句。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">show</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gherkin">+----------+---------------------------------+---------------------+--------+<br>|<span class="hljs-string"> Charset  </span>|<span class="hljs-string"> Description                     </span>|<span class="hljs-string"> Default collation   </span>|<span class="hljs-string"> Maxlen </span>|<br>+----------+---------------------------------+---------------------+--------+<br>|<span class="hljs-string"> big5     </span>|<span class="hljs-string"> Big5 Traditional Chinese        </span>|<span class="hljs-string"> big5_chinese_ci     </span>|<span class="hljs-string">      2 </span>|<br>|<span class="hljs-string"> dec8     </span>|<span class="hljs-string"> DEC West European               </span>|<span class="hljs-string"> dec8_swedish_ci     </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> cp850    </span>|<span class="hljs-string"> DOS West European               </span>|<span class="hljs-string"> cp850_general_ci    </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> hp8      </span>|<span class="hljs-string"> HP West European                </span>|<span class="hljs-string"> hp8_english_ci      </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> koi8r    </span>|<span class="hljs-string"> KOI8-R Relcom Russian           </span>|<span class="hljs-string"> koi8r_general_ci    </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> latin1   </span>|<span class="hljs-string"> cp1252 West European            </span>|<span class="hljs-string"> latin1_swedish_ci   </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> latin2   </span>|<span class="hljs-string"> ISO 8859-2 Central European     </span>|<span class="hljs-string"> latin2_general_ci   </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> swe7     </span>|<span class="hljs-string"> 7bit Swedish                    </span>|<span class="hljs-string"> swe7_swedish_ci     </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> ascii    </span>|<span class="hljs-string"> US ASCII                        </span>|<span class="hljs-string"> ascii_general_ci    </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> ujis     </span>|<span class="hljs-string"> EUC-JP Japanese                 </span>|<span class="hljs-string"> ujis_japanese_ci    </span>|<span class="hljs-string">      3 </span>|<br>|<span class="hljs-string"> sjis     </span>|<span class="hljs-string"> Shift-JIS Japanese              </span>|<span class="hljs-string"> sjis_japanese_ci    </span>|<span class="hljs-string">      2 </span>|<br>|<span class="hljs-string"> hebrew   </span>|<span class="hljs-string"> ISO 8859-8 Hebrew               </span>|<span class="hljs-string"> hebrew_general_ci   </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> tis620   </span>|<span class="hljs-string"> TIS620 Thai                     </span>|<span class="hljs-string"> tis620_thai_ci      </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> euckr    </span>|<span class="hljs-string"> EUC-KR Korean                   </span>|<span class="hljs-string"> euckr_korean_ci     </span>|<span class="hljs-string">      2 </span>|<br>|<span class="hljs-string"> koi8u    </span>|<span class="hljs-string"> KOI8-U Ukrainian                </span>|<span class="hljs-string"> koi8u_general_ci    </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> gb2312   </span>|<span class="hljs-string"> GB2312 Simplified Chinese       </span>|<span class="hljs-string"> gb2312_chinese_ci   </span>|<span class="hljs-string">      2 </span>|<br>|<span class="hljs-string"> greek    </span>|<span class="hljs-string"> ISO 8859-7 Greek                </span>|<span class="hljs-string"> greek_general_ci    </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> cp1250   </span>|<span class="hljs-string"> Windows Central European        </span>|<span class="hljs-string"> cp1250_general_ci   </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> gbk      </span>|<span class="hljs-string"> GBK Simplified Chinese          </span>|<span class="hljs-string"> gbk_chinese_ci      </span>|<span class="hljs-string">      2 </span>|<br>|<span class="hljs-string"> latin5   </span>|<span class="hljs-string"> ISO 8859-9 Turkish              </span>|<span class="hljs-string"> latin5_turkish_ci   </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> armscii8 </span>|<span class="hljs-string"> ARMSCII-8 Armenian              </span>|<span class="hljs-string"> armscii8_general_ci </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> utf8     </span>|<span class="hljs-string"> UTF-8 Unicode                   </span>|<span class="hljs-string"> utf8_general_ci     </span>|<span class="hljs-string">      3 </span>|<br>|<span class="hljs-string"> ucs2     </span>|<span class="hljs-string"> UCS-2 Unicode                   </span>|<span class="hljs-string"> ucs2_general_ci     </span>|<span class="hljs-string">      2 </span>|<br>|<span class="hljs-string"> cp866    </span>|<span class="hljs-string"> DOS Russian                     </span>|<span class="hljs-string"> cp866_general_ci    </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> keybcs2  </span>|<span class="hljs-string"> DOS Kamenicky Czech-Slovak      </span>|<span class="hljs-string"> keybcs2_general_ci  </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> macce    </span>|<span class="hljs-string"> Mac Central European            </span>|<span class="hljs-string"> macce_general_ci    </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> macroman </span>|<span class="hljs-string"> Mac West European               </span>|<span class="hljs-string"> macroman_general_ci </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> cp852    </span>|<span class="hljs-string"> DOS Central European            </span>|<span class="hljs-string"> cp852_general_ci    </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> latin7   </span>|<span class="hljs-string"> ISO 8859-13 Baltic              </span>|<span class="hljs-string"> latin7_general_ci   </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> utf8mb4  </span>|<span class="hljs-string"> UTF-8 Unicode                   </span>|<span class="hljs-string"> utf8mb4_general_ci  </span>|<span class="hljs-string">      4 </span>|<br>|<span class="hljs-string"> cp1251   </span>|<span class="hljs-string"> Windows Cyrillic                </span>|<span class="hljs-string"> cp1251_general_ci   </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> utf16    </span>|<span class="hljs-string"> UTF-16 Unicode                  </span>|<span class="hljs-string"> utf16_general_ci    </span>|<span class="hljs-string">      4 </span>|<br>|<span class="hljs-string"> utf16le  </span>|<span class="hljs-string"> UTF-16LE Unicode                </span>|<span class="hljs-string"> utf16le_general_ci  </span>|<span class="hljs-string">      4 </span>|<br>|<span class="hljs-string"> cp1256   </span>|<span class="hljs-string"> Windows Arabic                  </span>|<span class="hljs-string"> cp1256_general_ci   </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> cp1257   </span>|<span class="hljs-string"> Windows Baltic                  </span>|<span class="hljs-string"> cp1257_general_ci   </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> utf32    </span>|<span class="hljs-string"> UTF-32 Unicode                  </span>|<span class="hljs-string"> utf32_general_ci    </span>|<span class="hljs-string">      4 </span>|<br>|<span class="hljs-string"> binary   </span>|<span class="hljs-string"> Binary pseudo charset           </span>|<span class="hljs-string"> binary              </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> geostd8  </span>|<span class="hljs-string"> GEOSTD8 Georgian                </span>|<span class="hljs-string"> geostd8_general_ci  </span>|<span class="hljs-string">      1 </span>|<br>|<span class="hljs-string"> cp932    </span>|<span class="hljs-string"> SJIS for Windows Japanese       </span>|<span class="hljs-string"> cp932_japanese_ci   </span>|<span class="hljs-string">      2 </span>|<br>|<span class="hljs-string"> eucjpms  </span>|<span class="hljs-string"> UJIS for Windows Japanese       </span>|<span class="hljs-string"> eucjpms_japanese_ci </span>|<span class="hljs-string">      3 </span>|<br>|<span class="hljs-string"> gb18030  </span>|<span class="hljs-string"> China National Standard GB18030 </span>|<span class="hljs-string"> gb18030_chinese_ci  </span>|<span class="hljs-string">      4 </span>|<br>+----------+---------------------------------+---------------------+--------+<br>41 rows in set (0.00 sec)<br></code></pre></div></td></tr></table></figure><p>如果要设置MySQL服务启动时默认使用的字符集，可以修改MySQL的配置并添加以下内容</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs INI"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">character-set-server</span>=utf8<br></code></pre></div></td></tr></table></figure></li><li><p>在创建表的时候，我们可以在右圆括号的后面通过<code>engine=XXX</code>来指定表的存储引擎，MySQL支持多种存储引擎，可以通过<code>show engines</code>命令进行查看。MySQL 5.5以后的版本默认使用的存储引擎是InnoDB，它正好也就是我们推荐大家使用的存储引擎（因为InnoDB更适合互联网应用对高并发、性能以及事务支持等方面的需求）。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">show</span> engines\G<br></code></pre></div></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">* 1. row <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">      Engine: InnoDB</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Support: DEFAULT</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Comment: Supports transactions, row-level locking, and foreign keys</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">Transactions: YES</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">          XA: YES</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">  Savepoints: YES</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">* 2. row <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">      Engine: MRG_MYISAM</span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Support: YES</span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Comment: Collection of identical MyISAM tables</span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">Transactions: NO</span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">          XA: NO</span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">  Savepoints: NO</span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">* 3. row <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">      Engine: MEMORY</span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Support: YES</span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Comment: Hash based, stored in memory, useful for temporary tables</span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">Transactions: NO</span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">          XA: NO</span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">  Savepoints: NO</span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">* 4. row <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">      Engine: BLACKHOLE</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Support: YES</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Comment: /dev/null storage engine (anything you write to it disappears)</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">Transactions: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">          XA: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">  Savepoints: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">* 5. row <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">      Engine: MyISAM</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Support: YES</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Comment: MyISAM storage engine</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">Transactions: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">          XA: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">  Savepoints: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">* 6. row <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">      Engine: CSV</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Support: YES</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Comment: CSV storage engine</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">Transactions: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">          XA: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">  Savepoints: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">* 7. row <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">      Engine: ARCHIVE</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Support: YES</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Comment: Archive storage engine</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">Transactions: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">          XA: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">  Savepoints: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">* 8. row <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">      Engine: PERFORMANCE_SCHEMA</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Support: YES</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Comment: Performance Schema</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">Transactions: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">          XA: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">  Savepoints: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">* 9. row <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">      Engine: FEDERATED</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Support: NO</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">     Comment: Federated MySQL storage engine</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">Transactions: NULL</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">          XA: NULL</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">  Savepoints: NULL</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">9 rows in set (0.00 sec)</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br></code></pre></div></td></tr></table></figure><p>下面的表格对MySQL几种常用的数据引擎进行了简单的对比。</p><table><thead><tr><th>特性</th><th>InnoDB</th><th>MRG_MYISAM</th><th>MEMORY</th><th>MyISAM</th></tr></thead><tbody><tr><td>存储限制</td><td>有</td><td>没有</td><td>有</td><td>有</td></tr><tr><td>事务</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td></td><td></td><td>支持</td><td></td></tr><tr><td>全文检索</td><td>支持（5.6+）</td><td></td><td></td><td>支持</td></tr><tr><td>集群索引</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>数据缓存</td><td>支持</td><td></td><td>支持</td><td></td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据可压缩</td><td></td><td></td><td></td><td>支持</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中</td><td>低</td></tr><tr><td>存储空间使用</td><td>高</td><td>低</td><td></td><td>低</td></tr><tr><td>批量插入性能</td><td>低</td><td>高</td><td>高</td><td>高</td></tr><tr><td>是否支持外键</td><td>支持</td><td></td><td></td><td></td></tr></tbody></table><p>通过上面的比较我们可以了解到，InnoDB是唯一能够支持外键、事务以及行锁的存储引擎，所以我们之前说它更适合互联网应用，而且它也是较新的MySQL版本中默认使用的存储引擎。</p></li><li><p>在定义表结构为每个字段选择数据类型时，如果不清楚哪个数据类型更合适，可以通过MySQL的帮助系统来了解每种数据类型的特性、数据的长度和精度等相关信息。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL">? data types<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">You asked <span class="hljs-keyword">for</span> help about help category: &quot;Data Types&quot;<br><span class="hljs-keyword">For</span> more information, type <span class="hljs-string">&#x27;help &lt;item&gt;&#x27;</span>, <span class="hljs-keyword">where</span> <span class="hljs-operator">&lt;</span>item<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">one</span> <span class="hljs-keyword">of</span> the following<br>topics:<br>   AUTO_INCREMENT<br>   <span class="hljs-type">BIGINT</span><br>   <span class="hljs-type">BINARY</span><br>   BIT<br>   <span class="hljs-type">BLOB</span><br>   <span class="hljs-type">BLOB</span> DATA TYPE<br>   <span class="hljs-type">BOOLEAN</span><br>   <span class="hljs-type">CHAR</span><br>   <span class="hljs-type">CHAR</span> BYTE<br>   <span class="hljs-type">DATE</span><br>   DATETIME<br>   <span class="hljs-type">DEC</span><br>   <span class="hljs-type">DECIMAL</span><br>   <span class="hljs-keyword">DOUBLE</span><br>   <span class="hljs-type">DOUBLE PRECISION</span><br>   ENUM<br>   <span class="hljs-type">FLOAT</span><br>   <span class="hljs-type">INT</span><br>   <span class="hljs-type">INTEGER</span><br>   LONGBLOB<br>   LONGTEXT<br>   MEDIUMBLOB<br>   MEDIUMINT<br>   MEDIUMTEXT<br>   <span class="hljs-keyword">SET</span> DATA TYPE<br>   <span class="hljs-type">SMALLINT</span><br>   TEXT<br>   <span class="hljs-type">TIME</span><br>   <span class="hljs-type">TIMESTAMP</span><br>   TINYBLOB<br>   TINYINT<br>   TINYTEXT<br>   <span class="hljs-type">VARBINARY</span><br>   <span class="hljs-type">VARCHAR</span><br>   <span class="hljs-keyword">YEAR</span> DATA TYPE<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL">? <span class="hljs-type">varchar</span><br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">Name: <span class="hljs-string">&#x27;VARCHAR&#x27;</span><br>Description:<br>[<span class="hljs-type">NATIONAL</span>] <span class="hljs-type">VARCHAR</span>(M) [<span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> charset_name] [<span class="hljs-keyword">COLLATE</span><br>collation_name]<br><br>A variable<span class="hljs-operator">-</span>length string. M represents the maximum <span class="hljs-keyword">column</span> length <span class="hljs-keyword">in</span><br>characters. The <span class="hljs-keyword">range</span> <span class="hljs-keyword">of</span> M <span class="hljs-keyword">is</span> <span class="hljs-number">0</span> <span class="hljs-keyword">to</span> <span class="hljs-number">65</span>,<span class="hljs-number">535.</span> The effective maximum length<br><span class="hljs-keyword">of</span> a <span class="hljs-type">VARCHAR</span> <span class="hljs-keyword">is</span> subject <span class="hljs-keyword">to</span> the maximum <span class="hljs-type">row</span> size (<span class="hljs-number">65</span>,<span class="hljs-number">535</span> bytes, which <span class="hljs-keyword">is</span><br>shared among <span class="hljs-keyword">all</span> columns) <span class="hljs-keyword">and</span> the <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> used. <span class="hljs-keyword">For</span> example, utf8<br>characters can require up <span class="hljs-keyword">to</span> three bytes <span class="hljs-keyword">per</span> <span class="hljs-type">character</span>, so a <span class="hljs-type">VARCHAR</span><br><span class="hljs-keyword">column</span> that uses the utf8 <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> can be declared <span class="hljs-keyword">to</span> be a maximum<br><span class="hljs-keyword">of</span> <span class="hljs-number">21</span>,<span class="hljs-number">844</span> characters. See<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>dev.mysql.com<span class="hljs-operator">/</span>doc<span class="hljs-operator">/</span>refman<span class="hljs-operator">/</span><span class="hljs-number">5.7</span><span class="hljs-operator">/</span>en<span class="hljs-operator">/</span><span class="hljs-keyword">column</span><span class="hljs-operator">-</span>count<span class="hljs-operator">-</span>limit.html.<br><br>MySQL stores <span class="hljs-type">VARCHAR</span> <span class="hljs-keyword">values</span> <span class="hljs-keyword">as</span> a <span class="hljs-number">1</span><span class="hljs-operator">-</span>byte <span class="hljs-keyword">or</span> <span class="hljs-number">2</span><span class="hljs-operator">-</span>byte length prefix plus<br>data. The length prefix indicates the number <span class="hljs-keyword">of</span> bytes <span class="hljs-keyword">in</span> the value. A<br><span class="hljs-type">VARCHAR</span> <span class="hljs-keyword">column</span> uses <span class="hljs-keyword">one</span> length byte if <span class="hljs-keyword">values</span> require <span class="hljs-keyword">no</span> more than <span class="hljs-number">255</span><br>bytes, two length bytes if <span class="hljs-keyword">values</span> may require more than <span class="hljs-number">255</span> bytes.<br><br><span class="hljs-operator">*</span>Note<span class="hljs-operator">*</span>:<br><br>MySQL follows the standard <span class="hljs-keyword">SQL</span> specification, <span class="hljs-keyword">and</span> does <span class="hljs-keyword">not</span> remove<br><span class="hljs-keyword">trailing</span> spaces <span class="hljs-keyword">from</span> <span class="hljs-type">VARCHAR</span> values.<br><br><span class="hljs-type">VARCHAR</span> <span class="hljs-keyword">is</span> shorthand <span class="hljs-keyword">for</span> <span class="hljs-type">CHARACTER</span> VARYING. <span class="hljs-type">NATIONAL</span> <span class="hljs-type">VARCHAR</span> <span class="hljs-keyword">is</span> the<br>standard <span class="hljs-keyword">SQL</span> way <span class="hljs-keyword">to</span> <span class="hljs-keyword">define</span> that a <span class="hljs-type">VARCHAR</span> <span class="hljs-keyword">column</span> should use <span class="hljs-keyword">some</span><br>predefined <span class="hljs-type">character</span> <span class="hljs-keyword">set</span>. MySQL uses utf8 <span class="hljs-keyword">as</span> this predefined <span class="hljs-type">character</span><br>set. http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>dev.mysql.com<span class="hljs-operator">/</span>doc<span class="hljs-operator">/</span>refman<span class="hljs-operator">/</span><span class="hljs-number">5.7</span><span class="hljs-operator">/</span>en<span class="hljs-operator">/</span>charset<span class="hljs-operator">-</span>national.html.<br>NVARCHAR <span class="hljs-keyword">is</span> shorthand <span class="hljs-keyword">for</span> <span class="hljs-type">NATIONAL</span> VARCHAR.<br><br>URL: http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>dev.mysql.com<span class="hljs-operator">/</span>doc<span class="hljs-operator">/</span>refman<span class="hljs-operator">/</span><span class="hljs-number">5.7</span><span class="hljs-operator">/</span>en<span class="hljs-operator">/</span>string<span class="hljs-operator">-</span>type<span class="hljs-operator">-</span>overview.html<br></code></pre></div></td></tr></table></figure><p>在数据类型的选择上，保存字符串数据通常都使用VARCHAR和CHAR两种类型，前者通常称为变长字符串，而后者通常称为定长字符串；对于InnoDB存储引擎，行存储格式没有区分固定长度和可变长度列，因此VARCHAR类型好CHAR类型没有本质区别，后者不一定比前者性能更好。如果要保存的很大字符串，可以使用TEXT类型；如果要保存很大的字节串，可以使用BLOB（二进制大对象）类型。在MySQL中，TEXT和BLOB又分别包括TEXT、MEDIUMTEXT、LONGTEXT和BLOB、MEDIUMBLOB、LONGBLOB三种不同的类型，它们主要的区别在于存储数据的最大大小不同。保存浮点数可以用FLOAT或DOUBLE类型，而保存定点数应该使用DECIMAL类型。如果要保存时间日期，DATETIME类型优于TIMESTAMP类型，因为前者能表示的时间日期范围更大。</p></li></ul></li><li><p>DML</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">-- 插入学院数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_college (collname, collintro) <span class="hljs-keyword">values</span> <br>(<span class="hljs-string">&#x27;计算机学院&#x27;</span>, <span class="hljs-string">&#x27;创建于1956年是我国首批建立计算机专业。学院现有计算机科学与技术一级学科和网络空间安全一级学科博士学位授予权，其中计算机科学与技术一级学科具有博士后流动站。计算机科学与技术一级学科在2017年全国第四轮学科评估中评为A；2019 U.S.News全球计算机学科排名26名；ESI学科排名0.945‰，进入全球前1‰，位列第43位。&#x27;</span>),<br>(<span class="hljs-string">&#x27;外国语学院&#x27;</span>, <span class="hljs-string">&#x27;1998年浙江大学、杭州大学、浙江农业大学、浙江医科大学四校合并，成立新的浙江大学。1999年原浙江大学外语系、原杭州大学外国语学院、原杭州大学大外部、原浙江农业大学公外部、原浙江医科大学外语教学部合并，成立浙江大学外国语学院。2003年学院更名为浙江大学外国语言文化与国际交流学院。&#x27;</span>),<br>(<span class="hljs-string">&#x27;经济管理学院&#x27;</span>, <span class="hljs-string">&#x27;四川大学经济学院历史悠久、传承厚重，其前身是创办于1905年的四川大学经济科,距今已有100多年的历史。已故著名经济学家彭迪先、张与九、蒋学模、胡寄窗、陶大镛、胡代光，以及当代著名学者刘诗白等曾先后在此任教或学习。在长期的办学过程中，学院坚持以马克思主义的立场、观点、方法为指导，围绕建设世界一流经济学院的奋斗目标，做实“两个伟大”深度融合，不断提高党的建设质量与科学推进一流事业深度融合。&#x27;</span>);<br><br><span class="hljs-comment">-- 插入学生数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_student (stuid, stuname, stusex, stubirth, stuaddr, collid) <span class="hljs-keyword">values</span><br>(<span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;杨逍&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1990-3-4&#x27;</span>, <span class="hljs-string">&#x27;四川成都&#x27;</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-number">1002</span>, <span class="hljs-string">&#x27;任我行&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1992-2-2&#x27;</span>, <span class="hljs-string">&#x27;湖南长沙&#x27;</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-number">1033</span>, <span class="hljs-string">&#x27;王语嫣&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;1989-12-3&#x27;</span>, <span class="hljs-string">&#x27;四川成都&#x27;</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-number">1572</span>, <span class="hljs-string">&#x27;岳不群&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1993-7-19&#x27;</span>, <span class="hljs-string">&#x27;陕西咸阳&#x27;</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-number">1378</span>, <span class="hljs-string">&#x27;纪嫣然&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;1995-8-12&#x27;</span>, <span class="hljs-string">&#x27;四川绵阳&#x27;</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-number">1954</span>, <span class="hljs-string">&#x27;林平之&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1994-9-20&#x27;</span>, <span class="hljs-string">&#x27;福建莆田&#x27;</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-number">2035</span>, <span class="hljs-string">&#x27;东方不败&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1988-6-30&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">2</span>),<br>(<span class="hljs-number">3011</span>, <span class="hljs-string">&#x27;林震南&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1985-12-12&#x27;</span>, <span class="hljs-string">&#x27;福建莆田&#x27;</span>, <span class="hljs-number">3</span>),<br>(<span class="hljs-number">3755</span>, <span class="hljs-string">&#x27;项少龙&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1993-1-25&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">3</span>),<br>(<span class="hljs-number">3923</span>, <span class="hljs-string">&#x27;杨不悔&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;1985-4-17&#x27;</span>, <span class="hljs-string">&#x27;四川成都&#x27;</span>, <span class="hljs-number">3</span>),<br>(<span class="hljs-number">4040</span>, <span class="hljs-string">&#x27;隔壁老王&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1989-1-1&#x27;</span>, <span class="hljs-string">&#x27;四川成都&#x27;</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">-- 删除学生数据</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">4040</span>;<br><br><span class="hljs-comment">-- 更新学生数据</span><br>update tb_student <span class="hljs-keyword">set</span> stuname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;杨过&#x27;</span>, stuaddr<span class="hljs-operator">=</span><span class="hljs-string">&#x27;湖南长沙&#x27;</span> <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">1001</span>;<br><br><span class="hljs-comment">-- 插入老师数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_teacher (teaid, teaname, teatitle, collid) <span class="hljs-keyword">values</span> <br>(<span class="hljs-number">1122</span>, <span class="hljs-string">&#x27;张三丰&#x27;</span>, <span class="hljs-string">&#x27;教授&#x27;</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-number">1133</span>, <span class="hljs-string">&#x27;宋远桥&#x27;</span>, <span class="hljs-string">&#x27;副教授&#x27;</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-number">1144</span>, <span class="hljs-string">&#x27;杨逍&#x27;</span>, <span class="hljs-string">&#x27;副教授&#x27;</span>, <span class="hljs-number">1</span>),<br>(<span class="hljs-number">2255</span>, <span class="hljs-string">&#x27;范遥&#x27;</span>, <span class="hljs-string">&#x27;副教授&#x27;</span>, <span class="hljs-number">2</span>),<br>(<span class="hljs-number">3366</span>, <span class="hljs-string">&#x27;韦一笑&#x27;</span>, <span class="hljs-string">&#x27;讲师&#x27;</span>, <span class="hljs-number">3</span>);<br><br><span class="hljs-comment">-- 插入课程数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_course (couid, couname, coucredit, teaid) <span class="hljs-keyword">values</span> <br>(<span class="hljs-number">1111</span>, <span class="hljs-string">&#x27;Python程序设计&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1122</span>),<br>(<span class="hljs-number">2222</span>, <span class="hljs-string">&#x27;Web前端开发&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1122</span>),<br>(<span class="hljs-number">3333</span>, <span class="hljs-string">&#x27;操作系统&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1122</span>),<br>(<span class="hljs-number">4444</span>, <span class="hljs-string">&#x27;计算机网络&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1133</span>),<br>(<span class="hljs-number">5555</span>, <span class="hljs-string">&#x27;编译原理&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1144</span>),<br>(<span class="hljs-number">6666</span>, <span class="hljs-string">&#x27;算法和数据结构&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1144</span>),<br>(<span class="hljs-number">7777</span>, <span class="hljs-string">&#x27;经贸法语&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2255</span>),<br>(<span class="hljs-number">8888</span>, <span class="hljs-string">&#x27;成本会计&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3366</span>),<br>(<span class="hljs-number">9999</span>, <span class="hljs-string">&#x27;审计学&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3366</span>);<br><br><span class="hljs-comment">-- 插入选课数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_record (sid, cid, seldate, score) <span class="hljs-keyword">values</span> <br>(<span class="hljs-number">1001</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">&#x27;2017-09-01&#x27;</span>, <span class="hljs-number">95</span>),<br>(<span class="hljs-number">1001</span>, <span class="hljs-number">2222</span>, <span class="hljs-string">&#x27;2017-09-01&#x27;</span>, <span class="hljs-number">87.5</span>),<br>(<span class="hljs-number">1001</span>, <span class="hljs-number">3333</span>, <span class="hljs-string">&#x27;2017-09-01&#x27;</span>, <span class="hljs-number">100</span>),<br>(<span class="hljs-number">1001</span>, <span class="hljs-number">4444</span>, <span class="hljs-string">&#x27;2018-09-03&#x27;</span>, <span class="hljs-keyword">null</span>),<br>(<span class="hljs-number">1001</span>, <span class="hljs-number">6666</span>, <span class="hljs-string">&#x27;2017-09-02&#x27;</span>, <span class="hljs-number">100</span>),<br>(<span class="hljs-number">1002</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">&#x27;2017-09-03&#x27;</span>, <span class="hljs-number">65</span>),<br>(<span class="hljs-number">1002</span>, <span class="hljs-number">5555</span>, <span class="hljs-string">&#x27;2017-09-01&#x27;</span>, <span class="hljs-number">42</span>),<br>(<span class="hljs-number">1033</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">&#x27;2017-09-03&#x27;</span>, <span class="hljs-number">92.5</span>),<br>(<span class="hljs-number">1033</span>, <span class="hljs-number">4444</span>, <span class="hljs-string">&#x27;2017-09-01&#x27;</span>, <span class="hljs-number">78</span>),<br>(<span class="hljs-number">1033</span>, <span class="hljs-number">5555</span>, <span class="hljs-string">&#x27;2017-09-01&#x27;</span>, <span class="hljs-number">82.5</span>),<br>(<span class="hljs-number">1572</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">&#x27;2017-09-02&#x27;</span>, <span class="hljs-number">78</span>),<br>(<span class="hljs-number">1378</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">&#x27;2017-09-05&#x27;</span>, <span class="hljs-number">82</span>),<br>(<span class="hljs-number">1378</span>, <span class="hljs-number">7777</span>, <span class="hljs-string">&#x27;2017-09-02&#x27;</span>, <span class="hljs-number">65.5</span>),<br>(<span class="hljs-number">2035</span>, <span class="hljs-number">7777</span>, <span class="hljs-string">&#x27;2018-09-03&#x27;</span>, <span class="hljs-number">88</span>),<br>(<span class="hljs-number">2035</span>, <span class="hljs-number">9999</span>, <span class="hljs-keyword">default</span>, <span class="hljs-keyword">null</span>),<br>(<span class="hljs-number">3755</span>, <span class="hljs-number">1111</span>, <span class="hljs-keyword">default</span>, <span class="hljs-keyword">null</span>),<br>(<span class="hljs-number">3755</span>, <span class="hljs-number">8888</span>, <span class="hljs-keyword">default</span>, <span class="hljs-keyword">null</span>),<br>(<span class="hljs-number">3755</span>, <span class="hljs-number">9999</span>, <span class="hljs-string">&#x27;2017-09-01&#x27;</span>, <span class="hljs-number">92</span>);<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">-- 查询所有学生信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_student;<br><br><span class="hljs-comment">-- 查询所有课程名称及学分(投影和别名)</span><br><span class="hljs-keyword">select</span> couname, coucredit <span class="hljs-keyword">from</span> tb_course;<br><span class="hljs-keyword">select</span> couname <span class="hljs-keyword">as</span> 课程名称, coucredit <span class="hljs-keyword">as</span> 学分 <span class="hljs-keyword">from</span> tb_course;<br><br><span class="hljs-comment">-- 查询所有学生的姓名和性别(条件运算)</span><br><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">as</span> 姓名, <span class="hljs-keyword">case</span> stusex <span class="hljs-keyword">when</span> <span class="hljs-number">1</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> 性别 <span class="hljs-keyword">from</span> tb_student;<br><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">as</span> 姓名, if(stusex, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>) <span class="hljs-keyword">as</span> 性别 <span class="hljs-keyword">from</span> tb_student;<br><br><span class="hljs-comment">-- 查询所有女学生的姓名和出生日期(筛选)</span><br><span class="hljs-keyword">select</span> stuname, stubirth <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stusex<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- 查询所有80后学生的姓名、性别和出生日期(筛选)</span><br><span class="hljs-keyword">select</span> stuname, stusex, stubirth <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stubirth<span class="hljs-operator">&gt;=</span><span class="hljs-string">&#x27;1980-1-1&#x27;</span> <span class="hljs-keyword">and</span> stubirth<span class="hljs-operator">&lt;=</span><span class="hljs-string">&#x27;1989-12-31&#x27;</span>;<br><span class="hljs-keyword">select</span> stuname, stusex, stubirth <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stubirth <span class="hljs-keyword">between</span> <span class="hljs-string">&#x27;1980-1-1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1989-12-31&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓&quot;杨&quot;的学生姓名和性别(模糊)</span><br><span class="hljs-keyword">select</span> stuname, stusex <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;杨%&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓&quot;杨&quot;名字两个字的学生姓名和性别(模糊)</span><br><span class="hljs-keyword">select</span> stuname, stusex <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;杨_&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓&quot;杨&quot;名字三个字的学生姓名和性别(模糊)</span><br><span class="hljs-keyword">select</span> stuname, stusex <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;杨__&#x27;</span>;<br><br><span class="hljs-comment">-- 查询名字中有&quot;不&quot;字或&quot;嫣&quot;字的学生的姓名(模糊)</span><br><span class="hljs-keyword">select</span> stuname, stusex <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%不%&#x27;</span> <span class="hljs-keyword">or</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%嫣%&#x27;</span>;<br><br><span class="hljs-comment">-- 查询没有录入家庭住址的学生姓名(空值)</span><br><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuaddr <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br><br><span class="hljs-comment">-- 查询录入了家庭住址的学生姓名(空值)</span><br><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuaddr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br><br><span class="hljs-comment">-- 查询学生选课的所有日期(去重)</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> seldate <span class="hljs-keyword">from</span> tb_record;<br><br><span class="hljs-comment">-- 查询学生的家庭住址(去重)</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> stuaddr <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuaddr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br><br><span class="hljs-comment">-- 查询男学生的姓名和生日按年龄从大到小排列(排序)</span><br><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">as</span> 姓名, datediff(curdate(), stubirth) div <span class="hljs-number">365</span> <span class="hljs-keyword">as</span> 年龄 <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stusex<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 年龄 <span class="hljs-keyword">desc</span>;<br><br><span class="hljs-comment">-- 查询年龄最大的学生的出生日期(聚合函数)</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(stubirth) <span class="hljs-keyword">from</span> tb_student;<br><br><span class="hljs-comment">-- 查询年龄最小的学生的出生日期(聚合函数)</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(stubirth) <span class="hljs-keyword">from</span> tb_student;<br><br><span class="hljs-comment">-- 查询男女学生的人数(分组和聚合函数)</span><br><span class="hljs-keyword">select</span> stusex, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> stusex;<br><br><span class="hljs-comment">-- 查询课程编号为1111的课程的平均成绩(筛选和聚合函数)</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">where</span> cid<span class="hljs-operator">=</span><span class="hljs-number">1111</span>;<br><br><span class="hljs-comment">-- 查询学号为1001的学生所有课程的平均分(筛选和聚合函数)</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">where</span> sid<span class="hljs-operator">=</span><span class="hljs-number">1001</span>;<br><br><span class="hljs-comment">-- 查询每个学生的学号和平均成绩(分组和聚合函数)</span><br><span class="hljs-keyword">select</span> sid <span class="hljs-keyword">as</span> 学号, <span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">as</span> 平均分 <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid;<br><br><span class="hljs-comment">-- 查询平均成绩大于等于90分的学生的学号和平均成绩</span><br><span class="hljs-comment">-- 分组以前的筛选使用where子句 / 分组以后的筛选使用having子句</span><br><span class="hljs-keyword">select</span> sid <span class="hljs-keyword">as</span> 学号, <span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">as</span> 平均分 <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid <span class="hljs-keyword">having</span> 平均分<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span>;<br><br><span class="hljs-comment">-- 查询年龄最大的学生的姓名(子查询/嵌套的查询)</span><br><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stubirth<span class="hljs-operator">=</span>( <span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(stubirth) <span class="hljs-keyword">from</span> tb_student );<br><br><span class="hljs-comment">-- 查询年龄最大的学生姓名和年龄(子查询+运算)</span><br><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">as</span> 姓名, datediff(curdate(), stubirth) div <span class="hljs-number">365</span> <span class="hljs-keyword">as</span> 年龄 <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stubirth<span class="hljs-operator">=</span>( <span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(stubirth) <span class="hljs-keyword">from</span> tb_student );<br><br><span class="hljs-comment">-- 查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)</span><br><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuid <span class="hljs-keyword">in</span> ( <span class="hljs-keyword">select</span> stuid <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> stuid <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(stuid)<span class="hljs-operator">&gt;</span><span class="hljs-number">2</span> );<br><br><span class="hljs-comment">-- 查询学生姓名、课程名称以及成绩(连接查询)</span><br><span class="hljs-keyword">select</span> stuname, couname, score <span class="hljs-keyword">from</span> tb_student t1, tb_course t2, tb_record t3 <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span>sid <span class="hljs-keyword">and</span> couid<span class="hljs-operator">=</span>cid <span class="hljs-keyword">and</span> score <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br><br><span class="hljs-comment">-- 查询学生姓名、课程名称以及成绩按成绩从高到低查询第11-15条记录(内连接+分页)</span><br><span class="hljs-keyword">select</span> stuname, couname, score <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_record <span class="hljs-keyword">on</span> stuid<span class="hljs-operator">=</span>sid <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_course <span class="hljs-keyword">on</span> couid<span class="hljs-operator">=</span>cid <span class="hljs-keyword">where</span> score <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span> limit <span class="hljs-number">5</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">select</span> stuname, couname, score <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_record <span class="hljs-keyword">on</span> stuid<span class="hljs-operator">=</span>sid <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_course <span class="hljs-keyword">on</span> couid<span class="hljs-operator">=</span>cid <span class="hljs-keyword">where</span> score <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span> limit <span class="hljs-number">10</span>, <span class="hljs-number">5</span>;<br><br><span class="hljs-comment">-- 查询选课学生的姓名和平均成绩(子查询和连接查询)</span><br><span class="hljs-keyword">select</span> stuname, avgmark <span class="hljs-keyword">from</span> tb_student, ( <span class="hljs-keyword">select</span> sid, <span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">as</span> avgmark <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid ) temp <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span>sid;<br><br><span class="hljs-keyword">select</span> stuname, avgmark <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> ( <span class="hljs-keyword">select</span> sid, <span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">as</span> avgmark <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid ) temp <span class="hljs-keyword">on</span> stuid<span class="hljs-operator">=</span>sid;<br><br><span class="hljs-comment">-- 查询每个学生的姓名和选课数量(左外连接和子查询)</span><br><span class="hljs-keyword">select</span> stuname, ifnull(total, <span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> ( <span class="hljs-keyword">select</span> sid, <span class="hljs-built_in">count</span>(sid) <span class="hljs-keyword">as</span> total <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid ) temp <span class="hljs-keyword">on</span> stuid<span class="hljs-operator">=</span>sid;<br></code></pre></div></td></tr></table></figure><p>上面的DML有几个地方需要加以说明：</p><ol><li><p>MySQL中支持多种类型的运算符，包括：算术运算符（+、-、*、/、%）、比较运算符（=、&lt;&gt;、&lt;=&gt;、&lt;、&lt;=、&gt;、&gt;=、BETWEEN…AND…、IN、IS NULL、IS NOT NULL、LIKE、RLIKE、REGEXP）、逻辑运算符（NOT、AND、OR、XOR）和位运算符（&amp;、|、^、~、&gt;&gt;、&lt;&lt;），我们可以在DML中使用这些运算符处理数据。</p></li><li><p>在查询数据时，可以在SELECT语句及其子句（如WHERE子句、ORDER BY子句、HAVING子句等）中使用函数，这些函数包括字符串函数、数值函数、时间日期函数、流程函数等，如下面的表格所示。</p><p>常用字符串函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT</td><td>将多个字符串连接成一个字符串</td></tr><tr><td>FORMAT</td><td>将数值格式化成字符串并指定保留几位小数</td></tr><tr><td>FROM_BASE64 / TO_BASE64</td><td>BASE64解码/编码</td></tr><tr><td>BIN / OCT / HEX</td><td>将数值转换成二进制/八进制/十六进制字符串</td></tr><tr><td>LOCATE</td><td>在字符串中查找一个子串的位置</td></tr><tr><td>LEFT / RIGHT</td><td>返回一个字符串左边/右边指定长度的字符</td></tr><tr><td>LENGTH / CHAR_LENGTH</td><td>返回字符串的长度以字节/字符为单位</td></tr><tr><td>LOWER / UPPER</td><td>返回字符串的小写/大写形式</td></tr><tr><td>LPAD / RPAD</td><td>如果字符串的长度不足，在字符串左边/右边填充指定的字符</td></tr><tr><td>LTRIM / RTRIM</td><td>去掉字符串前面/后面的空格</td></tr><tr><td>ORD / CHAR</td><td>返回字符对应的编码/返回编码对应的字符</td></tr><tr><td>STRCMP</td><td>比较字符串，返回-1、0、1分别表示小于、等于、大于</td></tr><tr><td>SUBSTRING</td><td>返回字符串指定范围的子串</td></tr></tbody></table><p>常用数值函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>ABS</td><td>返回一个数的绝度值</td></tr><tr><td>CEILING / FLOOR</td><td>返回一个数上取整/下取整的结果</td></tr><tr><td>CONV</td><td>将一个数从一种进制转换成另一种进制</td></tr><tr><td>CRC32</td><td>计算循环冗余校验码</td></tr><tr><td>EXP / LOG / LOG2 / LOG10</td><td>计算指数/对数</td></tr><tr><td>POW</td><td>求幂</td></tr><tr><td>RAND</td><td>返回[0,1)范围的随机数</td></tr><tr><td>ROUND</td><td>返回一个数四舍五入后的结果</td></tr><tr><td>SQRT</td><td>返回一个数的平方根</td></tr><tr><td>TRUNCATE</td><td>截断一个数到指定的精度</td></tr><tr><td>SIN / COS / TAN / COT / ASIN / ACOS / ATAN</td><td>三角函数</td></tr></tbody></table><p>常用时间日期函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE / CURTIME / NOW</td><td>获取当前日期/时间/日期和时间</td></tr><tr><td>ADDDATE / SUBDATE</td><td>将两个日期表达式相加/相减并返回结果</td></tr><tr><td>DATE / TIME</td><td>从字符串中获取日期/时间</td></tr><tr><td>YEAR / MONTH / DAY</td><td>从日期中获取年/月/日</td></tr><tr><td>HOUR / MINUTE / SECOND</td><td>从时间中获取时/分/秒</td></tr><tr><td>DATEDIFF / TIMEDIFF</td><td>返回两个时间日期表达式相差多少天/小时</td></tr><tr><td>MAKEDATE / MAKETIME</td><td>制造一个日期/时间</td></tr></tbody></table><p>常用流程函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF</td><td>根据条件是否成立返回不同的值</td></tr><tr><td>IFNULL</td><td>如果为NULL则返回指定的值否则就返回本身</td></tr><tr><td>NULLIF</td><td>两个表达式相等就返回NULL否则返回第一个表达式的值</td></tr></tbody></table><p>其他常用函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>MD5 / SHA1 / SHA2</td><td>返回字符串对应的哈希摘要</td></tr><tr><td>CHARSET / COLLATION</td><td>返回字符集/校对规则</td></tr><tr><td>USER / CURRENT_USER</td><td>返回当前用户</td></tr><tr><td>DATABASE</td><td>返回当前数据库名</td></tr><tr><td>VERSION</td><td>返回当前数据库版本</td></tr><tr><td>FOUND_ROWS / ROW_COUNT</td><td>返回查询到的行数/受影响的行数</td></tr><tr><td>LAST_INSERT_ID</td><td>返回最后一个自增主键的值</td></tr><tr><td>UUID / UUID_SHORT</td><td>返回全局唯一标识符</td></tr></tbody></table></li></ol></li><li><p>DCL</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-comment">-- 创建可以远程登录的root账号并为其指定口令</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br><span class="hljs-comment">-- 为远程登录的root账号授权操作所有数据库所有对象的所有权限并允许其将权限再次赋予其他用户</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> option;<br><br><span class="hljs-comment">-- 创建名为hellokitty的用户并为其指定口令</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;hellokitty&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123123&#x27;</span>;<br><br><span class="hljs-comment">-- 将对school数据库所有对象的所有操作权限授予hellokitty</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> school.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;hellokitty&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br><br><span class="hljs-comment">-- 召回hellokitty对school数据库所有对象的insert/delete/update权限</span><br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">insert</span>, <span class="hljs-keyword">delete</span>, update <span class="hljs-keyword">on</span> school.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;hellokitty&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：创建一个可以允许任意主机登录并且具有超级管理员权限的用户在现实中并不是一个明智的决定，因为一旦该账号的口令泄露或者被破解，数据库将会面临灾难级的风险。</p></blockquote></li></ol><h4 id="3-2-索引"><a href="#3-2-索引" class="headerlink" title="3.2 索引"></a>3.2 索引</h4><p>索引是关系型数据库中用来提升查询性能最为重要的手段。关系型数据库中的索引就像一本书的目录，我们可以想象一下，如果要从一本书中找出某个知识点，但是这本书没有目录，这将是意见多么可怕的事情（我们估计得一篇一篇的翻下去，才能确定这个知识点到底在什么位置）。创建索引虽然会带来存储空间上的开销，就像一本书的目录会占用一部分的篇幅一样，但是在牺牲空间后换来的查询时间的减少也是非常显著的。</p><p>MySQL中，所有数据类型的列都可以被索引，常用的存储引擎InnoDB和MyISAM能支持每个表创建16个索引。InnoDB和MyISAM使用的索引其底层算法是B-tree（B树），B-tree是一种自平衡的树，类似于平衡二叉排序树，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的操作都在对数时间内完成。</p><p>接下来我们通过一个简单的例子来说明索引的意义，比如我们要根据学生的姓名来查找学生，这个场景在实际开发中应该经常遇到，就跟通过商品名称查找商品道理是一样的。我们可以使用MySQL的<code>explain</code>关键字来查看SQL的执行计划。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;林震南&#x27;</span>\G<br></code></pre></div></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">***************************</span> <span class="hljs-number">1</span><span class="hljs-string">.</span> <span class="hljs-string">row</span> <span class="hljs-string">***************************</span><br>           <span class="hljs-attr">id:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">select_type:</span> <span class="hljs-string">SIMPLE</span><br>        <span class="hljs-attr">table:</span> <span class="hljs-string">tb_student</span><br>   <span class="hljs-attr">partitions:</span> <span class="hljs-literal">NULL</span><br>         <span class="hljs-attr">type:</span> <span class="hljs-string">ALL</span><br><span class="hljs-attr">possible_keys:</span> <span class="hljs-literal">NULL</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-literal">NULL</span><br>      <span class="hljs-attr">key_len:</span> <span class="hljs-literal">NULL</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-literal">NULL</span><br>         <span class="hljs-attr">rows:</span> <span class="hljs-number">11</span><br>     <span class="hljs-attr">filtered:</span> <span class="hljs-number">10.00</span><br>        <span class="hljs-attr">Extra:</span> <span class="hljs-string">Using</span> <span class="hljs-string">where</span><br><span class="hljs-number">1</span> <span class="hljs-string">row</span> <span class="hljs-string">in</span> <span class="hljs-string">set,</span> <span class="hljs-number">1</span> <span class="hljs-string">warning</span> <span class="hljs-string">(0.00</span> <span class="hljs-string">sec)</span><br></code></pre></div></td></tr></table></figure><p>在上面的SQL执行计划中，有几项值得我们关注：</p><ol><li>type：MySQL在表中找到满足条件的行的方式，也称为访问类型，包括：ALL（全表扫描）、index（索引全扫描）、range（索引范围扫描）、ref（非唯一索引扫描）、eq_ref（唯一索引扫描）、const/system、NULL。在所有的访问类型中，很显然ALL是性能最差的，它代表了全表扫描是指要扫描表中的每一行才能找到匹配的行。</li><li>possible_keys：MySQL可以选择的索引，但是<strong>有可能不会使用</strong>。</li><li>key：MySQL真正使用的索引。</li><li>rows：执行查询需要扫描的行数，这是一个<strong>预估值</strong>。</li></ol><p>从上面的执行计划可以看出，当我们通过学生名字查询学生时实际上是进行了全表扫描，不言而喻这个查询性能肯定是非常糟糕的，尤其是在表中的行很多的时候。如果我们需要经常通过学生姓名来查询学生，那么就应该在学生姓名对应的列上创建索引，通过索引来加速查询。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> index idx_student_name <span class="hljs-keyword">on</span> tb_student(stuname);<br></code></pre></div></td></tr></table></figure><p>再次查看刚才的SQL对应的执行计划。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;林震南&#x27;</span>\G<br></code></pre></div></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">***************************</span> <span class="hljs-number">1</span><span class="hljs-string">.</span> <span class="hljs-string">row</span> <span class="hljs-string">***************************</span><br>           <span class="hljs-attr">id:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">select_type:</span> <span class="hljs-string">SIMPLE</span><br>        <span class="hljs-attr">table:</span> <span class="hljs-string">tb_student</span><br>   <span class="hljs-attr">partitions:</span> <span class="hljs-literal">NULL</span><br>         <span class="hljs-attr">type:</span> <span class="hljs-string">ref</span><br><span class="hljs-attr">possible_keys:</span> <span class="hljs-string">idx_student_name</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">idx_student_name</span><br>      <span class="hljs-attr">key_len:</span> <span class="hljs-number">62</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">const</span><br>         <span class="hljs-attr">rows:</span> <span class="hljs-number">1</span><br>     <span class="hljs-attr">filtered:</span> <span class="hljs-number">100.00</span><br>        <span class="hljs-attr">Extra:</span> <span class="hljs-literal">NULL</span><br><span class="hljs-number">1</span> <span class="hljs-string">row</span> <span class="hljs-string">in</span> <span class="hljs-string">set,</span> <span class="hljs-number">1</span> <span class="hljs-string">warning</span> <span class="hljs-string">(0.00</span> <span class="hljs-string">sec)</span><br></code></pre></div></td></tr></table></figure><p>可以注意到，在对学生姓名创建索引后，刚才的查询已经不是全表扫描而是基于索引的查询，而且扫描的行只有唯一的一行，这显然大大的提升了查询的性能。MySQL中还允许创建前缀索引，即对索引字段的前N个字符创建索引，这样的话可以减少索引占用的空间（但节省了空间很有可能会浪费时间，<strong>时间和空间是不可调和的矛盾</strong>），如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> index idx_student_name_1 <span class="hljs-keyword">on</span> tb_student(stuname(<span class="hljs-number">1</span>));<br></code></pre></div></td></tr></table></figure><p>上面的索引相当于是根据学生姓名的第一个字来创建的索引，我们再看看SQL执行计划。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;林震南&#x27;</span>\G<br></code></pre></div></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">***************************</span> <span class="hljs-number">1</span><span class="hljs-string">.</span> <span class="hljs-string">row</span> <span class="hljs-string">***************************</span><br>           <span class="hljs-attr">id:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">select_type:</span> <span class="hljs-string">SIMPLE</span><br>        <span class="hljs-attr">table:</span> <span class="hljs-string">tb_student</span><br>   <span class="hljs-attr">partitions:</span> <span class="hljs-literal">NULL</span><br>         <span class="hljs-attr">type:</span> <span class="hljs-string">ref</span><br><span class="hljs-attr">possible_keys:</span> <span class="hljs-string">idx_student_name</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">idx_student_name</span><br>      <span class="hljs-attr">key_len:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">const</span><br>         <span class="hljs-attr">rows:</span> <span class="hljs-number">2</span><br>     <span class="hljs-attr">filtered:</span> <span class="hljs-number">100.00</span><br>        <span class="hljs-attr">Extra:</span> <span class="hljs-string">Using</span> <span class="hljs-string">where</span><br><span class="hljs-number">1</span> <span class="hljs-string">row</span> <span class="hljs-string">in</span> <span class="hljs-string">set,</span> <span class="hljs-number">1</span> <span class="hljs-string">warning</span> <span class="hljs-string">(0.00</span> <span class="hljs-string">sec)</span><br></code></pre></div></td></tr></table></figure><p>不知道大家是否注意到，这一次扫描的行变成了2行，因为学生表中有两个姓“林”的学生，我们只用姓名的第一个字作为索引的话，在查询时通过索引就会找到这两行。</p><p>如果要删除索引，可以使用下面的SQL。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_student <span class="hljs-keyword">drop</span> index idx_student_name;<br></code></pre></div></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> index idx_student_name <span class="hljs-keyword">on</span> tb_student;<br></code></pre></div></td></tr></table></figure><p>我们简单的为大家总结一下索引的设计原则：</p><ol><li><strong>最适合</strong>索引的列是出现在<strong>WHERE子句</strong>和连接子句中的列。</li><li>索引列的基数越大（取值多重复值少），索引的效果就越好。</li><li>使用<strong>前缀索引</strong>可以减少索引占用的空间，内存中可以缓存更多的索引。</li><li><strong>索引不是越多越好</strong>，虽然索引加速了读操作（查询），但是写操作（增、删、改）都会变得更慢，因为数据的变化会导致索引的更新，就如同书籍章节的增删需要更新目录一样。</li><li>使用InnoDB存储引擎时，表的普通索引都会保存主键的值，所以<strong>主键要尽可能选择较短的数据类型</strong>，这样可以有效的减少索引占用的空间，利用提升索引的缓存效果。</li></ol><p>最后，还有一点需要说明，InnoDB使用的B-tree索引，数值类型的列除了等值判断时索引会生效之外，使用&gt;、&lt;、&gt;=、&lt;=、BETWEEN…AND… 、&lt;&gt;时，索引仍然生效；对于字符串类型的列，如果使用不以通配符开头的模糊查询，索引也是起作用的，但是其他的情况会导致索引失效，这就意味着很有可能会做全表查询。</p><h4 id="3-3-视图"><a href="#3-3-视图" class="headerlink" title="3.3 视图"></a>3.3 视图</h4><p>视图是关系型数据库中将一组查询指令构成的结果集组合成可查询的数据表的对象。简单的说，视图就是虚拟的表，但与数据表不同的是，数据表是一种实体结构，而视图是一种虚拟结构，你也可以将视图理解为保存在数据库中被赋予名字的SQL语句。</p><p>使用视图可以获得以下好处：</p><ol><li>可以将实体数据表隐藏起来，让外部程序无法得知实际的数据结构，让访问者可以使用表的组成部分而不是整个表，降低数据库被攻击的风险。</li><li>在大多数的情况下视图是只读的（更新视图的操作通常都有诸多的限制），外部程序无法直接透过视图修改数据。</li><li>重用SQL语句，将高度复杂的查询包装在视图表中，直接访问该视图即可取出需要的数据；也可以将视图视为数据表进行连接查询。</li><li>视图可以返回与实体数据表不同格式的数据，</li></ol><p>创建视图。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> vw_score <br><span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> sid, round(<span class="hljs-built_in">avg</span>(score), <span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> avgscore <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> vw_student_score <br><span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> stuname, avgscore <br><span class="hljs-keyword">from</span> tb_student, vw_score  <br><span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span>sid;<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>提示</strong>：因为视图不包含数据，所以每次使用视图时，都必须执行查询以获得数据，如果你使用了连接查询、嵌套查询创建了较为复杂的视图，你可能会发现查询性能下降得很厉害。因此，在使用复杂的视图前，应该进行测试以确保其性能能够满足应用的需求。</p></blockquote><p>使用视图。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> stuname, avgscore <span class="hljs-keyword">from</span> vw_student_score <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> avgscore <span class="hljs-keyword">desc</span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gherkin">+--------------+----------+<br>|<span class="hljs-string"> stuname      </span>|<span class="hljs-string"> avgscore </span>|<br>+--------------+----------+<br>|<span class="hljs-string"> 杨过         </span>|<span class="hljs-string">     95.6 </span>|<br>|<span class="hljs-string"> 任我行       </span>|<span class="hljs-string">     53.5 </span>|<br>|<span class="hljs-string"> 王语嫣       </span>|<span class="hljs-string">     84.3 </span>|<br>|<span class="hljs-string"> 纪嫣然       </span>|<span class="hljs-string">     73.8 </span>|<br>|<span class="hljs-string"> 岳不群       </span>|<span class="hljs-string">     78.0 </span>|<br>|<span class="hljs-string"> 东方不败     </span>|<span class="hljs-string">     88.0 </span>|<br>|<span class="hljs-string"> 项少龙       </span>|<span class="hljs-string">     92.0 </span>|<br>+--------------+----------+<br></code></pre></div></td></tr></table></figure><p>既然视图是一张虚拟的表，那么视图的中的数据可以更新吗？视图的可更新性要视具体情况而定，以下类型的视图是不能更新的：</p><ol><li>使用了聚合函数（SUM、MIN、MAX、AVG、COUNT等）、DISTINCT、GROUP BY、HAVING、UNION或者UNION ALL的视图。</li><li>SELECT中包含了子查询的视图。</li><li>FROM子句中包含了一个不能更新的视图的视图。</li><li>WHERE子句的子查询引用了FROM子句中的表的视图。</li></ol><p>删除视图。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> vw_student_score;<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>说明</strong>：如果希望更新视图，可以先用上面的命令删除视图，也可以通过<code>create or replace view</code>来更新视图。</p></blockquote><p>视图的规则和限制。</p><ol><li>视图可以嵌套，可以利用从其他视图中检索的数据来构造一个新的视图。视图也可以和表一起使用。</li><li>创建视图时可以使用<code>order by</code>子句，但如果从视图中检索数据时也使用了<code>order by</code>，那么该视图中原先的<code>order by</code>会被覆盖。</li><li>视图无法使用索引，也不会激发触发器（实际开发中因为性能等各方面的考虑，通常不建议使用触发器，所以我们也不对这个概念进行介绍）的执行。</li></ol><h4 id="3-4-存储过程"><a href="#3-4-存储过程" class="headerlink" title="3.4 存储过程"></a>3.4 存储过程</h4><p>存储过程是事先编译好存储在数据库中的一组SQL的集合，调用存储过程可以简化应用程序开发人员的工作，减少与数据库服务器之间的通信，对于提升数据操作的性能也是有帮助的。其实迄今为止，我们使用的SQL语句都是针对一个或多个表的单条语句，但在实际开发中经常会遇到某个操作需要多条SQL语句才能完成的情况。例如，电商网站在受理用户订单时，需要做以下一系列的处理。 </p><ol><li>通过查询来核对库存中是否有对应的物品以及库存是否充足。</li><li>如果库存有物品，需要锁定库存以确保这些物品不再卖给别人， 并且要减少可用的物品数量以反映正确的库存量。</li><li>如果库存不足，可能需要进一步与供应商进行交互或者至少产生一条系统提示消息。 </li><li>不管受理订单是否成功，都需要产生流水记录，而且需要给对应的用户产生一条通知信息。 </li></ol><p>我们可以通过存储过程将复杂的操作封装起来，这样不仅有助于保证数据的一致性，而且将来如果业务发生了变动，只需要调整和修改存储过程即可。对于调用存储过程的用户来说，存储过程并没有暴露数据表的细节，而且执行存储过程比一条条的执行一组SQL要快得多。</p><p>下面的存储过程实现了查询某门课程的最高分、最低分和平均分。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> if <span class="hljs-keyword">exists</span> sp_score_by_cid;<br><br>delimiter $$<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> sp_score_by_cid(<br>courseId <span class="hljs-type">int</span>, <br><span class="hljs-keyword">out</span> maxScore <span class="hljs-type">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>), <br><span class="hljs-keyword">out</span> minScore <span class="hljs-type">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>),<br><span class="hljs-keyword">out</span> avgScore <span class="hljs-type">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>)<br>)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(score) <span class="hljs-keyword">into</span> maxScore <span class="hljs-keyword">from</span> tb_record <br><span class="hljs-keyword">where</span> cid<span class="hljs-operator">=</span>courseId;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(score) <span class="hljs-keyword">into</span> minScore <span class="hljs-keyword">from</span> tb_record <br><span class="hljs-keyword">where</span> cid<span class="hljs-operator">=</span>courseId;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">into</span> avgScore <span class="hljs-keyword">from</span> tb_record <br><span class="hljs-keyword">where</span> cid<span class="hljs-operator">=</span>courseId;<br><span class="hljs-keyword">end</span> $$<br><br>delimiter ;<br><br><span class="hljs-keyword">call</span> sp_score_by_cid(<span class="hljs-number">1111</span>, <span class="hljs-variable">@a</span>, <span class="hljs-variable">@b</span>, <span class="hljs-variable">@c</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@a</span>, <span class="hljs-variable">@b</span>, <span class="hljs-variable">@c</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：在定义存储过程时，因为可能需要书写多条SQL，而分隔这些SQL需要使用分号作为分隔符，如果这个时候，仍然用分号表示整段代码结束，那么定义存储过程的SQL就会出现错误，所以上面我们用<code>delimiter $$</code>将整段代码结束的标记定义为<code>$$</code>，那么代码中的分号将不再表示整段代码的结束，需要马上执行，整段代码在遇到<code>end $$</code>时才输入完成并执行。在定义完存储过程后，通过<code>delimiter ;</code>将结束符重新改回成分号。</p></blockquote><p>上面定义的存储过程有四个参数，其中第一个参数是输入参数，代表课程的编号，后面的参数都是输出参数，因为存储过程不能定义返回值，只能通过输出参数将执行结果带出，定义输出参数的关键字是<code>out</code>，默认情况下参数都是输入参数。</p><p>调用存储过程。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">call</span> sp_score_by_cid(<span class="hljs-number">1111</span>, <span class="hljs-variable">@a</span>, <span class="hljs-variable">@b</span>, <span class="hljs-variable">@c</span>);<br></code></pre></div></td></tr></table></figure><p>获取输出参数的值。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-variable">@a</span> <span class="hljs-keyword">as</span> 最高分, <span class="hljs-variable">@b</span> <span class="hljs-keyword">as</span> 最低分, <span class="hljs-variable">@c</span> <span class="hljs-keyword">as</span> 平均分;<br></code></pre></div></td></tr></table></figure><p>删除存储过程。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> sp_score_by_cid;<br></code></pre></div></td></tr></table></figure><p>在存储过程中，我们可以定义变量、条件，可以使用分支和循环语句，可以通过游标操作查询结果，还可以使用事件调度器，这些内容我们暂时不在此处进行介绍。虽然我们说了很多存储过程的好处，但是在实际开发中，如果过度的使用存储过程，将大量复杂的运算放到存储过程中，也会导致占用数据库服务器的CPU资源，造成数据库服务器承受巨大的压力。为此，我们一般会将复杂的运算和处理交给应用服务器，因为很容易部署多台应用服务器来分摊这些压力。</p><h3 id="四：-几个重要的概念"><a href="#四：-几个重要的概念" class="headerlink" title="四： 几个重要的概念"></a>四： 几个重要的概念</h3><h4 id="4-1-范式理论-设计二维表的指导思想"><a href="#4-1-范式理论-设计二维表的指导思想" class="headerlink" title="4.1 范式理论 - 设计二维表的指导思想"></a>4.1 范式理论 - 设计二维表的指导思想</h4><ol><li>第一范式：数据表的每个列的值域都是由原子值组成的，不能够再分割。</li><li>第二范式：数据表里的所有数据都要和该数据表的键（主键与候选键）有完全依赖关系。</li><li>第三范式：所有非键属性都只和候选键有相关性，也就是说非键属性之间应该是独立无关的。</li></ol><h4 id="4-2-数据完整性"><a href="#4-2-数据完整性" class="headerlink" title="4.2 数据完整性"></a>4.2 数据完整性</h4><ol><li><p>实体完整性 - 每个实体都是独一无二的</p><ul><li>主键（primary key） / 唯一约束 / 唯一索引（unique）</li></ul></li><li><p>引用完整性（参照完整性）- 关系中不允许引用不存在的实体</p><ul><li>外键（foreign key）</li></ul></li><li><p>域完整性 - 数据是有效的</p><ul><li><p>数据类型及长度</p></li><li><p>非空约束（not null）</p></li><li><p>默认值约束（default）</p></li><li><p>检查约束（check）</p><blockquote><p>说明：在MySQL数据库中，检查约束并不起作用。</p></blockquote></li></ul></li></ol><h4 id="4-3-数据一致性"><a href="#4-3-数据一致性" class="headerlink" title="4.3 数据一致性"></a>4.3 数据一致性</h4><ol><li><p>事务：一系列对数据库进行读/写的操作，这些操作要么全都成功，要么全都失败。</p></li><li><p>事务的ACID特性</p><ul><li>原子性：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行</li><li>一致性：事务应确保数据库的状态从一个一致状态转变为另一个一致状态</li><li>隔离性：多个事务并发执行时，一个事务的执行不应影响其他事务的执行</li><li>持久性：已被提交的事务对数据库的修改应该永久保存在数据库中</li></ul></li><li><p>MySQL中的事务操作</p><ul><li><p>开启事务环境</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">start</span> transaction<br></code></pre></div></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">begin</span><br></code></pre></div></td></tr></table></figure></li><li><p>提交事务</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">commit</span><br></code></pre></div></td></tr></table></figure></li><li><p>回滚事务</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">rollback</span><br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h3 id="五：-其他内容"><a href="#五：-其他内容" class="headerlink" title="五： 其他内容"></a>五： 其他内容</h3><p>大家应该能够想到，关于MySQL的知识肯定远远不止上面列出的这些，比如MySQL的性能优化、管理和维护MySQL的相关工具、MySQL数据的备份和恢复、监控MySQL、部署高可用架构等问题我们在这里都没有进行讨论。当然，这些内容也都是跟项目开发密切相关的，我们就留到后续的章节中再续点进行讲解。</p><h3 id="六：-Python数据库编程"><a href="#六：-Python数据库编程" class="headerlink" title="六： Python数据库编程"></a>六： Python数据库编程</h3><p>我们用如下所示的数据库来演示在Python中如何访问MySQL数据库。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> database if <span class="hljs-keyword">exists</span> hrs;<br><span class="hljs-keyword">create</span> database hrs <span class="hljs-keyword">default</span> charset utf8;<br><br>use hrs;<br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tb_emp;<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tb_dept;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_dept<br>(<br>dno   <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;编号&#x27;</span>,<br>dname <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;名称&#x27;</span>,<br>dloc  <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;所在地&#x27;</span>,<br><span class="hljs-keyword">primary</span> key (dno)<br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_dept <span class="hljs-keyword">values</span> <br>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;会计部&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>),<br>(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;研发部&#x27;</span>, <span class="hljs-string">&#x27;成都&#x27;</span>),<br>(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;销售部&#x27;</span>, <span class="hljs-string">&#x27;重庆&#x27;</span>),<br>(<span class="hljs-number">40</span>, <span class="hljs-string">&#x27;运维部&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_emp<br>(<br>eno   <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;员工编号&#x27;</span>,<br>ename <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;员工姓名&#x27;</span>,<br>job   <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;员工职位&#x27;</span>,<br>mgr   <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;主管编号&#x27;</span>,<br>sal   <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;员工月薪&#x27;</span>,<br>comm  <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;每月补贴&#x27;</span>,<br>dno   <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;所在部门编号&#x27;</span>,<br><span class="hljs-keyword">primary</span> key (eno)<br>);<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_emp_dno <span class="hljs-keyword">foreign</span> key (dno) <span class="hljs-keyword">references</span> tb_dept (dno);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_emp <span class="hljs-keyword">values</span> <br>(<span class="hljs-number">7800</span>, <span class="hljs-string">&#x27;张三丰&#x27;</span>, <span class="hljs-string">&#x27;总裁&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">9000</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">20</span>),<br>(<span class="hljs-number">2056</span>, <span class="hljs-string">&#x27;乔峰&#x27;</span>, <span class="hljs-string">&#x27;分析师&#x27;</span>, <span class="hljs-number">7800</span>, <span class="hljs-number">5000</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">20</span>),<br>(<span class="hljs-number">3088</span>, <span class="hljs-string">&#x27;李莫愁&#x27;</span>, <span class="hljs-string">&#x27;设计师&#x27;</span>, <span class="hljs-number">2056</span>, <span class="hljs-number">3500</span>, <span class="hljs-number">800</span>, <span class="hljs-number">20</span>),<br>(<span class="hljs-number">3211</span>, <span class="hljs-string">&#x27;张无忌&#x27;</span>, <span class="hljs-string">&#x27;程序员&#x27;</span>, <span class="hljs-number">2056</span>, <span class="hljs-number">3200</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>),<br>(<span class="hljs-number">3233</span>, <span class="hljs-string">&#x27;丘处机&#x27;</span>, <span class="hljs-string">&#x27;程序员&#x27;</span>, <span class="hljs-number">2056</span>, <span class="hljs-number">3400</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>),<br>(<span class="hljs-number">3251</span>, <span class="hljs-string">&#x27;张翠山&#x27;</span>, <span class="hljs-string">&#x27;程序员&#x27;</span>, <span class="hljs-number">2056</span>, <span class="hljs-number">4000</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>),<br>(<span class="hljs-number">5566</span>, <span class="hljs-string">&#x27;宋远桥&#x27;</span>, <span class="hljs-string">&#x27;会计师&#x27;</span>, <span class="hljs-number">7800</span>, <span class="hljs-number">4000</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">10</span>),<br>(<span class="hljs-number">5234</span>, <span class="hljs-string">&#x27;郭靖&#x27;</span>, <span class="hljs-string">&#x27;出纳&#x27;</span>, <span class="hljs-number">5566</span>, <span class="hljs-number">2000</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">10</span>),<br>(<span class="hljs-number">3344</span>, <span class="hljs-string">&#x27;黄蓉&#x27;</span>, <span class="hljs-string">&#x27;销售主管&#x27;</span>, <span class="hljs-number">7800</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">800</span>, <span class="hljs-number">30</span>),<br>(<span class="hljs-number">1359</span>, <span class="hljs-string">&#x27;胡一刀&#x27;</span>, <span class="hljs-string">&#x27;销售员&#x27;</span>, <span class="hljs-number">3344</span>, <span class="hljs-number">1800</span>, <span class="hljs-number">200</span>, <span class="hljs-number">30</span>),<br>(<span class="hljs-number">4466</span>, <span class="hljs-string">&#x27;苗人凤&#x27;</span>, <span class="hljs-string">&#x27;销售员&#x27;</span>, <span class="hljs-number">3344</span>, <span class="hljs-number">2500</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">30</span>),<br>(<span class="hljs-number">3244</span>, <span class="hljs-string">&#x27;欧阳锋&#x27;</span>, <span class="hljs-string">&#x27;程序员&#x27;</span>, <span class="hljs-number">3088</span>, <span class="hljs-number">3200</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">20</span>),<br>(<span class="hljs-number">3577</span>, <span class="hljs-string">&#x27;杨过&#x27;</span>, <span class="hljs-string">&#x27;会计&#x27;</span>, <span class="hljs-number">5566</span>, <span class="hljs-number">2200</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">10</span>),<br>(<span class="hljs-number">3588</span>, <span class="hljs-string">&#x27;朱九真&#x27;</span>, <span class="hljs-string">&#x27;会计&#x27;</span>, <span class="hljs-number">5566</span>, <span class="hljs-number">2500</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">10</span>);<br></code></pre></div></td></tr></table></figure><p>在Python 3中，我们通常使用纯Python的三方库PyMySQL来访问MySQL数据库，它应该是目前Python操作MySQL数据库最好的选择。</p><ol><li><p>安装PyMySQL。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">pip install pymysql<br></code></pre></div></td></tr></table></figure></li><li><p>添加一个部门。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    no = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;编号: &#x27;</span>))<br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;名字: &#x27;</span>)<br>    loc = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;所在地: &#x27;</span>)<br>    <span class="hljs-comment"># 1. 创建数据库连接对象</span><br>    con = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>,<br>                          database=<span class="hljs-string">&#x27;hrs&#x27;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>                          user=<span class="hljs-string">&#x27;yourname&#x27;</span>, password=<span class="hljs-string">&#x27;yourpass&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 2. 通过连接对象获取游标</span><br>        <span class="hljs-keyword">with</span> con.cursor() <span class="hljs-keyword">as</span> cursor:<br>            <span class="hljs-comment"># 3. 通过游标执行SQL并获得执行结果</span><br>            result = cursor.execute(<br>                <span class="hljs-string">&#x27;insert into tb_dept values (%s, %s, %s)&#x27;</span>,<br>                (no, name, loc)<br>            )<br>        <span class="hljs-keyword">if</span> result == <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;添加成功!&#x27;</span>)<br>        <span class="hljs-comment"># 4. 操作成功提交事务</span><br>        con.commit()<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-comment"># 5. 关闭连接释放资源</span><br>        con.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure></li><li><p>删除一个部门。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    no = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;编号: &#x27;</span>))<br>    con = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>,<br>                          database=<span class="hljs-string">&#x27;hrs&#x27;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>                          user=<span class="hljs-string">&#x27;yourname&#x27;</span>, password=<span class="hljs-string">&#x27;yourpass&#x27;</span>,<br>                          autocommit=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> con.cursor() <span class="hljs-keyword">as</span> cursor:<br>            result = cursor.execute(<br>                <span class="hljs-string">&#x27;delete from tb_dept where dno=%s&#x27;</span>,<br>                (no, )<br>            )<br>        <span class="hljs-keyword">if</span> result == <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;删除成功!&#x27;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        con.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：如果不希望每次SQL操作之后手动提交或回滚事务，可以像上面的代码那样，在创建连接的时候多加一个名为<code>autocommit</code>的参数并将它的值设置为<code>True</code>，表示每次执行SQL之后自动提交。如果程序中不需要使用事务环境也不希望手动的提交或回滚就可以这么做。</p></blockquote></li><li><p>更新一个部门。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    no = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;编号: &#x27;</span>))<br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;名字: &#x27;</span>)<br>    loc = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;所在地: &#x27;</span>)<br>    con = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>,<br>                          database=<span class="hljs-string">&#x27;hrs&#x27;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>                          user=<span class="hljs-string">&#x27;yourname&#x27;</span>, password=<span class="hljs-string">&#x27;yourpass&#x27;</span>,<br>                          autocommit=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> con.cursor() <span class="hljs-keyword">as</span> cursor:<br>            result = cursor.execute(<br>                <span class="hljs-string">&#x27;update tb_dept set dname=%s, dloc=%s where dno=%s&#x27;</span>,<br>                (name, loc, no)<br>            )<br>        <span class="hljs-keyword">if</span> result == <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;更新成功!&#x27;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        con.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure></li><li><p>查询所有部门。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-keyword">from</span> pymysql.cursors <span class="hljs-keyword">import</span> DictCursor<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    con = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>,<br>                          database=<span class="hljs-string">&#x27;hrs&#x27;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>                          user=<span class="hljs-string">&#x27;yourname&#x27;</span>, password=<span class="hljs-string">&#x27;yourpass&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> con.cursor(cursor=DictCursor) <span class="hljs-keyword">as</span> cursor:<br>            cursor.execute(<span class="hljs-string">&#x27;select dno as no, dname as name, dloc as loc from tb_dept&#x27;</span>)<br>            results = cursor.fetchall()<br>            <span class="hljs-built_in">print</span>(results)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;编号\t名称\t\t所在地&#x27;</span>)<br>            <span class="hljs-keyword">for</span> dept <span class="hljs-keyword">in</span> results:<br>                <span class="hljs-built_in">print</span>(dept[<span class="hljs-string">&#x27;no&#x27;</span>], end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>                <span class="hljs-built_in">print</span>(dept[<span class="hljs-string">&#x27;name&#x27;</span>], end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>                <span class="hljs-built_in">print</span>(dept[<span class="hljs-string">&#x27;loc&#x27;</span>])<br>    <span class="hljs-keyword">finally</span>:<br>        con.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure></li><li><p>分页查询员工信息。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-keyword">from</span> pymysql.cursors <span class="hljs-keyword">import</span> DictCursor<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Emp</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, no, name, job, sal</span>):</span><br>        self.no = no<br>        self.name = name<br>        self.job = job<br>        self.sal = sal<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;\n编号：<span class="hljs-subst">&#123;self.no&#125;</span>\n姓名：<span class="hljs-subst">&#123;self.name&#125;</span>\n职位：<span class="hljs-subst">&#123;self.job&#125;</span>\n月薪：<span class="hljs-subst">&#123;self.sal&#125;</span>\n&#x27;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    page = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;页码: &#x27;</span>))<br>    size = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;大小: &#x27;</span>))<br>    con = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>,<br>                          database=<span class="hljs-string">&#x27;hrs&#x27;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>                          user=<span class="hljs-string">&#x27;yourname&#x27;</span>, password=<span class="hljs-string">&#x27;yourpass&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> con.cursor() <span class="hljs-keyword">as</span> cursor:<br>            cursor.execute(<br>                <span class="hljs-string">&#x27;select eno as no, ename as name, job, sal from tb_emp limit %s,%s&#x27;</span>,<br>                ((page - <span class="hljs-number">1</span>) * size, size)<br>            )<br>            <span class="hljs-keyword">for</span> emp_tuple <span class="hljs-keyword">in</span> cursor.fetchall():<br>                emp = Emp(*emp_tuple)<br>                <span class="hljs-built_in">print</span>(emp)<br>    <span class="hljs-keyword">finally</span>:<br>        con.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>MYSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转Linux操作系统</title>
    <link href="/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E7%8E%A9%E8%BD%ACLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E7%8E%A9%E8%BD%ACLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本文转载于GitHub项目<a href="https://github.com/jackfrued/Python-100-Days">Python - 100天从新手到大师</a></strong></p></blockquote><blockquote><p>说明：本文中对Linux命令的讲解都是基于名为CentOS的Linux发行版本，我自己使用的是阿里云服务器，系统版本为CentOS Linux release 7.6.1810。不同的Linux发行版本在Shell命令和工具程序上会有一些差别，但是这些差别是很小的。</p></blockquote><h3 id="一：-操作系统发展史"><a href="#一：-操作系统发展史" class="headerlink" title="一： 操作系统发展史"></a>一： 操作系统发展史</h3><p>只有硬件没有软件的计算机系统被称之为“裸机”，我们很难用“裸机”来完成计算机日常的工作（如存储和运算），所以必须用特定的软件来控制硬件的工作。最靠近计算机硬件的软件是系统软件，其中最为重要的就是“操作系统”。“操作系统”是控制和管理整个计算机硬件和软件资源、实现资源分配和任务调配、为系统用户以及其他软件提供接口和环境的程序的集合。</p><h4 id="1-1-没有操作系统（手工操作）"><a href="#1-1-没有操作系统（手工操作）" class="headerlink" title="1.1 没有操作系统（手工操作）"></a>1.1 没有操作系统（手工操作）</h4><p>在计算机诞生之初没有操作系统的年代，人们先把程序纸带（或卡片）装上计算机，然后启动输入机把程序送入计算机，接着通过控制台开关启动程序运行。当程序执行完毕，打印机输出计算的结果，用户卸下并取走纸带（或卡片）。第二个用户上机，重复同样的步骤。在整个过程中用户独占机器，CPU等待手工操作，资源利用率极低。</p><h4 id="1-2-批处理系统"><a href="#1-2-批处理系统" class="headerlink" title="1.2 批处理系统"></a>1.2 批处理系统</h4><p>首先启动计算机上的一个监督程序，在监督程序的控制下，计算机能够自动的、成批的处理一个或多个用户的作业。完成一批作业后，监督程度又从输入机读取作业存入磁带机。按照上面的步骤重复处理任务。监督程序不停的处理各个作业，实现了作业的自动转接，减少了作业的建立时间和手工操作时间，提高了计算机资源的利用率。 批处理系统又可以分为单道批处理系统、多道批处理系统、联机批处理系统、脱机批处理系统。</p><h4 id="1-3-分时系统和实时系统"><a href="#1-3-分时系统和实时系统" class="headerlink" title="1.3 分时系统和实时系统"></a>1.3 分时系统和实时系统</h4><p>分时系统是把处理器的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。 若某个作业在分配给它的时间片内不能完成其计算，则该作业暂时中断，把处理机让给另一作业使用，等待下一轮调度时再继续其运行。由于计算机速度很快，作业运行轮转得很快，给每个用户的感觉是他独占了一台计算机。而每个用户可以通过自己的终端向系统发出各种操作控制命令，在充分的人机交互情况下，完成作业的运行。为了解决分时系统不能及时响应用户指令的情况，又出现了能够在在严格的时间范围内完成事件处理，及时响应随机外部事件的实时系统。</p><h4 id="1-4-通用操作系统"><a href="#1-4-通用操作系统" class="headerlink" title="1.4 通用操作系统"></a>1.4 通用操作系统</h4><ol><li><p>1960s：IBM的System/360系列的机器有了统一的操作系统OS/360。</p></li><li><p>1965年：AT&amp;T的贝尔实验室加入GE和MIT的合作计划开始开发MULTICS。</p></li><li><p>1969年：MULTICS项目失败，Ken Tompson赋闲在家，为了玩“Space Travel”游戏用汇编语言在当时已经被淘汰的PDP-7上开发了Unics。</p><blockquote><p>注：很难想象，Unix这么伟大的系统，居然是一个赋闲在家的程序员（关键是老婆回娘家还带上了孩子）在一台被淘汰的设备上为了玩游戏开发出来的。</p></blockquote></li><li><p>1970年~1971年：Ken Tompson和Dennis Ritchie用B语言在PDP-11上重写了Unics，并在Brian Kernighan的建议下将其更名为Unix。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/ken-and-dennis-pdp-11.png"></p></li><li><p>1972年~1973年：Dennis Ritchie发明了C语言来取代可移植性较差的B语言，并开启了用C语言重写Unix的工作。</p></li><li><p>1974年：Unix推出了里程碑意义的第5版，几乎完全用C语言来实现。</p></li><li><p>1979年：从Unix第7版开始，AT&amp;T发布新的使用条款，将Unix私有化。</p></li><li><p>1987年：Andrew S. Tanenbaum教授为了能在课堂上为学生讲解操作系统运作的细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统以避免版权上的争议，该系统被命名为Minix。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/andrew.jpg"></p></li><li><p>1991年：Linus Torvalds就读于芬兰赫尔辛基大学期间，尝试在Minix上做一些开发工作，但因为Minix只是作为教学用途的操作系统，功能并不强大，为了方便在学校的新闻组和邮件系统中读写和下载文件，Linus编写了磁盘驱动程序和文件系统，这些东西形成了Linux系统内核的雏形。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/linus.png"></p></li></ol><p>下图是Unix操作系统家族的图谱。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/history-of-unix.png"></p><h3 id="二：-Linux概述"><a href="#二：-Linux概述" class="headerlink" title="二： Linux概述"></a>二： Linux概述</h3><p>Linux是一个通用操作系统。一个操作系统要负责任务调度、内存分配、处理外围设备I/O等操作。操作系统通常由内核（运行其他程序，管理像磁盘、打印机等硬件设备的核心程序）和系统程序（设备驱动、底层库、shell、服务程序等）两部分组成。</p><p>Linux内核是芬兰人Linus Torvalds开发的，于1991年9月发布。而Linux操作系统作为Internet时代的产物，它是由全世界许多开发者共同合作开发的，是一个自由的操作系统（注意自由和免费并不是同一个概念，想了解二者的差别可以<a href="https://www.debian.org/intro/free">点击这里</a>）。</p><h3 id="三：-Linux系统优点"><a href="#三：-Linux系统优点" class="headerlink" title="三： Linux系统优点"></a>三： Linux系统优点</h3><ol><li>通用操作系统，不跟特定的硬件绑定。</li><li>用C语言编写，可移植性强，有内核编程接口。</li><li>支持多用户和多任务，支持安全的分层文件系统。</li><li>大量的实用程序，完善的网络功能以及强大的支持文档。</li><li>可靠的安全性和良好的稳定性，对开发者更友好。</li></ol><h3 id="四：-Linux系统发行版本"><a href="#四：-Linux系统发行版本" class="headerlink" title="四： Linux系统发行版本"></a>四： Linux系统发行版本</h3><ol><li><a href="https://www.redhat.com/en">Redhat</a></li><li><a href="https://www.ubuntu.com/">Ubuntu</a></li><li><a href="https://www.centos.org/">CentOS</a></li><li><a href="https://getfedora.org/">Fedora</a></li><li><a href="https://www.debian.org/">Debian</a></li><li><a href="https://www.opensuse.org/">openSUSE</a></li></ol><h3 id="五：-基础命令"><a href="#五：-基础命令" class="headerlink" title="五： 基础命令"></a>五： 基础命令</h3><p>Linux系统的命令通常都是如下所示的格式：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">命令名称 [命名参数] [命令对象]<br></code></pre></div></td></tr></table></figure><ol><li><p>获取登录信息 - <strong>w</strong> / <strong>who</strong> / <strong>last</strong>/ <strong>lastb</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# w<br> 23:31:16 up 12:16,  2 users,  load average: 0.00, 0.01, 0.05<br>USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT<br>root     pts/0    182.139.66.250   23:03    4.00s  0.02s  0.00s w<br>jackfrue pts/1    182.139.66.250   23:26    3:56   0.00s  0.00s -bash<br>[root ~]# who<br>root     pts/0        2018-04-12 23:03 (182.139.66.250)<br>jackfrued pts/1        2018-04-12 23:26 (182.139.66.250)<br>[root ~]# who am i<br>root     pts/0        2018-04-12 23:03 (182.139.66.250)<br>[root ~]# who mom likes<br>root     pts/0        2018-04-12 23:03 (182.139.66.250)<br>[root ~]# last<br>root     pts/0        117.136.63.184   Sun May 26 18:57   still logged in   <br>reboot   system boot  3.10.0-957.10.1. Mon May 27 02:52 - 19:10  (-7:-42)   <br>root     pts/4        117.136.63.184   Sun May 26 18:51 - crash  (08:01)    <br>root     pts/4        117.136.63.184   Sun May 26 18:49 - 18:49  (00:00)    <br>root     pts/3        117.136.63.183   Sun May 26 18:35 - crash  (08:17)    <br>root     pts/2        117.136.63.183   Sun May 26 18:34 - crash  (08:17)    <br>root     pts/0        117.136.63.183   Sun May 26 18:10 - crash  (08:42)    <br></code></pre></div></td></tr></table></figure></li><li><p>查看自己使用的Shell - <strong>ps</strong>。</p><p>Shell也被称为“壳”或“壳程序”，它是用户与操作系统内核交流的翻译官，简单的说就是人与计算机交互的界面和接口。目前很多Linux系统默认的Shell都是bash（<u>B</u>ourne <u>A</u>gain <u>SH</u>ell），因为它可以使用tab键进行命令和路径补全、可以保存历史命令、可以方便的配置环境变量以及执行批处理操作。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# ps<br>  PID TTY          TIME CMD<br> 3531 pts/0    00:00:00 bash<br> 3553 pts/0    00:00:00 ps<br></code></pre></div></td></tr></table></figure></li><li><p>查看命令的说明和位置 - <strong>whatis</strong> / <strong>which</strong> / <strong>whereis</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# whatis ps<br>ps (1)        - report a snapshot of the current processes.<br>[root ~]# whatis python<br>python (1)    - an interpreted, interactive, object-oriented programming language<br>[root ~]# whereis ps<br>ps: /usr/bin/ps /usr/share/man/man1/ps.1.gz<br>[root ~]# whereis python<br>python: /usr/bin/python /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /etc/python /usr/include/python2.7 /usr/share/man/man1/python.1.gz<br>[root ~]# which ps<br>/usr/bin/ps<br>[root ~]# which python<br>/usr/bin/python<br></code></pre></div></td></tr></table></figure></li><li><p>清除屏幕上显示的内容 - <strong>clear</strong>。</p></li><li><p>查看帮助文档 - <strong>man</strong> / <strong>info</strong> / <strong>help</strong> / <strong>apropos</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# ps --help<br>Usage:<br> ps [options]<br> Try &#x27;ps --help &lt;simple|list|output|threads|misc|all&gt;&#x27;<br>  or &#x27;ps --help &lt;s|l|o|t|m|a&gt;&#x27;<br> for additional help text.<br>For more details see ps(1).<br>[root@izwz97tbgo9lkabnat2lo8z ~]# man ps<br>PS(1)                                User Commands                                PS(1)<br>NAME<br>       ps - report a snapshot of the current processes.<br>SYNOPSIS<br>       ps [options]<br>DESCRIPTION<br>...<br></code></pre></div></td></tr></table></figure></li><li><p>查看系统和主机名 - <strong>uname</strong> / <strong>hostname</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# uname<br>Linux<br>[root@izwz97tbgo9lkabnat2lo8z ~]# hostname<br>izwz97tbgo9lkabnat2lo8z<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-release<br>CentOS Linux release 7.6.1810 (Core)<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：<code>cat</code>是连接文件内容并打印到标准输出的命令，后面会讲到该命令；<code>/etc</code>是Linux系统上的一个非常重要的目录，它保存了很多的配置文件；<code>centos-release</code>是该目录下的一个文件，因为我自己使用的Linux发行版本是CentOS 7.6，因此这里会有一个这样的文件。</p></blockquote></li><li><p>时间和日期 - <strong>date</strong> / <strong>cal</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# date<br>Wed Jun 20 12:53:19 CST 2018<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal<br>      June 2018<br>Su Mo Tu We Th Fr Sa<br>                1  2<br> 3  4  5  6  7  8  9<br>10 11 12 13 14 15 16<br>17 18 19 20 21 22 23<br>24 25 26 27 28 29 30<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal 5 2017<br>      May 2017<br>Su Mo Tu We Th Fr Sa<br>    1  2  3  4  5  6<br> 7  8  9 10 11 12 13<br>14 15 16 17 18 19 20<br>21 22 23 24 25 26 27<br>28 29 30 31<br></code></pre></div></td></tr></table></figure></li><li><p>重启和关机 - <strong>reboot</strong> / <strong>shutdown</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# shutdown -h +5<br>Shutdown scheduled for Sun 2019-05-26 19:34:27 CST, use &#x27;shutdown -c&#x27; to cancel.<br>[root ~]# <br>Broadcast message from root (Sun 2019-05-26 19:29:27 CST):<br><br>The system is going down for power-off at Sun 2019-05-26 19:34:27 CST!<br>[root ~]# shutdown -c<br><br>Broadcast message from root (Sun 2019-05-26 19:30:22 CST):<br><br>The system shutdown has been cancelled at Sun 2019-05-26 19:31:22 CST!<br>[root ~]# shutdown -r 23:58<br>Shutdown scheduled for Sun 2019-05-26 23:58:00 CST, use &#x27;shutdown -c&#x27; to cancel.<br>[root ~]# shutdown -c<br><br>Broadcast message from root (Sun 2019-05-26 19:31:06 CST):<br><br>The system shutdown has been cancelled at Sun 2019-05-26 19:32:06 CST!<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：在执行<code>shutdown</code>命令时会向登录系统的用户发出警告，可以在命令后面跟上警告消息来替换默认的警告消息，也可以在<code>-h</code>参数后通过<code>now</code>来表示立刻关机。</p></blockquote></li><li><p>退出登录 -  <strong>exit</strong> / <strong>logout</strong>。</p></li><li><p>查看历史命令 - <strong>history</strong>。</p></li></ol>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# history<br>...<br>452  ls<br>453  cd Python-3.6.5/<br>454  clear<br>455  history<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# !454<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：查看到历史命令之后，可以用<code>!历史命令编号</code>来重新执行该命令；通过<code>history -c</code>可以清除历史命令。</p></blockquote><h3 id="六：-实用程序"><a href="#六：-实用程序" class="headerlink" title="六： 实用程序"></a>六： 实用程序</h3><h4 id="6-1-文件和文件夹操作"><a href="#6-1-文件和文件夹操作" class="headerlink" title="6.1 文件和文件夹操作"></a>6.1 文件和文件夹操作</h4><ol><li><p>创建/删除空目录 - <strong>mkdir</strong> / <strong>rmdir</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# mkdir abc<br>[root ~]# mkdir -p xyz/abc<br>[root ~]# rmdir abc<br></code></pre></div></td></tr></table></figure></li><li><p>创建/删除文件 - <strong>touch</strong> / <strong>rm</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# touch readme.txt<br>[root ~]# touch error.txt<br>[root ~]# rm error.txt<br>rm: remove regular empty file ‘error.txt’? y<br>[root ~]# rm -rf xyz<br></code></pre></div></td></tr></table></figure><ul><li><code>touch</code>命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间：<ul><li>更改内容的时间 - mtime。</li><li>更改权限的时间 - ctime。</li><li>最后访问时间 - atime。</li></ul></li><li><code>rm</code>的几个重要参数：<ul><li><code>-i</code>：交互式删除，每个删除项都会进行询问。</li><li><code>-r</code>：删除目录并递归的删除目录中的文件和目录。</li><li><code>-f</code>：强制删除，忽略不存在的文件，没有任何提示。</li></ul></li></ul></li><li><p>切换和查看当前工作目录 - <strong>cd</strong> / <strong>pwd</strong>。</p><blockquote><p>说明：<code>cd</code>命令后面可以跟相对路径（以当前路径作为参照）或绝对路径（以<code>/</code>开头）来切换到指定的目录，也可以用<code>cd ..</code>来返回上一级目录。请大家想一想，如果要返回到上上一级目录应该给<code>cd</code>命令加上什么样的参数呢？</p></blockquote></li><li><p>查看目录内容 - <strong>ls</strong>。</p><ul><li><code>-l</code>：以长格式查看文件和目录。</li><li><code>-a</code>：显示以点开头的文件和目录（隐藏文件）。</li><li><code>-R</code>：遇到目录要进行递归展开（继续列出目录下面的文件和目录）。</li><li><code>-d</code>：只列出目录，不列出其他内容。</li><li><code>-S</code> / <code>-t</code>：按大小/时间排序。</li></ul></li><li><p>查看文件内容 - <strong>cat</strong> / <strong>tac</strong> / <strong>head</strong> / <strong>tail</strong> / <strong>more</strong> / <strong>less</strong> / <strong>rev</strong> / <strong>od</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# wget http://www.sohu.com/ -O sohu.html<br>--2018-06-20 18:42:34--  http://www.sohu.com/<br>Resolving www.sohu.com (www.sohu.com)... 14.18.240.6<br>Connecting to www.sohu.com (www.sohu.com)|14.18.240.6|:80... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 212527 (208K) [text/html]<br>Saving to: ‘sohu.html’<br><span class="hljs-meta">100%</span><span class="bash">[==================================================&gt;] 212,527     --.-K/s   <span class="hljs-keyword">in</span> 0.03s</span><br>2018-06-20 18:42:34 (7.48 MB/s) - ‘sohu.html’ saved [212527/212527]<br>[root ~]# cat sohu.html<br>...<br>[root ~]# head -10 sohu.html<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;搜狐&lt;/title&gt;<br>&lt;meta name=&quot;Keywords&quot; content=&quot;搜狐,门户网站,新媒体,网络媒体,新闻,财经,体育,娱乐,时尚,汽车,房产,科技,图片,论坛,微博,博客,视频,电影,电视剧&quot;/&gt;<br>&lt;meta name=&quot;Description&quot; content=&quot;搜狐网为用户提供24小时不间断的最新资讯，及搜索、邮件等网络服务。内容包括全球热点事件、突发新闻、时事评论、热播影视剧、体育赛事、行业动态、生活服务信息，以及论坛、博客、微博、我的搜狐等互动空间。&quot; /&gt;<br>&lt;meta name=&quot;shenma-site-verification&quot; content=&quot;1237e4d02a3d8d73e96cbd97b699e9c3_1504254750&quot;&gt;<br>&lt;meta charset=&quot;utf-8&quot;/&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge,chrome=1&quot;/&gt;<br>[root ~]# tail -2 sohu.html<br>&lt;/body&gt;<br>&lt;/html&gt;<br>[root ~]# less sohu.html<br>...<br>[root ~]# cat -n sohu.html | more<br>...<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：上面用到了一个名为<code>wget</code>的命令，它是一个网络下载器程序，可以从指定的URL下载资源。</p></blockquote></li><li><p>拷贝/移动文件 - <strong>cp</strong> / <strong>mv</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# mkdir backup<br>[root ~]# cp sohu.html backup/<br>[root ~]# cd backup<br>[root backup]# ls<br>sohu.html<br>[root backup]# mv sohu.html sohu_index.html<br>[root backup]# ls<br>sohu_index.html<br></code></pre></div></td></tr></table></figure></li><li><p>文件重命名 - <strong>rename</strong>。</p></li></ol>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# rename .htm .html *.htm<br></code></pre></div></td></tr></table></figure><ol start="8"><li><p>查找文件和查找内容 - <strong>find</strong> / <strong>grep</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find / -name &quot;*.html&quot;<br>/root/sohu.html<br>/root/backup/sohu_index.html<br>[root@izwz97tbgo9lkabnat2lo8z ~]# find . -atime 7 -type f -print<br>[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -size +2k<br>[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -name &quot;*.swp&quot; -delete<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep &quot;&lt;script&gt;&quot; sohu.html -n<br>20:&lt;script&gt;<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep -E \&lt;\/?script.*\&gt; sohu.html -n<br>20:&lt;script&gt;<br>22:&lt;/script&gt;<br>24:&lt;script src=&quot;//statics.itc.cn/web/v3/static/js/es5-shim-08e41cfc3e.min.js&quot;&gt;&lt;/script&gt;<br>25:&lt;script src=&quot;//statics.itc.cn/web/v3/static/js/es5-sham-1d5fa1124b.min.js&quot;&gt;&lt;/script&gt;<br>26:&lt;script src=&quot;//statics.itc.cn/web/v3/static/js/html5shiv-21fc8c2ba6.js&quot;&gt;&lt;/script&gt;<br>29:&lt;script type=&quot;text/javascript&quot;&gt;<br>52:&lt;/script&gt;<br>...<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：<code>grep</code>在搜索字符串时可以使用正则表达式，如果需要使用正则表达式可以用<code>grep -E</code>或者直接使用<code>egrep</code>。</p></blockquote></li><li><p>创建链接和查看链接 - <strong>ln</strong> / <strong>readlink</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html<br>-rw-r--r-- 1 root root 212131 Jun 20 19:15 sohu.html<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html<br>-rw-r--r-- 2 root root 212131 Jun 20 19:15 sohu.html<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup2<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html<br>-rw-r--r-- 3 root root 212131 Jun 20 19:15 sohu.html<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /etc/centos-release sysinfo<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sysinfo<br>lrwxrwxrwx 1 root root 19 Jun 20 19:21 sysinfo -&gt; /etc/centos-release<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sysinfo<br>CentOS Linux release 7.4.1708 (Core)<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-release<br>CentOS Linux release 7.4.1708 (Core)<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：链接可以分为硬链接和软链接（符号链接）。硬链接可以认为是一个指向文件数据的指针，就像Python中对象的引用计数，每添加一个硬链接，文件的对应链接数就增加1，只有当文件的链接数为0时，文件所对应的存储空间才有可能被其他文件覆盖。我们平常删除文件时其实并没有删除硬盘上的数据，我们删除的只是一个指针，或者说是数据的一条使用记录，所以类似于“文件粉碎机”之类的软件在“粉碎”文件时除了删除文件指针，还会在文件对应的存储区域填入数据来保证文件无法再恢复。软链接类似于Windows系统下的快捷方式，当软链接链接的文件被删除时，软链接也就失效了。</p></blockquote></li><li><p>压缩/解压缩和归档/解归档 - <strong>gzip</strong> / <strong>gunzip</strong> / <strong>xz</strong>。</p></li></ol>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://download.redis.io/releases/redis-4.0.10.tar.gz<br>--2018-06-20 19:29:59--  http://download.redis.io/releases/redis-4.0.10.tar.gz<br>Resolving download.redis.io (download.redis.io)... 109.74.203.151<br>Connecting to download.redis.io (download.redis.io)|109.74.203.151|:80... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 1738465 (1.7M) [application/x-gzip]<br>Saving to: ‘redis-4.0.10.tar.gz’<br><span class="hljs-meta">100%</span><span class="bash">[==================================================&gt;] 1,738,465   70.1KB/s   <span class="hljs-keyword">in</span> 74s</span><br>2018-06-20 19:31:14 (22.9 KB/s) - ‘redis-4.0.10.tar.gz’ saved [1738465/1738465]<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*<br>redis-4.0.10.tar.gz<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-4.0.10.tar.gz<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*<br>redis-4.0.10.tar<br></code></pre></div></td></tr></table></figure><ol start="11"><li>归档和解归档 - <strong>tar</strong>。</li></ol>   <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-4.0.10.tar<br>redis-4.0.10/<br>redis-4.0.10/.gitignore<br>redis-4.0.10/00-RELEASENOTES<br>redis-4.0.10/BUGS<br>redis-4.0.10/CONTRIBUTING<br>redis-4.0.10/COPYING<br>redis-4.0.10/INSTALL<br>redis-4.0.10/MANIFESTO<br>redis-4.0.10/Makefile<br>redis-4.0.10/README.md<br>redis-4.0.10/deps/<br>redis-4.0.10/deps/Makefile<br>redis-4.0.10/deps/README.md<br>...<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：归档（也称为创建归档）和解归档都使用<code>tar</code>命令，通常创建归档需要<code>-cvf</code>三个参数，其中<code>c</code>表示创建（create），<code>v</code>表示显示创建归档详情（verbose），<code>f</code>表示指定归档的文件（file）；解归档需要加上<code>-xvf</code>参数，其中<code>x</code>表示抽取（extract），其他两个参数跟创建归档相同。</p></blockquote><ol start="12"><li>将标准输入转成命令行参数 - <strong>xargs</strong>。</li></ol><p>   下面的命令会将查找当前路径下的html文件，然后通过<code>xargs</code>将这些文件作为参数传给<code>rm</code>命令，实现查找并删除文件的操作。</p>   <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find . -type f -name &quot;*.html&quot; | xargs rm -f<br></code></pre></div></td></tr></table></figure><p>   下面的命令将a.txt文件中的多行内容变成一行输出到b.txt文件中，其中<code>&lt;</code>表示从a.txt中读取输入，<code>&gt;</code>表示将命令的执行结果输出到b.txt中。</p>   <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# xargs &lt; a.txt &gt; b.txt<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：这个命令就像上面演示的那样常在管道（实现进程间通信的一种方式）和重定向（重新指定输入输出的位置）操作中用到，后面的内容中会讲到管道操作和输入输出重定向操作。</p></blockquote><ol start="13"><li><p>显示文件或目录 - <strong>basename</strong> / <strong>dirname</strong>。</p></li><li><p>其他相关工具。 </p></li></ol><ul><li><strong>sort</strong> - 对内容排序</li><li><strong>uniq</strong> - 去掉相邻重复内容</li><li><strong>tr</strong> - 替换指定内容为新内容</li><li><strong>cut</strong> / <strong>paste</strong> - 剪切/黏贴内容</li><li><strong>split</strong> - 拆分文件</li><li><strong>file</strong> - 判断文件类型</li><li><strong>wc</strong> - 统计文件行数、单词数、字节数</li><li><strong>iconv</strong> - 编码转换</li></ul>   <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# cat foo.txt<br>grape<br>apple<br>pitaya<br>[root ~]# cat bar.txt<br>100<br>200<br>300<br>400<br>[root ~]# paste foo.txt bar.txt<br>grape   100<br>apple   200<br>pitaya  300<br>        400<br>[root ~]# paste foo.txt bar.txt &gt; hello.txt<br>[root ~]# cut -b 4-8 hello.txt<br>pe      10<br>le      20<br>aya     3<br>0<br>[root ~]# cat hello.txt | tr &#x27;\t&#x27; &#x27;,&#x27;<br>grape,100<br>apple,200<br>pitaya,300<br>,400<br>[root ~]# split -l 100 sohu.html hello<br>[root ~]# wget https://www.baidu.com/img/bd_logo1.png<br>[root ~]# file bd_logo1.png<br>bd_logo1.png: PNG image data, 540 x 258, 8-bit colormap, non-interlaced<br>[root ~]# wc sohu.html<br>  2979   6355 212527 sohu.html<br>[root ~]# wc -l sohu.html<br>2979 sohu.html<br>[root ~]# wget http://www.qq.com -O qq.html<br>[root ~]# iconv -f gb2312 -t utf-8 qq.html<br></code></pre></div></td></tr></table></figure><h4 id="6-2-管道和重定向"><a href="#6-2-管道和重定向" class="headerlink" title="6.2 管道和重定向"></a>6.2 管道和重定向</h4><ol><li><p>管道的使用 - **|**。</p><p>例子：查找当前目录下文件个数。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# find ./ | wc -l<br>6152<br></code></pre></div></td></tr></table></figure><p>例子：列出当前路径下的文件和文件夹，给每一项加一个编号。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# ls | cat -n<br>     1  dump.rdb<br>     2  mongodb-3.6.5<br>     3  Python-3.6.5<br>     4  redis-3.2.11<br>     5  redis.conf<br></code></pre></div></td></tr></table></figure><p>例子：查找record.log中包含AAA，但不包含BBB的记录的总数</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# cat record.log | grep AAA | grep -v BBB | wc -l<br></code></pre></div></td></tr></table></figure></li><li><p>输出重定向和错误重定向 - <strong>&gt;</strong> / <strong>&gt;&gt;</strong> / **2&gt;**。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# cat readme.txt<br>banana<br>apple<br>grape<br>apple<br>grape<br>watermelon<br>pear<br>pitaya<br>[root ~]# cat readme.txt | sort | uniq &gt; result.txt<br>[root ~]# cat result.txt<br>apple<br>banana<br>grape<br>pear<br>pitaya<br>watermelon<br></code></pre></div></td></tr></table></figure></li><li><p>输入重定向 - **&lt;**。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# echo &#x27;hello, world!&#x27; &gt; hello.txt<br>[root ~]# wall &lt; hello.txt<br>[root ~]#<br>Broadcast message from root (Wed Jun 20 19:43:05 2018):<br>hello, world!<br>[root ~]# echo &#x27;I will show you some code.&#x27; &gt;&gt; hello.txt<br>[root ~]# wall &lt; hello.txt<br>[root ~]#<br>Broadcast message from root (Wed Jun 20 19:43:55 2018):<br>hello, world!<br>I will show you some code.<br></code></pre></div></td></tr></table></figure></li><li><p>多重定向 - <strong>tee</strong>。</p><p>下面的命令除了在终端显示命令<code>ls</code>的结果之外，还会追加输出到<code>ls.txt</code>文件中。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# ls | tee -a ls.txt<br></code></pre></div></td></tr></table></figure></li></ol><h4 id="6-3-别名"><a href="#6-3-别名" class="headerlink" title="6.3 别名"></a>6.3 别名</h4><ol><li><p><strong>alias</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# alias ll=&#x27;ls -l&#x27;<br>[root ~]# alias frm=&#x27;rm -rf&#x27;<br>[root ~]# ll<br>...<br>drwxr-xr-x  2 root       root   4096 Jun 20 12:52 abc<br>...<br>[root ~]# frm abc<br></code></pre></div></td></tr></table></figure></li><li><p><strong>unalias</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# unalias frm<br>[root ~]# frm sohu.html<br>-bash: frm: command not found<br></code></pre></div></td></tr></table></figure></li></ol><h4 id="6-4-文本处理"><a href="#6-4-文本处理" class="headerlink" title="6.4 文本处理"></a>6.4 文本处理</h4><ol><li><p>字符流编辑器 - <strong>sed</strong>。</p><p>sed是操作、过滤和转换文本内容的工具。假设有一个名为fruit.txt的文件，内容如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# cat -n fruit.txt <br>     1  banana<br>     2  grape<br>     3  apple<br>     4  watermelon<br>     5  orange<br></code></pre></div></td></tr></table></figure><p>接下来，我们在第2行后面添加一个pitaya。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# sed &#x27;2a pitaya&#x27; fruit.txt <br>banana<br>grape<br>pitaya<br>apple<br>watermelon<br>orange<br></code></pre></div></td></tr></table></figure><blockquote><p>注意：刚才的命令和之前我们讲过的很多命令一样并没有改变fruit.txt文件，而是将添加了新行的内容输出到终端中，如果想保存到fruit.txt中，可以使用输出重定向操作。</p></blockquote><p>在第2行前面插入一个waxberry。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# sed &#x27;2i waxberry&#x27; fruit.txt<br>banana<br>waxberry<br>grape<br>apple<br>watermelon<br>orange<br></code></pre></div></td></tr></table></figure><p>删除第3行。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# sed &#x27;3d&#x27; fruit.txt<br>banana<br>grape<br>watermelon<br>orange<br></code></pre></div></td></tr></table></figure><p>删除第2行到第4行。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# sed &#x27;2,4d&#x27; fruit.txt<br>banana<br>orange<br></code></pre></div></td></tr></table></figure><p>将文本中的字符a替换为@。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# sed &#x27;s#a#@#&#x27; fruit.txt <br>b@nana<br>gr@pe<br>@pple<br>w@termelon<br>or@nge<br></code></pre></div></td></tr></table></figure><p>将文本中的字符a替换为@，使用全局模式。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# sed &#x27;s#a#@#g&#x27; fruit.txt <br>b@n@n@<br>gr@pe<br>@pple<br>w@termelon<br>or@nge<br></code></pre></div></td></tr></table></figure><p>先cd目录，将后缀为.cfg的文件里面所有老内容替换为新内容。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">sed -i &quot;s/老内容/新内容/g&quot; `find . -type f -name &quot;*.cfg&quot;`<br></code></pre></div></td></tr></table></figure></li><li><p>模式匹配和处理语言 - <strong>awk</strong>。</p><p>awk是一种编程语言，也是Linux系统中处理文本最为强大的工具，它的作者之一和现在的维护者就是之前提到过的Brian Kernighan（ken和dmr最亲密的伙伴）。通过该命令可以从文本中提取出指定的列、用正则表达式从文本中取出我们想要的内容、显示指定的行以及进行统计和运算，总之它非常强大。</p><p>假设有一个名为fruit2.txt的文件，内容如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# cat fruit2.txt <br>1       banana      120<br>2       grape       500<br>3       apple       1230<br>4       watermelon  80<br>5       orange      400<br></code></pre></div></td></tr></table></figure><p>显示文件的第3行。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# awk &#x27;NR==3&#x27; fruit2.txt <br>3       apple       1230<br></code></pre></div></td></tr></table></figure><p>显示文件的第2列。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# awk &#x27;&#123;print $2&#125;&#x27; fruit2.txt <br>banana<br>grape<br>apple<br>watermelon<br>orange<br></code></pre></div></td></tr></table></figure><p>显示文件的最后一列。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# awk &#x27;&#123;print $NF&#125;&#x27; fruit2.txt <br>120<br>500<br>1230<br>80<br>400<br></code></pre></div></td></tr></table></figure><p>输出末尾数字大于等于300的行。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# awk &#x27;&#123;if($3 &gt;= 300) &#123;print $0&#125;&#125;&#x27; fruit2.txt <br>2       grape       500<br>3       apple       1230<br>5       orange      400<br></code></pre></div></td></tr></table></figure><p>上面展示的只是awk命令的冰山一角，更多的内容留给读者自己在实践中去探索。</p></li></ol><h3 id="七：-用户管理"><a href="#七：-用户管理" class="headerlink" title="七： 用户管理"></a>七： 用户管理</h3><ol><li><p>创建和删除用户 - <strong>useradd</strong> / <strong>userdel</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root home]# useradd hellokitty<br>[root home]# userdel hellokitty<br></code></pre></div></td></tr></table></figure><ul><li><code>-d</code> - 创建用户时为用户指定用户主目录</li><li><code>-g</code> - 创建用户时指定用户所属的用户组</li></ul></li><li><p>创建和删除用户组 - <strong>groupadd</strong> / <strong>groupdel</strong>。</p><blockquote><p>说明：用户组主要是为了方便对一个组里面所有用户的管理。</p></blockquote></li><li><p>修改密码 - <strong>passwd</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# passwd hellokitty<br>New password: <br>Retype new password: <br>passwd: all authentication tokens updated successfully.<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：输入密码和确认密码没有回显且必须一气呵成的输入完成（不能使用退格键），密码和确认密码需要一致。如果使用<code>passwd</code>命令时没有指定命令作用的对象，则表示要修改当前用户的密码。如果想批量修改用户密码，可以使用<code>chpasswd</code>命令。</p></blockquote><ul><li><code>-l</code> / <code>-u</code> - 锁定/解锁用户。</li><li><code>-d</code> - 清除用户密码。</li><li><code>-e</code> - 设置密码立即过期，用户登录时会强制要求修改密码。</li><li><code>-i</code> - 设置密码过期多少天以后禁用该用户。</li></ul></li><li><p>查看和修改密码有效期 - <strong>chage</strong>。</p><p>设置hellokitty用户100天后必须修改密码，过期前15天通知该用户，过期后15天禁用该用户。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">chage -M 100 -W 15 -I 15 hellokitty<br></code></pre></div></td></tr></table></figure></li><li><p>切换用户 - <strong>su</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# su hellokitty<br>[hellokitty root]$<br></code></pre></div></td></tr></table></figure></li><li><p>以管理员身份执行命令 - <strong>sudo</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[hellokitty ~]$ ls /root<br>ls: cannot open directory /root: Permission denied<br>[hellokitty ~]$ sudo ls /root<br>[sudo] password for hellokitty:<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>说明</strong>：如果希望用户能够以管理员身份执行命令，用户必须要出现在sudoers名单中，sudoers文件在 <code>/etc</code>目录下，如果希望直接编辑该文件也可以使用下面的命令。</p></blockquote></li><li><p>编辑sudoers文件 - <strong>visudo</strong>。</p><p>这里使用的编辑器是vi，关于vi的知识在后面有讲解。该文件的部分内容如下所示：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">## Allow root <span class="hljs-keyword">to</span> run <span class="hljs-keyword">any</span> commands anywhere <br>root    <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)   <span class="hljs-keyword">ALL</span><br><br>## Allows members <span class="hljs-keyword">of</span> the <span class="hljs-string">&#x27;sys&#x27;</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">to</span> run networking, software, <br>## service management apps <span class="hljs-keyword">and</span> more.<br># %sys <span class="hljs-keyword">ALL</span> = NETWORKING, SOFTWARE, SERVICES, <span class="hljs-keyword">STORAGE</span>, DELEGATING, PROCESSES, LOCATE, DRIVERS<br>## Allows people <span class="hljs-keyword">in</span> <span class="hljs-keyword">group</span> wheel <span class="hljs-keyword">to</span> run <span class="hljs-keyword">all</span> commands<br>%wheel  <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)   <span class="hljs-keyword">ALL</span><br><br>## Same thing <span class="hljs-keyword">without</span> a <span class="hljs-keyword">password</span><br># %wheel    <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)   NOPASSWD: <span class="hljs-keyword">ALL</span><br><br>## Allows members <span class="hljs-keyword">of</span> the users <span class="hljs-keyword">group</span> <span class="hljs-keyword">to</span> mount <span class="hljs-keyword">and</span> unmount the<br>## cdrom <span class="hljs-keyword">as</span> root<br># %users  <span class="hljs-keyword">ALL</span>=/sbin/mount /mnt/cdrom, /sbin/umount /mnt/cdrom<br><br>## Allows members <span class="hljs-keyword">of</span> the users <span class="hljs-keyword">group</span> <span class="hljs-keyword">to</span> shutdown this <span class="hljs-keyword">system</span><br># %users  localhost=/sbin/shutdown -h now<br></code></pre></div></td></tr></table></figure></li><li><p>显示用户与用户组的信息 - <strong>id</strong>。</p></li><li><p>给其他用户发消息 -<strong>write</strong> / <strong>wall</strong>。</p><p>发送方：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# write hellokitty<br>Dinner is on me.<br>Call me at 6pm.<br></code></pre></div></td></tr></table></figure><p>接收方：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[hellokitty ~]$ <br>Message from root on pts/0 at 17:41 ...<br>Dinner is on me.<br>Call me at 6pm.<br>EOF<br></code></pre></div></td></tr></table></figure></li><li><p>查看/设置是否接收其他用户发送的消息 - <strong>mesg</strong>。</p></li></ol>   <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[hellokitty ~]$ mesg<br>is y<br>[hellokitty ~]$ mesg n<br>[hellokitty ~]$ mesg<br>is n<br></code></pre></div></td></tr></table></figure><h3 id="八：-文件系统"><a href="#八：-文件系统" class="headerlink" title="八： 文件系统"></a>八： 文件系统</h3><h4 id="8-1-文件和路径"><a href="#8-1-文件和路径" class="headerlink" title="8.1 文件和路径"></a>8.1 文件和路径</h4><ol><li>命名规则：文件名的最大长度与文件系统类型有关，一般情况下，文件名不应该超过255个字符，虽然绝大多数的字符都可以用于文件名，但是最好使用英文大小写字母、数字、下划线、点这样的符号。文件名中虽然可以使用空格，但应该尽可能避免使用空格，否则在输入文件名时需要用将文件名放在双引号中或者通过<code>\</code>对空格进行转义。</li><li>扩展名：在Linux系统下文件的扩展名是可选的，但是使用扩展名有助于对文件内容的理解。有些应用程序要通过扩展名来识别文件，但是更多的应用程序并不依赖文件的扩展名，就像<code>file</code>命令在识别文件时并不是依据扩展名来判定文件的类型。</li><li>隐藏文件：以点开头的文件在Linux系统中是隐藏文件（不可见文件）。</li></ol><h4 id="8-2-目录结构"><a href="#8-2-目录结构" class="headerlink" title="8.2 目录结构"></a>8.2 目录结构</h4><ol><li>/bin - 基本命令的二进制文件。</li><li>/boot - 引导加载程序的静态文件。</li><li>/dev - 设备文件。</li><li><strong>/etc</strong> - 配置文件。</li><li>/home - 普通用户主目录的父目录。</li><li>/lib - 共享库文件。</li><li>/lib64 - 共享64位库文件。</li><li>/lost+found - 存放未链接文件。</li><li>/media - 自动识别设备的挂载目录。</li><li>/mnt - 临时挂载文件系统的挂载点。</li><li>/opt - 可选插件软件包安装位置。</li><li>/proc -  内核和进程信息。</li><li><strong>/root</strong> - 超级管理员用户主目录。</li><li>/run - 存放系统运行时需要的东西。</li><li>/sbin - 超级用户的二进制文件。</li><li>/sys - 设备的伪文件系统。</li><li>/tmp - 临时文件夹。</li><li><strong>/usr</strong> - 用户应用目录。</li><li>/var - 变量数据目录。</li></ol><h4 id="8-3-访问权限"><a href="#8-3-访问权限" class="headerlink" title="8.3 访问权限"></a>8.3 访问权限</h4><ol><li><p><strong>chmod</strong> - 改变文件模式比特。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# ls -l<br>...<br>-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html<br>...<br>[root ~]# chmod g+w,o+w sohu.html<br>[root ~]# ls -l<br>...<br>-rw-rw-rw-  1 root       root 211878 Jun 19 16:06 sohu.html<br>...<br>[root ~]# chmod 644 sohu.html<br>[root ~]# ls -l<br>...<br>-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html<br>...<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：通过上面的例子可以看出，用<code>chmod</code>改变文件模式比特有两种方式：一种是字符设定法，另一种是数字设定法。除了<code>chmod</code>之外，可以通过<code>umask</code>来设定哪些权限将在新文件的默认权限中被删除。</p></blockquote><p>长格式查看目录或文件时显示结果及其对应权限的数值如下表所示。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/file-mode.png"></p></li><li><p><strong>chown</strong> - 改变文件所有者。</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# ls -l<br>...<br>-rw-r--r--  1 root root     54 Jun 20 10:06 readme.txt<br>...<br>[root ~]# chown hellokitty readme.txt<br>[root ~]# ls -l<br>...<br>-rw-r--r--  1 hellokitty root     54 Jun 20 10:06 readme.txt<br>...<br></code></pre></div></td></tr></table></figure></li><li><p><strong>chgrp</strong> - 改变用户组。</p></li></ol><h4 id="8-4-磁盘管理"><a href="#8-4-磁盘管理" class="headerlink" title="8.4 磁盘管理"></a>8.4 磁盘管理</h4><ol><li><p>列出文件系统的磁盘使用状况 - <strong>df</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# df -h<br>Filesystem      Size  Used Avail Use% Mounted on<br>/dev/vda1        40G  5.0G   33G  14% /<br>devtmpfs        486M     0  486M   0% /dev<br>tmpfs           497M     0  497M   0% /dev/shm<br>tmpfs           497M  356K  496M   1% /run<br>tmpfs           497M     0  497M   0% /sys/fs/cgroup<br>tmpfs           100M     0  100M   0% /run/user/0<br></code></pre></div></td></tr></table></figure></li><li><p>磁盘分区表操作 - <strong>fdisk</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# fdisk -l<br>Disk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectors<br>Units = sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disk label type: dos<br>Disk identifier: 0x000a42f4<br>   Device Boot      Start         End      Blocks   Id  System<br>/dev/vda1   *        2048    83884031    41940992   83  Linux<br>Disk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectors<br>Units = sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br></code></pre></div></td></tr></table></figure></li><li><p>磁盘分区工具 - <strong>parted</strong>。</p></li><li><p>格式化文件系统 - <strong>mkfs</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# mkfs -t ext4 -v /dev/sdb<br></code></pre></div></td></tr></table></figure><ul><li><code>-t</code> - 指定文件系统的类型。</li><li><code>-c</code> - 创建文件系统时检查磁盘损坏情况。</li><li><code>-v</code> - 显示详细信息。</li></ul></li><li><p>文件系统检查 - <strong>fsck</strong>。</p></li><li><p>转换或拷贝文件 - <strong>dd</strong>。</p></li><li><p>挂载/卸载 - <strong>mount</strong> / <strong>umount</strong>。</p></li><li><p>创建/激活/关闭交换分区 - <strong>mkswap</strong> / <strong>swapon</strong> / <strong>swapoff</strong>。</p></li></ol><blockquote><p>说明：执行上面这些命令会带有一定的风险，如果不清楚这些命令的用法，最好不用随意使用，在使用的过程中，最好对照参考资料进行操作，并在操作前确认是否要这么做。</p></blockquote><h3 id="九：-编辑器-vim"><a href="#九：-编辑器-vim" class="headerlink" title="九： 编辑器 - vim"></a>九： 编辑器 - vim</h3><ol><li><p>启动vim。可以通过<code>vi</code>或<code>vim</code>命令来启动vim，启动时可以指定文件名来打开一个文件，如果没有指定文件名，也可以在保存的时候指定文件名。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# vim guess.py<br></code></pre></div></td></tr></table></figure></li><li><p>命令模式、编辑模式和末行模式：启动vim进入的是命令模式（也称为Normal模式），在命令模式下输入英文字母<code>i</code>会进入编辑模式（Insert模式），屏幕下方出现<code>-- INSERT --</code>提示；在编辑模式下按下<code>Esc</code>会回到命令模式，此时如果输入英文<code>:</code>会进入末行模式，在末行模式下输入<code>q!</code>可以在不保存当前工作的情况下强行退出vim；在命令模式下输入<code>v</code>会进入可视模式（Visual模式），可以用光标选择一个区域再完成对应的操作。</p></li><li><p>保存和退出vim：在命令模式下输入<code>:</code> 进入末行模式，输入<code>wq</code>可以实现保存退出；如果想放弃编辑的内容输入<code>q!</code>强行退出，这一点刚才已经提到过了；在命令模式下也可以直接输入<code>ZZ</code>实现保存退出。如果只想保存文件不退出，那么可以在末行模式下输入<code>w</code>；可以在<code>w</code>后面输入空格再指定要保存的文件名。</p></li><li><p>光标操作。</p><ul><li>在命令模式下可以通过<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>来控制光标向左、下、上、右的方向移动，可以在字母前输入数字来表示移动的距离，例如：<code>10h</code>表示向左移动10个字符。</li><li>在命令模式下可以通过<code>Ctrl+y</code>和<code>Ctrl+e</code>来实现向上、向下滚动一行文本的操作，可以通过<code>Ctrl+f</code>和<code>Ctrl+b</code>来实现向前和向后翻页的操作。</li><li>在命令模式下可以通过输入英文字母<code>G</code>将光标移到文件的末尾，可以通过<code>gg</code>将光标移到文件的开始，也可以通过在<code>G</code>前输入数字来将光标移动到指定的行。</li></ul></li><li><p>文本操作。</p><ul><li>删除：在命令模式下可以用<code>dd</code>来删除整行；可以在<code>dd</code>前加数字来指定删除的行数；可以用<code>d$</code>来实现删除从光标处删到行尾的操作，也可以通过<code>d0</code>来实现从光标处删到行首的操作；如果想删除一个单词，可以使用<code>dw</code>；如果要删除全文，可以在输入<code>:%d</code>（其中<code>:</code>用来从命令模式进入末行模式）。</li><li>复制和粘贴：在命令模式下可以用<code>yy</code>来复制整行；可以在<code>yy</code>前加数字来指定复制的行数；可以通过<code>p</code>将复制的内容粘贴到光标所在的地方。</li><li>撤销和恢复：在命令模式下输入<code>u</code>可以撤销之前的操作；通过<code>Ctrl+r</code>可以恢复被撤销的操作。</li><li>对内容进行排序：在命令模式下输入<code>%!sort</code>。</li></ul></li><li><p>查找和替换。</p><ul><li>查找操作需要输入<code>/</code>进入末行模式并提供正则表达式来匹配与之对应的内容，例如：<code>/doc.*\.</code>，输入<code>n</code>来向前搜索，也可以输入<code>N</code>来向后搜索。</li><li>替换操作需要输入<code>:</code>进入末行模式并指定搜索的范围、正则表达式以及替换后的内容和匹配选项，例如：<code>:1,$s/doc.*/hello/gice</code>，其中：<ul><li><code>g</code> - global：全局匹配。</li><li><code>i</code> - ignore case：忽略大小写匹配。</li><li><code>c</code> - confirm：替换时需要确认。</li><li><code>e</code> - error：忽略错误。</li></ul></li></ul></li><li><p>参数设定：在输入<code>:</code>进入末行模式后可以对vim进行设定。</p><ul><li><p>设置Tab键的空格数：<code>set ts=4</code></p></li><li><p>设置显示/不显示行号：<code>set nu</code> / <code>set nonu</code></p></li><li><p>设置启用/关闭高亮语法：<code>syntax on</code> / <code>syntax off</code></p></li><li><p>设置显示标尺（光标所在的行和列）： <code>set ruler</code></p></li><li><p>设置启用/关闭搜索结果高亮：<code>set hls</code> / <code>set nohls</code></p><blockquote><p>说明：如果希望上面的这些设定在每次启动vim时都能自动生效，需要将这些设定写到用户主目录下的.vimrc文件中。</p></blockquote></li></ul></li><li><p>高级技巧</p><ul><li><p>比较多个文件。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# vim -d foo.txt bar.txt<br></code></pre></div></td></tr></table></figure><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/vim-diff.png"></p></li><li><p>打开多个文件。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# vim foo.txt bar.txt hello.txt<br></code></pre></div></td></tr></table></figure><p>启动vim后只有一个窗口显示的是foo.txt，可以在末行模式中输入<code>ls</code>查看到打开的三个文件，也可以在末行模式中输入<code>b &lt;num&gt;</code>来显示另一个文件，例如可以用<code>:b 2</code>将bar.txt显示出来，可以用<code>:b 3</code>将hello.txt显示出来。</p></li><li><p>拆分和切换窗口。</p><p>可以在末行模式中输入<code>sp</code>或<code>vs</code>来实现对窗口的水平或垂直拆分，这样我们就可以同时打开多个编辑窗口，通过按两次<code>Ctrl+w</code>就可以实现编辑窗口的切换，在一个窗口中执行退出操作只会关闭对应的窗口，其他的窗口继续保留。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/vim-multi-window.png"></p></li><li><p>映射快捷键：在vim下可以将一些常用操作映射为快捷键来提升工作效率。</p><ul><li><p>例子1：在命令模式下输入<code>F4</code>执行从第一行开始删除10000行代码的操作。</p><p><code>:map &lt;F4&gt; gg10000dd</code>。</p><p>例子2：在编辑模式下输入<code>__main</code>直接补全为<code>if __name__ == &#39;__main__&#39;:</code>。</p><p><code>:inoremap __main if __name__ == &#39;__main__&#39;:</code></p></li></ul><blockquote><p>说明：上面例子2的<code>inoremap</code>中的<code>i</code>表示映射的键在编辑模式使用， <code>nore</code>表示不要递归，这一点非常重要，否则如果键对应的内容中又出现键本身，就会引发递归（相当于进入了死循环）。如果希望映射的快捷键每次启动vim时都能生效，需要将映射写到用户主目录下的.vimrc文件中。</p></blockquote></li><li><p>录制宏。</p><ul><li><p>在命令模式下输入<code>qa</code>开始录制宏（其中<code>a</code>是寄存器的名字，也可以是其他英文字母或0-9的数字）。</p></li><li><p>执行你的操作（光标操作、编辑操作等），这些操作都会被录制下来。</p></li><li><p>如果录制的操作已经完成了，按<code>q</code>结束录制。</p></li><li><p>通过<code>@a</code>（<code>a</code>是刚才使用的寄存器的名字）播放宏，如果要多次执行宏可以在前面加数字，例如<code>100@a</code>表示将宏播放100次。</p></li><li><p>可以试一试下面的例子来体验录制宏的操作，该例子来源于<a href="https://harttle.land/tags.html#Vim">Harttle Land网站</a>，该网站上提供了很多关于vim的使用技巧，有兴趣的可以了解一下。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/vim-macro.png"></p></li></ul></li></ul></li></ol><h3 id="十：-软件安装和配置"><a href="#十：-软件安装和配置" class="headerlink" title="十： 软件安装和配置"></a>十： 软件安装和配置</h3><h4 id="10-1-使用包管理工具"><a href="#10-1-使用包管理工具" class="headerlink" title="10.1 使用包管理工具"></a>10.1 使用包管理工具</h4><ol><li><strong>yum</strong> - Yellowdog Updater Modified。<ul><li><code>yum search</code>：搜索软件包，例如<code>yum search nginx</code>。</li><li><code>yum list installed</code>：列出已经安装的软件包，例如<code>yum list installed | grep zlib</code>。</li><li><code>yum install</code>：安装软件包，例如<code>yum install nginx</code>。</li><li><code>yum remove</code>：删除软件包，例如<code>yum remove nginx</code>。</li><li><code>yum update</code>：更新软件包，例如<code>yum update</code>可以更新所有软件包，而<code>yum update tar</code>只会更新tar。</li><li><code>yum check-update</code>：检查有哪些可以更新的软件包。</li><li><code>yum info</code>：显示软件包的相关信息，例如<code>yum info nginx</code>。</li></ul></li><li><strong>rpm</strong> - Redhat Package Manager。<ul><li>安装软件包：<code>rpm -ivh &lt;packagename&gt;.rpm</code>。</li><li>移除软件包：<code>rpm -e &lt;packagename&gt;</code>。</li><li>查询软件包：<code>rpm -qa</code>，例如可以用<code>rpm -qa | grep mysql</code>来检查是否安装了MySQL相关的软件包。</li></ul></li></ol><p>下面以Nginx为例，演示如何使用yum安装软件。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# yum -y install nginx<br>...<br>Installed:<br>  nginx.x86_64 1:1.12.2-2.el7<br>Dependency Installed:<br>  nginx-all-modules.noarch 1:1.12.2-2.el7<br>  nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7<br>  nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7<br>  nginx-mod-http-perl.x86_64 1:1.12.2-2.el7<br>  nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7<br>  nginx-mod-mail.x86_64 1:1.12.2-2.el7<br>  nginx-mod-stream.x86_64 1:1.12.2-2.el7<br>Complete!<br>[root ~]# yum info nginx<br>Loaded plugins: fastestmirror<br>Loading mirror speeds from cached hostfile<br>Installed Packages<br>Name        : nginx<br>Arch        : x86_64<br>Epoch       : 1<br>Version     : 1.12.2<br>Release     : 2.el7<br>Size        : 1.5 M<br>Repo        : installed<br>From repo   : epel<br>Summary     : A high performance web server and reverse proxy server<br>URL         : http://nginx.org/<br>License     : BSD<br>Description : Nginx is a web server and a reverse proxy server for HTTP, SMTP, POP3 and<br>            : IMAP protocols, with a strong focus on high concurrency, performance and low<br>            : memory usage.<br>[root ~]# nginx -v<br>nginx version: nginx/1.12.2<br></code></pre></div></td></tr></table></figure><p>移除Nginx。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# yum -y remove nginx<br></code></pre></div></td></tr></table></figure><p>下面以MySQL为例，演示如何使用rpm安装软件。要安装MySQL需要先到<a href="https://www.mysql.com/">MySQL官方网站</a>下载对应的<a href="https://dev.mysql.com/downloads/mysql/">RPM文件</a>，当然要选择和你使用的Linux系统对应的版本。MySQL现在是Oracle公司旗下的产品，在MySQL被收购后，MySQL的作者重新制作了一个MySQL的分支MariaDB，可以通过yum进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root mysql]# ls<br>mysql-community-client-5.7.22-1.el7.x86_64.rpm<br>mysql-community-common-5.7.22-1.el7.x86_64.rpm<br>mysql-community-libs-5.7.22-1.el7.x86_64.rpm<br>mysql-community-server-5.7.22-1.el7.x86_64.rpm<br>[root mysql]# yum -y remove mariadb-libs<br>[root mysql]# yum -y install libaio<br>[root mysql]#rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm<br>...<br>[root mysql]#rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm<br>...<br>[root mysql]#rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm<br>...<br>[root mysql]#rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm<br>...<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：由于MySQL和<a href="https://mariadb.org/">MariaDB</a>的底层依赖库是有冲突的，所以上面我们首先用<code>yum</code>移除了名为mariadb-libs的依赖库并安装了名为libaio支持异步I/O操作的依赖库。关于MySQL和MariaDB之间的关系，可以阅读<a href="https://zh.wikipedia.org/wiki/MariaDB">维基百科</a>上关于MariaDB的介绍。</p></blockquote><p>移除安装的MySQL。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# rpm -qa | grep mysql | xargs rpm -e<br></code></pre></div></td></tr></table></figure><h4 id="10-2-下载解压配置环境变量"><a href="#10-2-下载解压配置环境变量" class="headerlink" title="10.2 下载解压配置环境变量"></a>10.2 下载解压配置环境变量</h4><p>下面以安装MongoDB为例，演示这类软件应该如何安装。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz<br>--2018-06-21 18:32:53--  https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz<br>Resolving fastdl.mongodb.org (fastdl.mongodb.org)... 52.85.83.16, 52.85.83.228, 52.85.83.186, ...<br>Connecting to fastdl.mongodb.org (fastdl.mongodb.org)|52.85.83.16|:443... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 100564462 (96M) [application/x-gzip]<br>Saving to: ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’<br><span class="hljs-meta">100%</span><span class="bash">[==================================================&gt;] 100,564,462  630KB/s   <span class="hljs-keyword">in</span> 2m 9s</span><br>2018-06-21 18:35:04 (760 KB/s) - ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’ saved [100564462/100564462]<br>[root ~]# gunzip mongodb-linux-x86_64-rhel70-3.6.5.tgz<br>[root ~]# tar -xvf mongodb-linux-x86_64-rhel70-3.6.5.tar<br>mongodb-linux-x86_64-rhel70-3.6.5/README<br>mongodb-linux-x86_64-rhel70-3.6.5/THIRD-PARTY-NOTICES<br>mongodb-linux-x86_64-rhel70-3.6.5/MPL-2<br>mongodb-linux-x86_64-rhel70-3.6.5/GNU-AGPL-3.0<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongodump<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongorestore<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoexport<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoimport<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongostat<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongotop<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/bsondump<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongofiles<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoreplay<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoperf<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongod<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongos<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongo<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/install_compass<br>[root ~]# vim .bash_profile<br>...<br>PATH=$PATH:$HOME/bin:$HOME/mongodb-linux-x86_64-rhel70-3.6.5/bin<br>export PATH<br>...<br>[root ~]# source .bash_profile<br>[root ~]# mongod --version<br>db version v3.6.5<br>git version: a20ecd3e3a174162052ff99913bc2ca9a839d618<br>OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013<br>allocator: tcmalloc<br>modules: none<br>build environment:<br>    distmod: rhel70<br>    distarch: x86_64<br>    target_arch: x86_64<br>[root ~]# mongo --version<br>MongoDB shell version v3.6.5<br>git version: a20ecd3e3a174162052ff99913bc2ca9a839d618<br>OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013<br>allocator: tcmalloc<br>modules: none<br>build environment:<br>    distmod: rhel70<br>    distarch: x86_64<br>    target_arch: x86_64<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：当然也可以通过yum来安装MongoDB，具体可以参照<a href="https://docs.mongodb.com/master/administration/install-on-linux/">官方网站</a>上给出的说明。</p></blockquote><h4 id="10-3-源代码构建安装"><a href="#10-3-源代码构建安装" class="headerlink" title="10.3 源代码构建安装"></a>10.3 源代码构建安装</h4><ol><li><p>安装Python 3.6。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# yum install gcc<br>[root ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz<br>[root ~]# gunzip Python-3.6.5.tgz<br>[root ~]# tar -xvf Python-3.6.5.tar<br>[root ~]# cd Python-3.6.5<br>[root ~]# ./configure --prefix=/usr/local/python36 --enable-optimizations<br>[root ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel<br>[root ~]# make &amp;&amp; make install<br>...<br>[root ~]# ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3<br>[root ~]# python3 --version<br>Python 3.6.5<br>[root ~]# python3 -m pip install -U pip<br>[root ~]# pip3 --version<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：上面在安装好Python之后还需要注册PATH环境变量，将Python安装路径下bin文件夹的绝对路径注册到PATH环境变量中。注册环境变量可以修改用户主目录下的.bash_profile或者/etc目录下的profile文件，二者的区别在于前者相当于是用户环境变量，而后者相当于是系统环境变量。</p></blockquote></li><li><p>安装Redis-3.2.12。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# wget http://download.redis.io/releases/redis-3.2.12.tar.gz<br>[root ~]# gunzip redis-3.2.12.tar.gz<br>[root ~]# tar -xvf redis-3.2.12.tar<br>[root ~]# cd redis-3.2.12<br>[root ~]# make &amp;&amp; make install<br>[root ~]# redis-server --version<br>Redis server v=3.2.12 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=5bc5cd3c03d6ceb6<br>[root ~]# redis-cli --version<br>redis-cli 3.2.12<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="十一：-配置服务"><a href="#十一：-配置服务" class="headerlink" title="十一： 配置服务"></a>十一： 配置服务</h3><p>我们可以Linux系统下安装和配置各种服务，也就是说我们可以把Linux系统打造成数据库服务器、Web服务器、缓存服务器、文件服务器、消息队列服务器等等。Linux下的大多数服务都被设置为守护进程（驻留在系统后台运行，但不会因为服务还在运行而导致Linux无法停止运行），所以我们安装的服务通常名字后面都有一个字母<code>d</code>，它是英文单词<code>daemon</code>的缩写，例如：防火墙服务叫firewalld，我们之前安装的MySQL服务叫mysqld，Apache服务器叫httpd等。在安装好服务之后，可以使用<code>systemctl</code>命令或<code>service</code>命令来完成对服务的启动、停止等操作，具体操作如下所示。</p><ol><li><p>启动防火墙服务。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# systemctl start firewalld<br></code></pre></div></td></tr></table></figure></li><li><p>终止防火墙服务。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# systemctl stop firewalld<br></code></pre></div></td></tr></table></figure></li><li><p>重启防火墙服务。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# systemctl restart firewalld<br></code></pre></div></td></tr></table></figure></li><li><p>查看防火墙服务状态。</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# systemctl status firewalld<br></code></pre></div></td></tr></table></figure></li><li><p>设置/禁用防火墙服务开机自启。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# systemctl enable firewalld<br>Created symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.<br>Created symlink from /etc/systemd/system/multi-user.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.<br>[root ~]# systemctl disable firewalld<br>Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.<br>Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="十二：-计划任务"><a href="#十二：-计划任务" class="headerlink" title="十二： 计划任务"></a>十二： 计划任务</h3><ol><li><p>在指定的时间执行命令</p><ul><li><strong>at</strong> - 将任务排队，在指定的时间执行。</li><li><strong>atq</strong> - 查看待执行的任务队列。</li><li><strong>atrm</strong> - 从队列中删除待执行的任务。</li></ul><p>指定3天以后下午5点要执行的任务。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# at 5pm+3days<br><span class="hljs-meta">at&gt;</span><span class="bash"> rm -f /root/*.html</span><br><span class="hljs-meta">at&gt;</span><span class="bash"> &lt;EOT&gt;</span><br>job 9 at Wed Jun  5 17:00:00 2019<br></code></pre></div></td></tr></table></figure><p>查看待执行的任务队列。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# atq<br>9       Wed Jun  5 17:00:00 2019 a root<br></code></pre></div></td></tr></table></figure><p>从队列中删除指定的任务。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]$ atrm 9<br></code></pre></div></td></tr></table></figure></li><li><p>计划任务表 - <strong>crontab</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# crontab -e<br>* * * * * echo &quot;hello, world!&quot; &gt;&gt; /root/hello.txt<br>59 23 * * * rm -f /root/*.log<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：输入<code>crontab -e</code>命令会打开vim来编辑Cron表达式并指定触发的任务，上面我们定制了两个计划任务，一个是每分钟向/root目录下的hello.txt中追加输出<code>hello, world!</code>；另一个是每天23时59分执行删除/root目录下以log为后缀名的文件。如果不知道Cron表达式如何书写，可以参照/etc/crontab文件中的提示（下面会讲到）或者用搜索引擎找一下“Cron表达式在线生成器”来生成Cron表达式。</p></blockquote><p>和crontab相关的文件在<code>/etc</code>目录下，通过修改<code>/etc</code>目录下的crontab文件也能够定制计划任务。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# cd /etc<br>[root etc]# ls -l | grep cron<br>-rw-------.  1 root root      541 Aug  3  2017 anacrontab<br>drwxr-xr-x.  2 root root     4096 Mar 27 11:56 cron.d<br>drwxr-xr-x.  2 root root     4096 Mar 27 11:51 cron.daily<br>-rw-------.  1 root root        0 Aug  3  2017 cron.deny<br>drwxr-xr-x.  2 root root     4096 Mar 27 11:50 cron.hourly<br>drwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.monthly<br>-rw-r--r--   1 root root      493 Jun 23 15:09 crontab<br>drwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.weekly<br>[root etc]# vim crontab<br>  1 SHELL=/bin/bash<br>  2 PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>  3 MAILTO=root<br>  4<br>  5 # For details see man 4 crontabs<br>  6<br>  7 # Example of job definition:<br>  8 # .---------------- minute (0 - 59)<br>  9 # |  .------------- hour (0 - 23)<br> 10 # |  |  .---------- day of month (1 - 31)<br> 11 # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...<br> 12 # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat<br> 13 # |  |  |  |  |<br> 14 # *  *  *  *  * user-name  command to be executed<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="十三：-网络访问和管理"><a href="#十三：-网络访问和管理" class="headerlink" title="十三： 网络访问和管理"></a>十三： 网络访问和管理</h3><ol><li><p>安全远程连接 - <strong>ssh</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]$ ssh root@120.77.222.217<br>The authenticity of host &#x27;120.77.222.217 (120.77.222.217)&#x27; can&#x27;t be established.<br>ECDSA key fingerprint is SHA256:BhUhykv+FvnIL03I9cLRpWpaCxI91m9n7zBWrcXRa8w.<br>ECDSA key fingerprint is MD5:cc:85:e9:f0:d7:07:1a:26:41:92:77:6b:7f:a0:92:65.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added &#x27;120.77.222.217&#x27; (ECDSA) to the list of known hosts.<br>root@120.77.222.217&#x27;s password: <br></code></pre></div></td></tr></table></figure></li><li><p>通过网络获取资源 - <strong>wget</strong>。</p><ul><li>-b 后台下载模式</li><li>-O 下载到指定的目录</li><li>-r 递归下载</li></ul></li><li><p>发送和接收邮件 - <strong>mail</strong>。</p></li><li><p>网络配置工具（旧） - <strong>ifconfig</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# ifconfig eth0<br>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 172.18.61.250  netmask 255.255.240.0  broadcast 172.18.63.255<br>        ether 00:16:3e:02:b6:46  txqueuelen 1000  (Ethernet)<br>        RX packets 1067841  bytes 1296732947 (1.2 GiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 409912  bytes 43569163 (41.5 MiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions <br></code></pre></div></td></tr></table></figure></li><li><p>网络配置工具（新） - <strong>ip</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# ip address<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000<br>    link/ether 00:16:3e:02:b6:46 brd ff:ff:ff:ff:ff:ff<br>    inet 172.18.61.250/20 brd 172.18.63.255 scope global eth0<br>       valid_lft forever preferred_lft forever<br></code></pre></div></td></tr></table></figure></li><li><p>网络可达性检查 - <strong>ping</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# ping www.baidu.com -c 3<br>PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data.<br>64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=1 ttl=51 time=36.3 ms<br>64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=2 ttl=51 time=36.4 ms<br>64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=3 ttl=51 time=36.4 ms<br>--- www.a.shifen.com ping statistics ---<br>3 packets transmitted, 3 received, 0% packet loss, time 2002ms<br>rtt min/avg/max/mdev = 36.392/36.406/36.427/0.156 ms<br></code></pre></div></td></tr></table></figure></li><li><p>显示或管理路由表 - <strong>route</strong>。</p></li><li><p>查看网络服务和端口 - <strong>netstat</strong> / <strong>ss</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# netstat -nap | grep nginx<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 端口使用情况</span><br>[root ~]# netstat -ntulp | grep 8080   //查看所有8080端口使用情况<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 程序占用端口</span><br>[root ~]# ps -ef | grep tomcat //查看tomcat端口占用情况<br></code></pre></div></td></tr></table></figure></li><li><p>网络监听抓包 - <strong>tcpdump</strong>。</p></li><li><p>安全文件拷贝 - <strong>scp</strong>。</p></li></ol>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# scp root@1.2.3.4:/root/guido.jpg hellokitty@4.3.2.1:/home/hellokitty/pic.jpg<br></code></pre></div></td></tr></table></figure><p>  scp中使用sshpass带密码传输文件</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">sshpass -p &#x27;密码&#x27; scp -r 用户名@ip:/home/file1 /home/file1<br></code></pre></div></td></tr></table></figure><ol start="11"><li><p>文件同步工具 - <strong>rsync</strong>。</p><blockquote><p>说明：使用<code>rsync</code>可以实现文件的自动同步，这个对于文件服务器来说相当重要。关于这个命令的用法，我们在后面讲项目部署的时候为大家详细说明。</p></blockquote></li><li><p>安全文件传输 - <strong>sftp</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# sftp root@1.2.3.4<br>root@1.2.3.4&#x27;s password:<br>Connected to 1.2.3.4.<br><span class="hljs-meta">sftp&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><p><code>help</code>：显示帮助信息。</p></li><li><p><code>ls</code>/<code>lls</code>：显示远端/本地目录列表。</p></li><li><p><code>cd</code>/<code>lcd</code>：切换远端/本地路径。</p></li><li><p><code>mkdir</code>/<code>lmkdir</code>：创建远端/本地目录。</p></li><li><p><code>pwd</code>/<code>lpwd</code>：显示远端/本地当前工作目录。</p></li><li><p><code>get</code>：下载文件。</p></li><li><p><code>put</code>：上传文件。</p></li><li><p><code>rm</code>：删除远端文件。</p></li><li><p><code>bye</code>/<code>exit</code>/<code>quit</code>：退出sftp。</p></li></ul></li></ol><h3 id="十四：-进程管理"><a href="#十四：-进程管理" class="headerlink" title="十四： 进程管理"></a>十四： 进程管理</h3><ol><li><p>查看进程 - <strong>ps</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# ps -ef<br>UID        PID  PPID  C STIME TTY          TIME CMD<br>root         1     0  0 Jun23 ?        00:00:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 21<br>root         2     0  0 Jun23 ?        00:00:00 [kthreadd]<br>...<br>[root ~]# ps -ef | grep mysqld<br>root      4943  4581  0 22:45 pts/0    00:00:00 grep --color=auto mysqld<br>mysql    25257     1  0 Jun25 ?        00:00:39 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid<br></code></pre></div></td></tr></table></figure></li><li><p>显示进程状态树 - <strong>pstree</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# pstree<br>systemd─┬─AliYunDun───18*[&#123;AliYunDun&#125;]<br>        ├─AliYunDunUpdate───3*[&#123;AliYunDunUpdate&#125;]<br>        ├─2*[agetty]<br>        ├─aliyun-service───2*[&#123;aliyun-service&#125;]<br>        ├─atd<br>        ├─auditd───&#123;auditd&#125;<br>        ├─dbus-daemon<br>        ├─dhclient<br>        ├─irqbalance<br>        ├─lvmetad<br>        ├─mysqld───28*[&#123;mysqld&#125;]<br>        ├─nginx───2*[nginx]<br>        ├─ntpd<br>        ├─polkitd───6*[&#123;polkitd&#125;]<br>        ├─rsyslogd───2*[&#123;rsyslogd&#125;]<br>        ├─sshd───sshd───bash───pstree<br>        ├─systemd-journal<br>        ├─systemd-logind<br>        ├─systemd-udevd<br>        └─tuned───4*[&#123;tuned&#125;]<br></code></pre></div></td></tr></table></figure></li><li><p>查找与指定条件匹配的进程 - <strong>pgrep</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]$ pgrep mysqld<br>3584<br></code></pre></div></td></tr></table></figure></li><li><p>通过进程号终止进程 - <strong>kill</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]$ kill -l<br> 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP<br> 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1<br>11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM<br>16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP<br>21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ<br>26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR<br>31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3<br>38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8<br>43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13<br>48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12<br>53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7<br>58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2<br>63) SIGRTMAX-1  64) SIGRTMAX<br>[root ~]# kill 1234<br>[root ~]# kill -9 1234<br></code></pre></div></td></tr></table></figure><p>例子：用一条命令强制终止正在运行的Redis进程。</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">ps -ef | grep redis | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill<br></code></pre></div></td></tr></table></figure></li><li><p>通过进程名终止进程 - <strong>killall</strong> / <strong>pkill</strong>。</p><p> 结束名为mysqld的进程。</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# pkill mysqld<br></code></pre></div></td></tr></table></figure><p> 结束hellokitty用户的所有进程。</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# pkill -u hellokitty<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：这样的操作会让hellokitty用户和服务器断开连接。</p></blockquote></li><li><p>将进程置于后台运行。</p><ul><li><code>Ctrl+Z</code> - 快捷键，用于停止进程并置于后台。</li><li><code>&amp;</code> - 将进程置于后台运行。</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# mongod &amp;<br>[root ~]# redis-server<br>...<br>^Z<br>[4]+  Stopped                 redis-server<br></code></pre></div></td></tr></table></figure></li><li><p>查询后台进程 - <strong>jobs</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# jobs<br>[2]   Running                 mongod &amp;<br>[3]-  Stopped                 cat<br>[4]+  Stopped                 redis-server<br></code></pre></div></td></tr></table></figure></li><li><p>让进程在后台继续运行 - <strong>bg</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# bg %4<br>[4]+ redis-server &amp;<br>[root ~]# jobs<br>[2]   Running                 mongod &amp;<br>[3]+  Stopped                 cat<br>[4]-  Running                 redis-server &amp;<br></code></pre></div></td></tr></table></figure></li><li><p>将后台进程置于前台 - <strong>fg</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# fg %4<br>redis-server<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：置于前台的进程可以使用<code>Ctrl+C</code>来终止它。</p></blockquote></li><li><p>调整程序/进程运行时优先级 - <strong>nice</strong> / <strong>renice</strong>。</p></li><li><p>用户登出后进程继续工作 - <strong>nohup</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# nohup ping www.baidu.com &gt; result.txt &amp;<br></code></pre></div></td></tr></table></figure></li><li><p>跟踪进程系统调用情况 - <strong>strace</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# pgrep mysqld<br>8803<br>[root ~]# strace -c -p 8803<br>strace: Process 8803 attached<br>^Cstrace: Process 8803 detached<br><span class="hljs-meta">%</span><span class="bash"> time     seconds  usecs/call     calls    errors syscall</span><br>------ ----------- ----------- --------- --------- ----------------<br> 99.18    0.005719        5719         1           restart_syscall<br>  0.49    0.000028          28         1           mprotect<br>  0.24    0.000014          14         1           clone<br>  0.05    0.000003           3         1           mmap<br>  0.03    0.000002           2         1           accept<br>------ ----------- ----------- --------- --------- ----------------<br>100.00    0.005766                     5           total<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：这个命令的用法和参数都比较复杂，建议大家在真正用到这个命令的时候再根据实际需要进行了解。</p></blockquote></li><li><p>查看当前运行级别 - <strong>runlevel</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# runlevel<br>N 3<br></code></pre></div></td></tr></table></figure></li><li><p>实时监控进程占用资源状况 - <strong>top</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# top<br>top - 23:04:23 up 3 days, 14:10,  1 user,  load average: 0.00, 0.01, 0.05<br>Tasks:  65 total,   1 running,  64 sleeping,   0 stopped,   0 zombie<br><span class="hljs-meta">%</span><span class="bash">Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br>KiB Mem :  1016168 total,   191060 free,   324700 used,   500408 buff/cache<br>KiB Swap:        0 total,        0 free,        0 used.   530944 avail Mem<br>...<br></code></pre></div></td></tr></table></figure><ul><li><code>-c</code> - 显示进程的整个路径。</li><li><code>-d</code> - 指定两次刷屏之间的间隔时间（秒为单位）。</li><li><code>-i</code> - 不显示闲置进程或僵尸进程。</li><li><code>-p</code> - 显示指定进程的信息。</li></ul></li></ol><h3 id="十五：-系统诊断"><a href="#十五：-系统诊断" class="headerlink" title="十五： 系统诊断"></a>十五： 系统诊断</h3><ol><li><p>系统启动异常诊断 - <strong>dmesg</strong>。</p></li><li><p>查看系统活动信息 - <strong>sar</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# sar -u -r 5 10<br>Linux 3.10.0-957.10.1.el7.x86_64 (izwz97tbgo9lkabnat2lo8z)      06/02/2019      _x86_64_        (2 CPU)<br><br>06:48:30 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle<br>06:48:35 PM     all      0.10      0.00      0.10      0.00      0.00     99.80<br><br>06:48:30 PM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty<br>06:48:35 PM   1772012   2108392     54.33    102816   1634528    784940     20.23    793328   1164704         0<br></code></pre></div></td></tr></table></figure><ul><li><code>-A</code> - 显示所有设备（CPU、内存、磁盘）的运行状况。</li><li><code>-u</code> - 显示所有CPU的负载情况。</li><li><code>-d</code> - 显示所有磁盘的使用情况。</li><li><code>-r</code> - 显示内存的使用情况。</li><li><code>-n</code> - 显示网络运行状态。</li></ul></li><li><p>查看内存使用情况 - <strong>free</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# free<br>              total        used        free      shared  buff/cache   available<br>Mem:        1016168      323924      190452         356      501792      531800<br>Swap:             0           0           0<br></code></pre></div></td></tr></table></figure></li><li><p>虚拟内存统计 - <strong>vmstat</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# vmstat<br>procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----<br> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st<br> 2  0      0 204020  79036 667532    0    0     5    18  101   58  1  0 99  0  0<br></code></pre></div></td></tr></table></figure></li><li><p>CPU信息统计 - <strong>mpstat</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# mpstat<br>Linux 3.10.0-957.5.1.el7.x86_64 (iZ8vba0s66jjlfmo601w4xZ)       05/30/2019      _x86_64_        (1 CPU)<br><br>01:51:54 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle<br>01:51:54 AM  all    0.71    0.00    0.17    0.04    0.00    0.00    0.00    0.00    0.00   99.07<br></code></pre></div></td></tr></table></figure></li><li><p>查看进程使用内存状况 - <strong>pmap</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# ps<br>  PID TTY          TIME CMD<br> 4581 pts/0    00:00:00 bash<br> 5664 pts/0    00:00:00 ps<br>[root ~]# pmap 4581<br>4581:   -bash<br>0000000000400000    884K r-x-- bash<br>00000000006dc000      4K r---- bash<br>00000000006dd000     36K rw--- bash<br>00000000006e6000     24K rw---   [ anon ]<br>0000000001de0000    400K rw---   [ anon ]<br>00007f82fe805000     48K r-x-- libnss_files-2.17.so<br>00007f82fe811000   2044K ----- libnss_files-2.17.so<br>...<br></code></pre></div></td></tr></table></figure></li><li><p>报告设备CPU和I/O统计信息 - <strong>iostat</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# iostat<br>Linux 3.10.0-693.11.1.el7.x86_64 (iZwz97tbgo9lkabnat2lo8Z)      06/26/2018      _x86_64_       (1 CPU)<br>avg-cpu:  %user   %nice %system %iowait  %steal   %idle<br>           0.79    0.00    0.20    0.04    0.00   98.97<br>Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn<br>vda               0.85         6.78        21.32    2106565    6623024<br>vdb               0.00         0.01         0.00       2088          0<br></code></pre></div></td></tr></table></figure></li><li><p>显示所有PCI设备 - <strong>lspci</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# lspci<br>00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)<br>00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]<br>00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II]<br>00:01.2 USB controller: Intel Corporation 82371SB PIIX3 USB [Natoma/Triton II] (rev 01)<br>00:01.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 03)<br>00:02.0 VGA compatible controller: Cirrus Logic GD 5446<br>00:03.0 Ethernet controller: Red Hat, Inc. Virtio network device<br>00:04.0 Communication controller: Red Hat, Inc. Virtio console<br>00:05.0 SCSI storage controller: Red Hat, Inc. Virtio block device<br>00:06.0 SCSI storage controller: Red Hat, Inc. Virtio block device<br>00:07.0 Unclassified device [00ff]: Red Hat, Inc. Virtio memory balloon<br></code></pre></div></td></tr></table></figure></li><li><p>显示进程间通信设施的状态 - <strong>ipcs</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell">[root ~]# ipcs<br><br>------ Message Queues --------<br>key        msqid      owner      perms      used-bytes   messages    <br><br>------ Shared Memory Segments --------<br>key        shmid      owner      perms      bytes      nattch     status      <br><br>------ Semaphore Arrays --------<br>key        semid      owner      perms      nsems<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="十六：-Shell编程"><a href="#十六：-Shell编程" class="headerlink" title="十六： Shell编程"></a>十六： Shell编程</h3><p>之前我们提到过，Shell是一个连接用户和操作系统的应用程序，它提供了人机交互的界面（接口），用户通过这个界面访问操作系统内核的服务。Shell脚本是一种为Shell编写的脚本程序，我们可以通过Shell脚本来进行系统管理，同时也可以通过它进行文件操作。总之，编写Shell脚本对于使用Linux系统的人来说，应该是一项标配技能。</p><p>互联网上有大量关于Shell脚本的相关知识，我不打算再此对Shell脚本做一个全面系统的讲解，我们通过下面的代码来感性的认识下Shell脚本就行了。</p><p>例子1：输入两个整数m和n，计算从m到n的整数求和的结果。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/bash</span><br>printf &#x27;m = &#x27;<br>read m<br>printf &#x27;n = &#x27;<br>read n<br>a=$m<br>sum=0<br>while [ $a -le $n ]<br>do<br>    sum=$[ sum + a ]<br>    a=$[ a + 1 ]<br>done<br>echo &#x27;结果: &#x27;$sum<br></code></pre></div></td></tr></table></figure><p>例子2：自动创建文件夹和指定数量的文件。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/bash</span><br>printf &#x27;输入文件名: &#x27;<br>read file<br>printf &#x27;输入文件数量(&lt;1000): &#x27;<br>read num<br>if [ $num -ge 1000 ]<br>then<br>    echo &#x27;文件数量不能超过1000&#x27;<br>else<br>    if [ -e $dir -a -d $dir ]<br>    then<br>        rm -rf $dir<br>    else<br>        if [ -e $dir -a -f $dir ]<br>        then<br>            rm -f $dir<br>        fi<br>    fi<br>    mkdir -p $dir<br>    index=1<br>    while [ $index -le $num ]<br>    do<br>        if [ $index -lt 10 ]<br>        then<br>            pre=&#x27;00&#x27;<br>        elif [ $index -lt 100 ]<br>        then<br>            pre=&#x27;0&#x27;<br>        else<br>            pre=&#x27;&#x27;<br>        fi<br>        touch $dir&#x27;/&#x27;$file&#x27;_&#x27;$pre$index<br>        index=$[ index + 1 ]<br>    done<br>fi<br></code></pre></div></td></tr></table></figure><p>例子3：自动安装指定版本的Redis。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/bash</span><br>install_redis() &#123;<br>    if ! which redis-server &gt; /dev/null<br>    then<br>        cd /root<br>        wget $1$2&#x27;.tar.gz&#x27; &gt;&gt; install.log<br>        gunzip /root/$2&#x27;.tar.gz&#x27;<br>        tar -xf /root/$2&#x27;.tar&#x27;<br>        cd /root/$2<br>        make &gt;&gt; install.log<br>        make install &gt;&gt; install.log<br>        echo &#x27;安装完成&#x27;<br>    else<br>        echo &#x27;已经安装过Redis&#x27;<br>    fi<br>&#125;<br><br>install_redis &#x27;http://download.redis.io/releases/&#x27; $1<br></code></pre></div></td></tr></table></figure><h3 id="十七：-开机启动项"><a href="#十七：-开机启动项" class="headerlink" title="十七： 开机启动项"></a>十七： 开机启动项</h3><p>有的时候，经常有自己需要的程序，官方并没有提供添加开机启动的方法，但我们却需要让他们开机启动（比如探针类、飞机类、服务类程序等）。可能有的人会说，可以使用 <code>/etc/rc.local</code> 啊。是可以使用这个，但不是所有的系统都有 <code>rc.local</code> 。今天介绍一个简单的方法，实现将自己需要的程序添加到开机启动项中，并使其在系统启动后自动执行。</p><p>首先，进入 <code>/etc/init.d</code> 目录中：</p><p><code>cd /etc/init.d/</code></p><p>然后，我们使用 <code>ls</code> 命令，会发现里面有一些文件。这些文件就是在开机启动时自动运行的程序。我们现在来开始添加一个自定义的开机启动项 <code>MyTest</code> ：</p><p><code>vim MyTest</code></p><p>文件名严格区分大小写，请注意！</p><p>你可以使用你自己喜欢的文本编辑工具进行编辑工作。此文以 vim 为例。</p><p>然后，在继续之前，先看一下开机启动项文件的一个模板：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## BEGIN INIT INFO</span></span><br><span class="hljs-meta">#</span><span class="bash"> Provides: [程序名称，唯一]</span><br><span class="hljs-meta">#</span><span class="bash"> Required-Start: <span class="hljs-variable">$network</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$local_fs</span></span><br><span class="hljs-meta">#</span><span class="bash"> Required-Stop: <span class="hljs-variable">$network</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$local_fs</span></span><br><span class="hljs-meta">#</span><span class="bash"> Default-Start: 2 3 4 5</span><br><span class="hljs-meta">#</span><span class="bash"> Default-Stop: 0 1 6</span><br><span class="hljs-meta">#</span><span class="bash"> Short-Description: [启动项的简短说明]</span><br><span class="hljs-meta">#</span><span class="bash"> Description: [启动项的完整说明]</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## END INIT INFO</span></span><br><br>[需要执行的命令]<br><br>exit 0<br></code></pre></div></td></tr></table></figure><p>在这个模板中，<strong>Provides</strong> 是唯一的，也就是在所有的开机启动项中，<strong>Provides</strong> 不能有任何同名冲突。</p><p><strong>Short-Description</strong> 和 <strong>Description</strong> 随心情写。</p><p>需要执行的命令，按照正常的<code>Bash Shell</code>书写方式书写即可。</p><blockquote><p>友情提示：需要后台静默运行的程序，请使用 <code>nohup [需要执行的命令] &gt;/dev/null 2&gt;&amp;1 &amp;</code> 方式来启动！</p></blockquote><p>最后的 <strong>exit 0</strong> 请不要删除！这个是返回正常退出信号的一个传值！</p><p>那么，我们设想我们需要创建一个名为 <code>MyTest</code> 的开机启动项，并要求其在开机时在 <code>/root/mytest.txt</code> 文件中写入一句话：“Hello Linux World !”，根据上面的模板，我们需要修改成这个样子：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SHELL"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## BEGIN INIT INFO</span></span><br><span class="hljs-meta">#</span><span class="bash"> Provides: MyTest</span><br><span class="hljs-meta">#</span><span class="bash"> Required-Start: <span class="hljs-variable">$network</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$local_fs</span></span><br><span class="hljs-meta">#</span><span class="bash"> Required-Stop: <span class="hljs-variable">$network</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$local_fs</span></span><br><span class="hljs-meta">#</span><span class="bash"> Default-Start: 2 3 4 5</span><br><span class="hljs-meta">#</span><span class="bash"> Default-Stop: 0 1 6</span><br><span class="hljs-meta">#</span><span class="bash"> Short-Description: MyTest</span><br><span class="hljs-meta">#</span><span class="bash"> Description: MyTest Test Program</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## END INIT INFO</span></span><br><br>echo &quot;Hello Linux World !&quot; &gt;&gt; /root/mytest.txt<br><br>exit 0<br></code></pre></div></td></tr></table></figure><p>之后将文件保存，关闭编辑器。</p><p><code>chmod +x MyTest</code></p><p>然后，将这个启动脚本加入开机启动项中：</p><p><code>update-rc.d MyTest defaults</code></p><p>然后重新启动系统，或者命令行执行 <code>/etc/init.d/MyTest</code> ，执行启动脚本，然后使用 <code>cat /root/mytest.txt</code>，验证文件是否正确创建。</p><p>如何删除我们刚才创建的开机启动项呢？</p><p><code>update-rc.d -f MyTest remove</code></p><h3 id="十八：-相关资源"><a href="#十八：-相关资源" class="headerlink" title="十八： 相关资源"></a>十八： 相关资源</h3><ol><li><p>Linux命令行常用快捷键</p><table><thead><tr><th>快捷键</th><th>功能说明</th></tr></thead><tbody><tr><td>tab</td><td>自动补全命令或路径</td></tr><tr><td>Ctrl+a</td><td>将光标移动到命令行行首</td></tr><tr><td>Ctrl+e</td><td>将光标移动到命令行行尾</td></tr><tr><td>Ctrl+f</td><td>将光标向右移动一个字符</td></tr><tr><td>Ctrl+b</td><td>将光标向左移动一个字符</td></tr><tr><td>Ctrl+k</td><td>剪切从光标到行尾的字符</td></tr><tr><td>Ctrl+u</td><td>剪切从光标到行首的字符</td></tr><tr><td>Ctrl+w</td><td>剪切光标前面的一个单词</td></tr><tr><td>Ctrl+y</td><td>复制剪切命名剪切的内容</td></tr><tr><td>Ctrl+c</td><td>中断正在执行的任务</td></tr><tr><td>Ctrl+h</td><td>删除光标前面的一个字符</td></tr><tr><td>Ctrl+d</td><td>退出当前命令行</td></tr><tr><td>Ctrl+r</td><td>搜索历史命令</td></tr><tr><td>Ctrl+g</td><td>退出历史命令搜索</td></tr><tr><td>Ctrl+l</td><td>清除屏幕上所有内容在屏幕的最上方开启一个新行</td></tr><tr><td>Ctrl+s</td><td>锁定终端使之暂时无法输入内容</td></tr><tr><td>Ctrl+q</td><td>退出终端锁定</td></tr><tr><td>Ctrl+z</td><td>将正在终端执行的任务停下来放到后台</td></tr><tr><td>!!</td><td>执行上一条命令</td></tr><tr><td>!数字</td><td>执行数字对应的历史命令</td></tr><tr><td>!字母</td><td>执行最近的以字母打头的命令</td></tr><tr><td>!$ / Esc+.</td><td>获得上一条命令最后一个参数</td></tr><tr><td>Esc+b</td><td>移动到当前单词的开头</td></tr><tr><td>Esc+f</td><td>移动到当前单词的结尾</td></tr></tbody></table></li><li><p>man查阅命令手册的内容说明</p><table><thead><tr><th>手册中的标题</th><th>功能说明</th></tr></thead><tbody><tr><td>NAME</td><td>命令的说明和介绍</td></tr><tr><td>SYNOPSIS</td><td>使用该命令的基本语法</td></tr><tr><td>DESCRIPTION</td><td>使用该命令的详细描述，各个参数的作用，有时候这些信息会出现在OPTIONS中</td></tr><tr><td>OPTIONS</td><td>命令相关参数选项的说明</td></tr><tr><td>EXAMPLES</td><td>使用该命令的参考例子</td></tr><tr><td>EXIT STATUS</td><td>命令结束的退出状态码，通常0表示成功执行</td></tr><tr><td>SEE ALSO</td><td>和命令相关的其他命令或信息</td></tr><tr><td>BUGS</td><td>和命令相关的缺陷的描述</td></tr><tr><td>AUTHOR</td><td>该命令的作者介绍</td></tr></tbody></table></li></ol>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用正则表达式</title>
    <link href="/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本文转载于GitHub项目<a href="https://github.com/jackfrued/Python-100-Days">Python - 100天从新手到大师</a></strong></p></blockquote><h3 id="一：-正则表达式相关知识"><a href="#一：-正则表达式相关知识" class="headerlink" title="一： 正则表达式相关知识"></a>一： 正则表达式相关知识</h3><p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要，正则表达式就是用于描述这些规则的工具，换句话说正则表达式是一种工具，它定义了字符串的匹配模式（如何检查一个字符串是否有跟某种模式匹配的部分或者从一个字符串中将与模式匹配的部分提取出来或者替换掉）。如果你在Windows操作系统中使用过文件查找并且在指定文件名时使用过通配符（*和?），那么正则表达式也是与之类似的用来进行文本匹配的工具，只不过比起通配符正则表达式更强大，它能更精确地描述你的需求（当然你付出的代价是书写一个正则表达式比打出一个通配符要复杂得多，要知道任何给你带来好处的东西都是有代价的，就如同学习一门编程语言一样），比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串（像028-12345678或0813-7654321），这不就是国内的座机号码吗。最初计算机是为了做数学运算而诞生的，处理的信息基本上都是数值，而今天我们在日常工作中处理的信息基本上都是文本数据，我们希望计算机能够识别和处理符合某些模式的文本，正则表达式就显得非常重要了。今天几乎所有的编程语言都提供了对正则表达式操作的支持，Python通过标准库中的re模块来支持正则表达式操作。</p><p>我们可以考虑下面一个问题：我们从某个地方（可能是一个文本文件，也可能是网络上的一则新闻）获得了一个字符串，希望在字符串中找出手机号和座机号。当然我们可以设定手机号是11位的数字（注意并不是随机的11位数字，因为你没有见过“25012345678”这样的手机号吧）而座机号跟上一段中描述的模式相同，如果不使用正则表达式要完成这个任务就会很麻烦。</p><p>关于正则表达式的相关知识，大家可以阅读一篇非常有名的博客叫<a href="https://deerchao.net/tutorials/regex/regex.htm">《正则表达式30分钟入门教程》</a>，读完这篇文章后你就可以看懂下面的表格，这是我们对正则表达式中的一些基本符号进行的扼要总结。</p><table><thead><tr><th>符号</th><th>解释</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配任意字符</td><td>b.t</td><td>可以匹配bat / but / b#t / b1t等</td></tr><tr><td>\w</td><td>匹配字母/数字/下划线</td><td>b\wt</td><td>可以匹配bat / b1t / b_t等<br>但不能匹配b#t</td></tr><tr><td>\s</td><td>匹配空白字符（包括\r、\n、\t等）</td><td>love\syou</td><td>可以匹配love you</td></tr><tr><td>\d</td><td>匹配数字</td><td>\d\d</td><td>可以匹配01 / 23 / 99等</td></tr><tr><td>\b</td><td>匹配单词的边界</td><td>\bThe\b</td><td></td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>^The</td><td>可以匹配The开头的字符串</td></tr><tr><td>$</td><td>匹配字符串的结束</td><td>.exe$</td><td>可以匹配.exe结尾的字符串</td></tr><tr><td>\W</td><td>匹配非字母/数字/下划线</td><td>b\Wt</td><td>可以匹配b#t / b@t等<br>但不能匹配but / b1t / b_t等</td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>love\Syou</td><td>可以匹配love#you等<br>但不能匹配love you</td></tr><tr><td>\D</td><td>匹配非数字</td><td>\d\D</td><td>可以匹配9a / 3# / 0F等</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>\Bio\B</td><td></td></tr><tr><td>[]</td><td>匹配来自字符集的任意单一字符</td><td>[aeiou]</td><td>可以匹配任一元音字母字符</td></tr><tr><td>[^]</td><td>匹配不在字符集中的任意单一字符</td><td>[^aeiou]</td><td>可以匹配任一非元音字母字符</td></tr><tr><td>*</td><td>匹配0次或多次</td><td>\w*</td><td></td></tr><tr><td>+</td><td>匹配1次或多次</td><td>\w+</td><td></td></tr><tr><td>?</td><td>匹配0次或1次</td><td>\w?</td><td></td></tr><tr><td>{N}</td><td>匹配N次</td><td>\w{3}</td><td></td></tr><tr><td>{M,}</td><td>匹配至少M次</td><td>\w{3,}</td><td></td></tr><tr><td>{M,N}</td><td>匹配至少M次至多N次</td><td>\w{3,6}</td><td></td></tr><tr><td>|</td><td>分支</td><td>foo|bar</td><td>可以匹配foo或者bar</td></tr><tr><td>(?#)</td><td>注释</td><td></td><td></td></tr><tr><td>(exp)</td><td>匹配exp并捕获到自动命名的组中</td><td></td><td></td></tr><tr><td>(?&nbsp;&lt;name&gt;exp)</td><td>匹配exp并捕获到名为name的组中</td><td></td><td></td></tr><tr><td>(?:exp)</td><td>匹配exp但是不捕获匹配的文本</td><td></td><td></td></tr><tr><td>(?=exp)</td><td>匹配exp前面的位置</td><td>\b\w+(?=ing)</td><td>可以匹配I’m dancing中的danc</td></tr><tr><td>(?&lt;=exp)</td><td>匹配exp后面的位置</td><td>(?&lt;=\bdanc)\w+\b</td><td>可以匹配I love dancing and reading中的第一个ing</td></tr><tr><td>(?!exp)</td><td>匹配后面不是exp的位置</td><td></td><td></td></tr><tr><td>(?&lt;!exp)</td><td>匹配前面不是exp的位置</td><td></td><td></td></tr><tr><td>*?</td><td>重复任意次，但尽可能少重复</td><td>a.*b<br>a.*?b</td><td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td></tr><tr><td>+?</td><td>重复1次或多次，但尽可能少重复</td><td></td><td></td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,N}?</td><td>重复M到N次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,}?</td><td>重复M次以上，但尽可能少重复</td><td></td><td></td></tr></tbody></table><blockquote><p><strong>说明：</strong> 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\进行转义处理，例如想匹配小数点可以写成\.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成\(和\)，否则圆括号被视为正则表达式中的分组。</p></blockquote><h3 id="二：-Python对正则表达式的支持"><a href="#二：-Python对正则表达式的支持" class="headerlink" title="二： Python对正则表达式的支持"></a>二： Python对正则表达式的支持</h3><p>Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>compile(pattern, flags=0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern, string, flags=0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags=0)</td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit=0, flags=0)</td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count=0, flags=0)</td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags=0)</td><td>match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I / re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M / re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 上面提到的re模块中的这些函数，实际开发中也可以用正则表达式对象的方法替代对这些函数的使用，如果一个正则表达式需要重复的使用，那么先通过compile函数编译正则表达式并创建出正则表达式对象无疑是更为明智的选择。</p></blockquote><p>下面我们通过一系列的例子来告诉大家在Python中如何使用正则表达式。</p><h4 id="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"><a href="#例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。" class="headerlink" title="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"></a>例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">验证输入用户名和QQ号是否有效并给出对应的提示信息</span><br><span class="hljs-string"></span><br><span class="hljs-string">要求：用户名必须由字母、数字或下划线构成且长度在6~20个字符之间，QQ号是5~12的数字且首位不能为0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入用户名: &#x27;</span>)<br>    qq = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入QQ号: &#x27;</span>)<br>    <span class="hljs-comment"># match函数的第一个参数是正则表达式字符串或正则表达式对象</span><br>    <span class="hljs-comment"># 第二个参数是要跟正则表达式做匹配的字符串对象</span><br>    m1 = re.match(<span class="hljs-string">r&#x27;^[0-9a-zA-Z_]&#123;6,20&#125;$&#x27;</span>, username)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> m1:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请输入有效的用户名.&#x27;</span>)<br>    m2 = re.match(<span class="hljs-string">r&#x27;^[1-9]\d&#123;4,11&#125;$&#x27;</span>, qq)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> m2:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请输入有效的QQ号.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> m1 <span class="hljs-keyword">and</span> m2:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你输入的信息是有效的!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>提示：</strong> 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，说得更直接一点就是字符串中没有所谓的转义字符啦。因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\\，例如表示数字的\d得书写成\\d，这样不仅写起来不方便，阅读的时候也会很吃力。</p></blockquote><h4 id="例子2：从一段文字中提取出国内手机号码。"><a href="#例子2：从一段文字中提取出国内手机号码。" class="headerlink" title="例子2：从一段文字中提取出国内手机号码。"></a>例子2：从一段文字中提取出国内手机号码。</h4><p>下面这张图是截止到2017年底，国内三家运营商推出的手机号段。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/tel-start-number.png" alt="tel-start-number.png"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字</span><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;(?&lt;=\D)1[34578]\d&#123;9&#125;(?=\D)&#x27;</span>)<br>    sentence = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，</span><br><span class="hljs-string">    不是15600998765，也是110或119，王大锤的手机号才是15600998765。</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 查找所有匹配并保存到一个列表中</span><br>    mylist = re.findall(pattern, sentence)<br>    <span class="hljs-built_in">print</span>(mylist)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------华丽的分隔线--------&#x27;</span>)<br>    <span class="hljs-comment"># 通过迭代器取出匹配对象并获得匹配的内容</span><br>    <span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> pattern.finditer(sentence):<br>        <span class="hljs-built_in">print</span>(temp.group())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------华丽的分隔线--------&#x27;</span>)<br>    <span class="hljs-comment"># 通过search函数指定搜索位置找出所有匹配</span><br>    m = pattern.search(sentence)<br>    <span class="hljs-keyword">while</span> m:<br>        <span class="hljs-built_in">print</span>(m.group())<br>        m = pattern.search(sentence, m.end())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>说明：</strong> 上面匹配国内手机号的正则表达式并不够好，因为像14开头的号码只有145或147，而上面的正则表达式并没有考虑这种情况，要匹配国内手机号，更好的正则表达式的写法是：<code>(?&lt;=\D)(1[38]\d&#123;9&#125;|14[57]\d&#123;8&#125;|15[0-35-9]\d&#123;8&#125;|17[678]\d&#123;8&#125;)(?=\D)</code>，国内最近好像有19和16开头的手机号了，但是这个暂时不在我们考虑之列。</p></blockquote><h4 id="例子3：替换字符串中的不良内容"><a href="#例子3：替换字符串中的不良内容" class="headerlink" title="例子3：替换字符串中的不良内容"></a>例子3：替换字符串中的不良内容</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    sentence = <span class="hljs-string">&#x27;你丫是傻叉吗? 我操你大爷的. Fuck you.&#x27;</span><br>    purified = re.sub(<span class="hljs-string">&#x27;[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔&#x27;</span>,<br>                      <span class="hljs-string">&#x27;*&#x27;</span>, sentence, flags=re.IGNORECASE)<br>    <span class="hljs-built_in">print</span>(purified)  <span class="hljs-comment"># 你丫是*吗? 我*你大爷的. * you.</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>说明：</strong> re模块的正则表达式相关函数中都有一个flags参数，它代表了正则表达式的匹配标记，可以通过该标记来指定匹配时是否忽略大小写、是否进行多行匹配、是否显示调试信息等。如果需要为flags参数指定多个值，可以使用<a href="http://www.runoob.com/python/python-operators.html#ysf5">按位或运算符</a>进行叠加，如<code>flags=re.I | re.M</code>。</p></blockquote><h4 id="例子4：拆分长字符串"><a href="#例子4：拆分长字符串" class="headerlink" title="例子4：拆分长字符串"></a>例子4：拆分长字符串</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    poem = <span class="hljs-string">&#x27;窗前明月光，疑是地上霜。举头望明月，低头思故乡。&#x27;</span><br>    sentence_list = re.split(<span class="hljs-string">r&#x27;[，。, .]&#x27;</span>, poem)<br>    <span class="hljs-keyword">while</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">in</span> sentence_list:<br>        sentence_list.remove(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(sentence_list)  <span class="hljs-comment"># [&#x27;窗前明月光&#x27;, &#x27;疑是地上霜&#x27;, &#x27;举头望明月&#x27;, &#x27;低头思故乡&#x27;]</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><h3 id="三：-后话"><a href="#三：-后话" class="headerlink" title="三： 后话"></a>三： 后话</h3><p>如果要从事爬虫类应用的开发，那么正则表达式一定是一个非常好的助手，因为它可以帮助我们迅速的从网页代码中发现某种我们指定的模式并提取出我们需要的信息，当然对于初学者来收，要编写一个正确的适当的正则表达式可能并不是一件容易的事情（当然有些常用的正则表达式可以直接在网上找找），所以实际开发爬虫应用的时候，有很多人会选择<a href="https://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a>或<a href="http://lxml.de/">Lxml</a>来进行匹配和信息的提取，前者简单方便但是性能较差，后者既好用性能也好，但是安装稍嫌麻烦。</p><h3 id="四：-文献及工具"><a href="#四：-文献及工具" class="headerlink" title="四： 文献及工具"></a>四： 文献及工具</h3><p><a href="https://regex101.com/">在线正则表达式：https://regex101.com/</a><br><a href="https://regex101.com/settings">设置里面可以切换语言</a></p><p><a href="https://gist.github.com/JavaCS3/e36e494e78a02049950bfa7c7ebeb929">实用文档：https://gist.github.com/JavaCS3/e36e494e78a02049950bfa7c7ebeb929</a></p><p><a href="https://www.bilibili.com/video/BV1ef4y1U7V4">视频教程：https://www.bilibili.com/video/BV1ef4y1U7V4</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>正则表达式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python处理excle实例之字符串减法</title>
    <link href="/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E5%A4%84%E7%90%86excle%E5%AE%9E%E4%BE%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%8F%E6%B3%95/"/>
    <url>/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E5%A4%84%E7%90%86excle%E5%AE%9E%E4%BE%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%8F%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%2Bexcel.jpg" alt="python+excel"></p><span id="more"></span><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> load_workbook<br><br><br><span class="hljs-comment"># 求字符串A-B</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_A_cut_B</span>(<span class="hljs-params">a, b</span>):</span><br>    <span class="hljs-keyword">if</span> b:<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a:<br>            <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> b:<br>                a = a.replace(x, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">return</span> a<br><br><br><span class="hljs-comment"># 写入模式打开output.txt</span><br><span class="hljs-comment"># f = open(&quot;output.txt&quot;, &quot;w&quot;)</span><br><br><span class="hljs-comment"># 打开excel名为test</span><br>wb = load_workbook(filename=<span class="hljs-string">&#x27;test.xlsx&#x27;</span>)<br><br><span class="hljs-comment"># 打开工作表Sheet1</span><br>sheet = wb[<span class="hljs-string">&#x27;Sheet1&#x27;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">36</span>):<br>    temp = <span class="hljs-string">&#x27;C&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br><br>    <span class="hljs-comment"># 将temp单元格的内容存入str1</span><br>    str1 = sheet[temp].value<br>    str0 = <span class="hljs-string">&quot;张 朱 颜 赵 杨 施 胡 何 秦 刘 夏 鹏 李 唐 许 王 邓 顾&quot;</span><br>    z = str_A_cut_B(str0, str1)<br><br>    <span class="hljs-comment"># 若单元格为空，换行输出</span><br>    <span class="hljs-keyword">if</span> str1:<br>        <span class="hljs-comment"># 输出格式</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(z)):<br>            <span class="hljs-built_in">print</span>(z[j], end=<span class="hljs-string">&#x27; &#x27;</span>)  <span class="hljs-comment"># 不换行输出</span><br>            <span class="hljs-comment"># print(z[j], end=&#x27; &#x27;, file=f)</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-comment"># print(&#x27;\n&#x27;, end=&#x27;&#x27;, file=f)</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-comment"># print(&#x27;\n&#x27;, end=&#x27;&#x27;, file=f)</span><br><span class="hljs-comment"># f.close()</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>excel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索技巧And在GitHub搜索开源项目</title>
    <link href="/2020/02/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Github/%E5%A6%82%E4%BD%95%E5%9C%A8GitHub%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <url>/2020/02/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Github/%E5%A6%82%E4%BD%95%E5%9C%A8GitHub%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="零：-搜索引擎之搜索技巧"><a href="#零：-搜索引擎之搜索技巧" class="headerlink" title="零： 搜索引擎之搜索技巧"></a>零： 搜索引擎之搜索技巧</h2><ol><li>排除关键词(减号+关键词)</li><li>精确搜索(给关键词加引号)</li><li>指定网站内搜索(site:域名 关键词)</li><li>指定文件格式(filetype:文件格式 关键词)</li><li>指定标题搜索(intitle:关键词)</li><li>指定范围搜索-搜索结果正文包含关键词(intext:关键词 allintext:关键词1 关键词2… 关键词n)</li><li>指定范围inurl-搜索结果的url中包含关键词字符串(inurl:url关键词)</li><li>叠加使用</li></ol><blockquote><p>注意事项：<br>1.所有的冒号都是半角，也就是英文的冒号，而不是中文的冒号<br>2.空格很重要，关键词之间要有空格<br>3.提取关键词很重要(可以提高搜索效率)</p></blockquote><h2 id="一：-如何使用搜索栏"><a href="#一：-如何使用搜索栏" class="headerlink" title="一： 如何使用搜索栏"></a>一： 如何使用搜索栏</h2><p>所有搜索需求用空格隔开。</p><p>搜索栏输入：</p><ol><li><p>搜索项目名里面包含python、项目readme里面包含python、描述里面包含python<br><code>in:name python</code>、<code>in:readme python</code>、<code>in:description 爬虫</code>/<code>in:des 爬虫</code><br>PS：description描述里面包含比较准确</p></li><li><p>stars数大于1000、forks数大于xxx<br><code>stars:&gt;1000</code>、<code>forks:&gt;xxx</code></p></li><li><p>指定编程语言<br><code>language:python</code></p></li><li><p>最后更新时间限定<br><code>pushed:&gt;2020-01-01</code></p></li><li><p>限定国内开发者<br><code>location:China</code></p></li></ol><h2 id="二：-chrome插件推荐"><a href="#二：-chrome插件推荐" class="headerlink" title="二： chrome插件推荐"></a>二： chrome插件推荐</h2><ul><li>Octotree</li><li>GitZip for github<br>双击你想下载的文件后面空白的地方，文件前方会出现√，右下角出现<code>Download checked items</code>即可下载。</li><li>英文不好的小伙伴推荐沙拉查词</li></ul><h2 id="三：-git-clone速度慢的解决方案"><a href="#三：-git-clone速度慢的解决方案" class="headerlink" title="三： git clone速度慢的解决方案"></a>三： git clone速度慢的解决方案</h2><p>登录<a href="https://gitee.com/">Gitee</a> -&gt; 新建仓库 -&gt; 拉到最下的创建上面，点击导入已有仓库 -&gt; 填入你想git clone的GitHub仓库地址 -&gt; 本地，git clone。</p><h2 id="四：-参考视频"><a href="#四：-参考视频" class="headerlink" title="四： 参考视频"></a>四： 参考视频</h2><p><a href="https://www.bilibili.com/video/BV1YK4y1t7bg">https://www.bilibili.com/video/BV1YK4y1t7bg</a></p><p><a href="https://www.bilibili.com/video/av75587104">https://www.bilibili.com/video/av75587104</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu安装完以后的基础配置</title>
    <link href="/2020/02/17/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/ubuntu%E5%AE%89%E8%A3%85%E5%AE%8C%E4%BB%A5%E5%90%8E%E7%9A%84%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/02/17/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/ubuntu%E5%AE%89%E8%A3%85%E5%AE%8C%E4%BB%A5%E5%90%8E%E7%9A%84%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>先试用ubuntu，打开软件目录 -&gt; 磁盘，右上角菜单。然后格式化磁盘;擦除 -&gt; 不要覆盖…(快速);分区 -&gt; 硬盘2T以下MBR/DOS、2T以上GPT</li><li>不要连接网络 -&gt; 正常安装 -&gt; 其他选项</li></ol><h2 id="一：-安装类型"><a href="#一：-安装类型" class="headerlink" title="一： 安装类型"></a>一： 安装类型</h2><ol><li>/boot分区（引导）-&gt;512MB-&gt;主分区-&gt;空间起始位置-&gt;Ext4日志文件系统-&gt;/boot。</li><li>/ 根分区（相当于windows的c盘）-&gt;102400MB-&gt;主分区-&gt;空间起始位置-&gt;XFS日志文件系统-&gt;/。</li><li>swap分区（桌面系统不分，服务器必分）-&gt;2048MB-&gt;逻辑分区-&gt;空间起始位置-&gt;交换空间。</li><li>/home分区（存储空间，剩余都给它）-&gt;max MB-&gt;主分区-&gt;空间起始位置-&gt;XFS日志文件系统-&gt;/home。</li><li>现在安装。</li></ol><h2 id="二：-基础配置"><a href="#二：-基础配置" class="headerlink" title="二： 基础配置"></a>二： 基础配置</h2><h3 id="2-1-设置root用户密码"><a href="#2-1-设置root用户密码" class="headerlink" title="2.1 设置root用户密码"></a>2.1 设置root用户密码</h3><p><code>sudo passwd root</code><br><code>su</code></p><span id="more"></span><h3 id="2-2-修改镜像源"><a href="#2-2-修改镜像源" class="headerlink" title="2.2 修改镜像源"></a>2.2 修改镜像源</h3><ol><li><code>sudo nano /etc/apt/sources.list</code></li><li>将原文件所有内容注释掉；</li><li>复制<a href="https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.2f191b11mRGGjV">阿里巴巴镜像源</a></li><li>黏贴到终端，<code>ctrl</code>+<code>o</code>保存，回车确定,<code>ctrl</code>+<code>x</code>。</li></ol><h3 id="2-3-更新源和系统"><a href="#2-3-更新源和系统" class="headerlink" title="2.3 更新源和系统"></a>2.3 更新源和系统</h3><p><code>sudo apt update</code><br><code>sudo apt upgrade</code><br><code>sudo apt dist-upgrade</code><br><code>sudo apt autoremove</code>  # 清理不需要的旧组件<br><code>reboot</code>  # 重启</p><h3 id="2-4-安装输入法"><a href="#2-4-安装输入法" class="headerlink" title="2.4 安装输入法"></a>2.4 安装输入法</h3><ol><li>卸载自带ibus<br><code>sudo apt remove ibus</code></li><li>安装fcitx<br><code>sudo apt install fcitx-bin fcitx-table</code></li><li>安装Google拼音<br><code>sudo apt install fcitx-googlepinyin</code></li><li><code>sudo im-config</code>-&gt;确定-&gt;yes-&gt;选择fcitx,确定-&gt;reboot重启。</li></ol><h3 id="2-5-安装Google浏览器"><a href="#2-5-安装Google浏览器" class="headerlink" title="2.5 安装Google浏览器"></a>2.5 安装Google浏览器</h3><ol><li>打开 <a href="https://www.google.cn/intl/zh-CN/chrome/">https://www.google.cn/intl/zh-CN/chrome/</a></li><li>下载-&gt;64位.deb-&gt;接受并安装。</li><li>在下载文件夹内打开终端。</li><li><code>sudo dpkg -i google-chrome-stable_current_amd64.deb</code></li></ol><h3 id="2-6-设置语言"><a href="#2-6-设置语言" class="headerlink" title="2.6 设置语言"></a>2.6 设置语言</h3><p>设置-&gt;区域和语言-&gt;管理已安装的语言-&gt;安装。</p><h3 id="2-7-安装vlc"><a href="#2-7-安装vlc" class="headerlink" title="2.7 安装vlc"></a>2.7 安装vlc</h3><p><code>sudo apt install vlc</code></p><h3 id="2-8-关闭ubuntu内部错误"><a href="#2-8-关闭ubuntu内部错误" class="headerlink" title="2.8 关闭ubuntu内部错误"></a>2.8 关闭ubuntu内部错误</h3><ol><li><code>sudo nano /etc/default/apport</code></li><li>enable=1改为0</li><li><code>ctrl</code>+<code>o</code>保存，回车确定,<code>ctrl</code>+<code>x</code>。</li></ol><h3 id="2-9-安装新立得软件包"><a href="#2-9-安装新立得软件包" class="headerlink" title="2.9 安装新立得软件包"></a>2.9 安装新立得软件包</h3><p><code>sudo apt install synaptic</code></p><h3 id="2-10-安装aria2和ariang及配置"><a href="#2-10-安装aria2和ariang及配置" class="headerlink" title="2.10 安装aria2和ariang及配置"></a>2.10 安装aria2和ariang及配置</h3><h4 id="2-10-1-安装aria2及其配置"><a href="#2-10-1-安装aria2及其配置" class="headerlink" title="2.10.1 安装aria2及其配置"></a>2.10.1 安装aria2及其配置</h4><p><code>sudo apt install aria2 -y</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir /home/ubuntu/.aria2<br>cd /home/ubuntu/.aria2<br>touch aria2.conf aria2.session #创建配置文件与session文件<br>vi /home/ubuntu/.aria2/aria2.conf<br></code></pre></div></td></tr></table></figure><p>aria2.conf配置文件如下</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">dir=~/下载/<br>disable-ipv6=<span class="hljs-literal">true</span><br><br><span class="hljs-comment">#打开rpc的目的是为了给web管理端用</span><br>enable-rpc=<span class="hljs-literal">true</span><br>rpc-allow-origin-all=<span class="hljs-literal">true</span><br>rpc-listen-all=<span class="hljs-literal">true</span><br><span class="hljs-comment">#rpc-listen-port=6800</span><br><span class="hljs-comment">#断点续传</span><br><span class="hljs-built_in">continue</span>=<span class="hljs-literal">true</span><br>input-file=/home/ubuntu/.aria2/aria2.session<br>save-session=/home/ubuntu/.aria2/aria2.session<br><br><span class="hljs-comment">#最大同时下载任务数</span><br>max-concurrent-downloads=20<br>save-session-interval=120<br><br><span class="hljs-comment"># Http/FTP 相关</span><br>connect-timeout=120<br><span class="hljs-comment">#lowest-speed-limit=10K</span><br><span class="hljs-comment">#同服务器连接数</span><br>max-connection-per-server=10<br><span class="hljs-comment">#max-file-not-found=2</span><br><span class="hljs-comment">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span><br>min-split-size=10M<br><br><span class="hljs-comment">#单文件最大线程数, 路由建议值: 5</span><br>split=10<br>check-certificate=<span class="hljs-literal">false</span><br><span class="hljs-comment">#http-no-cache=true</span><br></code></pre></div></td></tr></table></figure><p>后台运行aria2</p><p><code>aria2c --conf-path=/home/ubuntu/.aria2/aria2.conf -D</code></p><p>设置aria2开机自动启动</p><p><code>sudo vi /etc/rc.local</code></p><p>在最下面加入：</p><p><code>aria2c --conf-path=/home/ubuntu/.aria2/aria2.conf -D &amp;</code></p><h4 id="2-10-2-安装ariang及配置"><a href="#2-10-2-安装ariang及配置" class="headerlink" title="2.10.2 安装ariang及配置"></a>2.10.2 安装ariang及配置</h4><p><a href="http://ariang.mayswind.net/zh_Hans/">参考官方文档</a></p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sudo apt install nodejs<br>sudo apt install npm<br>sudo apt install gulp<br></code></pre></div></td></tr></table></figure><p>然后<a href="https://github.com/mayswind/AriaNg/releases">下载源码解压并cd进入解压的文件夹</a></p><p>然后安装单文件版</p><p><code>npm install</code><br><code>gulp clean build-bundle</code></p><h2 id="三：-常用软件安装"><a href="#三：-常用软件安装" class="headerlink" title="三： 常用软件安装"></a>三： 常用软件安装</h2><p>PS：deb文件如何安装？</p><ul><li><code>sudo dpkg -i 软件名</code> # 安装</li><li><code>sudo apt install -f</code> # 修复依赖</li><li><code>sudo dpkg -r 软件名</code> # 进行卸载</li></ul><p>安装git<br><code>sudo apt install git</code></p><p>生成公匙<br><code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code><br><code>cat ~/.ssh/id_rsa.pub</code><br>添加到github，gitee，coding</p><p>下载安装wps<br><code>sudo dpkg -i wps-office_11.1.0.9080_amd64.deb</code></p><p>下载安装lantern<br><code>sudo dpkg -i lantern-installer-preview-64-bit.deb</code></p><p>下载安装zoom<br><code>sudo dpkg -i zoom_amd64.deb</code></p><p>下载安装python3<br><code>tar zxvf Python-3.8.2.tgz</code><br><code>cd Python-3.8.2\</code><br><code>sudo apt install gcc</code><br><code>sudo apt install make</code><br><code>./configure</code><br><code>make</code><br><code>sudo make install</code><br><code>sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100</code> # 设置python2为默认<br><code>sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150</code> # 设置python3为默认<br><code>sudo update-alternatives --config python</code> # 选择默认的python版本<br><code>sudo apt install python3-pip</code> # 安装pip3<br><code>pip3 install -U pip -i https://pypi.tuna.tsinghua.edu.cn/simple</code> # 升级pip<br>如果这个升级命令出现问题 ，可以使用以下命令：<code>sudo easy_install --upgrade pip</code><br><code>pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code> # pip3设置清华源</p><p>下载安装vscode<br><code>sudo dpkg -i code_1.42.1-1581432938_amd64.deb</code><br><code>ctrl+shift+p，然后输入lang -&gt; 选择configure Display language，然后安装简体中文，然后重启vscode</code></p><p>下载安装百度网盘<br><code>sudo dpkg -i baidunetdisk_linux_3.0.1.2.deb</code></p><p>下载安装hexo<br><code>sudo apt install nodejs</code><br><code>sudo apt install npm</code><br><code>sudo npm install hexo-cli -g</code><br><code>sudo npm install</code></p><p>下载安装qBittorrent</p><ul><li>qBittorrent Stable # 稳定版<br> <code>sudo add-apt-repository ppa:qbittorrent-team/qbittorrent-stable</code></li><li>qBittorrent Unstable # 不稳定版<br> <code>sudo add-apt-repository ppa:qbittorrent-team/qbittorrent-unstable</code></li></ul><p><code>sudo apt-get update &amp;&amp; sudo apt-get install qbittorrent</code></p><h2 id="四：-参考视频"><a href="#四：-参考视频" class="headerlink" title="四： 参考视频"></a>四： 参考视频</h2><p><strong><a href="https://www.bilibili.com/video/av48233413">https://www.bilibili.com/video/av48233413</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用python实现Gitee Pages定时自动部署/自动签到</title>
    <link href="/2020/02/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E5%88%A9%E7%94%A8python%E5%AE%9E%E7%8E%B0Gitee-Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E3%80%81%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0/"/>
    <url>/2020/02/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E5%88%A9%E7%94%A8python%E5%AE%9E%E7%8E%B0Gitee-Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E3%80%81%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="一：-前期准备"><a href="#一：-前期准备" class="headerlink" title="一： 前期准备"></a>一： 前期准备</h2><h3 id="1-1-基础环境"><a href="#1-1-基础环境" class="headerlink" title="1.1 基础环境"></a>1.1 基础环境</h3><ol><li>python3 + selenium + chrome浏览器。<br>如果有不懂的可以查阅<a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/">selenium-python中文文档</a></li><li>chrome-&gt;设置-&gt;关于chrome-&gt;查看版本（我的版本是 80.0.3987.106（正式版本） （64 位））。  </li><li>需要下载跟你的chrome版本一致的<a href="http://chromedriver.storage.googleapis.com/index.html">ChromeDriver可执行驱动</a><br>下载完解压放在python根目录(即跟python.exe放在一起)。<br><strong>如果上面的ChromeDriver网址打不开，可以使用<a href="https://npm.taobao.org/mirrors/chromedriver/">ChromeDriver淘宝镜像</a></strong></li><li>最好有一台云主机，没有的话需要自己的电脑设定定时开机，定时任务，定时关机。  <span id="more"></span></li></ol><h3 id="1-2-安装环境"><a href="#1-2-安装环境" class="headerlink" title="1.2 安装环境"></a>1.2 安装环境</h3><ol><li>安装python3,不懂的请查阅我的相关blog文。</li><li>打开windows命令行，安装selenium<br><code>pip install selenium -i https://pypi.tuna.tsinghua.edu.cn/simple</code></li></ol><h3 id="1-3-获取cookie"><a href="#1-3-获取cookie" class="headerlink" title="1.3 获取cookie"></a>1.3 获取cookie</h3><p>首先登录gitee的Gitee Pages服务界面；</p><p>点击网页地址栏左边的小锁标志 -&gt; 选择Cookie；</p><p>右边弹出的窗口中展开gitee.com -&gt; 展开Cookie -&gt; 点击名为<code>gitee-session-n</code>的项目 -&gt; 下面的内容后面就是你的cookie；</p><p>记得要全部复制进去，替换掉下面源码的my_cookie里面的内容。</p><h2 id="二：-代码"><a href="#二：-代码" class="headerlink" title="二： 代码"></a>二： 代码</h2><h3 id="2-1-源码"><a href="#2-1-源码" class="headerlink" title="2.1 源码"></a>2.1 源码</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.alert <span class="hljs-keyword">import</span> Alert<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.options <span class="hljs-keyword">import</span> Options<br><br><span class="hljs-comment"># 将你的cookie内容替换掉下面的内容</span><br>my_cookie = &#123;<span class="hljs-string">&#x27;domain&#x27;</span>: <span class="hljs-string">&#x27;.gitee.com&#x27;</span>, <span class="hljs-string">&#x27;httpOnly&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;gitee-session-n&#x27;</span>, <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;secure&#x27;</span>: <span class="hljs-literal">False</span>,<br>             <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;内容&#x27;</span>&#125;<br><br><span class="hljs-comment"># 实例化一个启动参数对象</span><br>options = Options()<br><br><span class="hljs-comment"># 设置启动浏览器时窗口最大化运行</span><br><span class="hljs-comment"># options.add_argument(&#x27;--start-maximized&#x27;)</span><br><br><span class="hljs-comment"># 设置无界面模式运行浏览器</span><br>options.add_argument(<span class="hljs-string">&#x27;-headless&#x27;</span>)<br><br><span class="hljs-comment"># 不加载图片, 提升速度</span><br>prefs = &#123;<span class="hljs-string">&quot;profile.managed_default_content_settings.images&quot;</span>: <span class="hljs-number">2</span>&#125;<br>options.add_experimental_option(<span class="hljs-string">&quot;prefs&quot;</span>, prefs)<br><br><span class="hljs-comment"># 打开浏览器</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Launch browser&#x27;</span>)<br>driver = webdriver.Chrome(chrome_options=options)<br><br><span class="hljs-comment"># 删除缓存</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Delete cookies&#x27;</span>)<br>driver.delete_all_cookies()<br><br><span class="hljs-comment"># 访问网页</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Visit website&#x27;</span>)<br><span class="hljs-comment"># 这里链接改为你的码云部署页面的链接</span><br>driver.get(<span class="hljs-string">&quot;https://gitee.com/此处改为你的ID/此处改为你的ID/pages&quot;</span>)<br>time.sleep(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># 加载cookie</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Add cookie&#x27;</span>)<br>driver.add_cookie(my_cookie)<br><br><span class="hljs-comment"># 刷新</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Refresh&#x27;</span>)<br>driver.refresh()<br>time.sleep(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># 点击更新按钮--通过xpath确定点击位置</span><br>driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;pages-branch&quot;]/div[7]&#x27;</span>).click()<br>time.sleep(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 确认更新提示框--这个函数的作用是确认提示框</span><br>Alert(driver).accept()<br><br><span class="hljs-comment"># 等待40秒更新</span><br>time.sleep(<span class="hljs-number">40</span>)<br><br><span class="hljs-comment"># 这个print其实没事什么用,如果真的要测试脚本是否运行成功，可以用try来抛出异常</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;success&quot;</span>)<br><br><span class="hljs-comment"># 脚本运行成功,退出浏览器</span><br>driver.quit()<br><br><span class="hljs-comment"># 写上更新日志</span><br><span class="hljs-comment"># 我这里是写在D盘</span><br>fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;D:\log.txt&quot;</span>, <span class="hljs-string">&quot;a+&quot;</span>)<br><span class="hljs-comment"># linux写在/home</span><br><span class="hljs-comment"># fp = open(&quot;/home/temp/log.log&quot;, &quot;a+&quot;)</span><br>now_time = time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())<br>fp.write(<span class="hljs-string">&quot;auto update time:&#123;0&#125;\n&quot;</span>.<span class="hljs-built_in">format</span>(now_time))<br>fp.close()<br></code></pre></div></td></tr></table></figure><p>把源码黏贴到<code>gitee.py</code>文件内，备用。</p><h3 id="2-2-注意事项"><a href="#2-2-注意事项" class="headerlink" title="2.2 注意事项"></a>2.2 注意事项</h3><ul><li><p>html的id属性、xpath可以通过在chrome的网页里面按F12 -&gt; 选择一个元素进行检查(快捷键Ctrl + Shift + C)查看，如图就是<code>百度一下</code>的div块元素属性。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/CopyFullXPath.png" alt="CopyXPath"></p></li><li><p>python selenium模块的具体函数使用方法请参考官方文档。  </p></li><li><p>编写自动签到脚本也差不多同样的道理。</p></li></ul><h2 id="三：-添加定时任务自动部署"><a href="#三：-添加定时任务自动部署" class="headerlink" title="三： 添加定时任务自动部署"></a>三： 添加定时任务自动部署</h2><h3 id="3-1-Windows主机"><a href="#3-1-Windows主机" class="headerlink" title="3.1 Windows主机"></a>3.1 Windows主机</h3><ol><li>登录windows云主机，复制<code>gitee.py</code>到D盘根目录。</li><li>云主机内-&gt;右键我的电脑-&gt;管理-&gt;工具-&gt;任务计划程序-&gt;创建基本任务…添加任务每天执行一次，实在不会的请<a href="https://jingyan.baidu.com/article/154b463130041128ca8f41c7.html">百度</a></li><li>在自己电脑上的话也可以设置定时开关机，并把如下代码添加到<a href="https://8hn9w5.coding-pages.com/2020/02/15/hexo/hexo%E4%B8%80%E9%94%AE%E4%B8%8A%E4%BC%A0%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E7%9A%84%E6%9E%84%E5%BB%BA/">hexo一键上传部署脚本</a>的后面，每次定时git push后自动在gitee的pages界面部署。</li></ol><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-function"></span><br><span class="hljs-function">d:</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">python</span> <span class="hljs-title">gitee.py</span></span><br><span class="hljs-function"><span class="hljs-title">echo</span> &quot;等待更新完成过后再关闭窗口&quot;</span><br><span class="hljs-function"><span class="hljs-title">timeout</span> /<span class="hljs-title">t</span> 180</span><br><span class="hljs-function"><span class="hljs-title">rem</span> 上面的代码是等待3分钟。</span><br></code></pre></div></td></tr></table></figure><h3 id="3-2-Linux主机"><a href="#3-2-Linux主机" class="headerlink" title="3.2 Linux主机"></a>3.2 Linux主机</h3><ol><li>登录Linux云主机，复制<code>gitee.py</code>到<code>/home/temp/</code>目录。</li><li>添加Linux计划任务<br><code>crontab -e</code></li><li>选择1选项nano编辑，光标拉到最后面，复制如下代码;</li><li><code>10 6 * * * /home/temp/gitee.py start</code></li></ol><p>说明：</p><ul><li><a href="http://www.bejson.com/othertools/cron/">crontab表达式在线生成</a></li><li>延迟0~1小时的话，直接在py或者sh文件中利用sleep及random命令设置。</li><li><code>crontab -l</code>查看当前已经保存的计划任务。</li></ul><h2 id="四：-参考文献"><a href="#四：-参考文献" class="headerlink" title="四： 参考文献"></a>四： 参考文献</h2><ul><li><a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/">https://python-selenium-zh.readthedocs.io/zh_CN/latest/</a></li><li><a href="https://blog.csdn.net/ydydyd00/article/details/80882183">https://blog.csdn.net/ydydyd00/article/details/80882183</a></li><li><a href="https://jingyan.baidu.com/article/154b463130041128ca8f41c7.html">https://jingyan.baidu.com/article/154b463130041128ca8f41c7.html</a></li><li><a href="https://jupitersh.gitee.io/2020/02/Preparation-for-Gitee-Auto-Update-by-Ptyhon/">https://jupitersh.gitee.io/2020/02/Preparation-for-Gitee-Auto-Update-by-Ptyhon/</a></li></ul><p><strong>enjoy!</strong></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>python</tag>
      
      <tag>自动签到</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>you-get下载视频</title>
    <link href="/2020/02/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/you-get%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/"/>
    <url>/2020/02/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/you-get%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<h2 id="一：-简介"><a href="#一：-简介" class="headerlink" title="一： 简介"></a>一： 简介</h2><p>You-Get 乃一小小哒命令行程序，提供便利的方式来下载网络上的媒体信息，通过python来安装。<br>支持主流视频网站如：YouTube、Google+、bilibili哔哩哔哩、163/网易视频/网易云音乐、斗鱼、爱奇艺、Youku、AcFun等等</p><h2 id="二：-安装及其使用"><a href="#二：-安装及其使用" class="headerlink" title="二： 安装及其使用"></a>二： 安装及其使用</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>1） 安装python3  <span id="more"></span><br>  安装教程这里推荐：<a href="http://www.runoob.com/python3/python3-install.html">http://www.runoob.com/python3/python3-install.html</a><br>  win下载地址：<a href="https://www.python.org/downloads/windows">https://www.python.org/downloads/windows</a><br>  Linux下载地址：<a href="https://www.python.org/downloads/source">https://www.python.org/downloads/source</a>  </p><p>2） 安装you-get<br>  然后打开win的cmd命令行、Linux为终端，输入以下命令：  </p><ul><li>升级pip<br><code>python -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple</code></li><li>安装you-get<br><code>pip install you-get -i https://pypi.tuna.tsinghua.edu.cn/simple</code></li><li>升级you-get<br><code>pip install --upgrade you-get -i https://pypi.tuna.tsinghua.edu.cn/simple</code></li></ul><p>3） 安装<a href="https://www.ffmpeg.org/">FFmpeg</a><br>  FFmpeg用于转换视频格式、播放视频等，下载下来的视频有可能播放格式不支持，不需要也可不装。<br>  FFmpeg下载地址：<a href="https://www.ffmpeg.org/">https://www.ffmpeg.org/</a><br>  windows下载地址：<a href="https://ffmpeg.zeranoe.com/builds/">https://ffmpeg.zeranoe.com/builds/</a><br>  ps：windows下载，选择默认选项即可</p><h3 id="2-2-下载"><a href="#2-2-下载" class="headerlink" title="2.2 下载"></a>2.2 下载</h3><h4 id="2-2-1-下载默认画质和格式"><a href="#2-2-1-下载默认画质和格式" class="headerlink" title="2.2.1 下载默认画质和格式"></a>2.2.1 下载默认画质和格式</h4><p><code>you-get https://www.bilibili.com/video/av77151622/</code>  </p><p>下载路径默认为文件所在当前路径。<br>所以要下载在指定路径需要先cd到指定路径。  </p><h4 id="2-2-2-下载指定画质和格式"><a href="#2-2-2-下载指定画质和格式" class="headerlink" title="2.2.2 下载指定画质和格式"></a>2.2.2 下载指定画质和格式</h4><p>1） 先用<code>-i</code>以查看所有可用画质与格式。<br>  <code>you-get -i https://www.bilibili.com/video/av77151622/</code><br>  最上面的标有<code>[ DASH(也可能是 DEFAULT ） ]</code>为默认画质。如认同，可下载。  </p><p>2） 或，您希望下载其他播放格式或者其他清晰度，请追加屏幕上面提示的参数，如本视频是:<br>  <code>you-get --format=flv720 https://www.bilibili.com/video/av77151622/</code>  </p><ul><li>目前，格式选择没有大规模铺开；默认选项为最高画质.  </li><li>如不希望you-get合并视频，使用<code>-n</code>。  </li><li>如YouTube视频带有字幕，将被一同下载，以SubRip格式保存.</li></ul><h4 id="2-2-3-下载其他内容"><a href="#2-2-3-下载其他内容" class="headerlink" title="2.2.3 下载其他内容"></a>2.2.3 下载其他内容</h4><p>1） 如你有URL，可以直接使用，如下载you-get:<br>  <code>you-get https://github.com/soimort/you-get/archive/master.zip</code>  </p><p>2） 或者, you-get将自动检查网页，下载一切有可能感兴趣的内容:<br>  <code>you-get http://kopasas.tumblr.com/post/69361932517</code></p><ul><li>此功能为测试性，远未完成。对于类似Tumblr和Blogger的大图有效，但是没有办法为所有网站建立通用格式.</li></ul><p>3） 在Google Videos搜索并下载<br>  you-get可以下载任何东西. 如果不是合法的URL, you-get将在Google查找并下载最相关视频. (可能不是最心仪的，但是很有可能)<br>  <code>you-get &quot;Richard Stallman eats&quot;</code>  </p><h4 id="2-2-4-暂停与恢复下载"><a href="#2-2-4-暂停与恢复下载" class="headerlink" title="2.2.4 暂停与恢复下载"></a>2.2.4 暂停与恢复下载</h4><p>可以使用<code>Ctrl</code>+<code>C</code> 暂停下载.<br>临时的<code>.download</code>文件将保存于输出目录。下次使用you-get传入相同参数时，下载将从上次继续开始. 如果下载已经完成 (临时的<code>.download</code> 扩展名消失), you-get将忽略下载.<br>用<code>-f</code>强行重下载. (注意: 将覆盖同名文件或临时文件!)  </p><h4 id="2-2-5-设置输出文件名或路径"><a href="#2-2-5-设置输出文件名或路径" class="headerlink" title="2.2.5 设置输出文件名或路径"></a>2.2.5 设置输出文件名或路径</h4><p>使用<code>-o</code> 设定路径为d:, <code>-O</code> 设定输出文件名为out:<br><code>you-get -o d:\ -O out https://www.bilibili.com/video/av77151622/</code><br>提示:</p><ul><li>如果原视频标题含有与系统不兼容字符，十分有效.</li><li>也可以帮助使用脚本批量下载于指定目录和文件名.</li></ul><h4 id="2-2-6-批量下载"><a href="#2-2-6-批量下载" class="headerlink" title="2.2.6 批量下载"></a>2.2.6 批量下载</h4><p>两种方法：</p><ol><li>把视频URL用空格隔开<br><code>you-get 视频A网址 视频B网址</code></li><li>用<code>--playlist</code><br><code>you-get --playlist https://www.bilibili.com/video/av5123229</code></li><li>下载视频的同时会下载xml格式弹幕，需要将其转换为ass格式，有一个工具可以帮你：<a href="https://github.com/ikde/danmu2ass/releases/download/v1.1/Danmu2Ass1.1.zip">Danmu2Ass</a>。</li></ol><h3 id="2-3-观看视频"><a href="#2-3-观看视频" class="headerlink" title="2.3 观看视频"></a>2.3 观看视频</h3><p>使用 <code>-p</code> 将视频喂进播放器, 例如 mPlayer 或者 vlc,而不是下载:<br><code>you-get -p vlc &#39;https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;</code><br>或者你想在浏览器中观看而不希望看广告或评论区:<br><code>you-get -p chromium &#39;https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;</code>  </p><h2 id="三：-官方文档"><a href="#三：-官方文档" class="headerlink" title="三： 官方文档"></a>三： 官方文档</h2><p><a href="https://github.com/soimort/you-get/wiki/%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E">官方中文文档</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>you-get</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬图攻略</title>
    <link href="/2020/02/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E7%88%AC%E5%9B%BE%E6%94%BB%E7%95%A5/"/>
    <url>/2020/02/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E7%88%AC%E5%9B%BE%E6%94%BB%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="一：-软件工具"><a href="#一：-软件工具" class="headerlink" title="一： 软件工具"></a>一： 软件工具</h2><h3 id="1-1-Python3"><a href="#1-1-Python3" class="headerlink" title="1.1 Python3"></a>1.1 Python3</h3><p>这里选择的是最新版 Python3<br>安装教程这里推荐：<a href="http://www.runoob.com/python3/python3-install.html">http://www.runoob.com/python3/python3-install.html</a><br>win下载地址：<a href="https://www.python.org/downloads/windows">https://www.python.org/downloads/windows</a><br>Linux下载地址：<a href="https://www.python.org/downloads/source">https://www.python.org/downloads/source</a>  <span id="more"></span></p><h3 id="1-2-PyCharm"><a href="#1-2-PyCharm" class="headerlink" title="1.2 PyCharm"></a>1.2 PyCharm</h3><p>可视化开发工具IDE：<a href="https://www.jetbrains.com/pycharm/download/">https://www.jetbrains.com/pycharm/download/</a></p><h2 id="二：原理"><a href="#二：原理" class="headerlink" title="二：原理"></a>二：原理</h2><h3 id="2-1-实现步骤"><a href="#2-1-实现步骤" class="headerlink" title="2.1 实现步骤"></a>2.1 实现步骤</h3><p>以图片为例，其实很简单，分以下四步：</p><ul><li>获取首页的页码数，并创建与页码对应的文件夹</li><li>获取页面的栏目地址</li><li>进入栏目，获取栏目页码数(每个栏目下有多张图片，分页显示)</li><li>获取到栏目下对用标签容器中的图片并下载</li></ul><h3 id="2-2-注意事项"><a href="#2-2-注意事项" class="headerlink" title="2.2 注意事项"></a>2.2 注意事项</h3><p>这里以爬取某个网站的套路为例，详细见代码，这里主要说以下几点注意事项：  </p><p>1）导库，其实就类似于Java中框架或者是工具类，底层都被封装好了</p><p>安装第三方库：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># Win下直接装的 python3</span><br>pip install BeautifulSoup4 -i https://pypi.tuna.tsinghua.edu.cn/simple<br>pip install requests -i https://pypi.tuna.tsinghua.edu.cn/simple<br><span class="hljs-comment"># Linux python2 python3 共存</span><br>pip3 install BeautifulSoup4 -i https://pypi.tuna.tsinghua.edu.cn/simple<br>pip3 install requests -i https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></div></td></tr></table></figure><p>导入第三方库：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># 导入requests库</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># 导入文件操作库</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># bs4全名BeautifulSoup4，是编写python爬虫常用库之一，主要用来解析html标签。</span><br><span class="hljs-keyword">import</span> bs4<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-comment"># 基础类库</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-comment"># Python 3.x 解决中文编码问题</span><br><span class="hljs-keyword">import</span> importlib<br>importlib.reload(sys)<br></code></pre></div></td></tr></table></figure><p>2）定义方法函数，一个爬虫可能会几百行，所以尽量不要写成一坨</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span>(<span class="hljs-params">page_no, file_path</span>):</span><br>    <span class="hljs-comment"># 这里写代码逻辑</span><br></code></pre></div></td></tr></table></figure><p>3）定义全局变量</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># 给请求指定一个请求头来模拟chrome浏览器</span><br><span class="hljs-keyword">global</span> headers <span class="hljs-comment"># 告诉编译器这是全局变量 headers </span><br>headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&#x27;</span>&#125;<br><br><span class="hljs-comment"># 函数内使用之前需要</span><br><span class="hljs-comment"># 告诉编译器我在这个方法中使用的a是刚才定义的全局变量 headers ，而不是方法内部的局部变量。</span><br><span class="hljs-keyword">global</span> headers<br></code></pre></div></td></tr></table></figure><p>4）防盗链</p><p>有些网站加入了防盗链，无所不能的 python  解决方案：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">headers = &#123;<span class="hljs-string">&#x27;Referer&#x27;</span>: href&#125;<br>img = requests.get(url, headers=headers)<br></code></pre></div></td></tr></table></figure><p>5）切换版本</p><p>Linux服务器使用的是阿里云服务器（centos7.4），默认版本 python2，python3 自行安装</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">[root@AY140216131049Z mzitu]<span class="hljs-comment"># python2 -V</span><br>Python <span class="hljs-number">2.7</span><span class="hljs-number">.5</span><br>[root@AY140216131049Z mzitu]<span class="hljs-comment"># python3 -V</span><br>Python <span class="hljs-number">3.7</span><span class="hljs-number">.1</span><br><span class="hljs-comment"># 默认版本</span><br>[root@AY140216131049Z mzitu]<span class="hljs-comment"># python -V</span><br>Python <span class="hljs-number">2.7</span><span class="hljs-number">.5</span><br><span class="hljs-comment"># 临时切换版本 &lt;whereis python&gt;</span><br>[root@AY140216131049Z mzitu]<span class="hljs-comment"># alias python=&#x27;/usr/local/bin/python3.7&#x27;</span><br>[root@AY140216131049Z mzitu]<span class="hljs-comment"># python -V</span><br>Python <span class="hljs-number">3.7</span><span class="hljs-number">.1</span><br><br></code></pre></div></td></tr></table></figure><p>6）异常捕获</p><p>在爬取的过程中可能存在异常页面，这里我们进行捕获，不影响后续操作：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 业务逻辑</span><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>   <span class="hljs-built_in">print</span>(e)<br></code></pre></div></td></tr></table></figure><h3 id="2-3-执行脚本"><a href="#2-3-执行脚本" class="headerlink" title="2.3 执行脚本"></a>2.3 执行脚本</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">python3 mzitu.py<br><br><span class="hljs-comment"># 或者后台执行</span><br><br>nohup python3 -u mzitu.py &gt; mzitu.log <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></div></td></tr></table></figure><h2 id="三：-源码"><a href="#三：-源码" class="headerlink" title="三： 源码"></a>三： 源码</h2><h3 id="3-1-win下代码"><a href="#3-1-win下代码" class="headerlink" title="3.1 win下代码"></a>3.1 win下代码</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># 导入requests库</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># 导入文件操作库</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> bs4<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> importlib<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br>importlib.reload(sys)<br><br><br><span class="hljs-comment"># 越多越好</span><br>meizi_headers = [<br>    <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36&quot;</span>,<br>    <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36&quot;</span>,<br>    <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0&quot;</span>,<br>    <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/537.75.14&quot;</span>,<br>    <span class="hljs-string">&quot;Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0)&quot;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11&#x27;</span>,<br>    <span class="hljs-string">&#x27;Opera/9.25 (Windows NT 5.1; U; en)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (compatible; Konqueror/3.5; Linux) KHTML/3.5.5 (like Gecko) (Kubuntu)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.12) Gecko/20070731 Ubuntu/dapper-security Firefox/1.5.0.12&#x27;</span>,<br>    <span class="hljs-string">&#x27;Lynx/2.8.5rel.1 libwww-FM/2.14 SSL-MM/1.4.1 GNUTLS/1.2.9&#x27;</span>,<br>    <span class="hljs-string">&quot;Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.7 (KHTML, like Gecko) Ubuntu/11.04 Chromium/16.0.912.77 Chrome/16.0.912.77 Safari/535.7&quot;</span>,<br>    <span class="hljs-string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:10.0) Gecko/20100101 Firefox/10.0&quot;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&#x27;</span><br>]<br><span class="hljs-comment"># 给请求指定一个请求头来模拟chrome浏览器</span><br><span class="hljs-keyword">global</span> headers<br>headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: random.choice(meizi_headers)&#125;<br><span class="hljs-comment"># 爬图网址</span><br>mziTu = <span class="hljs-string">&#x27;http://www.mzitu.com/&#x27;</span><br><span class="hljs-comment"># 定义图片存储位置</span><br><span class="hljs-keyword">global</span> save_path<br>save_path = <span class="hljs-string">&#x27;D:\BeautifulPictures&#x27;</span><br><br><span class="hljs-comment"># 创建文件夹</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createFile</span>(<span class="hljs-params">file_path</span>):</span><br>    <span class="hljs-keyword">if</span> os.path.exists(file_path) <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>        os.makedirs(file_path)<br>    <span class="hljs-comment"># 切换路径至上面创建的文件夹</span><br>    os.chdir(file_path)<br><br><span class="hljs-comment"># 下载文件</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span>(<span class="hljs-params">page_no, file_path</span>):</span><br>    <span class="hljs-keyword">global</span> headers<br>    res_sub = requests.get(page_no, headers=headers)<br>    <span class="hljs-comment"># 解析html</span><br>    soup_sub = BeautifulSoup(res_sub.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    <span class="hljs-comment"># 获取页面的栏目地址</span><br>    all_a = soup_sub.find(<span class="hljs-string">&#x27;div&#x27;</span>,class_=<span class="hljs-string">&#x27;postlist&#x27;</span>).find_all(<span class="hljs-string">&#x27;a&#x27;</span>,target=<span class="hljs-string">&#x27;_blank&#x27;</span>)<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> all_a:<br>        count = count + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> (count % <span class="hljs-number">2</span>) == <span class="hljs-number">0</span>:<br>            headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: random.choice(meizi_headers)&#125;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;内页第几页：&quot;</span> + <span class="hljs-built_in">str</span>(count))<br>            <span class="hljs-comment"># 提取href</span><br>            href = a.attrs[<span class="hljs-string">&#x27;href&#x27;</span>]<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;套图地址：&quot;</span> + href)<br>            res_sub_1 = requests.get(href, headers=headers)<br>            soup_sub_1 = BeautifulSoup(res_sub_1.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>            <span class="hljs-comment"># ------ 这里最好使用异常处理 ------</span><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># 获取套图的最大数量</span><br>                pic_max = soup_sub_1.find(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&#x27;pagenavi&#x27;</span>).find_all(<span class="hljs-string">&#x27;span&#x27;</span>)[<span class="hljs-number">6</span>].text<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;套图数量：&quot;</span> + pic_max)<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(pic_max) + <span class="hljs-number">1</span>):<br>                    <span class="hljs-comment"># 单位为秒，1-3 随机数</span><br>                    time.sleep(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br>                    headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: random.choice(meizi_headers)&#125;<br>                    <span class="hljs-comment"># print(&quot;子内页第几页：&quot; + str(j))</span><br>                    <span class="hljs-comment"># j int类型需要转字符串</span><br>                    href_sub = href + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-built_in">str</span>(j)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;图片地址：&quot;</span>+href_sub)<br>                    res_sub_2 = requests.get(href_sub, headers=headers)<br>                    soup_sub_2 = BeautifulSoup(res_sub_2.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>                    img = soup_sub_2.find(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&#x27;main-image&#x27;</span>).find(<span class="hljs-string">&#x27;img&#x27;</span>)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(img, bs4.element.Tag):<br>                        <span class="hljs-comment"># 提取src</span><br>                        url = img.attrs[<span class="hljs-string">&#x27;src&#x27;</span>]<br>                        array = url.split(<span class="hljs-string">&#x27;/&#x27;</span>)<br>                        file_name = array[<span class="hljs-built_in">len</span>(array)-<span class="hljs-number">1</span>]<br>                        <span class="hljs-comment"># 防盗链加入Referer</span><br>                        headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: random.choice(meizi_headers), <span class="hljs-string">&#x27;Referer&#x27;</span>: url&#125;<br>                        img = requests.get(url, headers=headers)<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始保存图片&#x27;</span>, img)<br>                        f = <span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&#x27;ab&#x27;</span>)<br>                        f.write(img.content)<br>                        <span class="hljs-built_in">print</span>(file_name, <span class="hljs-string">&#x27;图片保存成功！&#x27;</span>)<br>                        f.close()<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(e)<br><br><br><span class="hljs-comment"># 主方法</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    res = requests.get(mziTu, headers=headers)<br>    <span class="hljs-comment"># 使用自带的html.parser解析</span><br>    soup = BeautifulSoup(res.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    <span class="hljs-comment"># 创建文件夹</span><br>    createFile(save_path)<br>    <span class="hljs-comment"># 获取首页总页数</span><br>    img_max = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&#x27;nav-links&#x27;</span>).find_all(<span class="hljs-string">&#x27;a&#x27;</span>)[<span class="hljs-number">3</span>].text<br>    <span class="hljs-comment"># print(&quot;总页数:&quot;+img_max)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(img_max) + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 获取每页的URL地址</span><br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span>:<br>            page = mziTu<br>        <span class="hljs-keyword">else</span>:<br>            page = mziTu + <span class="hljs-string">&#x27;page/&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>        file = save_path + <span class="hljs-string">&#x27;\\&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>        createFile(file)<br>        <span class="hljs-comment"># 下载每页的图片</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;套图页码：&quot;</span> + page)<br>        download(page, file)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><h3 id="3-2-linux下代码"><a href="#3-2-linux下代码" class="headerlink" title="3.2 linux下代码"></a>3.2 linux下代码</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># 导入requests库</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># 导入文件操作库</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> bs4<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> importlib<br>importlib.reload(sys)<br><br><span class="hljs-comment"># 给请求指定一个请求头来模拟chrome浏览器</span><br><span class="hljs-keyword">global</span> headers<br>headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&#x27;</span>&#125;<br><span class="hljs-comment"># 爬图地址</span><br>mziTu = <span class="hljs-string">&#x27;http://www.mzitu.com/&#x27;</span><br><span class="hljs-comment"># 定义存储位置</span><br><span class="hljs-keyword">global</span> save_path<br>save_path = ​<span class="hljs-string">&#x27;/mnt/data/mzitu&#x27;</span><br><br><span class="hljs-comment"># 创建文件夹</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createFile</span>(<span class="hljs-params">file_path</span>):</span><br>    <span class="hljs-keyword">if</span> os.path.exists(file_path) <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>        os.makedirs(file_path)<br>    <span class="hljs-comment"># 切换路径至上面创建的文件夹</span><br>    os.chdir(file_path)<br><br><span class="hljs-comment"># 下载文件</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span>(<span class="hljs-params">page_no, file_path</span>):</span><br>    <span class="hljs-keyword">global</span> headers<br>    res_sub = requests.get(page_no, headers=headers)<br>    <span class="hljs-comment"># 解析html</span><br>    soup_sub = BeautifulSoup(res_sub.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    <span class="hljs-comment"># 获取页面的栏目地址</span><br>    all_a = soup_sub.find(<span class="hljs-string">&#x27;div&#x27;</span>,class_=<span class="hljs-string">&#x27;postlist&#x27;</span>).find_all(<span class="hljs-string">&#x27;a&#x27;</span>,target=<span class="hljs-string">&#x27;_blank&#x27;</span>)<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> all_a:<br>        count = count + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> (count % <span class="hljs-number">2</span>) == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;内页第几页：&quot;</span> + <span class="hljs-built_in">str</span>(count))<br>            <span class="hljs-comment"># 提取href</span><br>            href = a.attrs[<span class="hljs-string">&#x27;href&#x27;</span>]<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;套图地址：&quot;</span> + href)<br>            res_sub_1 = requests.get(href, headers=headers)<br>            soup_sub_1 = BeautifulSoup(res_sub_1.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>            <span class="hljs-comment"># ------ 这里最好使用异常处理 ------</span><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># 获取套图的最大数量</span><br>                pic_max = soup_sub_1.find(<span class="hljs-string">&#x27;div&#x27;</span>,class_=<span class="hljs-string">&#x27;pagenavi&#x27;</span>).find_all(<span class="hljs-string">&#x27;span&#x27;</span>)[<span class="hljs-number">6</span>].text<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;套图数量：&quot;</span> + pic_max)<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(pic_max) + <span class="hljs-number">1</span>):<br>                    <span class="hljs-comment"># print(&quot;子内页第几页：&quot; + str(j))</span><br>                    <span class="hljs-comment"># j int类型需要转字符串</span><br>                    href_sub = href + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-built_in">str</span>(j)<br>                    <span class="hljs-built_in">print</span>(href_sub)<br>                    res_sub_2 = requests.get(href_sub, headers=headers)<br>                    soup_sub_2 = BeautifulSoup(res_sub_2.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>                    img = soup_sub_2.find(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&#x27;main-image&#x27;</span>).find(<span class="hljs-string">&#x27;img&#x27;</span>)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(img, bs4.element.Tag):<br>                        <span class="hljs-comment"># 提取src</span><br>                        url = img.attrs[<span class="hljs-string">&#x27;src&#x27;</span>]<br>                        array = url.split(<span class="hljs-string">&#x27;/&#x27;</span>)<br>                        file_name = array[<span class="hljs-built_in">len</span>(array)-<span class="hljs-number">1</span>]<br>                        <span class="hljs-comment"># print(file_name)</span><br>                        <span class="hljs-comment"># 防盗链加入Referer</span><br>                        headers = &#123;<span class="hljs-string">&#x27;Referer&#x27;</span>: href&#125;<br>                        img = requests.get(url, headers=headers)<br>                        <span class="hljs-comment"># print(&#x27;开始保存图片&#x27;)</span><br>                        f = <span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&#x27;ab&#x27;</span>)<br>                        f.write(img.content)<br>                        <span class="hljs-comment"># print(file_name, &#x27;图片保存成功！&#x27;)</span><br>                        f.close()<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(e)<br><br><br><span class="hljs-comment"># 主方法</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    res = requests.get(mziTu, headers=headers)<br>    <span class="hljs-comment"># 使用自带的html.parser解析</span><br>    soup = BeautifulSoup(res.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    <span class="hljs-comment"># 创建文件夹</span><br>    createFile(save_path)<br>    <span class="hljs-comment"># 获取首页总页数</span><br>    img_max = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&#x27;nav-links&#x27;</span>).find_all(<span class="hljs-string">&#x27;a&#x27;</span>)[<span class="hljs-number">3</span>].text<br>    <span class="hljs-comment"># print(&quot;总页数:&quot;+img_max)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(img_max) + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 获取每页的URL地址</span><br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span>:<br>            page = mziTu<br>        <span class="hljs-keyword">else</span>:<br>            page = mziTu + <span class="hljs-string">&#x27;page/&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>        file = save_path + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>        createFile(file)<br>        <span class="hljs-comment"># 下载每页的图片</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;套图页码：&quot;</span> + page)<br>        download(page, file)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><h2 id="四：-参考文献"><a href="#四：-参考文献" class="headerlink" title="四： 参考文献"></a>四： 参考文献</h2><p><a href="https://gitee.com/52itstyle/Python">小柒2012 / 从零学Python / Day01</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo一键上传部署脚本的构建</title>
    <link href="/2020/02/15/hexo/hexo%E4%B8%80%E9%94%AE%E4%B8%8A%E4%BC%A0%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E7%9A%84%E6%9E%84%E5%BB%BA/"/>
    <url>/2020/02/15/hexo/hexo%E4%B8%80%E9%94%AE%E4%B8%8A%E4%BC%A0%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E7%9A%84%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<ol><li>windows先右键新建一个文本文档，后缀改为<code>git push hexo.bat</code>；Linux新建一个<code>git push hexo.sh</code>文档;</li><li>注意：编码要是windows默认编码GBK；Linux上是UTF-8；</li><li>然后复制黏贴，话不多说，直接上代码。  <span id="more"></span></li></ol><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><br><span class="hljs-built_in">cd</span> G:\code\hexo<br><span class="hljs-comment">REM 改为hexo根目录</span><br><span class="hljs-built_in">echo</span> &quot;当前目录是： G:\code\hexo&quot;<br><span class="hljs-comment">REM 改为hexo根目录</span><br><span class="hljs-built_in">echo</span> &quot;正在add... ...&quot;<br>git add source/ <br><span class="hljs-comment">REM 只添加了blog文件目录，需要的可自行添加...</span><br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span> &quot;add complete.&quot;<br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span>;<br><br><span class="hljs-built_in">echo</span> &quot;正在commit... ...&quot;<br><span class="hljs-built_in">set</span> now=<span class="hljs-variable">%date%</span> <span class="hljs-variable">%time%</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">%now%</span><br>git commit -m &quot;blog update <span class="hljs-built_in">at</span> <span class="hljs-variable">%now%</span>&quot;<br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span> &quot;commit complete.&quot;<br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span>;<br> <br><span class="hljs-built_in">echo</span> &quot;正在将更改提交到远程git服务器... ...&quot;<br>git push githuborigin hexo &amp;&amp; git push giteeorigin hexo &amp;&amp; git push codingorigin hexo<br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span> &quot;git push complete.&quot;<br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span>;<br><br><span class="hljs-built_in">echo</span> &quot;正在部署blog... ...&quot;<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span> &quot;部署 complete.&quot;<br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span>;<br><br><span class="hljs-built_in">pause</span><br></code></pre></div></td></tr></table></figure><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>先提升权限，<code>chmod +x ./git\ push\ hexo.sh</code>。</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /home/zs/文档/hexo/closer_laps<br><span class="hljs-comment"># 改为hexo根目录</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;当前目录是： /home/zs/文档/hexo/closer_laps&quot;</span><br><br><span class="hljs-comment"># 改为hexo根目录</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在add... ...&quot;</span><br>git add <span class="hljs-built_in">source</span>/ <br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;add complete.&quot;</span><br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span>;<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在commit... ...&quot;</span><br>now=`date <span class="hljs-string">&#x27;+%Y-%m-%d %H:%M:%S&#x27;</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$now</span>&quot;</span><br>git commit -m <span class="hljs-string">&quot;blog update at <span class="hljs-variable">$now</span>&quot;</span><br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;commit complete.&quot;</span><br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span>;<br> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在push... ...&quot;</span><br>git push githuborigin hexo &amp;&amp; git push giteeorigin hexo &amp;&amp; git push codingorigin hexo<br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;git push complete.&quot;</span><br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span>;<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在部署blog... ...&quot;</span><br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;部署 complete.&quot;</span><br><span class="hljs-built_in">echo</span>;<br><span class="hljs-built_in">echo</span>;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>一键部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>同时在Github、Gitee、Coding上部署Hexo</title>
    <link href="/2020/02/14/hexo/%E5%90%8C%E6%97%B6%E5%9C%A8Github%E3%80%81Gitee%E3%80%81Coding%E4%B8%8A%E9%83%A8%E7%BD%B2Hexo/"/>
    <url>/2020/02/14/hexo/%E5%90%8C%E6%97%B6%E5%9C%A8Github%E3%80%81Gitee%E3%80%81Coding%E4%B8%8A%E9%83%A8%E7%BD%B2Hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="一、创建托管仓库"><a href="#一、创建托管仓库" class="headerlink" title="一、创建托管仓库"></a>一、创建托管仓库</h2><ul><li><p>GitHub <a href="https://github.com/">https://github.com</a><br>与用户名相同，格式为YouID.github.io</p></li><li><p>Gitee <a href="https://gitee.com/">https://gitee.com</a><br>与用户名相同，格式为YouID</p></li><li><p>Coding <a href="https://coding.net/">https://coding.net</a><br>与用户名相同，格式为YouID.coding.me</p><span id="more"></span></li></ul><h2 id="二、在Github、Gitee、Coding上添加SSH，并push"><a href="#二、在Github、Gitee、Coding上添加SSH，并push" class="headerlink" title="二、在Github、Gitee、Coding上添加SSH，并push"></a>二、在Github、Gitee、Coding上添加SSH，并push</h2><ol><li>获取id_rsa.pub文件内的公匙;具体如何获取请百度<code>id_rsa.pub</code></li><li>在 Github、Gitee、Coding平台 - 设置 - 添加SSH Keys。</li><li>将博客分支master和分支hexo里的内容push到仓库，并设定hexo为主分支（hexo分支的好处请参考<a href="https://closer_laps.gitee.io/2019/12/09/hexo/hexo%20%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8A%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2/"> hexo 多客户端上更新博客</a>）。</li></ol><h2 id="三、开启Pages服务并绑定域名"><a href="#三、开启Pages服务并绑定域名" class="headerlink" title="三、开启Pages服务并绑定域名"></a>三、开启Pages服务并绑定域名</h2><ul><li>GitHub 进入托管的仓库 -&gt; Settings -&gt; Options 往下拉-&gt;GitHub Pages</li><li>Gitee 进入托管的仓库 -&gt; 服务-&gt; Gitee Pages (绑定域名需要升级Gitee Pro，普通版每次部署更新需要手动点更新！！！)</li><li>Coding 进入托管的仓库 -&gt; Pages服务 -&gt; 设置</li></ul><h2 id="四、Hexo推送设置"><a href="#四、Hexo推送设置" class="headerlink" title="四、Hexo推送设置"></a>四、Hexo推送设置</h2><p>在博客根目录下，打开<code>_config.yml</code>,deploy设置如下所示</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span><br>        <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:YouID/YouID.github.io.git</span><br>        <span class="hljs-attr">gitee:</span> <span class="hljs-string">git@gitee.com:YouID/YouID.git</span><br>        <span class="hljs-attr">coding:</span> <span class="hljs-string">git@e.coding.net:YouID/YouID.coding.me.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure><h2 id="五：将本地仓库和远程仓库连接"><a href="#五：将本地仓库和远程仓库连接" class="headerlink" title="五：将本地仓库和远程仓库连接"></a>五：将本地仓库和远程仓库连接</h2><ul><li><p>GitHub<br><code>git remote add githuborigin git@github.com:YouID/YouID.github.io.git</code></p></li><li><p>Gitee<br><code>git remote add giteeorigin git@gitee.com:YouID/YouID.git</code>  </p></li><li><p>Coding<br><code>git remote add codingorigin git@e.coding.net:YouID/YouID.coding.me.git</code></p></li></ul><p>输入<code>git remote -v</code>，成功的话会显示3个你关联的远程库：<code>codingorigin</code>、<code>githuborigin</code>、<code>giteeorigin</code>。如下：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">codingorigin    git@e<span class="hljs-selector-class">.coding</span><span class="hljs-selector-class">.net</span>:YouID/YouID<span class="hljs-selector-class">.coding</span><span class="hljs-selector-class">.me</span><span class="hljs-selector-class">.git</span> (fetch)<br>codingorigin    git@e<span class="hljs-selector-class">.coding</span><span class="hljs-selector-class">.net</span>:YouID/YouID<span class="hljs-selector-class">.coding</span><span class="hljs-selector-class">.me</span><span class="hljs-selector-class">.git</span> (push)<br>giteeorigin     git@gitee<span class="hljs-selector-class">.com</span>:YouID/YouID<span class="hljs-selector-class">.git</span> (fetch)<br>giteeorigin     git@gitee<span class="hljs-selector-class">.com</span>:YouID/YouID<span class="hljs-selector-class">.git</span> (push)<br>githuborigin  git@github<span class="hljs-selector-class">.com</span>:YouID/YouID<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span> (fetch)<br>githuborigin  git@github<span class="hljs-selector-class">.com</span>:YouID/YouID<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span> (push)<br></code></pre></div></td></tr></table></figure><h2 id="六、一键部署必杀命令"><a href="#六、一键部署必杀命令" class="headerlink" title="六、一键部署必杀命令"></a>六、一键部署必杀命令</h2><p><code>git add source/ &amp;&amp; git commit -m &quot;blog update&quot; &amp;&amp; git push githuborigin hexo &amp;&amp; git push giteeorigin hexo &amp;&amp; git push codingorigin hexo &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; exit</code><br>把所有命令用<code>&amp;&amp;</code>串起来，有一个失败就会停止；成功，最后一条命令就会退出终端。</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>多平台部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在markdown中优雅的编辑数学公式</title>
    <link href="/2020/02/12/hexo/%E5%A6%82%E4%BD%95%E5%9C%A8markdown%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E7%BC%96%E8%BE%91%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <url>/2020/02/12/hexo/%E5%A6%82%E4%BD%95%E5%9C%A8markdown%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E7%BC%96%E8%BE%91%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p>下载IDE软件vscode，安装插件<code>Markdown Preview Enhanced</code>(简称MPE)。</p><p><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/">MPE官方使用文档</a>。  </p><h2 id="hexo博客中使用-KaTeX-来渲染数学表达式"><a href="#hexo博客中使用-KaTeX-来渲染数学表达式" class="headerlink" title="hexo博客中使用 KaTeX 来渲染数学表达式"></a>hexo博客中使用 KaTeX 来渲染数学表达式</h2><ol><li>在Next主题配置下面开启mathjax。（不知道怎么开启的小伙伴请查询官方文档或者github）</li><li>在博客需要用到公式的md文件的头文件中添加一句：<code>mathjax: true</code>。</li></ol><h2 id="上下标及标记"><a href="#上下标及标记" class="headerlink" title="上下标及标记"></a>上下标及标记</h2><span id="more"></span><ol><li>默认下的分隔符：<br><code>$...$</code> 或者<code>\(...\)</code>中的数学表达式将会在行内显示。<br><code>$$...$$</code> 或者 <code>\[...\]</code> 或者 <code> ```math</code> 中的数学表达式将会在块内显示。  </li><li>公式两边用<code>$</code>符号标记为公式，如:<br><code>$a^2$</code>显示为$a^2$<br><code>$H_2O$</code>显示为$H_2O$<br><code>==marked==</code>显示为==marked==  </li></ol><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>Markdown Preview Enhanced 使用 KaTeX 来渲染数学表达式。  </p><p>如这个公式：$f(x)=\int_{-\infty}^\infty\widehat f\xi,e^{2\pi i\xi x},d\xi$  </p><p>想要正确地写出它的文本形式可不容易：<br><code>f(x)=\int_&#123;-\infty&#125;^\infty\widehat f\xi\,e^&#123;2\pi i\xi x&#125;\,d\xi</code>  </p><p>如果仅仅为了写个公式，就去学LaTeX语法，那没有十天半月的肯定不行。这个时候，你需要一个<a href="http://www.wiris.com/editor/demo/en/developers#output-formats">可视化公式编辑器</a>的神器，它可以让我们可视化地编辑公式，然后自动得到它的LaTeX文本：<br><img src="https://www.liaoxuefeng.com/files/attachments/1280023417847873/l" alt="使用说明">  </p><p>在线转换地址1：<a href="http://www.wiris.com/editor/demo/en/developers#output-formats">http://www.wiris.com/editor/demo/en/developers#output-formats</a></p><p>在线转换地址2：<a href="https://latex.91maths.com/">https://latex.91maths.com/</a></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学公式</tag>
      
      <tag>markdown语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习之路 一：基础知识</title>
    <link href="/2020/02/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%20%E4%B8%80%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2020/02/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%20%E4%B8%80%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>本文适合有基础c、c++语言知识的人学习，同时也可当作python工具书查阅。  </p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li><p>这里选择的是最新版 Python3<br>安装教程这里推荐：<a href="http://www.runoob.com/python3/python3-install.html">http://www.runoob.com/python3/python3-install.html</a><br>win下载地址：<a href="https://www.python.org/downloads/windows">https://www.python.org/downloads/windows</a><br>Linux下载地址：<a href="https://www.python.org/downloads/source">https://www.python.org/downloads/source</a>  </p></li><li><p>可视化开发工具IDE：<a href="https://www.jetbrains.com/pycharm/download/">https://www.jetbrains.com/pycharm/download/</a></p></li><li><p><strong>因国内pip速度较慢，安装完python后建议改为国内清华大学镜像源，以下：</strong>  </p><ul><li><p>临时使用<br><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 模块名字</code><span id="more"></span></p></li><li><p>设为默认<br>升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置：<br><code>pip install pip -U</code><br><code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code><br>如果您到 pip 默认源的网络连接较差，临时使用本镜像站来升级 pip：<br><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</code></p></li></ul></li><li><p>指定目录 pip下载及离线安装包</p><ul><li>将pip安装的包导出至requirements文件列表<br>cd进入想要下载的目录。<br><code>pip freeze &gt; requirements.txt</code></li><li>批量下载pip包<br><code>pip download -d d:\0\package -r requirements.txt</code></li><li>pip批量安装包及通过列表文件安装（先cd进入requirements所在目录）<br><code>pip install -r requirements.txt</code></li></ul></li></ol><h2 id="1-1基础语法"><a href="#1-1基础语法" class="headerlink" title="1.1基础语法"></a>1.1基础语法</h2><h3 id="1-1-1-输出"><a href="#1-1-1-输出" class="headerlink" title="1.1.1 输出"></a>1.1.1 输出</h3><p>打印 <code>print (&quot;Hello, Python!&quot;)</code><br>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号<code>,</code>。<br>不换行输出 <code>print(&#39;*&#39;, end=&#39; &#39;)</code>。  </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-comment"># 统计开始时间</span><br>startTime = time.time()<br><span class="hljs-comment"># 统计结束时间</span><br>endTime = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;共花费时间： %d 秒&quot;</span> % (endTime - startTime))<br></code></pre></div></td></tr></table></figure><h3 id="1-1-2-字符串转义"><a href="#1-1-2-字符串转义" class="headerlink" title="1.1.2 字符串转义"></a>1.1.2 字符串转义</h3><p>特殊字符会使用反斜杠<code>\</code>来转义。比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以\表示的字符就是\<br><code>print(&#39;Isn\&#39;t, they said.&#39;)</code><br>如果不希望前置了 \ 的字符转义成特殊字符，而是使用<em>原始字符串</em>方式，在引号前添加 r 即可。<br><code>print(r&#39;C:\软件\python&#39;)</code><br>用三重引号可以跨行连续输入。<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>或<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code><br>字符串可以用 + 进行连接（粘到一起），也可以用 * 进行重复:<code>3 * &#39;io&#39; + &#39; so easy&#39;</code>  </p><h3 id="1-1-3-脚本式编程"><a href="#1-1-3-脚本式编程" class="headerlink" title="1.1.3 脚本式编程"></a>1.1.3 脚本式编程</h3><p>Python 文件将以 <code>.py</code> 为扩展名。<br>在linux和mac上面编程时，已经设置了PATH变量，头文件加入<code>#!/usr/bin/python</code>，可以直接执行。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Hello, Python!&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>这里，假定您的Python解释器在/usr/bin目录中，使用以下命令执行脚本：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">chmod +x test.py     <span class="hljs-comment"># 脚本文件添加可执行权限</span><br>./test.py<br></code></pre></div></td></tr></table></figure><h3 id="1-1-4-行和缩进"><a href="#1-1-4-行和缩进" class="headerlink" title="1.1.4 行和缩进"></a>1.1.4 行和缩进</h3><p>Python与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。<br>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量(一般是四个空格)，这个必须严格执行。  </p><h3 id="1-1-5-注释"><a href="#1-1-5-注释" class="headerlink" title="1.1.5 注释"></a>1.1.5 注释</h3><p>python中单行注释采用 # 开头。<br>python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)。  </p><h3 id="1-1-6-同一行显示多条语句"><a href="#1-1-6-同一行显示多条语句" class="headerlink" title="1.1.6 同一行显示多条语句"></a>1.1.6 同一行显示多条语句</h3><p>Python可以在同一行中使用多条语句，语句之间使用分号(;)分割。  </p><h3 id="1-1-7-多个语句构成代码组"><a href="#1-1-7-多个语句构成代码组" class="headerlink" title="1.1.7 多个语句构成代码组"></a>1.1.7 多个语句构成代码组</h3><p>缩进相同的一组语句构成一个代码块，我们称之代码组。<br>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。<br>我们将首行及后面的代码组称为一个子句(clause)。<br>如下实例：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">if</span> expression :<br>   suite<br><span class="hljs-keyword">elif</span> expression :  <br>   suite  <br><span class="hljs-keyword">else</span> :  <br>   suite<br></code></pre></div></td></tr></table></figure><h2 id="1-2-变量类型"><a href="#1-2-变量类型" class="headerlink" title="1.2 变量类型"></a>1.2 变量类型</h2><h3 id="1-2-1-变量赋值"><a href="#1-2-1-变量赋值" class="headerlink" title="1.2.1 变量赋值"></a>1.2.1 变量赋值</h3><p>Python 中的变量赋值不需要类型声明。<br>Python允许你同时为多个变量赋值。例如：<br><code>a, b, c = 1, 2, &quot;john&quot;</code>  </p><h3 id="1-2-2-标准数据类型"><a href="#1-2-2-标准数据类型" class="headerlink" title="1.2.2 标准数据类型"></a>1.2.2 标准数据类型</h3><p>Python 定义了一些标准类型，用于存储各种类型的数据。<br>Python有五个标准的数据类型：  </p><ul><li>Numbers（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Dictionary（字典）</li></ul><p>bool类型有True和False和None（等于NULL）。</p><h3 id="1-2-2-1-Python数字"><a href="#1-2-2-1-Python数字" class="headerlink" title="1.2.2.1 Python数字"></a>1.2.2.1 Python数字</h3><p>数字数据类型用于存储数值。他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。<br>当你指定一个值时，Number对象就会被创建：<br><code>var1 = 1</code><br>您也可以使用del语句删除一些对象的引用。del语句的语法是：<br><code>del var1[,var2[,var3[....,varN]]]]</code><br>您可以通过使用del语句删除单个或多个对象的引用。例如：<br><code>del var_a, var_b</code><br>Python支持四种不同的数字类型：</p><ul><li>int（有符号整型,如<code>0112L</code>,<code>0xDEFL</code>,<code>0x69</code>）# long 类型只在Python2.X版本中。在Python3.X版本中 long 类被 int 替代。</li><li>float（浮点型,<code>-32.54e100</code>）</li><li>complex（复数,<code>4.53e-7j</code>）</li></ul><h3 id="1-2-2-2-Python字符串"><a href="#1-2-2-2-Python字符串" class="headerlink" title="1.2.2.2 Python字符串"></a>1.2.2.2 Python字符串</h3><p>字符串或串(String)是由数字、字母、下划线组成的一串字符。<br>python的字串列表有2种取值顺序:  </p><ul><li>从左到右索引默认0开始的，最大范围是字符串长度少1</li><li>从右到左索引默认-1开始的，最大范围是字符串开头</li></ul><p>如果你要实现从字符串中获取一段子字符串的话，可以使用 [头下标:尾下标] 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。<br>[头下标:尾下标] 获取的子字符串包含头下标的字符，但不包含尾下标的字符。  </p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;abcdef&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;s[1:5]  &#x27;</span>,s[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;s[-6:-4]  &#x27;</span>,s[-<span class="hljs-number">6</span>:-<span class="hljs-number">4</span>])<br>s[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>]   bcde<br>s[-<span class="hljs-number">6</span>:-<span class="hljs-number">4</span>]   ab<br></code></pre></div></td></tr></table></figure><p>字符串格式化<br>在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。  </p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is %s and weight is %d kg!&quot;</span> % (<span class="hljs-string">&#x27;Zara&#x27;</span>, <span class="hljs-number">21</span>))<br>My name <span class="hljs-keyword">is</span> Zara <span class="hljs-keyword">and</span> weight <span class="hljs-keyword">is</span> <span class="hljs-number">21</span> kg!<br></code></pre></div></td></tr></table></figure><h3 id="1-2-2-3-Python列表"><a href="#1-2-2-3-Python列表" class="headerlink" title="1.2.2.3 Python列表"></a>1.2.2.3 Python列表</h3><p>List（列表）相当于c语言中的数组。 是 Python 中使用最频繁的数据类型。<br>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。<br>列表用 <code>[ ]</code> 标识，是 python 最通用的复合数据类型。<br>列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。<br>加号 + 是列表连接运算符，星号 * 是重复操作。如下实例：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = [ <span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-number">786</span> , <span class="hljs-number">2.23</span>, <span class="hljs-string">&#x27;john&#x27;</span>, <span class="hljs-number">70.2</span> ]<br><span class="hljs-meta">&gt;&gt;&gt; </span>tinylist = [<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;john&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;输出第1个至第三个元素  &#x27;</span>, <span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]) <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;输出从第2个开始至列表末尾的所有元素   &#x27;</span>, <span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>:])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;输出列表两次    &#x27;</span>, tinylist * <span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;打印组合的列表    &#x27;</span>, <span class="hljs-built_in">list</span> + tinylist)<br>输出第<span class="hljs-number">1</span>个至第三个元素   [<span class="hljs-number">786</span>, <span class="hljs-number">2.23</span>]<br>输出从第<span class="hljs-number">2</span>个开始至列表末尾的所有元素    [<span class="hljs-number">2.23</span>, <span class="hljs-string">&#x27;john&#x27;</span>, <span class="hljs-number">70.2</span>]<br>输出列表两次     [<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;john&#x27;</span>, <span class="hljs-number">123</span>, <span class="hljs-string">&#x27;john&#x27;</span>]<br>打印组合的列表     [<span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-number">786</span>, <span class="hljs-number">2.23</span>, <span class="hljs-string">&#x27;john&#x27;</span>, <span class="hljs-number">70.2</span>, <span class="hljs-number">123</span>, <span class="hljs-string">&#x27;john&#x27;</span>]<br></code></pre></div></td></tr></table></figure><p>每当需要访问最后一个列表元素时，都可使用索引-1，来获取最后一个元素。如<code>list[-1]</code>。<br><code>squares = [value**2 for value in range(1,11)]</code>此列表解析生成1-10的平方数存入数组。<br><code>list[1]=list[:]</code>可以复制列表。  </p><h3 id="1-2-2-4-Python-元组"><a href="#1-2-2-4-Python-元组" class="headerlink" title="1.2.2.4 Python 元组"></a>1.2.2.4 Python 元组</h3><p>元组是另一个数据类型，类似于 List（列表）。<br>元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。<br><strong>元组是不允许更新的。而列表是允许更新的。</strong>  </p><h3 id="1-2-2-5-Python-字典"><a href="#1-2-2-5-Python-字典" class="headerlink" title="1.2.2.5 Python 字典"></a>1.2.2.5 Python 字典</h3><p>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。<br>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。<br>字典用”{ }”标识。字典由索引(key)和它对应的值value组成。  </p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span> = &#123;&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span>[<span class="hljs-string">&#x27;one&#x27;</span>] = <span class="hljs-string">&quot;This is one&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span>[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;This is two&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>tinydict = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;john&#x27;</span>,<span class="hljs-string">&#x27;code&#x27;</span>:<span class="hljs-number">6734</span>, <span class="hljs-string">&#x27;dept&#x27;</span>: <span class="hljs-string">&#x27;sales&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (<span class="hljs-built_in">dict</span>[<span class="hljs-string">&#x27;one&#x27;</span>])          <span class="hljs-comment"># 输出键为&#x27;one&#x27; 的值</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (<span class="hljs-built_in">dict</span>[<span class="hljs-number">2</span>])              <span class="hljs-comment"># 输出键为 2 的值</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (tinydict)             <span class="hljs-comment"># 输出完整的字典</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (tinydict.keys())      <span class="hljs-comment"># 输出所有键</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (tinydict.values())    <span class="hljs-comment"># 输出所有值</span><br>This <span class="hljs-keyword">is</span> one<br>This <span class="hljs-keyword">is</span> two<br>&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;john&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">6734</span>, <span class="hljs-string">&#x27;dept&#x27;</span>: <span class="hljs-string">&#x27;sales&#x27;</span>&#125;<br>dict_keys([<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;dept&#x27;</span>])<br>dict_values([<span class="hljs-string">&#x27;john&#x27;</span>, <span class="hljs-number">6734</span>, <span class="hljs-string">&#x27;sales&#x27;</span>])<br></code></pre></div></td></tr></table></figure><ol><li><p>修改字典中的值<br><code>dict[&#39;color&#39;] = &#39;yellow&#39;</code></p></li><li><p>删除键-值对<br><code>del dict[&#39;color&#39;]</code> # 删除键’color’<br><code>dict.clear()</code> # 清空字典<br><code>del dict</code> # 删除字典  </p></li><li><p>遍历字典</p> <figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.items():<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nKey: &quot;</span> + key)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Value: &quot;</span> + value)<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="1-2-3-Python数据类型转换"><a href="#1-2-3-Python数据类型转换" class="headerlink" title="1.2.3 Python数据类型转换"></a>1.2.3 Python数据类型转换</h3><p>和c语言一样。当我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。<br><code>float(2)</code>  </p><h3 id="1-2-4-如何查看模块及其方法的使用和它们的源码"><a href="#1-2-4-如何查看模块及其方法的使用和它们的源码" class="headerlink" title="1.2.4 如何查看模块及其方法的使用和它们的源码"></a>1.2.4 如何查看模块及其方法的使用和它们的源码</h3><ol><li>进入cmd或者终端，python交互模式。</li><li><code>import 模块名</code>  # 导入模块</li><li><code>dir(模块名)</code> # 查看模块拥有的方法</li><li><code>help(模块名)</code> # 查看模块介绍及其所含方法、拉到最后file后面查看源码路径</li><li><code>help(方法名)</code> # 查看方法的内置帮助、用法</li></ol><h2 id="1-3-运算符"><a href="#1-3-运算符" class="headerlink" title="1.3 运算符"></a>1.3 运算符</h2><p><code>+、-、*、/、%</code>和c语言一样<br><code>**</code>是幂，<code>2**3=8</code><br><code>//</code>是取整除,<code>9//2=4</code><br>比较运算符和c语言一样<br>赋值运算符和c语言一样，多了<code>**=</code>,<code>//=</code><br>位运算符和c语言一样<br>逻辑运算符:<code>and</code>等同于c语言中的<code>&amp;&amp;</code>，<code>or</code>等于c语言中的<code>||</code>，<code>not</code>等于c语言中的<code>!</code>  </p><h3 id="1-3-1-成员运算符"><a href="#1-3-1-成员运算符" class="headerlink" title="1.3.1 成员运算符"></a>1.3.1 成员运算符</h3><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。  </p><ul><li>in<br>如果在指定的序列中找到值返回 True，否则返回 False。例子：x in y , 如果 x 在 y 序列中返回 True。</li><li>not in<br>如果在指定的序列中没有找到值返回 True，否则返回 False。例子：x not in y , 如果 x 不在 y 序列中返回 True。</li></ul><h3 id="1-3-2-身份运算符"><a href="#1-3-2-身份运算符" class="headerlink" title="1.3.2 身份运算符"></a>1.3.2 身份运算符</h3><p>身份运算符用于比较两个对象的存储单元.</p><ul><li>is<br>is 是判断两个标识符是不是引用自一个对象。例子：x is y, 类似 id(x) == id(y)</li><li>is not<br>is not 是判断两个标识符是不是引用自不同对象。例子：x is not y ， 类似 id(a) != id(b)</li></ul><h2 id="1-4-条件语句"><a href="#1-4-条件语句" class="headerlink" title="1.4 条件语句"></a>1.4 条件语句</h2><p><code>if</code>等用于c语言中<code>if</code>，<code>else</code>等同于c语言中<code>else</code>，<code>elif</code>等同于c语言中<code>else if</code><br>Python程序语言指定任何非0和非空（null）值为True，0 或者 null为False。<br>Python 编程中 if 语句用于控制程序的执行，基本形式为：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">if</span> 判断条件<span class="hljs-number">1</span>:<br>    执行语句<span class="hljs-number">1</span>……<br><span class="hljs-keyword">elif</span> 判断条件<span class="hljs-number">2</span>:<br>    执行语句<span class="hljs-number">2</span>……<br><span class="hljs-keyword">elif</span> 判断条件<span class="hljs-number">3</span>:<br>    执行语句<span class="hljs-number">3</span>……<br><span class="hljs-keyword">else</span>:<br>    执行语句<span class="hljs-number">4</span>……<br></code></pre></div></td></tr></table></figure><h2 id="1-5-循环语句"><a href="#1-5-循环语句" class="headerlink" title="1.5 循环语句"></a>1.5 循环语句</h2><p>有while，for循环，循环控制语句有break，continue，pass。  </p><h3 id="1-5-1-while"><a href="#1-5-1-while" class="headerlink" title="1.5.1 while"></a>1.5.1 while</h3><p>while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。其基本形式为：  </p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">while</span> 判断条件(condition)：<br>    执行语句(statements)……<br></code></pre></div></td></tr></table></figure><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">pets = [<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;goldfish&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;rabbit&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>]<br><span class="hljs-keyword">while</span> <span class="hljs-string">&#x27;cat&#x27;</span> <span class="hljs-keyword">in</span> pets:<br>    pets.remove(<span class="hljs-string">&#x27;cat&#x27;</span>)<br><span class="hljs-built_in">print</span>(pets)<br></code></pre></div></td></tr></table></figure><h3 id="1-5-2-for"><a href="#1-5-2-for" class="headerlink" title="1.5.2 for"></a>1.5.2 for</h3><p>for循环的语法格式如下：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">for</span> 迭代变量(iterating_var) <span class="hljs-keyword">in</span> 数列、序列(sequence):<br>   执行语句(statements)<br></code></pre></div></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + x<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>) <span class="hljs-comment">#1-100的和，等于5050</span><br></code></pre></div></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">L = [<span class="hljs-string">&#x27;Bart&#x27;</span>, <span class="hljs-string">&#x27;Lisa&#x27;</span>, <span class="hljs-string">&#x27;Adam&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> L:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></div></td></tr></table></figure><h3 id="1-5-3-循环控制语句"><a href="#1-5-3-循环控制语句" class="headerlink" title="1.5.3 循环控制语句"></a>1.5.3 循环控制语句</h3><p>break,continue和c语言相同。pass就是一个空语句,不做任何事情，一般用做占位语句。。</p><h2 id="1-6-函数"><a href="#1-6-函数" class="headerlink" title="1.6 函数"></a>1.6 函数</h2><p>Python内置了很多有用的函数，我们可以直接调用。可以直接从Python的官方网站查看文档：<br><a href="https://docs.python.org/zh-cn/3/library/functions.html#abs">Python的官方网站查看内置函数</a><br>比如求绝对值的函数abs，只有一个参数。<br>也可以在交互式命令行通过help(abs)查看abs函数的帮助信息。  </p><h3 id="1-6-1-定义函数"><a href="#1-6-1-定义函数" class="headerlink" title="1.6.1 定义函数"></a>1.6.1 定义函数</h3><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ol><li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li></ol><p>一般格式如下：</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> 函数名（参数列表）:</span><br>    函数体<br></code></pre></div></td></tr></table></figure><p>python函数的使用方法基本上和c语言相同，不用指定返回类型，可以返回列表，字典等。  </p><p>一、python可以给函数指定默认值。<br><code>def student(name=&#39;Li Ming&#39;, age=18):</code><br>如果函数有一个实参默认值为空，则必须确保为空的实参在最后一个。如：<br><code>def get_name(first_name, last_name, middle_name=&#39;&#39;):</code>  </p><p>二、将列表传递给函数后，函数就可对其进行修改。在函数中对这个列表所做的任何修改都是永久性的，这让你能够高效地处理大量的数据。<br>有时候，需要禁止函数修改列表。这时候，可向函数传递列表的副本而不是原件。<br><code>def stu(name[:], age[:])</code>  </p><p>三、Python允许函数从调用语句中收集任意数量的实参。<br><code>def make_pizza(*toppings):</code><br>形参名 *toppings 中的星号让Python创建一个名为 toppings 的空元组，并将收到的所有值都封装到这个元组中。<br>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。Python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。<br><code>def make_pizza(size, *toppings):</code>  </p><p>四、使用任意数量的关键字实参<br><code>def build_profile(first, last, **user_info):</code>  </p><h3 id="1-6-2-将函数存储在模块中"><a href="#1-6-2-将函数存储在模块中" class="headerlink" title="1.6.2 将函数存储在模块中"></a>1.6.2 将函数存储在模块中</h3><p>可以将函数存储在被称为模块的独立文件中，再将模块导入到主程序中。跟c语言差不多，c语言中用头文件，函数文件。  </p><ol><li>导入整个模块<br>假设<code>xxx.py</code>所在目录内有另外一个<code>pizza.py</code>，添加<code>import pizza</code>语句<br>导入名为模块 module_name.py 的的整个模块通用语法：<code>import module_name</code><br>可使用下面的语法来使用其中任何一个函数：<code>module_name.function_name ()</code></li><li>导入特定的函数<br><code>from module_name import function_0 , function_1 , function_2</code><br>通过用逗号分隔函数名，可根据需要从模块中导入任意数量的函数。<br>若使用这种语法，调用函数时就无需使用句点。<code>make_pizza(16, &#39;pepperoni&#39;)</code></li><li>使用 as 给函数指定别名<br>指定别名的通用语法如下：<code>from module_name import function_name as fn</code></li><li>使用 as 给模块指定别名<br>给模块指定别名的通用语法如下：<code>import module_name as mn</code></li><li>导入模块中的所有函数<br>最好只导入你需要用的函数，或者导入整个模块并使用句点表示法。<br>导入模块 module_name 中的所有函数通用语法如下：<code>from module_name import *</code></li></ol><p>所有的 import 语句都应放在文件开头，唯一例外的情形是，在文件开头使用了注释来描述整个程序。</p><h2 id="1-7-类"><a href="#1-7-类" class="headerlink" title="1.7 类"></a>1.7 类</h2><h3 id="1-7-1-创建类"><a href="#1-7-1-创建类" class="headerlink" title="1.7.1 创建类"></a>1.7.1 创建类</h3><p>根据约定，在Python中，首字母大写的名称指的是类。  </p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;一次模拟小狗的简单尝试&quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;初始化属性name和age&quot;&quot;&quot;</span><br>        self.name = name<br>        self.age = age<br>        self.son = <span class="hljs-string">&#x27;zero&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sit</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;模拟小狗被命令时蹲下&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(self.name.title() + <span class="hljs-string">&quot; is now sitting.&quot;</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">roll_over</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;模拟小狗被命令时打滚&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(self.name.title() + <span class="hljs-string">&quot; rolled over!&quot;</span>)<br>my_dog = Dog(<span class="hljs-string">&#x27;willie&#x27;</span>, <span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My dog&#x27;s name is &quot;</span> + my_dog.name.title() + <span class="hljs-string">&quot;.&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My dog is &quot;</span> + <span class="hljs-built_in">str</span>(my_dog.age) + <span class="hljs-string">&quot; years old.&quot;</span>)<br>my_dog.sit()<br><span class="hljs-built_in">print</span>(my_dog.son)<br></code></pre></div></td></tr></table></figure><p>一 方法 <strong>init</strong>()<br>可参考c++中的构造函数。  </p><ol><li>我们将方法 <strong>init</strong>() 定义成了包含三个形参： self 、 name 和 age 。在这个方法的定义中，形参 self 必不可少，还必须位于其他形参的前面，相当于c++中的This指针。  </li><li>因为Python调用这个 <strong>init</strong>() 方法来创建 Dog 实例时，将自动传入实参 self 。每个与类相关联的方法调用都自动传递实参 self ，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。  </li><li>我们将通过实参向 Dog() 传递名字和年龄； self 会自动传递，因此我们不需要传递它。每当我们根据 Dog 类创建实例时，都只需给最后两个形参（ name 和 age ）提供值。  </li><li>Dog 类还定义了另外两个方法： sit() 和 roll_over() 。由于这些方法不需要额外的信息，如名字，因此它们只有一个形参 self 。  </li></ol><p>二 根据类创建实例</p><ol><li>访问属性<br>要访问实例的属性，可使用句点表示法。<code>my_dog.name</code></li><li>调用方法<br>用句点表示法来调用 Dog 类中定义的任何方法。<code>my_dog.roll_over()</code></li><li>给属性指定默认值<br>可以在方法 <strong>init</strong>()中添加默认值<br>如果你对某个属性这样做了，就无需包含为它提供初始值的形参。</li></ol><p>三 修改属性的值</p><ol><li>直接修改属性的值<br><code>my_dog.son=&#39;kuku&#39;</code></li><li>通过方法修改属性的值<br>等于在类里面新建一个方法，来修改类里面属性的值<br><code>def update_name(self, mile):</code><br>   <code>self.name = mile</code></li><li>通过方法对属性的值进行递增<br>跟2差不多，用方法里面的实参来修改。</li></ol><h3 id="1-7-2-继承"><a href="#1-7-2-继承" class="headerlink" title="1.7.2 继承"></a>1.7.2 继承</h3><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElectricCar</span>(<span class="hljs-params">Car</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span><br>   <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, make, model, year</span>):</span><br>      <span class="hljs-string">&quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;</span><br>      <span class="hljs-built_in">super</span>().__init__(make, model, year)<br>      self.battery_size = <span class="hljs-number">70</span><br></code></pre></div></td></tr></table></figure><p>一 给子类定义属性和方法<br><strong>super() 是一个特殊函数，帮助Python将父类和子类关联起来。这行代码让Python调用ElectricCar 的父类的方法 <strong>init</strong>() ，让 ElectricCar 实例包含父类的所有属性。父类也称为超类（superclass），名称super因此而得名。</strong>  </p><p>二 重写父类的方法  </p><p>可在子类中定义一个这样的方法，即它与要重写的父类方法同名。这样，Python将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。  </p><h3 id="1-7-3-导入类"><a href="#1-7-3-导入类" class="headerlink" title="1.7.3 导入类"></a>1.7.3 导入类</h3><p>Python允许你将类存储在模块中，然后在主程序中导入所需的模块。  </p><ol><li>导入类<br><code>from car import Car</code></li><li>从一个模块中导入多个类<br><code>from car import Car, ElectricCar</code></li><li>导入整个模块<br>你还可以导入整个模块，再使用句点表示法访问需要的类。<code>import car</code></li><li>导入模块中的所有类<br><code>from module_name import *</code> #不推荐这种方式</li><li>在一个模块中导入另一个模块</li></ol><h3 id="1-7-4-类编码风格"><a href="#1-7-4-类编码风格" class="headerlink" title="1.7.4 类编码风格"></a>1.7.4 类编码风格</h3><p>类名应采用驼峰命名法，即将类名中的每个单词的首字母都大写，而不使用下划线。实例名和模块名都采用小写格式，并在单词之间加上下划线。</p><h2 id="1-8-文件和异常"><a href="#1-8-文件和异常" class="headerlink" title="1.8 文件和异常"></a>1.8 文件和异常</h2><h3 id="1-8-1-从文件中读取数据"><a href="#1-8-1-从文件中读取数据" class="headerlink" title="1.8.1 从文件中读取数据"></a>1.8.1 从文件中读取数据</h3><h4 id="1-8-1-1-读取整个文件"><a href="#1-8-1-1-读取整个文件" class="headerlink" title="1.8.1.1 读取整个文件"></a>1.8.1.1 读取整个文件</h4><p>open() 函数常用形式是接收两个参数：文件名(file)和模式(mode)。<br><code>open(file, mode=&#39;r&#39;)</code><br>完整的语法格式为：<br><code>open(file, mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code><br>参数说明:</p><ul><li>file: 必需，文件路径（相对或者绝对路径）。</li><li>mode: 可选，文件打开模式</li><li>buffering: 设置缓冲</li><li>encoding: 一般使用utf8</li><li>errors: 报错级别</li><li>newline: 区分换行符</li><li>closefd: 传入的file参数类型</li><li>opener:</li></ul><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pi_digits.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>   contents = file_object.read()<br>   <span class="hljs-built_in">print</span>(contents)<br></code></pre></div></td></tr></table></figure><p>函数 open() 接受一个参数：要打开的文件的名称。 函数 open()返回一个表示文件的对象。Python将这个对象存储在我们将在后面使用的变量中。<br>关键字 ==with== 在不再需要访问文件后将其关闭。在这个程序中，我们没有调用 close() ；你只管打开文件，并在需要时使用它，Python自会在合适的时候自动将其关闭。<br>有了表示 pi_digits.txt 的文件对象后，我们使用方法 read() （前述程序的第2行）读取这个文件的全部内容，并将其作为一个长长的字符串存储在变量 contents 中。这样，通过打印 contents 的值，就可将这个文本文件的全部内容显示出来。<br>相比于原始文件，该输出唯一不同的地方是末尾多了一个空行。为何会多出这个空行呢？因为 read() 到达文件末尾时返回一个空字符串，而将这个空字符串显示出来时就是一个空行。要删除多出来的空行，可在 print 语句中使用 rstrip() ：<code>print(contents.rstrip())</code>  </p><h4 id="1-8-1-2-文件路径"><a href="#1-8-1-2-文件路径" class="headerlink" title="1.8.1.2 文件路径"></a>1.8.1.2 文件路径</h4><p>在Linux和OS X中，你可以这样编写代码：<br><code>file_path = &#39;/home/ehmatthes/other_files/text_files/filename.txt&#39;</code><br><code>with open(file_path) as file_object:</code><br>Windows系统中，在文件路径中使用反斜杠（ \ ）而不是斜杠（ / ）：<br><code>file_path = &#39;C:\Users\ehmatthes\other_files\text_files\filename.txt&#39;</code><br><code>with open(file_path) as file_object:</code>  </p><h4 id="1-8-1-3-逐行读取"><a href="#1-8-1-3-逐行读取" class="headerlink" title="1.8.1.3 逐行读取"></a>1.8.1.3 逐行读取</h4><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">filename = <span class="hljs-string">&#x27;pi_digits.txt&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> file_object:<br>   <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> file_object:<br>      <span class="hljs-built_in">print</span>(a.rstrip())<br></code></pre></div></td></tr></table></figure><h4 id="1-8-1-4-创建一个包含文件各行内容的列表"><a href="#1-8-1-4-创建一个包含文件各行内容的列表" class="headerlink" title="1.8.1.4 创建一个包含文件各行内容的列表"></a>1.8.1.4 创建一个包含文件各行内容的列表</h4><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">filename = <span class="hljs-string">&#x27;pi_digits.txt&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> file_object:<br>   lines = file_object.readlines()<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>   <span class="hljs-built_in">print</span>(line.rstrip())<br></code></pre></div></td></tr></table></figure><h4 id="1-8-1-5-使用文件的内容"><a href="#1-8-1-5-使用文件的内容" class="headerlink" title="1.8.1.5 使用文件的内容"></a>1.8.1.5 使用文件的内容</h4><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">filename = <span class="hljs-string">&#x27;pi_digits.txt&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> file_object:<br>   lines = file_object.readlines()<br>pi_string = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>   pi_string += line.strip()<br><span class="hljs-built_in">print</span>(pi_string)<br></code></pre></div></td></tr></table></figure><p>输出3.141592653589793238462643383279<br>在变量 pi_string 存储的字符串中，包含原来位于每行左边的空格，为删除这些空格，可使用 strip() 函数消除空格。<br><code>print str.strip( &#39;0&#39; );  # 去除首尾字符 0</code></p><h3 id="1-8-2-写入文件"><a href="#1-8-2-写入文件" class="headerlink" title="1.8.2 写入文件"></a>1.8.2 写入文件</h3><h4 id="1-8-2-1-写入空文件"><a href="#1-8-2-1-写入空文件" class="headerlink" title="1.8.2.1 写入空文件"></a>1.8.2.1 写入空文件</h4><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">filename = <span class="hljs-string">&#x27;a.txt&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>   file_object.write(<span class="hljs-string">&quot;I love programming.\n&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>打开文件时，可指定<strong>读取模式（ ‘r’ ）、写入模式（ ‘w’ ）、附加模式（ ‘a’ ）或让你能够读取和写入文件的模式（ ‘r+’ ）</strong>。如果<br>你省略了模式实参，Python将以默认的只读模式打开文件。<br><strong>Python只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数str() 将其转换为字符串格式。</strong></p><h4 id="1-8-2-2-写入多行"><a href="#1-8-2-2-写入多行" class="headerlink" title="1.8.2.2 写入多行"></a>1.8.2.2 写入多行</h4><p>每句后面加上换行符。</p><h3 id="1-8-3-异常"><a href="#1-8-3-异常" class="headerlink" title="1.8.3 异常"></a>1.8.3 异常</h3><p>Python使用被称为异常的特殊对象来管理程序执行期间发生的错误。每当发生错误时，它都会创建一个异常对象。如果你编写了处理该异常的代码，程序将继续运行；如果你未对异常进行处理，程序将停止，并显示一个traceback，其中包含有关异常的报告。<br>异常是使用 try-except 代码块处理的。 try-except 代码块让Python执行指定的操作，同时告诉Python发生异常时怎么办。使用了 try-except 代码块时，即便出现异常，程序也将继续运行：显示你编写的友好的错误消息，而不是令用户迷惑的traceback。  </p><h4 id="1-8-3-1-使用-try-except-else-代码块"><a href="#1-8-3-1-使用-try-except-else-代码块" class="headerlink" title="1.8.3.1 使用 try-except-else 代码块"></a>1.8.3.1 使用 try-except-else 代码块</h4><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Give me two numbers, and I&#x27;ll divide them.&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter &#x27;q&#x27; to quit.&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   first_number = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\nFirst number: &quot;</span>)<br>   <span class="hljs-keyword">if</span> first_number == <span class="hljs-string">&#x27;q&#x27;</span>:<br>     <span class="hljs-keyword">break</span><br>   second_number = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Second number: &quot;</span>)<br>   <span class="hljs-keyword">try</span>:<br>      answer = <span class="hljs-built_in">int</span>(first_number) / <span class="hljs-built_in">int</span>(second_number)<br>   <span class="hljs-keyword">except</span> ZeroDivisionError:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You can&#x27;t divide by 0!&quot;</span>)<br>   <span class="hljs-keyword">else</span>:<br>      <span class="hljs-built_in">print</span>(answer)<br></code></pre></div></td></tr></table></figure><p>当你认为可能发生了错误时，可编写一个 try-except 代码块来处理可能引发的异常。<br>通过将可能引发错误的代码放在 try-except 代码块中，可提高这个程序抵御错误的能力。这个示例还包含一个 else 代码块；依赖于 try 代码块成功执行的代码都应放到 else 代码块中。<br>try-except-else 代码块的工作原理大致如下：<strong>Python尝试执行 try 代码块中的代码；只有可能引发异常的代码才需要放在 try 语句中。有时候，有一些仅在 try 代码块成功执行时才需要运行的代码；这些代码应放在 else 代码块中。 except 代码块告诉Python，如果它尝试运行 try 代码块中的代码时引发了指定的异常，该怎么办。</strong>  </p><h4 id="1-8-3-2-分析多个文本"><a href="#1-8-3-2-分析多个文本" class="headerlink" title="1.8.3.2 分析多个文本"></a>1.8.3.2 分析多个文本</h4><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count_words</span>(<span class="hljs-params">filename</span>):</span><br>   <span class="hljs-string">&quot;&quot;&quot;计算一个文件大致包含多少个单词&quot;&quot;&quot;</span><br>   <span class="hljs-keyword">try</span>:<br>      <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f_obj:<br>         contents = f_obj.read()<br>   <span class="hljs-keyword">except</span> FileNotFoundError:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Sorry, the file &quot;</span> + filename + <span class="hljs-string">&quot; does not exist.&quot;</span>)<br>   <span class="hljs-keyword">else</span>:<br>      <span class="hljs-comment"># 计算文件大致包含多少个单词</span><br>      words = contents.split()<br>      num_words = <span class="hljs-built_in">len</span>(words)<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The file &quot;</span> + filename + <span class="hljs-string">&quot; has about &quot;</span> + <span class="hljs-built_in">str</span>(num_words) + <span class="hljs-string">&quot; words.&quot;</span>)<br><br>filenames = [<span class="hljs-string">&#x27;0.txt&#x27;</span>, <span class="hljs-string">&#x27;1.txt&#x27;</span>, <span class="hljs-string">&#x27;2.txt&#x27;</span>, <span class="hljs-string">&#x27;3.txt&#x27;</span>]<br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>   count_words(filename)<br></code></pre></div></td></tr></table></figure><p>如果你希望失败的时候不提示用户，可以在 except xxxError 后面添加一句pass。  </p><h3 id="1-8-4-存储数据"><a href="#1-8-4-存储数据" class="headerlink" title="1.8.4 存储数据"></a>1.8.4 存储数据</h3><p>模块 json 让你能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据。还可以使用 json 在Python程序之间分享数据。更重要的是，JSON数据格式并非Python专用的，这让你能够将以JSON格式存储的数据与使用其他编程语言的人分享。  </p><h4 id="1-8-4-1-使用-json-dump-和-json-load-保存和读取用户生成的数据"><a href="#1-8-4-1-使用-json-dump-和-json-load-保存和读取用户生成的数据" class="headerlink" title="1.8.4.1 使用 json.dump() 和 json.load() 保存和读取用户生成的数据"></a>1.8.4.1 使用 json.dump() 和 json.load() 保存和读取用户生成的数据</h4><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> json<br><span class="hljs-comment"># 如果以前存储了用户名，就加载它</span><br><span class="hljs-comment"># 否则，就提示用户输入用户名并存储它</span><br>filename = <span class="hljs-string">&#x27;username.json&#x27;</span><br><span class="hljs-keyword">try</span>:<br>   <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f_obj:<br>      username = json.load(f_obj)<br><span class="hljs-keyword">except</span> FileNotFoundError:<br>   username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;What is your name? &quot;</span>)<br>   <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f_obj:<br>      json.dump(username, f_obj)<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="hljs-string">&quot;!&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome back, &quot;</span> + username + <span class="hljs-string">&quot;!&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>先导入模块json，通过方法json.dump() 和 json.load()来保存用户名。<br>上面的程序，如果第一次执行，保存用户名到username，第二次执行则显示欢迎回来。  </p><h4 id="1-8-4-2-重构"><a href="#1-8-4-2-重构" class="headerlink" title="1.8.4.2 重构"></a>1.8.4.2 重构</h4><p>有时候，我们要保证高内聚，低耦合，需要将各个模块代码分为一系列完成具体工作的函数，这样的过程称为重构。<br>下面我们来重构上一节的代码：  </p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> json<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_stored_username</span>():</span><br>   <span class="hljs-string">&quot;&quot;&quot;如果存储了用户名，就获取它&quot;&quot;&quot;</span><br>   filename = <span class="hljs-string">&#x27;username.json&#x27;</span><br>   <span class="hljs-keyword">try</span>:<br>      <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f_obj:<br>         username = json.load(f_obj)<br>   <span class="hljs-keyword">except</span> FileNotFoundError:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>   <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">return</span> username<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_new_username</span>():</span><br>   <span class="hljs-string">&quot;&quot;&quot;提示用户输入用户名&quot;&quot;&quot;</span><br>   username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;What is your name? &quot;</span>)<br>   filename = <span class="hljs-string">&#x27;username.json&#x27;</span><br>   <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f_obj:<br>      json.dump(username, f_obj)<br>   <span class="hljs-keyword">return</span> username<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet_user</span>():</span><br>   <span class="hljs-string">&quot;&quot;&quot;问候用户，并指出其名字&quot;&quot;&quot;</span><br>   username = get_stored_username()<br>   <span class="hljs-keyword">if</span> username:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome back, &quot;</span> + username + <span class="hljs-string">&quot;!&quot;</span>)<br>   <span class="hljs-keyword">else</span>:<br>      username = get_new_username()<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="hljs-string">&quot;!&quot;</span>)<br><br>greet_user()<br></code></pre></div></td></tr></table></figure><p>在这个最终版本中，每个函数都执行单一而清晰的任务。要编写出清晰而易于维护和扩展的代码，划分工作必不可少。  </p><h2 id="1-9-测试代码"><a href="#1-9-测试代码" class="headerlink" title="1.9 测试代码"></a>1.9 测试代码</h2><p>这章中我们学习如何使用Python模块 unittest 中的工具来测试代码。</p><h3 id="1-9-1-测试函数"><a href="#1-9-1-测试函数" class="headerlink" title="1.9.1 测试函数"></a>1.9.1 测试函数</h3><h4 id="1-9-1-1-单元测试和测试用例"><a href="#1-9-1-1-单元测试和测试用例" class="headerlink" title="1.9.1.1 单元测试和测试用例"></a>1.9.1.1 单元测试和测试用例</h4><p>Python标准库中的模块 unittest 提供了代码测试工具。单元测试用于核实函数的某个方面没有问题；测试用例是一组单元测试，这些单元测试一起核实函数在各种情形下的行为都符合要求。良好的测试用例考虑到了函数可能收到的各种输入，包含针对所有这些情形的测试。全覆盖式测试用例包含一整套单元测试，涵盖了各种可能的函数使用方式。对于大型项目，要实现全覆盖可能很难。通常，最初只要针对代码的重要行为编写测试即可，等项目被广泛使用时再考虑全覆盖。  </p><h4 id="1-9-1-2-如何测试"><a href="#1-9-1-2-如何测试" class="headerlink" title="1.9.1.2 如何测试"></a>1.9.1.2 如何测试</h4><p>要为函数编写测试用例，可先导入模块 unittest 以及要测试的函数，再创建一个继承 unittest.TestCase 的类，并编写一系列方法对函数行为的不同方面进行测试。<br>下面是一个只包含一个方法的测试用例，它检查函数 get_formatted_name() 在给定名和姓时能否正确地工作：  </p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment">#文件名name_function.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_formatted_name</span>(<span class="hljs-params">first, last, middle=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;生成整洁的姓名&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> middle:<br>        full_name = first + <span class="hljs-string">&#x27; &#x27;</span> + middle + <span class="hljs-string">&#x27; &#x27;</span> + last<br>    <span class="hljs-keyword">else</span>:<br>        full_name = first + <span class="hljs-string">&#x27; &#x27;</span> + last<br>    <span class="hljs-keyword">return</span> full_name.title()<br></code></pre></div></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">from</span> name_function <span class="hljs-keyword">import</span> get_formatted_name<br><span class="hljs-comment">#文件名test_name_ function.py</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NamesTestCase</span>(<span class="hljs-params">unittest.TestCase</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;测试name_function.py&quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_first_last_name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;能够正确地处理像Janis Joplin这样的姓名吗？&quot;&quot;&quot;</span><br>        formatted_name = get_formatted_name(<span class="hljs-string">&#x27;janis&#x27;</span>, <span class="hljs-string">&#x27;joplin&#x27;</span>)<br>        self.assertEqual(formatted_name, <span class="hljs-string">&#x27;Janis Joplin&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_first_last_middle_name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;能够正确地处理像Wolfgang Amadeus Mozart这样的姓名吗？&quot;&quot;&quot;</span><br>        formatted_name = get_formatted_name(<span class="hljs-string">&#x27;wolfgang&#x27;</span>, <span class="hljs-string">&#x27;mozart&#x27;</span>, <span class="hljs-string">&#x27;amadeus&#x27;</span>)<br>        self.assertEqual(formatted_name, <span class="hljs-string">&#x27;Wolfgang Amadeus Mozart&#x27;</span>)<br><br>unittest.main()<br></code></pre></div></td></tr></table></figure><p>首先，我们导入了模块 unittest 和要测试的函数 get_formatted_ name() 。我们创建了一个名为 NamesTestCase（名字随便） 的类，用于包含一系列针对 get_formatted_name() 的单元测试。这个类必须继承unittest.TestCase 类，这样Python才知道如何运行你编写的测试。<br>我们运行 test_name_function.py 时，所有以 test_ 打头的方法都将自动运行。<br>在这个方法中，我们调用了要测试的函数，并存储了要测试的返回值。<br>最后我们使用了 unittest 类最有用的功能之一：一个断言方法。断言方法用来核实得到的结果是否与期望的结果一致。<br>我们调用 <strong>unittest 的方法 assertEqual()</strong> ，并向它传递 formatted_name 和 ‘Janis Joplin’ 。代码行 <code>self.assertEqual(formatted_name, &#39;Janis Joplin&#39;)</code> 的意思是说：“将 formatted_name 的值同字符串 ‘Janis Joplin’ 进行比较，如果它们相等，就万事大吉，如果它们不相等，跟我说一声！”  </p><h3 id="1-9-2-测试类"><a href="#1-9-2-测试类" class="headerlink" title="1.9.2 测试类"></a>1.9.2 测试类</h3><h4 id="1-9-2-1-各种断言方法"><a href="#1-9-2-1-各种断言方法" class="headerlink" title="1.9.2.1 各种断言方法"></a>1.9.2.1 各种断言方法</h4><p>Python在 unittest.TestCase 类中提供了很多断言方法。如下：  </p><table><thead><tr><th>方 法</th><th>用 途</th></tr></thead><tbody><tr><td>assertEqual(a, b)</td><td>核实 a == b</td></tr><tr><td>assertNotEqual(a, b)</td><td>核实 a != b</td></tr><tr><td>assertTrue(x)</td><td>核实 x 为 True</td></tr><tr><td>assertFalse(x)</td><td>核实 x 为 False</td></tr><tr><td>assertIn( item , list )</td><td>核实 item 在 list 中</td></tr><tr><td>assertNotIn( item , list )</td><td>核实 item 不在 list 中</td></tr></tbody></table><h4 id="1-9-2-2-方法-setUp"><a href="#1-9-2-2-方法-setUp" class="headerlink" title="1.9.2.2 方法 setUp()"></a>1.9.2.2 方法 setUp()</h4><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnonymousSurvey</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;收集匿名调查问卷的答案&quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, question</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;存储一个问题，并为存储答案做准备&quot;&quot;&quot;</span><br>        self.question = question<br>        self.responses = []<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_question</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;显示调查问卷&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(question)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">store_response</span>(<span class="hljs-params">self, new_response</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;存储单份调查答卷&quot;&quot;&quot;</span><br>        self.responses.append(new_response)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_results</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;显示收集到的所有答卷&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Survey results:&quot;</span>)<br>        <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> responses:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;- &#x27;</span> + response)<br></code></pre></div></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">from</span> survey <span class="hljs-keyword">import</span> AnonymousSurvey<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAnonymousSurvey</span>(<span class="hljs-params">unittest.TestCase</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;针对AnonymousSurvey类的测试&quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-comment"># 创建一个调查对象和一组答案，供使用的测试方法使用</span><br>        question = <span class="hljs-string">&quot;What language did you first learn to speak?&quot;</span><br>        self.my_survey = AnonymousSurvey(question)<br>        self.responses = [<span class="hljs-string">&#x27;English&#x27;</span>, <span class="hljs-string">&#x27;Spanish&#x27;</span>, <span class="hljs-string">&#x27;Mandarin&#x27;</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_store_single_response</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;测试单个答案会被妥善地存储&quot;&quot;&quot;</span><br>        self.my_survey.store_response(self.responses[<span class="hljs-number">0</span>])<br>        self.assertIn(self.responses[<span class="hljs-number">0</span>], self.my_survey.responses)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_store_three_responses</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;测试三个答案会被妥善地存储&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> self.responses:<br>            self.my_survey.store_response(response)<br>        <span class="hljs-keyword">for</span> response <span class="hljs-keyword">in</span> self.responses:<br>            self.assertIn(response, self.my_survey.responses)<br><br>unittest.main()<br></code></pre></div></td></tr></table></figure><p>使用 setUp() 来创建一个调查对象和一组答案，供方法 <code>test_store_single_response()</code> 和 <code>test_store_three_responses()</code> 使用。<br>方法 setUp() 做了两件事情：创建一个调查对象（见方法setUp()第4行）；创建一个答案列表（见方法setUp()第5行）。<br>这让两个测试方法都更简单，因为它们都不用创建调查对象和答案。方法 <code>test_store_three_response()</code> 核实 self.responses 中的第一个答案—— self.responses[0] ——被妥善地存储，而方法 <code>test_store_three_response()</code> 核实 self.responses 中的全部三个答案都被妥善地存储。  </p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大话数据结构第九章 排序</title>
    <link href="/2020/02/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC9%E7%AB%A0%20%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/02/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC9%E7%AB%A0%20%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>排序的定义：</strong><br><strong>假设含有n个记录的序列为{$r_1$，$r_2$，…，$r_n$}，其相应的关键字分别为{$k_1$，$k_2$，…，$k_n$}，需确定1，2，……，n的一种排列$p_1$，$p_2$，……，$p_n$，使其相应的关键字满足$k_{p1}$≤$k_{p2}$≤······≤$k_{pn}$（非递减或非递增）关系，即使得序列成为一个按关键字有序的序列{$r_{p1}$，$r_{p2}$，······，$r_{pn}$}，这样的操作就称为排序。</strong></p><span id="more"></span><h2 id="9-1-9-2-排序的基本概念与分类"><a href="#9-1-9-2-排序的基本概念与分类" class="headerlink" title="9.1-9.2 排序的基本概念与分类"></a>9.1-9.2 排序的基本概念与分类</h2><p>我们在排序问题中，通常将数据元素称为记录。显然我们输入的是一个记录集合，输出的也是一个记录集合，所以说，可以将排序看成是线性表的一种操作。</p><p>排序的依据是关键字之间的大小关系，那么，对同一个记录集合，针对不同的关键字进行排序，可以得到不同序列。</p><p>这里关键字k可以是记录r的主关键字，也可以是次关键字，甚至是若干数据项的组合。  </p><h3 id="9-2-1-排序的稳定性"><a href="#9-2-1-排序的稳定性" class="headerlink" title="9.2.1 排序的稳定性"></a>9.2.1 排序的稳定性</h3><p>假设$k_i=k_y(1≤i≤n，1≤j≤n，i≠j)$，且在排序前的序列中$r_i$领先于$r_j$（即$i&lt;j$）。如果排序后$r_i$仍领先于$r_j$，则称所用的排序方法是稳定的；反之，若可能使得排序后的序列中$r_j$领先$r_i$，则称所用的排序方法是不稳定的。</p><h3 id="9-2-2-内排序与外排序"><a href="#9-2-2-内排序与外排序" class="headerlink" title="9.2.2 内排序与外排序"></a>9.2.2 内排序与外排序</h3><p>根据在排序过程中待排序的记录是否全部被放置在内存中，排序分为：内排序和外排序。</p><p><strong>内排序是在排序整个过程中，待排序的所有记录全部被放置在内存中。外排序是由于排序的记录个数太多，不能同时放置在内存，整个排序过程需要在内外存之间多次交换数据才能进行。</strong>我们这里主要就介绍内排序的多种方法。</p><p>对于内排序来说，排序算法的性能主要是受3个方面影响：</p><ol><li><strong>时间性能</strong><br>排序是数据处理中经常执行的一种操作，往往属于系统的核心部分，因此排序算法的时间开销是衡量其好坏的最重要的标志。在内排序中，主要进行两种操作：比较和移动。比较指关键字之间的比较，这是要做排序最起码的操作。移动指记录从一个位置移动到另一个位置，事实上，移动可以通过改变记录的存储方式来予以避免（这个我们在讲解具体的算法时再谈）。总之，高效率的内排序算法应该是具有尽可能少的关键字比较次数和尽可能少的记录移动次数。</li><li><strong>辅助空间</strong><br>评价排序算法的另一个主要标准是执行算法所需要的辅助存储空间。辅助存储空间是除了存放待排序所占用的存储空间之外，执行算法所需要的其他存储空间。</li><li><strong>算法的复杂性</strong><br>注意这里指的是算法本身的复杂度，而不是指算法的时间复杂度。显然算法过于复杂也会影响排序的性能。</li></ol><p>根据排序过程中借助的主要操作，我们把<strong>内排序分为：插入排序、交换排序、选择排序和归并排序。</strong></p><p>本章一共要讲解七种排序的算法，按照算法的复杂度分为两大类，冒泡排序、简单选择排序和直接插入排序属于简单算法，而希尔排序、堆排序、归并排序、快速排序属于改进算法。</p><h3 id="9-2-3-排序用到的结构与函数"><a href="#9-2-3-排序用到的结构与函数" class="headerlink" title="9.2.3 排序用到的结构与函数"></a>9.2.3 排序用到的结构与函数</h3><p>为了讲清楚排序算法的代码，我先提供一个用于排序用的顺序表结构，此结构也将用于之后我们要讲的所有排序算法。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXSIZE 10  <span class="hljs-comment">/* 用于要排序数组个数最大值，可根据需要修改 */</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> r[MAXSIZE + <span class="hljs-number">1</span>];    <span class="hljs-comment">/* 用于存储要排序数组，r[0]用作哨兵或临时变量 */</span><br>    <span class="hljs-keyword">int</span> length;            <span class="hljs-comment">/* 用于记录顺序表的长度 */</span><br>&#125;SqList;<br></code></pre></div></td></tr></table></figure><p>另外，由于排序最最常用到的操作是数组两元素的交换，我们将它写成函数，在之后的讲解中会大量的用到。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 交换L中数组r的下标为i和j的值 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> temp = L-&gt;r[i];<br>    L-&gt;r[i] = L-&gt;r[j];<br>    L-&gt;r[j] = temp;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="9-3-冒泡排序"><a href="#9-3-冒泡排序" class="headerlink" title="9.3 冒泡排序"></a>9.3 冒泡排序</h2><h3 id="9-3-1-最简单排序实现"><a href="#9-3-1-最简单排序实现" class="headerlink" title="9.3.1 最简单排序实现"></a>9.3.1 最简单排序实现</h3><p><strong>冒泡排序（Bubble Sort）一种交换排序，它的基本思想是：两两比较相邻记录的关键字，如果反序则交换，直到没有反序的记录为止。</strong>冒泡的实现在细节上可以有很多种变化，我们将分别就3种不同的冒泡实现代码，来讲解冒泡排序的思想。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作交换排序（冒泡排序初级版） */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BubbleSort0</span><span class="hljs-params">(SqList *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; L-&gt;length; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt;= L-&gt;length; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (L-&gt;r[i] &gt; L-&gt;r[j])<br>            &#123;<br>                swap(L, i, j);<span class="hljs-comment">/* 交换L-&gt;r[i]与L-&gt;r[j]的值 */</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-3-2-冒泡排序算法"><a href="#9-3-2-冒泡排序算法" class="headerlink" title="9.3.2 冒泡排序算法"></a>9.3.2 冒泡排序算法</h3><p>我们来看看正宗的冒泡算法。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作冒泡排序 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BubbleSort</span><span class="hljs-params">(SqList *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; L-&gt;length; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = L-&gt;length - <span class="hljs-number">1</span>; j &gt;= i; j--)  <span class="hljs-comment">/* 注意j是从后往前循环 */</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (L-&gt;r[j] &gt; L-&gt;r[j + <span class="hljs-number">1</span>]) <span class="hljs-comment">/* 若前者大于后者（注意这里与上一算法的差异）*/</span><br>            &#123;<br>                swap(L, j, j + <span class="hljs-number">1</span>);<span class="hljs-comment">/* 交换L-&gt;r[j]与L-&gt;r[j+1]的值 */</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-3-3-冒泡排序优化"><a href="#9-3-3-冒泡排序优化" class="headerlink" title="9.3.3 冒泡排序优化"></a>9.3.3 冒泡排序优化</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作改进冒泡算法 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BubbleSort2</span><span class="hljs-params">(SqList *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    Status flag = TRUE;            <span class="hljs-comment">/* flag用来作为标记 */</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; L-&gt;length &amp;&amp; flag; i++) <span class="hljs-comment">/* 若flag为true说明有过数据交换，否则停止循环 */</span><br>    &#123;<br>        flag = FALSE;                <span class="hljs-comment">/* 初始为False */</span><br>        <span class="hljs-keyword">for</span> (j = L-&gt;length - <span class="hljs-number">1</span>; j &gt;= i; j--)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (L-&gt;r[j] &gt; L-&gt;r[j + <span class="hljs-number">1</span>])<br>            &#123;<br>                swap(L, j, j + <span class="hljs-number">1</span>);    <span class="hljs-comment">/* 交换L-&gt;r[j]与L-&gt;r[j+1]的值 */</span><br>                flag = TRUE;        <span class="hljs-comment">/* 如果有数据交换，则flag为true */</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码改动的关键就是在i变量的for循环中，增加了对flag是否为true的判断。</p><p>经过这样的改进，冒泡排序在性能上就有了一些提升，可以避免因已经有序的情况下的无意义循环判断。</p><h3 id="9-3-4-冒泡排序复杂度分析"><a href="#9-3-4-冒泡排序复杂度分析" class="headerlink" title="9.3.4 冒泡排序复杂度分析"></a>9.3.4 冒泡排序复杂度分析</h3><p>分析一下它的时间复杂度。当最好的情况，也就是要排序的表本身就是有序的，那么我们比较次数，根据最后改进的代码，可以推断出就是n-1次的比较，没有数据交换，时间复杂度为 O（n）。当最坏的情况，即待排序表是逆序的情况，此时需要比较$\sum_{i=2}^n(i-1)=1+2+3+…+（n-1）=\frac{n(n-1)}2$次，并作等数量级的记录移动。因此，时间复杂度为O（n²）。</p><h2 id="9-4-简单选择排序"><a href="#9-4-简单选择排序" class="headerlink" title="9.4 简单选择排序"></a>9.4 简单选择排序</h2><p>冒泡排序的思想就是不断地在交换，通过交换完成最终的排序，这和做股票短线频繁操作的人是类似的。我们可不可以像只有在时机非常明确到来时才出手的股票高手一样，也就是在排序时找到合适的关键字再做交换，并且只移动一次就完成相应关键字的排序定位工作呢？这就是选择排序法的初步思想。</p><p>选择排序的基本思想是每一趟在<code>n-i+1（i=1,2,…,n-1）</code>个记录中选取关键字最小的记录作为有序序列的第i个记录。我们这里先介绍的是简单选择排序法。</p><h3 id="9-4-1-简单选择排序算法"><a href="#9-4-1-简单选择排序算法" class="headerlink" title="9.4.1 简单选择排序算法"></a>9.4.1 简单选择排序算法</h3><p><strong>简单选择排序法（Simple Selection Sort）就是通过n-i次关键字间的比较，从n-i+1个记录中选出关键字最小的记录，并和第i（1≤i≤n）个记录交换之。</strong></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作简单选择排序 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(SqList *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j, min;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; L-&gt;length; i++)<br>    &#123;<br>        min = i;                        <span class="hljs-comment">/* 将当前下标定义为最小值下标 */</span><br>        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt;= L-&gt;length; j++)<span class="hljs-comment">/* 循环之后的数据 */</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (L-&gt;r[min] &gt; L-&gt;r[j])    <span class="hljs-comment">/* 如果有小于当前最小值的关键字 */</span><br>                min = j;                <span class="hljs-comment">/* 将此关键字的下标赋值给min */</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (i != min)                        <span class="hljs-comment">/* 若min不等于i，说明找到最小值，交换 */</span><br>            swap(L, i, min);                <span class="hljs-comment">/* 交换L-&gt;r[i]与L-&gt;r[min]的值 */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>简单选择排序会先找到最小值的下标，然后交换。接着迭代循环。</p><h3 id="9-4-2-简单选择排序复杂度分析"><a href="#9-4-2-简单选择排序复杂度分析" class="headerlink" title="9.4.2 简单选择排序复杂度分析"></a>9.4.2 简单选择排序复杂度分析</h3><p>从简单选择排序的过程来看，它最大的特点就是交换移动数据次数相当少，这样也就节约了相应的时间。分析它的时间复杂度发现，无论最好最差的情况，其比较次数都是一样的多，第i趟排序需要进行n-i次关键字的比较，此时需要比较$\sum_{i=1}^{n-1}(n-i)=n-1+n-2+…+1=\frac{n(n-1)}{2}$次。而对于交换次数而言，当最好的时候，交换为0次，最差的时候，也就初始降序时，交换次数为n-1次，基于最终的排序时间是比较与交换的次数总和，因此，总的时间复杂度依然为O（n²）。</p><p>应该说，尽管与冒泡排序同为O（n²），但简单选择排序的性能上还是要略优于冒泡排序。</p><h2 id="9-5-直接插入排序"><a href="#9-5-直接插入排序" class="headerlink" title="9.5 直接插入排序"></a>9.5 直接插入排序</h2><h3 id="9-5-1-直接插入排序算法"><a href="#9-5-1-直接插入排序算法" class="headerlink" title="9.5.1 直接插入排序算法"></a>9.5.1 直接插入排序算法</h3><p><strong>直接插入排序（Straight Insertion Sort）的基本操作是将一个记录插入到已经排好序的有序表中，从而得到一个新的、记录数增1的有序表。</strong></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作直接插入排序 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertSort</span><span class="hljs-params">(SqList *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= L-&gt;length; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (L-&gt;r[i] &lt; L-&gt;r[i - <span class="hljs-number">1</span>]) <span class="hljs-comment">/* 需将L-&gt;r[i]插入有序子表 */</span><br>        &#123;<br>            L-&gt;r[<span class="hljs-number">0</span>] = L-&gt;r[i]; <span class="hljs-comment">/* L-&gt;r[0]一开始无数值，以待设置哨兵 */</span><br>            <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; L-&gt;r[j] &gt; L-&gt;r[<span class="hljs-number">0</span>]; j--)<br>                L-&gt;r[j + <span class="hljs-number">1</span>] = L-&gt;r[j]; <span class="hljs-comment">/* 记录后移 */</span><br>            L-&gt;r[j + <span class="hljs-number">1</span>] = L-&gt;r[<span class="hljs-number">0</span>]; <span class="hljs-comment">/* 插入到正确位置 */</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-5-2-直接插入排序复杂度分析"><a href="#9-5-2-直接插入排序复杂度分析" class="headerlink" title="9.5.2 直接插入排序复杂度分析"></a>9.5.2 直接插入排序复杂度分析</h3><p>我们来分析一下这个算法，从空间上来看，它只需要一个记录的辅助空间，因此关键是看它的时间复杂度。</p><p>当最好的情况，也就是要排序的表本身就是有序的，比如数列是{2，3，4，5，6}，那么我们比较次数，其实就是代码第7行每个L.r[i]与L.r[i-1]的比较，共比较了$n-1(\sum_{i=2}^{n}1)$次，由于每次都是L.r[i]&gt;L.r[i-1]，因此没有移动的记录，时间复杂度为O(n)。</p><p>当最坏的情况，即待排序表是逆序的情况，比如{6，5，4，3，2}，此时需要比较$\sum_{i=2}^{n}(i)=2+3+…+n=\frac{(n+2)(n-1)}{2}$次，而记录的移动次数也达到最大值$\sum_{i=2}^{n}(i+1)=\frac{(n+4)(n-1)}{2}$次。</p><p>如果排序记录是随机的，那么根据概率相同的原则，平均比较和移动次数约为$\frac{n^{2}}{4}$次。因此，我们得出直接插入排序法的时间复杂度为O(n²)。从这里也看出，同样的O(n²)时间复杂度，直接插入排序法比冒泡和简单选择排序的性能要好一些。</p><h2 id="9-6-希尔排序"><a href="#9-6-希尔排序" class="headerlink" title="9.6 希尔排序"></a>9.6 希尔排序</h2><h3 id="9-6-1-希尔排序原理"><a href="#9-6-1-希尔排序原理" class="headerlink" title="9.6.1 希尔排序原理"></a>9.6.1 希尔排序原理</h3><p>因为直接插入排序在排序表本身有序的情况下，时间复杂度为O(n)。</p><p>如果让待排序的记录个数较少呢，我们就可以用直接插入排序很快完成排序工作。很容易想到的就是将原本有大量记录数的记录进行分组。分割成若干个子序列，此时每个子序列待排序的记录个数就比较少了，然后在这些子序列内分别进行直接插入排序，当整个序列都基本有序时，注意只是基本有序时，再对全体记录进行一次直接插入排序。</p><p><strong>所谓的基本有序，就是小的关键字基本在前面，大的基本在后面，不大不小的基本在中间，像{2，1，3，6，4，7，5，8，9}这样可以称为基本有序了。</strong>但像{1，5，9，3，7.8，2，4，6}这样的9在第三位，2在倒数第三位就谈不上基本有序。</p><p>因此，我们需要采取跳跃分割的策略：<strong>将相距某个“增量”的记录组成一个子序列，这样才能保证在子序列内分别进行直接插入排序后得到的结果是基本有序而不是局部有序。</strong></p><h3 id="9-6-2-希尔排序算法"><a href="#9-6-2-希尔排序算法" class="headerlink" title="9.6.2 希尔排序算法"></a>9.6.2 希尔排序算法</h3><p>希尔排序算法代码如下。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作希尔排序 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShellSort</span><span class="hljs-params">(SqList *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j, k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> increment = L-&gt;length;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        increment = increment / <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<span class="hljs-comment">/* 增量序列 */</span><br>        <span class="hljs-keyword">for</span> (i = increment + <span class="hljs-number">1</span>; i &lt;= L-&gt;length; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (L-&gt;r[i] &lt; L-&gt;r[i - increment])<br>            &#123;<span class="hljs-comment">/*  需将L-&gt;r[i]插入有序增量子表 */</span><br>                L-&gt;r[<span class="hljs-number">0</span>] = L-&gt;r[i]; <span class="hljs-comment">/*  暂存在L-&gt;r[0] */</span><br>                <span class="hljs-keyword">for</span> (j = i - increment; j &gt; <span class="hljs-number">0</span> &amp;&amp; L-&gt;r[<span class="hljs-number">0</span>] &lt; L-&gt;r[j]; j -= increment)<br>                    L-&gt;r[j + increment] = L-&gt;r[j]; <span class="hljs-comment">/*  记录后移，查找插入位置 */</span><br>                L-&gt;r[j + increment] = L-&gt;r[<span class="hljs-number">0</span>]; <span class="hljs-comment">/*  插入 */</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (increment &gt; <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-6-3-希尔排序复杂度分析"><a href="#9-6-3-希尔排序复杂度分析" class="headerlink" title="9.6.3 希尔排序复杂度分析"></a>9.6.3 希尔排序复杂度分析</h3><p>通过这段代码的剖析，相信大家有些明白，希尔排序的关键并不是随便分组后各自排序，而是将相隔某个“增量”的记录组成一个子序列，实现跳跃式的移动，使得排序的效率提高。</p><p>这里“增量”的选取就非常关键了。我们在代码中第7行，是用increment=increment/3+1；的方式选取增量的，可究竟应该选取什么样的增量才是最好，目前还是一个数学难题，迄今为止还没有人找到一种最好的增量序列。不过大量的研究表明，当增量序列为$dlta[k]=2^{t-k+1}-1(0\leq k\leq t\leq [\log_{2}(n+1)] )$时，可以获得不错的效率，其时间复杂度为$O(n^{3/2})$，要好于直接排序的O(n²)。需要注意的是，增量序列的最后一个增量值必须等于1才行。另外由于记录是跳跃式的移动，希尔排序并不是一种稳定的排序算法。</p><p>不管怎么说，希尔排序算法的发明，使得我们终于突破了慢速排序的时代（超越了时间复杂度为O(n²)），之后，相应的更为高效的排序算法也就相继出现了。</p><h2 id="9-7-堆排序"><a href="#9-7-堆排序" class="headerlink" title="9.7 堆排序"></a>9.7 堆排序</h2><p><strong>堆是具有下列性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆（例如图9-7-2左图所示）；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆</strong>（例如图9-7-2右图所示）。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-7-2.JPG" alt="9-7-2"></p><p>这里需要注意从堆的定义可知，根结点一定是堆中所有结点最大（小）者。较大（小）的结点靠近根结点（但也不绝对，比如右图小顶堆中60、40均小于70，但它们并没有70靠近根结点）。</p><p>如果按照层序遍历的方式给结点从1开始编号，则结点之间满足如下关系：<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-7-2.5.JPG" alt="9-7-2.5"></p><p>这里为什么i要小于等于[n/2]呢？相信大家可能都忘记了二叉树的性质5，其实忘记也不奇怪，这个性质在我们讲完之后，就再也没有提到过它。可以说，这个性质仿佛就是在为堆准备的。性质5的第一条就说一棵完全二叉树，如果i=1，则结点i是二叉树的根，无双亲；如果i&gt;1，则其双亲是结点[i/2]。那么对于有n个结点的二叉树而言，它的i值自然就是小于等于[n/2]了。性质5的第二、三条，也是在说明下标i与2i和2i+1的双亲子女关系。如果完全忘记的同学不妨去复习一下。</p><p>如果将图9-7-2的大顶堆和小顶堆用层序遍历存入数组，则一定满足上面的关系表达，如图9-7-3所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-7-3.JPG" alt="9-7-3"></p><h3 id="9-7-1-堆排序算法"><a href="#9-7-1-堆排序算法" class="headerlink" title="9.7.1 堆排序算法"></a>9.7.1 堆排序算法</h3><p><strong>堆排序（Heap Sort）</strong>就是利用堆（假设利用大顶堆）进行排序的方法。它的基本思想是，<strong>将待排序的序列构造成一个大顶堆。此时，整个序列的最大值就是堆顶的根结点。将它移走（其实就是将其与堆数组的末尾元素交换，此时末尾元素就是最大值），然后将剩余的n-1个序列重新构造成一个堆，这样就会得到n个元素中的次小值。如此反复执行，便能得到一个有序序列了。</strong></p><p>相信大家有些明白堆排序的基本思想了，不过要实现它还需要解决两个问题：</p><ol><li>如何由一个无序序列构建成一个堆？</li><li>如果在输出堆顶元素后，调整剩余元素成为一个新的堆？</li></ol><p>要解释清楚它们，让我们来看代码。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*  对顺序表L进行堆排序 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">(SqList *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = L-&gt;length / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i--) <span class="hljs-comment">/*  把L中的r构建成一个大根堆 */</span><br>        HeapAdjust(L, i, L-&gt;length);<br><br>    <span class="hljs-keyword">for</span> (i = L-&gt;length; i &gt; <span class="hljs-number">1</span>; i--)<br>    &#123;<br>        swap(L, <span class="hljs-number">1</span>, i); <span class="hljs-comment">/* 将堆顶记录和当前未经排序子序列的最后一个记录交换 */</span><br>        HeapAdjust(L, <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>); <span class="hljs-comment">/*  将L-&gt;r[1..i-1]重新调整为大根堆 */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>从代码中也可以看出，整个排序过程分为两个for循环。第一个循环要完成的就是将现在的待排序序列构建成一个大顶堆。第二个循环要完成的就是逐步将每个最大值的根结点与末尾元素交换，并且再调整其成为大顶堆。</p><p>现在我们来看关键的 HeapAdjust（堆调整）函数是如何实现的。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 已知L-&gt;r[s..m]中记录的关键字除L-&gt;r[s]之外均满足堆的定义， */</span><br><span class="hljs-comment">/* 本函数调整L-&gt;r[s]的关键字,使L-&gt;r[s..m]成为一个大顶堆 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HeapAdjust</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> temp, j;<br>    temp = L-&gt;r[s];<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">2</span> * s; j &lt;= m; j *= <span class="hljs-number">2</span>) <span class="hljs-comment">/* 沿关键字较大的孩子结点向下筛选 */</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (j &lt; m &amp;&amp; L-&gt;r[j] &lt; L-&gt;r[j + <span class="hljs-number">1</span>])<br>            ++j; <span class="hljs-comment">/* j为关键字中较大的记录的下标 */</span><br>        <span class="hljs-keyword">if</span> (temp &gt;= L-&gt;r[j])<br>            <span class="hljs-keyword">break</span>; <span class="hljs-comment">/* rc应插入在位置s上 */</span><br>        L-&gt;r[s] = L-&gt;r[j];<br>        s = j;<br>    &#125;<br>    L-&gt;r[s] = temp; <span class="hljs-comment">/* 插入 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>HeapAdjust函数的作用其实就是构建初始堆。初始堆的构建如下：假设有n个结点，依次检查（n/2）到1的所有结点。假如序号为n/2的结点不是堆，则调整位置，将较大的元素调整到根结点（保证根结点比左右孩子都大）；假如n/2的结点已经是堆，则考虑下面序号为n/2-1的结点…直到最后序号为1的结点。此时，序号为1的结点就是最大的数了。</p><h3 id="9-7-2-堆排序复杂度分析"><a href="#9-7-2-堆排序复杂度分析" class="headerlink" title="9.7.2 堆排序复杂度分析"></a>9.7.2 堆排序复杂度分析</h3><p>堆排序的效率到底有多高呢？我们来分析一下。</p><p>它的运行时间主要是消耗在初始构建堆和在重建堆时的反复筛选上。</p><p>在构建堆的过程中，因为我们是完全二叉树从最下层最右边的非终端结点开始构建，将它与其孩子进行比较和若有必要的互换，对于每个非终端结点来说，其实最多进行两次比较和互换操作，因此整个构建堆的时间复杂度为O（n）。</p><p>在正式排序时，第i次取堆顶记录重建堆需要用O(㏒i)的时间（完全二叉树的某个结点到根结点的距离为$[\log_{2}i]+1$，并且需要取n-1次堆顶记录，因此，重建堆的时间复杂度为O(n㏒n)。</p><p>所以总体来说，堆排序的时间复杂度为O(n㏒n)。由于堆排序对原始记录的排序状态并不敏感，因此它无论是最好、最坏和平均时间复杂度均为O(n㏒n)。这在性能上显然要远远好过于冒泡、简单选择、直接插入的O（n²）的时间复杂度了。</p><p>空间复杂度上，它只有一个用来交换的暂存单元，也非常的不错。不过由于记录的比较与交换是跳跃式进行，因此堆排序也是一种不稳定的排序方法。</p><p>另外，由于初始构建堆所需的比较次数较多，因此，它并不适合待排序序列个数较少的情况。</p><h2 id="9-8-归并排序"><a href="#9-8-归并排序" class="headerlink" title="9.8 归并排序"></a>9.8 归并排序</h2><h3 id="9-8-1-归并排序算法"><a href="#9-8-1-归并排序算法" class="headerlink" title="9.8.1 归并排序算法"></a>9.8.1 归并排序算法</h3><p>归并”一词的中文含义就是合并、并入的意思，而在数据结构中的定义是将两个或两个以上的有序表组合成一个新的有序表。</p><p><strong>归并排序（Merging Sort）</strong>就是利用归并的思想实现的排序方法。它的原理是<strong>假设初始序列含有n个记录，则可以看成是n个有序的子序列，每个子序列的长度为1，然后两两归并，得到[n/2]（[x]表示不小于x的最小整数）个长度为2或1的有序子序列；再两两归并，……，如此重复，直至得到一个长度为n的有序序列为止，这种排序方法称为2路归并排序。</strong></p><p>好了，有了对归并排序的初步认识后，我们来看代码。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作归并排序 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">(SqList *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    MSort(L-&gt;r, L-&gt;r, <span class="hljs-number">1</span>, L-&gt;length);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>一句代码，别奇怪，它只是调用了另一个函数而已。为了与前面的排序算法统一，我们用了同样的参数定义SqList*L，由于我们要讲解的归并排序实现需要用到递归调用，因此我们外封装了一个函数。假设现在要对数组{50，10，90，30，70，40，80，60，20}进行排序，L.length=9，我现来看看MSort的实现。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 递归法 */</span><br><span class="hljs-comment">/* 将SR[s..t]归并排序为TR1[s..t] */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> SR[], <span class="hljs-keyword">int</span> TR1[], <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> m;<br>    <span class="hljs-keyword">int</span> TR2[MAXSIZE + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (s == t)<br>        TR1[s] = SR[s];<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        m = (s + t) / <span class="hljs-number">2</span>;                <span class="hljs-comment">/* 将SR[s..t]平分为SR[s..m]和SR[m+1..t] */</span><br>        MSort(SR, TR2, s, m);        <span class="hljs-comment">/* 递归地将SR[s..m]归并为有序的TR2[s..m] */</span><br>        MSort(SR, TR2, m + <span class="hljs-number">1</span>, t);    <span class="hljs-comment">/* 递归地将SR[m+1..t]归并为有序的TR2[m+1..t] */</span><br>        Merge(TR2, TR1, s, m, t);    <span class="hljs-comment">/* 将TR2[s..m]和TR2[m+1..t]归并到TR1[s..t] */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以说，如果对递归函数的运行方式理解比较透的话，MSort 函数还是很好理解的。我们来看看整个数据变换示意图，如图9-8-6所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-8-6.JPG" alt="9-8-6"></p><p>现在我们来看看Merge函数的代码是如何实现的。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 将有序的SR[i..m]和SR[m+1..n]归并为有序的TR[i..n] */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> SR[], <span class="hljs-keyword">int</span> TR[], <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> j, k, l;<br>    <span class="hljs-keyword">for</span> (j = m + <span class="hljs-number">1</span>, k = i; i &lt;= m &amp;&amp; j &lt;= n; k++)    <span class="hljs-comment">/* 将SR中记录由小到大地并入TR */</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (SR[i] &lt; SR[j])<br>            TR[k] = SR[i++];<br>        <span class="hljs-keyword">else</span><br>            TR[k] = SR[j++];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i &lt;= m)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (l = <span class="hljs-number">0</span>; l &lt;= m - i; l++)<br>            TR[k + l] = SR[i + l];        <span class="hljs-comment">/* 将剩余的SR[i..m]复制到TR */</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (j &lt;= n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (l = <span class="hljs-number">0</span>; l &lt;= n - j; l++)<br>            TR[k + l] = SR[j + l];        <span class="hljs-comment">/* 将剩余的SR[j..n]复制到TR */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-8-7.JPG" alt="9-8-7"><br>如图9-8-7，函数Merge的作用其实就是将SR数组的下标1和6比较，较小的归并到TR数组；然后SR的6和2比较，较小的归并到TR；然后SR的2和7比较，较小的归并到TR；…；最后SR的5和9比较，归并到TR，大功告成。</p><p>就这样，我们的归并排序就算是完成了一次排序工作，怎么样，和堆排序比，是不是要简单一些呢？</p><h3 id="9-8-2-归并排序复杂度分析"><a href="#9-8-2-归并排序复杂度分析" class="headerlink" title="9.8.2 归并排序复杂度分析"></a>9.8.2 归并排序复杂度分析</h3><p>我们来分析一下归并排序的时间复杂度，一趟归并需要将SR[1]~SR[n]中相邻的长度为h的有序序列进行两两归并。并将结果放到TR1[1]~TR1[n]中，这需要将待排序序列中的所有记录扫描一遍，因此耗费O（n）时间，而由完全二叉树的深度可知，整个归并排序需要进行$[\log_{2}n]$次，因此，总的时间复杂度为$O（n㏒n）$，而且这是归并排序算法中最好、最坏、平均的时间性能。</p><p>由于归并排序在归并过程中需要与原始记录序列同样数量的存储空间存放归并结果以及递归时深度为$\log_{2}n$的栈空间，因此空间复杂度为$O（n+㏒n）$。</p><p>另外，对代码进行仔细研究，发现Merge函数中有<code>if(SR[i]&lt;SR[j])</code>语句，这就说明它需要两两比较，不存在跳跃，因此归并排序是一种稳定的排序算法。也就是说，归并排序是一种比较占用内存，但却效率高且稳定的算法。</p><h3 id="9-8-3-非递归实现归并排序"><a href="#9-8-3-非递归实现归并排序" class="headerlink" title="9.8.3 非递归实现归并排序"></a>9.8.3 非递归实现归并排序</h3><p>我们常说，“没有最好，只有更好。”归并排序大量引用了递归，尽管在代码上比较清晰，容易理解，但这会造成时间和空间上的性能损耗。我们排序追求的就是效率，有没有可能将递归转化成迭代呢？结论当然是可以的，而且改动之后，性能上进一步提高了，来看代码。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作归并非递归排序 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergeSort2</span><span class="hljs-params">(SqList *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span>* TR = (<span class="hljs-keyword">int</span>*)<span class="hljs-built_in">malloc</span>(L-&gt;length * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<span class="hljs-comment">/* 申请额外空间 */</span><br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k &lt; L-&gt;length)<br>    &#123;<br>        MergePass(L-&gt;r, TR, k, L-&gt;length);<br>        k = <span class="hljs-number">2</span> * k;<span class="hljs-comment">/* 子序列长度加倍 */</span><br>        MergePass(TR, L-&gt;r, k, L-&gt;length);<br>        k = <span class="hljs-number">2</span> * k;<span class="hljs-comment">/* 子序列长度加倍 */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>从代码中，我们能够感受到，非递归的迭代做法更加直截了当，从最小的序列开始归并直至完成。不需要像归并的递归算法一样，需要先拆分递归，再归并退出递归。</p><p>现在我们来看MergePass代码是如何实现的。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 非递归法 */</span><br><span class="hljs-comment">/* 将SR[]中相邻长度为s的子序列两两归并到TR[] */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergePass</span><span class="hljs-params">(<span class="hljs-keyword">int</span> SR[], <span class="hljs-keyword">int</span> TR[], <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> j;<br>    <span class="hljs-keyword">while</span> (i &lt;= n - <span class="hljs-number">2</span> * s + <span class="hljs-number">1</span>)<br>    &#123;<span class="hljs-comment">/* 两两归并 */</span><br>        Merge(SR, TR, i, i + s - <span class="hljs-number">1</span>, i + <span class="hljs-number">2</span> * s - <span class="hljs-number">1</span>);<br>        i = i + <span class="hljs-number">2</span> * s;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i &lt; n - s + <span class="hljs-number">1</span>) <span class="hljs-comment">/* 归并最后两个序列 */</span><br>        Merge(SR, TR, i, i + s - <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">/* 若最后只剩下单个子序列 */</span><br>        <span class="hljs-keyword">for</span> (j = i; j &lt;= n; j++)<br>            TR[j] = SR[j];<br>&#125;<br></code></pre></div></td></tr></table></figure><p>非递归的迭代方法，避免了递归时深度为$\log_{2}n$的栈空间，空间只是用到申请归并临时用的TR数组，因此空间复杂度为O（n），并且避免递归也在时间性能上有一定的提升，<strong>应该说，使用归并排序时，尽量考虑用非递归方法。</strong></p><h2 id="9-9-快速排序"><a href="#9-9-快速排序" class="headerlink" title="9.9 快速排序"></a>9.9 快速排序</h2><p>快速排序算法最早由图灵奖获得者Tony Hoare设计出来的，他在形式化方法理论以及ALGOL60编程语言的发明中都有卓越的贡献，是上世纪最伟大的计算机科学家之一。而这快速排序算法只是他众多贡献中的一个小发明而已。</p><p>更牛的是，我们现在要学习的这个快速排序算法，被列为20世纪十大算法之一。</p><p>希尔排序相当于直接插入排序的升级，它们同属于插入排序类，堆排序相当于简单选择排序的升级，它们同属于选择排序类。而快速排序其实就是我们前面认为最慢的冒泡排序的升级，它们都属于交换排序类。即它也是通过不断比较和移动交换来实现排序的，只不过它的实现，增大了记录的比较和移动的距离，将关键字较大的记录从前面直接移动到后面，关键字较小的记录从后面直接移动到前面，从而减少了总的比较次数和移动交换次数。</p><h3 id="9-9-1-快速排序算法"><a href="#9-9-1-快速排序算法" class="headerlink" title="9.9.1 快速排序算法"></a>9.9.1 快速排序算法</h3><p><strong>快速排序（Quick Sort）的基本思想是：通过一趟排序将待排记录分割成独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序的目的。</strong></p><p>从字面上感觉不出它的好处来。假设现在要对数组{50，10，90，30，70，40，80，60，20}进行排序。我们通过代码的讲解来学习快速排序的精妙。我们来看代码。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L作快速排序 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(SqList *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    QSort(L, <span class="hljs-number">1</span>, L-&gt;length);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>又是一句代码，和归并排序一样，由于需要递归调用，因此我们外封装了一个函数。现在我们来看QSort的实现。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 对顺序表L中的子序列L-&gt;r[low..high]作快速排序 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QSort</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> pivot;<br>    <span class="hljs-keyword">if</span> (low &lt; high)<br>    &#123;<br>        pivot = Partition(L, low, high); <span class="hljs-comment">/*  将L-&gt;r[low..high]一分为二，算出枢轴值pivot */</span><br>        QSort(L, low, pivot - <span class="hljs-number">1</span>);        <span class="hljs-comment">/*  对低子表递归排序 */</span><br>        QSort(L, pivot + <span class="hljs-number">1</span>, high);        <span class="hljs-comment">/*  对高子表递归排序 */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>从这里，你应该能理解前面代码<code>“QSort（L，1，L-&gt;length）；”</code>中1和L-&gt;length代码的意思了，它就是当前待排序的序列最小下标值low和最大下标值high。</p><p>这一段代码的核心是<code>“pivot=Partition（L，low,high）；”</code>在执行它之前，L.r的数组值为{50，10，90，30，70，40，80，60，20}。<strong>Partition函数要做的，就是先选取当中的一个关键字</strong>，比如选择第一个关键字50，然后<strong>想尽办法将它放到一个位置，使得它左边的值都比它小，右边的值比它大，我们将这样的关键字称为枢轴（pivot）。</strong></p><p>在经过Partition（L，1，9）的执行之后，数组变成{20，10，40，30，50,70，80，60，90}，并返回值5给pivot，数字5表明50放置在数组下标为5的位置。此时，计算机把原来的数组变成了两个位于50左和右小数组{20，10，40，30}和{70，80，60，90}，而后的递归调用<code>“QSort（L，1，5-1）；&quot;</code>和<code>“QSort（L，5+1，9）；&quot;</code>语句，其实就是在对{20，10，40，30}和{70，80，60，90}分别进行同样的Partition操作，直到顺序全部正确为止。</p><p>到了这里，应该说理解起来还不算困难。下面我们就来看看快速排序最关键的Partition 函数实现。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 交换顺序表L中子表的记录，使枢轴记录到位，并返回其所在位置 */</span><br><span class="hljs-comment">/* 此时在它之前(后)的记录均不大(小)于它。 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Partition</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> pivotkey;<br><br>    pivotkey = L-&gt;r[low]; <span class="hljs-comment">/* 用子表的第一个记录作枢轴记录 */</span><br>    <span class="hljs-keyword">while</span> (low &lt; high) <span class="hljs-comment">/*  从表的两端交替地向中间扫描 */</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> (low &lt; high&amp;&amp;L-&gt;r[high] &gt;= pivotkey)<br>            high--;<br>        swap(L, low, high);<span class="hljs-comment">/* 将比枢轴记录小的记录交换到低端 */</span><br>        <span class="hljs-keyword">while</span> (low &lt; high&amp;&amp;L-&gt;r[low] &lt;= pivotkey)<br>            low++;<br>        swap(L, low, high);<span class="hljs-comment">/* 将比枢轴记录大的记录交换到高端 */</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> low; <span class="hljs-comment">/* 返回枢轴所在位置 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>Partition函数，其实就是将选取的pivotkey不断交换，将比它小的换到它的左边，比它大的换到它的右边，它也在交换中不断更改自己的位置，直到完全满足这个要求为止。</p><h3 id="9-9-2-快速排序复杂度分析"><a href="#9-9-2-快速排序复杂度分析" class="headerlink" title="9.9.2 快速排序复杂度分析"></a>9.9.2 快速排序复杂度分析</h3><p>我们来分析一下快速排序法的性能。快速排序的时间性能取决于快速排序递归的深度，可以用递归树来描述递归算法的执行情况。如果是{50，10，90，30，70，40，80，60，20}在快速排序过程中的递归过程。由于我们的第一个关键字是50，正好是待排序的序列的中间值，因此递归树是平衡的，此时性能也比较好。</p><p>在最优情况下，Partition每次都划分得很均匀，如果排序n个关键字，其递归树的深度就为$[\log_{2}n]+1$（[x]表示不大于x的最大整数），即仅需递归$\log_{2}n$次，需要时间为T（n）的话，第一次Partiation应该是需要对整个数组扫描一遍，做n次比较。然后，获得的枢轴将数组一分为二，那么各自还需要T（n/2）的时间（注意是最好情况，所以平分两半）。于是不断地划分下去，我们就有了下面的不等式推断。<br>$T(n)\leq 2T(n/2)+n , T(1)=0$<br>$T(n)\leq 2(2T(n/4)+n/2) +n=4T(n/4)+2n$<br>$T(n)\leq 4(2T(n/8)+n/4) +2n=8T(n/8)+3n$<br>$……$<br>$T(n)\leq nT(1)+(\log_{2}n)×n=O(n\log n)$</p><p>也就是说，在最优的情况下，快速排序算法的时间复杂度为$O(n\log n)$。</p><p>在最坏的情况下，待排序的序列为正序或者逆序，每次划分只得到一个比上一次划分少一个记录的子序列，注意另一个为空。如果递归树画出来，它就是一棵斜树。此时需要执行n-1次递归调用，且第i次划分需要经过n-i次关键字的比较才能找到第i个记录，也就是枢轴的位置，因此比较次数为$\sum_{i=1}^{n-1}(n-i)=n-1+n-2+…+1=\frac{n(n-1)}{2}$，最终其时间复杂度为O(n²)。</p><p>平均的情况，设枢轴的关键字应该在第k的位置（1≤k≤n），那么：<br>$$T(n)=\frac{1}{n}\sum_{k=1}^{n}（T(k-1)+T(n-k)）+n=\frac{2}{n}\sum_{k=1}^{n}T(k)+n$$</p><p>由数学归纳法可证明，其数量级为$O(n\log n)$。</p><p>就空间复杂度来说，主要是递归造成的栈空间的使用，最好情况，递归树的深度为$\log_{2}n$，其空间复杂度也就为$O(\log n)$，最坏情况，需要进行n-1递归调用，其空间复杂度为$O(n)$，平均情况，空间复杂度也为$O(\log n)$。</p><p>可惜的是，由于关键字的比较和交换是跳跃进行的，因此，快速排序是一种不稳定的排序方法。</p><h3 id="9-9-3-快速排序优化"><a href="#9-9-3-快速排序优化" class="headerlink" title="9.9.3 快速排序优化"></a>9.9.3 快速排序优化</h3><p>刚才讲的快速排序还是有不少可以改进的地方，我们来看一些优化的方案。</p><ol><li>优化选取枢轴<br><strong>三数取中（median-of-three）法。即取三个关键字先进行排序，将中间数作为枢轴，一般是取左端、右端和中间三个数</strong>，也可以随机选取。</li><li>优化不必要的交换<br>采用替换而不是交换的方式进行操作</li><li>优化小数组时的排序方案<br>我们增加了一个判断，当high-low不大于某个常数时（有资料认为7比较合适，也有认为50更合理，实际应用可适当调整），就用直接插入排序，这样就能保证最大化地利用两种排序的优势来完成排序工作。</li><li>优化递归操作<br>对QSort实施尾递归优化。</li></ol><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 改进后快速排序******************************** */</span><br><br><span class="hljs-comment">/* 快速排序优化算法 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Partition1</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> pivotkey;<br><br>    <span class="hljs-keyword">int</span> m = low + (high - low) / <span class="hljs-number">2</span>; <span class="hljs-comment">/* 计算数组中间的元素的下标 */</span><br>    <span class="hljs-keyword">if</span> (L-&gt;r[low] &gt; L-&gt;r[high])<br>        swap(L, low, high);    <span class="hljs-comment">/* 交换左端与右端数据，保证左端较小 */</span><br>    <span class="hljs-keyword">if</span> (L-&gt;r[m] &gt; L-&gt;r[high])<br>        swap(L, high, m);        <span class="hljs-comment">/* 交换中间与右端数据，保证中间较小 */</span><br>    <span class="hljs-keyword">if</span> (L-&gt;r[m] &gt; L-&gt;r[low])<br>        swap(L, m, low);        <span class="hljs-comment">/* 交换中间与左端数据，保证左端较小 */</span><br><br>    pivotkey = L-&gt;r[low]; <span class="hljs-comment">/* 用子表的第一个记录作枢轴记录 */</span><br>    L-&gt;r[<span class="hljs-number">0</span>] = pivotkey;  <span class="hljs-comment">/* 将枢轴关键字备份到L-&gt;r[0] */</span><br>    <span class="hljs-keyword">while</span> (low &lt; high) <span class="hljs-comment">/*  从表的两端交替地向中间扫描 */</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> (low &lt; high&amp;&amp;L-&gt;r[high] &gt;= pivotkey)<br>            high--;<br>        L-&gt;r[low] = L-&gt;r[high];<br>        <span class="hljs-keyword">while</span> (low &lt; high&amp;&amp;L-&gt;r[low] &lt;= pivotkey)<br>            low++;<br>        L-&gt;r[high] = L-&gt;r[low];<br>    &#125;<br>    L-&gt;r[low] = L-&gt;r[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> low; <span class="hljs-comment">/* 返回枢轴所在位置 */</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QSort1</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> pivot;<br>    <span class="hljs-keyword">if</span> ((high - low) &gt; MAX_LENGTH_INSERT_SORT)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (low &lt; high)<br>        &#123;<br>            pivot = Partition1(L, low, high); <span class="hljs-comment">/*  将L-&gt;r[low..high]一分为二，算出枢轴值pivot */</span><br>            QSort1(L, low, pivot - <span class="hljs-number">1</span>);        <span class="hljs-comment">/*  对低子表递归排序 */</span><br>            <span class="hljs-comment">/* QSort(L,pivot+1,high);        /*  对高子表递归排序 */</span><br>            low = pivot + <span class="hljs-number">1</span>;    <span class="hljs-comment">/* 尾递归 */</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        InsertSort(L);<br>&#125;<br><br><span class="hljs-comment">/* 对顺序表L作快速排序 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QuickSort1</span><span class="hljs-params">(SqList *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    QSort1(L, <span class="hljs-number">1</span>, L-&gt;length);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="9-10-箱排序和基数排序"><a href="#9-10-箱排序和基数排序" class="headerlink" title="9.10 箱排序和基数排序"></a>9.10 箱排序和基数排序</h2><h3 id="9-10-1-箱排序-又称桶排序"><a href="#9-10-1-箱排序-又称桶排序" class="headerlink" title="9.10.1 箱排序(又称桶排序)"></a>9.10.1 箱排序(又称桶排序)</h3><p>基本思想：设置若干个箱子，依次扫描待排序的记录R[0],R[1],…,R[n-1]，把关键字等于k的记录全部都装入第k个箱子里(分配)，然后按序号依次将各非空的箱子首尾连接起来。</p><p>简单来说就是：将要排的数据分到多个有序的桶里，每个桶里的数据再单独排序，再把每个桶的数据依次取出，即可完成排序。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>    <span class="hljs-comment">//最大最小值</span><br>    <span class="hljs-keyword">int</span> max = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">int</span> min = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">int</span> length = arr.length;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;length; i++) &#123;<br>        <span class="hljs-keyword">if</span>(arr[i] &gt; max) &#123;<br>            max = arr[i];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[i] &lt; min) &#123;<br>            min = arr[i];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//最大值和最小值的差</span><br>    <span class="hljs-keyword">int</span> diff = max - min;<br><br>    <span class="hljs-comment">//桶列表</span><br>    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)&#123;<br>        bucketList.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br>    &#125;<br><br>    <span class="hljs-comment">//每个桶的存数区间</span><br>    <span class="hljs-keyword">float</span> section = (<span class="hljs-keyword">float</span>) diff / (<span class="hljs-keyword">float</span>) (length - <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//数据入桶</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)&#123;<br>        <span class="hljs-comment">//当前数除以区间得出存放桶的位置 减1后得出桶的下标</span><br>        <span class="hljs-keyword">int</span> num = (<span class="hljs-keyword">int</span>) (arr[i] / section) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">0</span>)&#123;<br>            num = <span class="hljs-number">0</span>;<br>        &#125;<br>        bucketList.get(num).add(arr[i]);<br>    &#125;<br><br>    <span class="hljs-comment">//桶内排序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; bucketList.size(); i++)&#123;<br>        <span class="hljs-comment">//jdk的排序速度当然信得过</span><br>        Collections.sort(bucketList.get(i));<br>    &#125;<br><br>    <span class="hljs-comment">//写入原数组</span><br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ArrayList&lt;Integer&gt; arrayList : bucketList)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> value : arrayList)&#123;<br>            arr[index] = value;<br>            index++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-10-2-基数排序"><a href="#9-10-2-基数排序" class="headerlink" title="9.10.2 基数排序"></a>9.10.2 基数排序</h3><h4 id="9-10-2-1-原理和例子"><a href="#9-10-2-1-原理和例子" class="headerlink" title="9.10.2.1 原理和例子"></a>9.10.2.1 原理和例子</h4><p>基数排序是对桶排序的改进和推广。</p><p>基数排序一种非比较型整数排序算法，其原理是将数据按位数切割成不同的数字，然后按每个位数分别比较。</p><p>【例】已知关键字序列{278,109,063,930,589,184,505,269,008,083},写出基数排序(升序)的排序过程。</p><p>初始状态：<br>P-&gt;278-&gt;109-&gt;063-&gt;930-&gt;589-&gt;184-&gt;505-&gt;269-&gt;008-&gt;083</p><p>第一趟分配，按个位从小到大装箱后如下：<br>P-&gt;930-&gt;063-&gt;083-&gt;184-&gt;505-&gt;278-&gt;008-&gt;109-&gt;589-&gt;269</p><p>第二趟分配，按十位从小到大装箱后如下：<br>P-&gt;505-&gt;008-&gt;109-&gt;930-&gt;063-&gt;269-&gt;278-&gt;083-&gt;184-&gt;589</p><p>第三趟分配，按百位从小到大装箱后如下：<br>P-&gt;008-&gt;063-&gt;083-&gt;109-&gt;184-&gt;269-&gt;278-&gt;505-&gt;589-&gt;930</p><p>排序完成。</p><h4 id="9-10-2-2-代码"><a href="#9-10-2-2-代码" class="headerlink" title="9.10.2.2 代码"></a>9.10.2.2 代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JAVA"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> length = arr.length;<br><br>    <span class="hljs-comment">//最大值</span><br>    <span class="hljs-keyword">int</span> max = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] &gt; max)&#123;<br>            max = arr[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//当前排序位置</span><br>    <span class="hljs-keyword">int</span> location = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//桶列表</span><br>    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">//长度为10 装入余数0-9的数据</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>        bucketList.add(<span class="hljs-keyword">new</span> ArrayList());<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)<br>    &#123;<br>        <span class="hljs-comment">//判断是否排完</span><br>        <span class="hljs-keyword">int</span> dd = (<span class="hljs-keyword">int</span>)Math.pow(<span class="hljs-number">10</span>，(location - <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">if</span>(max &lt; dd)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//数据入桶</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>        &#123;<br>            <span class="hljs-comment">//计算余数 放入相应的桶</span><br>            <span class="hljs-keyword">int</span> number = ((arr[i] / dd) % <span class="hljs-number">10</span>);<br>            bucketList.get(number).add(arr[i]);<br>        &#125;<br><br>        <span class="hljs-comment">//写回数组</span><br>        <span class="hljs-keyword">int</span> nn = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            <span class="hljs-keyword">int</span> size = bucketList.get(i).size();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ii = <span class="hljs-number">0</span>;ii &lt; size;ii ++)&#123;<br>                arr[nn++] = bucketList.get(i).get(ii);<br>            &#125;<br>            bucketList.get(i).clear();<br>        &#125;<br>        location++;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="9-10-2-3-时间复杂度和空间复杂度"><a href="#9-10-2-3-时间复杂度和空间复杂度" class="headerlink" title="9.10.2.3 时间复杂度和空间复杂度"></a>9.10.2.3 时间复杂度和空间复杂度</h4><p>基数排序算法是稳定的。</p><p>时间复杂度是$O(d*(rd+n))$,其中$rd$是基数，$d$是关键字的位数，$n$是元素个数。</p><p>空间复杂度(辅助空间)为$O(n+rd)$。</p><h2 id="9-11-总结回顾"><a href="#9-11-总结回顾" class="headerlink" title="9.11 总结回顾"></a>9.11 总结回顾</h2><p>本章内容只是在讲排序，我们需要对已经提到的各个排序算法进行对比来总结回顾。</p><p>首先我们讲了排序的定义，并提到了排序的稳定性，排序稳定对于某些特殊需求来说是至关重要的，因此在排序算法中，我们需要关注此算法的稳定性如何。</p><p>我们根据将排序记录是否全部被放置在内存中，将排序分为内排序与外排序两种，外排序需要在内外存之间多次交换数据才能进行。我们本章主要讲的是内排序的算法。</p><p>根据排序过程中借助的主要操作，我们将内排序分为：插入排序、交换排序、选择排序和归并排序四类。之后介绍的7种排序法，就分别是各种分类的代表算法。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-10-1.JPG" alt="9-10-1"></p><p>事实上，目前还没有十全十美的排序算法，有优点就会有缺点，即使是快速排序法，也只是在整体性能上优越，它也存在排序不稳定、需要大量辅助空间、对少量数据排序无优势等不足。因此我们就来从多个角度来剖析一下提到的各种排序的长与短。</p><p>我们将7种算法的各种指标进行对比，如表9-10-1所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-10-2.JPG" alt="9-10-2"></p><p>从算法的简单性来看，我们将7种算法分为两类：</p><ul><li>简单算法：冒泡、简单选择、直接插入。</li><li>改进算法：希尔、堆、归并、快速。</li></ul><p>从平均情况来看，显然最后3种改进算法要胜过希尔排序，并远远胜过前3种简单算法。</p><p>从最好情况看，反而冒泡和直接插入排序要更胜一筹，也就是说，如果你的待排序序列总是基本有序，反而不应该考虑4种复杂的改进算法。</p><p>从最坏情况看，堆排序与归并排序又强过快速排序以及其他简单排序。</p><p>从这三组时间复杂度的数据对比中，我们可以得出这样一个认识。堆排序和归并排序就像两个参加奥数考试的优等生，心理素质强，发挥稳定。而快速排序像是很情绪化的天才，心情好时表现极佳，碰到较糟糕环境会变得差强人意。但是他们如果都来比赛计算个位数的加减法，它们反而算不过成绩极普通的冒泡和直接插入。</p><p>从空间复杂度来说，归并排序强调要马跑得快，就得给马吃个饱。快速排序也有相应的空间要求，反而堆排序等却都是少量索取，大量付出，对空间要求是O(1)。如果执行算法的软件所处的环境非常在乎内存使用量的多少时，选择归并排序和快速排序就不是一个较好的决策了。</p><p>从稳定性来看，归并排序独占鳌头，我们前面也说过，对于非常在乎排序稳定性的应用中，归并排序是个好算法。</p><p>从待排序记录的个数上来说，待排序的个数n越小，采用简单排序方法越合适。反之，n越大，采用改进排序方法越合适。这也就是我们为什么对快速排序优化时，增加了一个阀值，低于阀值时换作直接插入排序的原因。</p><p>从表9-10-1的数据中，似乎简单选择排序在3种简单排序中性能最差，其实也不完全是，比如，如果记录的关键字本身信息量比较大（例如，关键字都是数十位的数字），此时表明其占用存储空间很大，这样移动记录所花费的时间也就越多，我们给出3种简单排序算法的移动次数比较，如表9-10-2所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B9%9D%E7%AB%A0/9-10-3.JPG" alt="9-10-3"></p><p>你会发现，此时简单选择排序就变得非常有优势，原因也就在于，它是通过大量比较后选择明确记录进行移动，有的放矢。因此对于数据量不是很大而记录的关键字信息量较大的排序要求，简单排序算法是占优的。另外，记录的关键字信息量大小对那四个改进算法影响不大。</p><p>总之，从综合各项指标来说，经过优化的快速排序是性能最好的排序算法，但是不同的场合我们也应该考虑使用不同的算法来应对它。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>大话数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大话数据结构第八章 查找</title>
    <link href="/2020/01/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC8%E7%AB%A0%20%E6%9F%A5%E6%89%BE/"/>
    <url>/2020/01/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC8%E7%AB%A0%20%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<p><strong>查找（Searching）就是根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素（或记录）。</strong></p><h2 id="8-1-8-2-查找概论"><a href="#8-1-8-2-查找概论" class="headerlink" title="8.1-8.2 查找概论"></a>8.1-8.2 查找概论</h2><p>查找表（Search Table）是由同一类型的数据元素（或记录）构成的集合。例如图8-2-1就是一个查找表。  </p><span id="more"></span><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-2-1.JPG?raw=true" alt="8-2-1"><br>关键字（Key）是数据元素中某个数据项的值，又称为键值，用它可以标识一个数据元素。也可以标识一个记录的某个数据项（字段），我们称为关键码，如图8-2-1中①和②所示。<br>若此关键字可以唯一地标识一个记录，则称此关键字为主关键字（Primary Key）。注意这也就意味着，对不同的记录，其主关键字均不相同。主关键字所在的数据项称为主关键码，如图8-2-1中③和④所示。<br>那么对于那些可以识别多个数据元素（或记录）的关键字，我们称为次关键字（Secondary Key），如图8-2-1中⑤所示。次关键字也可以理解为是不以唯一标识一个数据元素（或记录）的关键字，它对应的数据项就是次关键码。<br>查找表按照操作方式来分有两大种：<strong>静态查找表和动态查找表</strong>。<br>静态查找表（Static Search Table）：只作查找操作的查找表。它的主要操作有：</p><ol><li>查询某个“特定的”数据元素是否在查找表中。</li><li>检索某个“特定的”数据元素和各种属性。</li></ol><p>动态查找表（Dynamic Search Table）：在查找过程中同时插入查找表中不存在的数据元素，或者从查找表中删除已经存在的某个数据元素。显然动态查找表的操作就是两个：</p><ol><li>查找时插入数据元素。</li><li>查找时删除数据元素。</li></ol><p>为了提高查找的效率，我们需要专门为查找操作设置数据结构，这种<strong>面向查找操作的数据结构称为查找结构</strong>。<br>从逻辑上来说，查找所基于的数据结构是集合，集合中的记录之间没有本质关系。可是要想获得较高的查找性能，我们就不能不改变数据元素之间的关系，在存储时可以将查找集合组织成表、树等结构。<br>例如，对于静态查找表来说，我们不妨应用线性表结构来组织数据，这样可以使用顺序查找算法，如果再对主关键字排序，则可以应用折半查找等技术进行高效的查找。<br>如果是需要动态查找，则会复杂一些，可以考虑二叉排序树的查找技术。  </p><h2 id="8-3-顺序表查找"><a href="#8-3-顺序表查找" class="headerlink" title="8.3 顺序表查找"></a>8.3 顺序表查找</h2><p><strong>顺序查找（Sequential Search）又叫线性查找，是最基本的查找技术，它的查找过程是：从表中第一个（或最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功，找到所查的记录；如果直到最后一个（或第一个）记录，其关键字和给定值比较都不等时，则表中没有所查的记录，查找不成功。</strong></p><h3 id="8-3-1-顺序表查找算法"><a href="#8-3-1-顺序表查找算法" class="headerlink" title="8.3.1 顺序表查找算法"></a>8.3.1 顺序表查找算法</h3><p>顺序查找的算法实现如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 无哨兵顺序查找，a为数组，n为要查找的数组个数，key为要查找的关键字 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Sequential_Search</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span> (a[i]==key)<br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-3-2-顺序表查找优化"><a href="#8-3-2-顺序表查找优化" class="headerlink" title="8.3.2 顺序表查找优化"></a>8.3.2 顺序表查找优化</h3><p>到这里并非足够完美，因为每次循环时都需要对i是否小于等于n作判断。事实上，设置一个哨兵，就不需要每次让i与n作比较。看下面的改进后的顺序查找算法代码。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 有哨兵顺序查找 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Sequential_Search2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    a[<span class="hljs-number">0</span>]=key;<br>    i=n;<br>    <span class="hljs-keyword">while</span>(a[i]!=key)&#123;<br>        i--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这种在查找方向的尽头放置“哨兵”免去了在查找过程中每一次比较后都要判断查找位置是否越界的小技巧，看似与原先差别不大，但在总数据较多时，效率提高很大，是非常好的编码技巧。当然，“哨兵”也不一定就一定要在数组开始，也可以在末端。<br>对于这种顺序查找算法来说，平均查找次数为（n+1）/2，所以最终时间复杂度还是O（n）。<br>很显然，顺序查找技术是有很大缺点的，n很大时，查找效率极为低下，不过优点也是有的，算法非常简单，对静态查找表的记录没有任何要求，在一些小型数据的查找时，是可以适用的。<br>另外，也正由于查找概率的不同，我们完全可以将容易查找到的记录放在前面，而不常用的记录放置在后面，效率就可以有大幅提高。  </p><h2 id="8-4-有序表查找"><a href="#8-4-有序表查找" class="headerlink" title="8.4 有序表查找"></a>8.4 有序表查找</h2><h3 id="8-4-1-折半查找"><a href="#8-4-1-折半查找" class="headerlink" title="8.4.1 折半查找"></a>8.4.1 折半查找</h3><p><strong>折半查找（Binary Search）技术，又称为二分查找。它的前提是线性表中的记录必须是关键码有序（通常从小到大有序），线性表必须采用顺序存储。折半查找的基本思想是：在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找。不断重复上述过程，直到查找成功，或所有查找区域无记录，查找失败为止。</strong><br>折半查找代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 折半查找 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Binary_Search</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> key)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> low,high,mid;<br>    low=<span class="hljs-number">1</span>;    <span class="hljs-comment">/* 定义最低下标为记录首位 */</span><br>    high=n;    <span class="hljs-comment">/* 定义最高下标为记录末位 */</span><br>    <span class="hljs-keyword">while</span>(low&lt;=high)&#123;<br>        mid=(low+high)/<span class="hljs-number">2</span>;    <span class="hljs-comment">/* 折半 */</span><br>        <span class="hljs-keyword">if</span> (key&lt;a[mid])        <span class="hljs-comment">/* 若查找值比中值小 */</span><br>            high=mid<span class="hljs-number">-1</span>;        <span class="hljs-comment">/* 最高下标调整到中位下标小一位 */</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key&gt;a[mid])<span class="hljs-comment">/* 若查找值比中值大 */</span><br>            low=mid+<span class="hljs-number">1</span>;        <span class="hljs-comment">/* 最低下标调整到中位下标大一位 */</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> mid;        <span class="hljs-comment">/* 若相等则说明mid即为查找到的位置 */</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>折半算法的时间复杂度为O（㏒n），它显然远远好于顺序查找的O（n）时间复杂度。<br>不过由于折半查找的前提条件是需要有序表顺序存储，对于静态查找表，一次排序后不再变化，这样的算法已经比较好了。但对于需要频繁执行插入或删除操作的数据集来说，维护有序的排序会带来不小的工作量，那就不建议使用。  </p><h3 id="8-4-2-插值查找"><a href="#8-4-2-插值查找" class="headerlink" title="8.4.2 插值查找"></a>8.4.2 插值查找</h3><p>折半查找代码的第6句，我们略微等式变换后得到：<br><code>mid=(low+high)/2=low+1/2(high-low);</code><br>我们将在折半查找算法的代码中更改一下，第6行代码如下：<br><code>mid=low+ (high-low)*(key-a[low])/(a[high]-a[low]); /* 插值 */</code><br><strong>插值查找（Interpolation Search）是根据要查找的关键字key与查找表中最大最小记录的关键字比较后的查找方法，其核心就在于插值的计算公式<code>(key-a[low])/(a[high]-a[low])</code>。</strong><br>应该说，从时间复杂度来看，它也是O（㏒n），但对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好得多。反之，数组中如果分布类似{0，1，2，2000，2001……，999998，999999}这种极端不均匀的数据，用插值查找未必是很合适的选择。  </p><h3 id="8-4-3-斐波那契查找"><a href="#8-4-3-斐波那契查找" class="headerlink" title="8.4.3 斐波那契查找"></a>8.4.3 斐波那契查找</h3><p>斐波那契查找（Fibonacci Search），它是利用了黄金分割原理来实现的。<br>下面我们根据代码来看程序是如何运行的。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 斐波那契查找 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Fibonacci_Search</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> low,high,mid,i,k=<span class="hljs-number">0</span>;<br>    low=<span class="hljs-number">1</span>;    <span class="hljs-comment">/* 定义最低下标为记录首位 */</span><br>    high=n;    <span class="hljs-comment">/* 定义最高下标为记录末位 */</span><br>    <span class="hljs-keyword">while</span>(n&gt;F[k]<span class="hljs-number">-1</span>) <span class="hljs-comment">/* 计算n位于斐波那契数列的位置 */</span><br>        k++;<br>    <span class="hljs-keyword">for</span> (i=n;i&lt;F[k]<span class="hljs-number">-1</span>;i++) <span class="hljs-comment">/* 将不满的数值补全 */</span><br>        a[i]=a[n];<br>    <span class="hljs-keyword">while</span>(low&lt;=high)&#123;<br>        mid=low+F[k<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span> (key&lt;a[mid])&#123;<br>            high=mid<span class="hljs-number">-1</span>;<br>            k=k<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key&gt;a[mid])&#123;<br>            low=mid+<span class="hljs-number">1</span>;<br>            k=k<span class="hljs-number">-2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> (mid&lt;=n)<br>                <span class="hljs-keyword">return</span> mid;        <span class="hljs-comment">/* 若相等则说明mid即为查找到的位置 */</span><br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> n;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>斐波那契查找算法的核心在于：</p><ol><li>当<code>key=a[mid]</code>时，查找就成功；</li><li>当<code>key&lt;a[mid]</code>时，新范围是第low个到第mid-1个，此时范围个数为F[k-1]-1个；</li><li>当<code>key&gt;a[mid]</code>时，新范围是第m+1个到第high个，此时范围个数为F[k-2]-1个。</li></ol><p>也就是说，如果要查找的记录在右侧，则左侧的数据都不用再判断了，不断反复进行下去，对处于当中的大部分数据，其工作效率要高一些。所以尽管斐波那契查找的时间复杂也为O（㏒n），但就平均性能来说，斐波那契查找要优于折半查找。可惜如果是最坏情况，比如这里key=1，那么始终都处于左侧长半区在查找，则查找效率要低于折半查找。<br>还有比较关键的一点，折半查找是进行加法与除法运算<code>（mid=（low+high）/2）</code>，插值查找进行复杂的四则运算<code>mid=low+ (high-low)*(key-a[low])/(a[high]-a[low])</code>，而斐波那契查找只是最简单加减法运算<code>（mid=low+F[k-1]-1）</code>，在海量数据的查找过程中，这种细微的差别可能会影响最终的查找效率。<br>应该说，三种有序表的查找本质上是分隔点的选择不同，各有优劣，实际开发时可根据数据的特点综合考虑再做出选择。  </p><h2 id="8-5-线性索引查找"><a href="#8-5-线性索引查找" class="headerlink" title="8.5 线性索引查找"></a>8.5 线性索引查找</h2><p>数据结构的最终目的是提高数据的处理速度，索引是为了加快查找速度而设计的一种数据结构。<strong>索引就是把一个关键字与它对应的记录相关联的过程</strong>，一个索引由若干个索引项构成，每个索引项至少应包含关键字和其对应的记录在存储器中的位置等信息。索引技术是组织大型数据库以及磁盘文件的一种重要技术。<br>索引按照结构可以分为线性索引、树形索引和多级索引。我们这里就只介绍线性索引技术。<strong>所谓线性索引就是将索引项集合组织为线性结构，也称为索引表</strong>。我们重点介绍三种线性索引：稠密索引、分块索引和倒排索引。  </p><h3 id="8-5-1-稠密索引"><a href="#8-5-1-稠密索引" class="headerlink" title="8.5.1 稠密索引"></a>8.5.1 稠密索引</h3><p>稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项。，如图8-5-2所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-5-2.JPG?raw=true" alt="8-5-2"><br>对于稠密索引这个索引表来说，索引项一定是按照关键码有序的排列。  </p><h3 id="8-5-2-分块索引"><a href="#8-5-2-分块索引" class="headerlink" title="8.5.2 分块索引"></a>8.5.2 分块索引</h3><p>稠密索引因为索引项与数据集的记录个数相同，所以空间代价很大。为了减少索引项的个数，我们可以对数据集进行分块，使其分块有序，然后再对每一块建立一个索引项，从而减少索引项的个数。  </p><p><strong>分块有序，是把数据集的记录分成了若干块，并且这些块需要满足两个条件：</strong></p><ul><li><strong>块内无序</strong>，即每一块内的记录不要求有序。当然，你如果能够让块内有序对查找来说更理想，不过这就要付出大量时间和空间的代价，因此通常我们不要求块内有序。</li><li><strong>块间有序</strong>，例如，要求第二块所有记录的关键字均要大于第一块中所有记录的关键字，第三块的所有记录的关键字均要大于第二块的所有记录关键字……因为只有块间有序，才有可能在查找时带来效率。  </li></ul><p>对于分块有序的数据集，将每块对应一个索引项，这种索引方法叫做分块索引。  </p><p>如图8-5-4所示，我们定义的分块索引的索引项结构分三个数据项：</p><ul><li>最大关键码，它存储每一块中的最大关键字，这样的好处就是可以使得在它之后的下一块中的最小关键字也能比这一块最大的关键字要大；</li><li>存储了块中的记录个数，以便于循环时使用；</li><li>用于指向块首数据元素的指针，便于开始对这一块中记录进行遍历。</li></ul><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-5-4.JPG?raw=true" alt="8-5-4">  </p><p>在分块索引表中查找，就是分两步进行：</p><ol><li>在分块索引表中查找要查关键字所在的块。由于分块索引表是块间有序的，因此很容易利用折半、插值等算法得到结果。例如，在图8-5-4的数据集中查找62，我们可以很快可以从左上角的索引表中由<code>57&lt;62&lt;96</code>得到62在第三个块中。</li><li>根据块首指针找到相应的块，并在块中顺序查找关键码。因为块中可以是无序的，因此只能顺序查找。</li></ol><p>分块索引查找的平均查找长度为：（√n）+1。<br>可见，分块索引的效率比之顺序查找的O（n）是高了不少，不过显然它与折半查找的O（㏒n）相比还有不小的差距。因此在确定所在块的过程中，由于块间有序，所以可以应用折半、插值等手段来提高效率。<br>总的来说，分块索引在兼顾了对细分块不需要有序的情况下，大大增加了整体查找的速度，所以普遍被用于<strong>数据库表查找</strong>等技术的应用当中。  </p><h3 id="8-5-3-倒排索引"><a href="#8-5-3-倒排索引" class="headerlink" title="8.5.3 倒排索引"></a>8.5.3 倒排索引</h3><p>搜索引擎常用的最简单的，也算是最基础的搜索技术——倒排索引。<br>比如不同的文章，将所有单词整理出一张单词表，并排序，出现该单词的则标记为后面的文章编号。</p><p>索引项的通用结构是：</p><ul><li>次关键码，例如“英文单词”；</li><li>记录号表，例如“文章编号”。</li></ul><p><strong>其中记录号表存储具有相同次关键字的所有记录的记录号（可以是指向记录的指针或者是该记录的主关键字）。这样的索引方法就是倒排索引（inverted index）。</strong>倒排索引源于实际应用中需要根据属性（或字段、次关键码）的值来查找记录。这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引。<br>倒排索引的优点显然就是查找记录非常快，基本等于生成索引表后，查找时都不用去读取记录，就可以得到结果。但它的缺点是这个记录号不定长，比如上例有7个单词的文章编号只有一个，而“book”、“friend”、“good”有两个文章编号，若是对多篇文章所有单词建立倒排索引，那每个单词都将对应相当多的文章编号，维护比较困难，插入和删除操作都需要作相应的处理。  </p><h2 id="8-6-二叉排序树"><a href="#8-6-二叉排序树" class="headerlink" title="8.6 二叉排序树"></a>8.6 二叉排序树</h2><p>二叉排序树（Binary Sort Tree），又称为二叉查找树。它或者是一棵空树，或者是具有下列性质的二叉树。</p><ul><li>若它的左子树不空，则左子树上所有结点的值均小于它的根结构的值；</li><li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>它的左、右子树也分别为二叉排序树。</li></ul><p>这样我们就得到了一棵二叉树，并且当我们对它进行中序遍历时，就可以得到一个有序的序列，所以我们通常称它为二叉排序树。  </p><h3 id="8-6-1-二叉排序树查找操作"><a href="#8-6-1-二叉排序树查找操作" class="headerlink" title="8.6.1 二叉排序树查找操作"></a>8.6.1 二叉排序树查找操作</h3><p>首先我们提供一个二叉树的结构。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 二叉树的二叉链表结点结构定义 */</span><br><span class="hljs-keyword">typedef</span>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span>    /* 结点结构 */</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> data;    <span class="hljs-comment">/* 结点数据 */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span>    <span class="hljs-comment">/* 左右孩子指针 */</span><br>&#125; BiTNode, *BiTree;<br></code></pre></div></td></tr></table></figure><p>然后我们来看看二叉排序树的查找是如何实现的。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 递归查找二叉排序树T中是否存在key, */</span><br><span class="hljs-comment">/* 指针f指向T的双亲，其初始调用值为NULL */</span><br><span class="hljs-comment">/* 若查找成功，则指针p指向该数据元素结点，并返回TRUE */</span><br><span class="hljs-comment">/* 否则指针p指向查找路径上访问的最后一个结点并返回FALSE */</span><br><span class="hljs-function">Status <span class="hljs-title">SearchBST</span><span class="hljs-params">(BiTree T, <span class="hljs-keyword">int</span> key, BiTree f, BiTree *p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!T)    <span class="hljs-comment">/*  查找不成功 */</span><br>    &#123;<br>        *p = f;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == T-&gt;data) <span class="hljs-comment">/*  查找成功 */</span><br>    &#123;<br>        *p = T;<br>        <span class="hljs-keyword">return</span> TRUE;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &lt; T-&gt;data)<br>        <span class="hljs-keyword">return</span> SearchBST(T-&gt;lchild, key, T, p);  <span class="hljs-comment">/*  在左子树中继续查找 */</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> SearchBST(T-&gt;rchild, key, T, p);  <span class="hljs-comment">/*  在右子树中继续查找 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-6-2-二叉排序树插入操作"><a href="#8-6-2-二叉排序树插入操作" class="headerlink" title="8.6.2 二叉排序树插入操作"></a>8.6.2 二叉排序树插入操作</h3><p>有了二叉排序树的查找函数，那么所谓的二叉排序树的插入，其实也就是将关键字放到树中的合适位置而已，来看代码。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*  当二叉排序树T中不存在关键字等于key的数据元素时， */</span><br><span class="hljs-comment">/*  插入key并返回TRUE，否则返回FALSE */</span><br><span class="hljs-function">Status <span class="hljs-title">InsertBST</span><span class="hljs-params">(BiTree *T, <span class="hljs-keyword">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    BiTree p, s;<br>    <span class="hljs-keyword">if</span> (!SearchBST(*T, key, <span class="hljs-literal">NULL</span>, &amp;p)) <span class="hljs-comment">/* 查找不成功 */</span><br>    &#123;<br>        s = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>        s-&gt;data = key;<br>        s-&gt;lchild = s-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span> (!p) <span class="hljs-comment">/* 此时因为已经查找过了，所有p指向最后查找的根结点 */</span><br>            *T = s;            <span class="hljs-comment">/*  插入s为新的根结点 */</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &lt; p-&gt;data)<br>            p-&gt;lchild = s;    <span class="hljs-comment">/*  插入s为左孩子 */</span><br>        <span class="hljs-keyword">else</span><br>            p-&gt;rchild = s;  <span class="hljs-comment">/*  插入s为右孩子 */</span><br>        <span class="hljs-keyword">return</span> TRUE;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> FALSE;  <span class="hljs-comment">/*  树中已有关键字相同的结点，不再插入 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>有了二叉排序树的插入代码，我们要实现二叉排序树的构建就非常容易了。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">62</span>,<span class="hljs-number">88</span>,<span class="hljs-number">58</span>,<span class="hljs-number">47</span>,<span class="hljs-number">35</span>,<span class="hljs-number">73</span>,<span class="hljs-number">51</span>,<span class="hljs-number">99</span>,<span class="hljs-number">37</span>,<span class="hljs-number">93</span> &#125;;<br>    BiTree T = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        InsertBST(&amp;T, a[i]);<br></code></pre></div></td></tr></table></figure><h3 id="8-6-3-二叉排序树删除操作"><a href="#8-6-3-二叉排序树删除操作" class="headerlink" title="8.6.3 二叉排序树删除操作"></a>8.6.3 二叉排序树删除操作</h3><p>对于要删除的结点只有左子树或只有右子树的情况，相对也比较好解决。那就是结点删除后，将它的左子树或右子树整个移动到删除结点的位置即可，可以理解为独子继承父业。最终，整个结构还是一个二叉排序树。<br>但是对于要删除的结点既有左子树又有右子树的情况怎么办呢？<br>比较好的办法就是，找到需要删除的结点p的直接前驱（或直接后继）s，用s来替换结点p，然后再删除此结点s。  </p><p>根据我们对删除结点三种情况的分析：</p><ul><li>叶子结点；</li><li>仅有左或右子树的结点；</li><li>左右子树都有的结点。</li></ul><p>我们来看代码，下面这个算法是递归方式对二叉排序树T查找key，查找到时删除。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 若二叉排序树T中存在关键字等于key的数据元素时，则删除该数据元素结点, */</span><br><span class="hljs-comment">/* 并返回TRUE；否则返回FALSE。 */</span><br><span class="hljs-function">Status <span class="hljs-title">DeleteBST</span><span class="hljs-params">(BiTree *T, <span class="hljs-keyword">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!*T) <span class="hljs-comment">/* 不存在关键字等于key的数据元素 */</span><br>        <span class="hljs-keyword">return</span> FALSE;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (key == (*T)-&gt;data) <span class="hljs-comment">/* 找到关键字等于key的数据元素 */</span><br>            <span class="hljs-keyword">return</span> Delete(T);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &lt; (*T)-&gt;data)<br>            <span class="hljs-keyword">return</span> DeleteBST(&amp;(*T)-&gt;lchild, key);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> DeleteBST(&amp;(*T)-&gt;rchild, key);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这段代码和前面的二叉排序树查找几乎完全相同，唯一的区别就在于第8行，此时执行的是Delete方法，对当前结点进行删除操作。我们来看Delete的代码。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 从二叉排序树中删除结点p，并重接它的左或右子树。 */</span><br><span class="hljs-function">Status <span class="hljs-title">Delete</span><span class="hljs-params">(BiTree *p)</span></span><br><span class="hljs-function"></span>&#123;<br>    BiTree q, s;<span class="hljs-comment">//q、s为临时结点</span><br>    <span class="hljs-keyword">if</span> ((*p)-&gt;rchild == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">/* 右子树空则只需重接它的左子树(待删结点是叶子也走此分支) */</span><br>    &#123;<br>        q = *p; *p = (*p)-&gt;lchild; <span class="hljs-built_in">free</span>(q);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((*p)-&gt;lchild == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">/* 只需重接它的右子树 */</span><br>    &#123;<br>        q = *p; *p = (*p)-&gt;rchild; <span class="hljs-built_in">free</span>(q);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">/* 左右子树均不空 */</span><br>    &#123;<br>        q = *p; s = (*p)-&gt;lchild;<br>        <span class="hljs-keyword">while</span> (s-&gt;rchild) <span class="hljs-comment">/* 转左，然后向右到尽头（找待删结点NULL的前驱） */</span><br>        &#123;<span class="hljs-comment">//根结点*p的左子树中最右的叶结点为直接前驱</span><br>            q = s;<br>            s = s-&gt;rchild;<br>        &#125;<br>        (*p)-&gt;data = s-&gt;data; <span class="hljs-comment">/*  s指向被删结点的直接前驱（将被删结点前驱的值取代被删结点的值） */</span><br>        <span class="hljs-keyword">if</span> (q != *p)<br>            q-&gt;rchild = s-&gt;lchild; <span class="hljs-comment">/*  重接q的右子树 */</span><br>        <span class="hljs-keyword">else</span><br>            q-&gt;lchild = s-&gt;lchild; <span class="hljs-comment">/*  重接q的左子树 */</span><br>        <span class="hljs-built_in">free</span>(s);<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>从这段代码也可以看出，我们其实是在找删除结点的前驱结点替换的方法，对于用后继结点来替换，方法上是一样的。  </p><h3 id="8-6-4-二叉排序树总结"><a href="#8-6-4-二叉排序树总结" class="headerlink" title="8.6.4 二叉排序树总结"></a>8.6.4 二叉排序树总结</h3><p>总之，二叉排序树是以链接的方式存储，保持了链接存储结构在执行插入或删除操作时不用移动元素的优点，只要找到合适的插入和删除位置后，仅需修改链接指针即可。插入删除的时间性能比较好。而对于二叉排序树的查找，走的就是从根结点到要查找的结点的路径，其比较次数等于给定值的结点在二叉排序树的层数。极端情况，最少为1次，即根结点就是要找的结点，最多也不会超过树的深度。也就是说，二叉排序树的查找性能取决于二叉排序树的形状。可问题就在于，二叉排序树的形状是不确定的。<br>如果，数组元素的次序是从小到大有序，则二叉排序树就成了极端的右斜树，查找时间复杂度为O（n），等同于顺序查找。<br>因此，如果我们希望对一个集合按二叉排序树查找，最好是把它构建成一棵平衡的二叉排序树。即其深度与完全二叉树相同，那么查找的时间复杂就为O（㏒n），近似于折半查找。  </p><h2 id="8-7-平衡二叉树（AVL树）"><a href="#8-7-平衡二叉树（AVL树）" class="headerlink" title="8.7 平衡二叉树（AVL树）"></a>8.7 平衡二叉树（AVL树）</h2><p><strong>平衡二叉树（Self-Balancing Binary Search Tree 或Height-Balanced Binary Search Tree），是一种二叉排序树，其中每一个节点的左子树和右子树的高度差至多等于1</strong>。<br>从平衡二叉树的英文名字，你也可以体会到，它是<strong>一种高度平衡的二叉排序树。</strong>那什么叫做高度平衡呢？意思是说，要么它是一棵空树，要么它的左子树和右子树都是平衡二叉树，且左子树和右子树的深度之差的绝对值不超过1。我们<strong>将二叉树上结点的左子树深度减去右子树深度的值称为平衡因子BF（Balance Factor）</strong>，那么平衡二叉树上所有结点的平衡因子只可能是-1、0和1。只要二叉树上有一个结点的平衡因子的绝对值大于1，则该二叉树就是不平衡的。<br><strong>距离插入结点最近的，且平衡因子的绝对值大于1的结点为根的子树，我们称为最小不平衡子树。</strong>  </p><h3 id="8-7-1-平衡二叉树实现原理"><a href="#8-7-1-平衡二叉树实现原理" class="headerlink" title="8.7.1 平衡二叉树实现原理"></a>8.7.1 平衡二叉树实现原理</h3><p>平衡二叉树构建的基本思想就是在构建二叉排序树的过程中，每当插入一个结点时，先检查是否因插入而破坏了树的平衡性，若是，则找出最小不平衡子树。在保持二叉排序树特性的前提下，调整最小不平衡子树中各结点之间的链接关系，进行相应的旋转，使之成为新的平衡子树。<br>所谓的平衡二叉树，其实就是在二叉排序树创建过程中保证它的平衡性，一旦发现有不平衡的情况，马上处理，这样就不会造成不可收拾的情况出现。通过刚才这个例子，你会发现，<strong>当最小不平衡子树根结点的平衡因子BF是大于1时，就右旋，小于-1时就左旋。当插入结点后，最小不平衡子树的BF与它的子树的BF符号相反时，就需要对结点先进行一次旋转以使得符号相同后，再反向旋转一次才能够完成平衡操作。</strong>  </p><h3 id="8-7-2-平衡二叉树实现算法"><a href="#8-7-2-平衡二叉树实现算法" class="headerlink" title="8.7.2 平衡二叉树实现算法"></a>8.7.2 平衡二叉树实现算法</h3><p>首先是需要改进二叉排序树的结点结构，增加一个bf，用来存储平衡因子。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 二叉树的二叉链表结点结构定义 */</span><br><span class="hljs-keyword">typedef</span>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span>    /* 结点结构 */</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> data;    <span class="hljs-comment">/* 结点数据 */</span><br>    <span class="hljs-keyword">int</span> bf; <span class="hljs-comment">/*  结点的平衡因子 */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span>    <span class="hljs-comment">/* 左右孩子指针 */</span><br>&#125; BiTNode, *BiTree;<br></code></pre></div></td></tr></table></figure><p>然后，对于右旋操作，我们的代码如下。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 对以p为根的二叉排序树作右旋处理， */</span><br><span class="hljs-comment">/* 处理之后p指向新的树根结点，即旋转处理之前的左子树的根结点 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">R_Rotate</span><span class="hljs-params">(BiTree *P)</span></span><br><span class="hljs-function"></span>&#123;<br>    BiTree L;<br>    L = (*P)-&gt;lchild; <span class="hljs-comment">/*  L指向P的左子树根结点 */</span><br>    (*P)-&gt;lchild = L-&gt;rchild; <span class="hljs-comment">/*  L的右子树挂接为P的左子树 */</span><br>    L-&gt;rchild = (*P);<br>    *P = L; <span class="hljs-comment">/*  P指向新的根结点 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>此函数代码的意思是说，当传入一个二叉排序树P，将它的左孩子结点定义为L，将L的右子树变成P的左子树，再将P改成L的右子树，最后将L替换P成为根结点。这样就完成了一次右旋操作，如图8-7-9所示。图中三角形代表子树，N代表新增结点。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-7-9.JPG?raw=true" alt="8-7-9">  </p><p>左旋操作代码如下。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 对以P为根的二叉排序树作左旋处理， */</span><br><span class="hljs-comment">/* 处理之后P指向新的树根结点，即旋转处理之前的右子树的根结点0  */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">L_Rotate</span><span class="hljs-params">(BiTree *P)</span></span><br><span class="hljs-function"></span>&#123;<br>    BiTree R;<br>    R = (*P)-&gt;rchild; <span class="hljs-comment">/*  R指向P的右子树根结点 */</span><br>    (*P)-&gt;rchild = R-&gt;lchild; <span class="hljs-comment">/* R的左子树挂接为P的右子树 */</span><br>    R-&gt;lchild = (*P);<br>    *P = R; <span class="hljs-comment">/*  P指向新的根结点 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这段代码与右旋代码是对称的，在此不做解释了。<br>现在我们来看左平衡旋转处理的函数代码。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LH +1 <span class="hljs-comment">/*  左高 */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EH 0  <span class="hljs-comment">/*  等高 */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RH -1 <span class="hljs-comment">/*  右高 */</span></span><br><br><span class="hljs-comment">/*  对以指针T所指结点为根的二叉树作左平衡旋转处理 */</span><br><span class="hljs-comment">/*  本算法结束时，指针T指向新的根结点 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LeftBalance</span><span class="hljs-params">(BiTree *T)</span></span><br><span class="hljs-function"></span>&#123;<br>    BiTree L, Lr;<br>    L = (*T)-&gt;lchild; <span class="hljs-comment">/*  L指向T的左子树根结点 */</span><br>    <span class="hljs-keyword">switch</span> (L-&gt;bf)<br>    &#123; <span class="hljs-comment">/*  检查T的左子树的平衡度，并作相应平衡处理 */</span><br>    <span class="hljs-keyword">case</span> LH: <span class="hljs-comment">/*  新结点插入在T的左孩子的左子树上，要作单右旋处理 */</span><br>        (*T)-&gt;bf = L-&gt;bf = EH;<br>        R_Rotate(T);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> RH: <span class="hljs-comment">/*  新结点插入在T的左孩子的右子树上，要作双旋处理 */</span><br>        Lr = L-&gt;rchild; <span class="hljs-comment">/*  Lr指向T的左孩子的右子树根 */</span><br>        <span class="hljs-keyword">switch</span> (Lr-&gt;bf)<br>        &#123; <span class="hljs-comment">/*  修改T及其左孩子的平衡因子 */</span><br>        <span class="hljs-keyword">case</span> LH: (*T)-&gt;bf = RH;<br>            L-&gt;bf = EH;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> EH: (*T)-&gt;bf = L-&gt;bf = EH;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> RH:<br>            (*T)-&gt;bf = EH;<br>            L-&gt;bf = LH;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        Lr-&gt;bf = EH;<br>        L_Rotate(&amp;(*T)-&gt;lchild); <span class="hljs-comment">/*  对T的左子树作左旋平衡处理 */</span><br>        R_Rotate(T); <span class="hljs-comment">/*  对T作右旋平衡处理 */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>首先，我们定义了三个常数变量，分别代表1、0、-1。</p><ol><li>函数被调用，传入一个需调整平衡性的子树T。由于LeftBalance 函数被调用时，其实是已经确认当前子树是不平衡状态，且左子树的高度大于右子树的高度。换句话说，此时T的根结点应该是平衡因子BF的值大于1的数。</li><li>第4行，我们将T的左孩子赋值给L。</li><li>第5~27行是分支判断。</li><li>当L的平衡因子为LH，即为1时，表明它与根结点的BF值符号相同，因此，第8行，将它们的BF值都改为0，并且第9行，进行右旋操作。操作的方式如图8-7-9所示。</li><li>当L的平衡因子为RH，即为-1时，表明它与根结点的BF值符号相反，此时需要做双旋处理。第13~22行，针对L的右孩子Lr的BF作判断，修改根结点T和L的BF值。第24行将当前Lr的BF改为0。</li><li>第25行，对根结点的左子树进行左旋，如图8-7-10第二图所示。</li><li>第26行，对根结点进行右旋，如图8-7-10的第三图所示，完成平衡操作。</li></ol><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-7-10.JPG?raw=true" alt="8-7-10">  </p><p>同样的，右平衡旋转处理的函数代码非常类似。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*  对以指针T所指结点为根的二叉树作右平衡旋转处理， */</span><br><span class="hljs-comment">/*  本算法结束时，指针T指向新的根结点 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RightBalance</span><span class="hljs-params">(BiTree *T)</span></span><br><span class="hljs-function"></span>&#123;<br>    BiTree R, Rl;<br>    R = (*T)-&gt;rchild; <span class="hljs-comment">/*  R指向T的右子树根结点 */</span><br>    <span class="hljs-keyword">switch</span> (R-&gt;bf)<br>    &#123; <span class="hljs-comment">/*  检查T的右子树的平衡度，并作相应平衡处理 */</span><br>    <span class="hljs-keyword">case</span> RH: <span class="hljs-comment">/*  新结点插入在T的右孩子的右子树上，要作单左旋处理 */</span><br>        (*T)-&gt;bf = R-&gt;bf = EH;<br>        L_Rotate(T);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> LH: <span class="hljs-comment">/*  新结点插入在T的右孩子的左子树上，要作双旋处理 */</span><br>        Rl = R-&gt;lchild; <span class="hljs-comment">/*  Rl指向T的右孩子的左子树根 */</span><br>        <span class="hljs-keyword">switch</span> (Rl-&gt;bf)<br>        &#123; <span class="hljs-comment">/*  修改T及其右孩子的平衡因子 */</span><br>        <span class="hljs-keyword">case</span> RH:<br>            (*T)-&gt;bf = LH; R-&gt;bf = EH; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> EH:<br>            (*T)-&gt;bf = R-&gt;bf = EH; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> LH:<br>            (*T)-&gt;bf = EH; R-&gt;bf = RH; <span class="hljs-keyword">break</span>;<br>        &#125;<br>        Rl-&gt;bf = EH;<br>        R_Rotate(&amp;(*T)-&gt;rchild); <span class="hljs-comment">/*  对T的右子树作右旋平衡处理 */</span><br>        L_Rotate(T); <span class="hljs-comment">/*  对T作左旋平衡处理 */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>有了这些准备，我们的主函数才算是正式登场了。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*  若在平衡的二叉排序树T中不存在和e有相同关键字的结点，则插入一个 */</span><br><span class="hljs-comment">/*  数据元素为e的新结点，并返回1，否则返回0。若因插入而使二叉排序树 */</span><br><span class="hljs-comment">/*  失去平衡，则作平衡旋转处理，布尔变量taller反映T长高与否。 */</span><br><span class="hljs-function">Status <span class="hljs-title">InsertAVL</span><span class="hljs-params">(BiTree *T, <span class="hljs-keyword">int</span> e, Status *taller)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!*T)<br>    &#123; <span class="hljs-comment">/*  插入新结点，树“长高”，置taller为TRUE */</span><br>        *T = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>        (*T)-&gt;data = e; (*T)-&gt;lchild = (*T)-&gt;rchild = <span class="hljs-literal">NULL</span>; (*T)-&gt;bf = EH;<br>        *taller = TRUE;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (e == (*T)-&gt;data)<br>        &#123; <span class="hljs-comment">/*  树中已存在和e有相同关键字的结点则不再插入 */</span><br>            *taller = FALSE; <span class="hljs-keyword">return</span> FALSE;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e &lt; (*T)-&gt;data)<br>        &#123; <span class="hljs-comment">/*  应继续在T的左子树中进行搜索 */</span><br>            <span class="hljs-keyword">if</span> (!InsertAVL(&amp;(*T)-&gt;lchild, e, taller)) <span class="hljs-comment">/*  未插入 */</span><br>                <span class="hljs-keyword">return</span> FALSE;<br>            <span class="hljs-keyword">if</span> (*taller) <span class="hljs-comment">/*   已插入到T的左子树中且左子树“长高” */</span><br>                <span class="hljs-keyword">switch</span> ((*T)-&gt;bf) <span class="hljs-comment">/*  检查T的平衡度 */</span><br>                &#123;<br>                <span class="hljs-keyword">case</span> LH: <span class="hljs-comment">/*  原本左子树比右子树高，需要作左平衡处理 */</span><br>                    LeftBalance(T);    *taller = FALSE; <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> EH: <span class="hljs-comment">/*  原本左、右子树等高，现因左子树增高而使树增高 */</span><br>                    (*T)-&gt;bf = LH; *taller = TRUE; <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> RH: <span class="hljs-comment">/*  原本右子树比左子树高，现左、右子树等高 */</span><br>                    (*T)-&gt;bf = EH; *taller = FALSE; <span class="hljs-keyword">break</span>;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123; <span class="hljs-comment">/*  应继续在T的右子树中进行搜索 */</span><br>            <span class="hljs-keyword">if</span> (!InsertAVL(&amp;(*T)-&gt;rchild, e, taller)) <span class="hljs-comment">/*  未插入 */</span><br>                <span class="hljs-keyword">return</span> FALSE;<br>            <span class="hljs-keyword">if</span> (*taller) <span class="hljs-comment">/*  已插入到T的右子树且右子树“长高” */</span><br>                <span class="hljs-keyword">switch</span> ((*T)-&gt;bf) <span class="hljs-comment">/*  检查T的平衡度 */</span><br>                &#123;<br>                <span class="hljs-keyword">case</span> LH: <span class="hljs-comment">/*  原本左子树比右子树高，现左、右子树等高 */</span><br>                    (*T)-&gt;bf = EH; *taller = FALSE;    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> EH: <span class="hljs-comment">/*  原本左、右子树等高，现因右子树增高而使树增高  */</span><br>                    (*T)-&gt;bf = RH; *taller = TRUE; <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> RH: <span class="hljs-comment">/*  原本右子树比左子树高，需要作右平衡处理 */</span><br>                    RightBalance(T); *taller = FALSE; <span class="hljs-keyword">break</span>;<br>                &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>不容易，终于讲完了，本算法代码很长，是有些复杂，编程中容易在很多细节上出错，要想真正掌握它，需要同学们自己多练习。不过其思想还是不难理解的，总之就是把不平衡消灭在最早时刻。<br>如果我们需要查找的集合本身没有顺序，在频繁查找的同时也需要经常的插入和删除操作，显然我们需要构建一棵二叉排序树，但是不平衡的二叉排序树，查找效率是非常低的，因此我们需要在构建时，就让这棵二叉排序树是平衡二叉树，此时我们的查找时间复杂度就为O（㏒n），而插入和删除也为O（㏒n）。这显然是比较理想的一种动态查找表算法。  </p><h2 id="8-8-多路查找树（B树）"><a href="#8-8-多路查找树（B树）" class="headerlink" title="8.8 多路查找树（B树）"></a>8.8 多路查找树（B树）</h2><p><strong>多路查找树（muitl-way search tree），其每一个结点的孩子数可以多于两个，且每一个结点处可以存储多个元素</strong>。<br>在这里，每一个结点可以存储多少个元素，以及它的孩子数的多少是非常关键的。为此，我们讲解它的4种特殊形式：2-3树、2-3-4树、B树和B+树。  </p><h3 id="8-8-1-2-3树"><a href="#8-8-1-2-3树" class="headerlink" title="8.8.1 2-3树"></a>8.8.1 2-3树</h3><p><strong>2-3树是这样的一棵多路查找树：其中的每一个结点都具有两个孩子（我们称它为2结点）或三个孩子（我们称它为3结点）。</strong><br><strong>一个2结点包含一个元素和两个孩子（或没有孩子）</strong>，且与二叉排序树类似，左子树包含的元素小于该元素，右子树包含的元素大于该元素。不过，与二叉排序树不同的是，这个2结点要么没有孩子，要有就有两个，不能只有一个孩子。<br><strong>一个3结点包含一小一大两个元素和三个孩子（或没有孩子）</strong>，一个3结点要么没有孩子，要么具有3个孩子。如果某个3结点有孩子的话，左子树包含小于较小元素的元素，右子树包含大于较大元素的元素，中间子树包含介于两元素之间的元素。<br>并且2-3树中所有的叶子都在同一层次上。如图8-8-2所示，就是一棵有效的2-3树。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-8-2.JPG?raw=true" alt="8-8-2">  </p><p>一 2-3树的插入实现<br>对于2-3树的插入来说，与二叉排序树相同，插入操作一定是发生在叶子结点上。可与二叉排序树不同的是，2-3树插入一个元素的过程有可能会对该树的其余结构产生连锁反应。<br>2-3树插入可分为三种情况。  </p><ol><li>对于空树，插入一个2结点即可，这很容易理解。</li><li>插入结点到一个2结点的叶子上。应该说，由于其本身就只有一个元素，所以只需要将其升级为3结点即可。如图8-8-3所示。我们希望从左图的2-3树中插入元素3，根据遍历可知，3比8小、比4小，于是就只能考虑插入到叶子结点1所在的位置，因此很自然的想法就是将此结点变成一个3结点，即右图这样完成插入操作。当然，要视插入的元素与当前叶子结点的元素比较大小后，决定谁在左谁在右。例如，若插入的是0，则此结点就是“0”在左“1”在右了。</li><li>要往3结点中插入一个新元素。因为3结点本身已经是2-3树的结点最大容量（已经有两个元素），因此就需要将其拆分，且将树中两元素或插入元素的三者中选择其一向上移动一层。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-8-3.JPG?raw=true" alt="8-8-3">  </li></ol><p>二 2-3树的删除实现<br>删除情况较多，具体请见大话数据结构P348。  </p><p>当然，如果对2-3树的插入和删除等所有的情况进行讲解，既占篇幅，又没必要，总的来说它是有规律的，需要你们在上面的这些例子中多去体会后掌握。  </p><h3 id="8-8-2-2-3-4树"><a href="#8-8-2-2-3-4树" class="headerlink" title="8.8.2 2-3-4树"></a>8.8.2 2-3-4树</h3><p>有了2-3树的讲解，2-3-4树就很好理解了，它其实就是2-3树的概念扩展，包括了4结点的使用。一个4结点包含小中大三个元素和四个孩子（或没有孩子），一个4结点要么没有孩子，要么具有4个孩子。如果某个4结点有孩子的话，左子树包含小于最小元素的元素；第二子树包含大于最小元素，小于第二元素的元素；第三子树包含大于第二元素，小于最大元素的元素；右子树包含大于最大元素的元素。<br>由于2-3-4树和2-3树是类似的，我们这里就简单介绍一下，如果我们构建一个数组为{7，1，2，5，6，9，8，4，3}的2-3-4树的过程，如图8-8-15所示。图1是在分别插入7、1、2时的结果图，因为3个元素满足2-3-4树的单个4结点定义，因此此时不需要拆分，接着插入元素5，因为已经超过了4结点的定义，因此拆分为图2的形状。之后的图其实就是在元素不断插入时最后形成了图7的2-3-4树。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-8-15.JPG?raw=true" alt="8-8-15"><br>图8-8-16是对一个2-3-4树的删除结点的演变过程，删除顺序是1、6、3、4、5、2、9。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-8-16.JPG?raw=true" alt="8-8-16">  </p><h3 id="8-8-3-B树"><a href="#8-8-3-B树" class="headerlink" title="8.8.3 B树"></a>8.8.3 B树</h3><p><strong>B树（B-tree）是一种平衡的多路查找树</strong>，2-3树和2-3-4树都是B树的特例。<strong>结点最大的孩子数目称为B树的阶（order）</strong>，因此，2-3树是3阶B树，2-3-4树是4阶B树。<br>一个m阶的B树具有如下属性：<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-8-16.5.JPG?raw=true" alt="8-8-16.5"><br>在B树上查找的过程是一个顺指针查找结点和在结点中查找关键字的交叉过程。<br>比方说，我们要查找数字7，首先从外存（比如硬盘中）读取得到根结点3、5、8三个元素，发现7不在当中，但在5和8之间，因此就通过Az再读取外存的6、7结点，查找到所要的元素。<br>至于B树的插入和删除，方式是与2-3树和2-3-4树相类似的，只不过阶数可能会很大而已。<br>我们在本节的开头提到，如果内存与外存交换数据次数频繁，会造成了时间效率上的瓶颈，那么B树结构怎么就可以做到减少次数呢？<br>我们的外存，比如硬盘，是将所有的信息分割成相等大小的页面，每次硬盘读写的都是一个或多个完整的页面，对于一个硬盘来说，一页的长度可能是211到214个字节。<br>在一个典型的B树应用中，要处理的硬盘数据量很大，因此无法一次全部装入内存。因此我们会对B树进行调整，使得B树的阶数（或结点的元素）与硬盘存储的页面大小相匹配。比如说一棵B树的阶为1001（即1个结点包含1000个关键字），高度为2，它可以储存超过10亿个关键字，我们只要让根结点持久地保留在内存中，那么在这棵树上，寻找某一个关键字至多需要两次硬盘的读取即可。<br>通过这种方式，在有限内存的情况下，每一次磁盘的访问我们都可以获得最大数量的数据。由于B树每结点可以具有比二叉树多得多的元素，所以与二叉树的操作不同，它们减少了必须访问结点和数据块的数量，从而提高了性能。可以说，B树的数据结构就是为内外存的数据交互准备的。<br>那么对于n个关键字的m阶B树，最坏情况是要查找几次呢？我们来作一分析。<br>也就是说，在含有n个关键字的B树上查找时，从根结点到关键字结点的路径上涉及的结点数不超过$\log_\frac m2\left(\frac{n+1}2\right)+1$。  </p><h3 id="8-8-4-B-树"><a href="#8-8-4-B-树" class="headerlink" title="8.8.4 B+树"></a>8.8.4 B+树</h3><p>B+树是应文件系统所需而出的一种B树的变形树，注意严格意义上讲，它其实已经不是第六章定义的树了。在B树中，每一个元素在该树中只出现一次，有可能在叶子结点上，也有可能在分支结点上。而在B+树中，出现在分支结点中的元素会被当作它们在该分支结点位置的中序后继者（叶子结点）中再次列出。另外，每一个叶子结点都会保存一个指向后一叶子结点的指针。<br>例如图8-8-19所示，就是一棵B+树的示意，灰色关键字即是根结点中的关键字在叶子结点再次列出，并且所有叶子结点都链接在一起。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-8-19.JPG?raw=true" alt="8-8-19"><br>一棵m阶的B+树和m阶的B树的差异在于：</p><ul><li>有n棵子树的结点中包含有n个关键字；</li><li>所有的叶子结点包含全部关键字的信息，及指向含这些关键字记录的指针，叶子结点本身依关键字的大小自小而大顺序链接；</li><li>所有分支结点可以看成是索引，结点中仅含有其子树中的最大（或最小）关键字。</li></ul><p>这样的数据结构最大的好处就在于，如果是要随机查找，我们就从根结点出发，与B树的查找方式相同，只不过即使在分支结点找到了待查找的关键字，它也只是用来索引的，不能提供实际记录的访问，还是需要到达包含此关键字的终端结点。如果我们是需要从最小关键字进行从小到大的顺序查找，我们就可以从最左侧的叶子结点出发，不经过分支结点，而是延着指向下一叶子的指针就可遍历所有的关键字。<br>B+树的结构特别适合带有范围的查找。比如查找我们学校18~22岁的学生人数，我们可以通过从根结点出发找到第一个18岁的学生，然后再在叶子结点按顺序查找到符合范围的所有记录。<br>B+树的插入、删除过程也都与B树类似，只不过插入和删除的元素都是在叶子结点上进行而已。  </p><h2 id="8-9-散列表查找（哈希表）概述"><a href="#8-9-散列表查找（哈希表）概述" class="headerlink" title="8.9 散列表查找（哈希表）概述"></a>8.9 散列表查找（哈希表）概述</h2><p>能否直接通过关键字key得到要查找的记录内存存储位置呢,而不是挨个查找下标，再通过顺序存储的存储位置计算内存地址？  </p><h3 id="8-9-1-散列表查找定义"><a href="#8-9-1-散列表查找定义" class="headerlink" title="8.9.1 散列表查找定义"></a>8.9.1 散列表查找定义</h3><p>我们只要通过某个函数f，使得<br><code>存储位置=f（关键字）</code><br>那样我们可以通过查找关键字不需要比较就可获得需要的记录的存储位置。这就是一种新的存储技术——散列技术。<br><strong>散列技术是在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使得每个关键字key对应一个存储位置f（key）</strong>。查找时，根据这个确定的对应关系找到给定值key的映射f（key），若查找集合中存在这个记录，则必定在f（key）的位置上。<br>这里我们把这种对应<strong>关系f称为散列函数，又称为哈希（Hash）函数</strong>。按这个思想，<strong>采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）</strong>。那么关键字对应的记录存储位置我们称为散列地址。  </p><h3 id="8-9-2-散列表查找步骤"><a href="#8-9-2-散列表查找步骤" class="headerlink" title="8.9.2 散列表查找步骤"></a>8.9.2 散列表查找步骤</h3><p>整个散列过程其实就是两步:</p><ol><li>在存储时，通过散列函数计算记录的散列地址，并按此散列地址存储该记录。不管什么记录，我们都需要用同一个散列函数计算出地址再存储。</li><li>当查找记录时，我们通过同样的散列函数计算记录的散列地址，按此散列地址访问该记录。说起来很简单，在哪存的，上哪去找，由于存取用的是同一个散列函数，因此结果当然也是相同的。  </li></ol><p><strong>散列技术既是一种存储方法，也是一种查找方法。</strong>然而它与线性表、树、图等结构不同的是，前面几种结构，数据元素之间都存在某种逻辑关系，可以用连线图示表示出来，而散列技术的记录之间不存在什么逻辑关系，它只与关键字有关联。因此，散列主要是面向查找的存储结构。<br><strong>散列技术最适合的求解问题是查找与给定值相等的记录。</strong>对于查找来说，简化了比较过程，效率就会大大提高。但万事有利就有弊，散列技术不具备很多常规数据结构的能力。<br>比如那种同样的关键字，它能对应很多记录的情况，却不适合用散列技术；散列表也不适合范围查找，无法排序，无法计算最大值、最小值等结果。<br>设计一个简单、均匀、存储利用率高的散列函数是散列技术中最关键的问题。<br>另一个问题是冲突。在理想的情况下，每一个关键字，通过散列函数计算出来的地址都是不一样的，可现实中，这只是一个理想。我们时常会碰到两个关键字key1≠key2，但是却有f（key1）=f（key2），这种现象我们称为冲突（collsion），并把key1和key2称为这个散列函数的同义词（synonym）。出现了冲突当然非常糟糕，那将造成数据查找错误。尽管我们可以通过精心设计的散列函数让冲突尽可能的少，但是不能完全避免。于是如何处理冲突就成了一个很重要的课题，这在我们后面也需要详细讲解。  </p><h2 id="8-10-散列函数的构造方法"><a href="#8-10-散列函数的构造方法" class="headerlink" title="8.10 散列函数的构造方法"></a>8.10 散列函数的构造方法</h2><p>那么什么才算是好的散列函数呢？<br>1.计算简单。  2.散列地址分布均匀  </p><h3 id="8-10-1-直接定址法"><a href="#8-10-1-直接定址法" class="headerlink" title="8.10.1 直接定址法"></a>8.10.1 直接定址法</h3><p>可以取关键字的某个线性函数值为散列地址，即<br><code>f（key）=a x key+b（a、b为常数）</code><br>这样的散列函数优点就是简单、均匀，也不会产生冲突，但问题是这需要事先知道关键字的分布情况，适合查找表较小且连续的情况。由于这样的限制，在现实应用中，此方法虽然简单，但却并不常用。  </p><h3 id="8-10-2-数字分析法"><a href="#8-10-2-数字分析法" class="headerlink" title="8.10.2 数字分析法"></a>8.10.2 数字分析法</h3><p>比如手机号码作为关键字，那么我们抽取手机号码后面的四位成为散列地址。<br>这里我们提到了一个关键词——抽取。抽取方法是使用关键字的一部分来计算散列存储位置的方法，这在散列函数中是常常用到的手段。<br>数字分析法通常适合处理关键字位数比较大的情况，如果事先知道关键字的分布且关键字的若干位分布较均匀，就可以考虑用这个方法。  </p><h3 id="8-10-3-平方取中法"><a href="#8-10-3-平方取中法" class="headerlink" title="8.10.3 平方取中法"></a>8.10.3 平方取中法</h3><p>这个方法计算很简单，假设关键字是1234，那么它的平方就是1522756，再抽取中间的3位就是227，用做散列地址。再比如关键字是4321，那么它的平方就是18671041，抽取中间的3位就可以是671，也可以是710，用做散列地址。平方取中法比较适合于不知道关键字的分布，而位数又不是很大的情况。  </p><h3 id="8-10-4-折叠法"><a href="#8-10-4-折叠法" class="headerlink" title="8.10.4 折叠法"></a>8.10.4 折叠法</h3><p>折叠法是将关键字从左到右分割成位数相等的几部分（注意最后一部分位数不够时可以短些），然后将这几部分叠加求和，并按散列表表长，取后几位作为散列地址。<br>比如我们的关键字是9876543210，散列表表长为三位，我们将它分为四组，987|654|321|0，然后将它们叠加求和987+654+321+0=1962，再取后3位得到散列地址为962。<br>折叠法事先不需要知道关键字的分布，适合关键字位数较多的情况。  </p><h3 id="8-10-5-除留余数法"><a href="#8-10-5-除留余数法" class="headerlink" title="8.10.5 除留余数法"></a>8.10.5 除留余数法</h3><p>此方法为最常用的构造散列函数方法。对于散列表长为m的散列函数公式为：<br><code>f（key）=key mod p（p ≤ m）</code><br>mod是取模（求余数）的意思。事实上，这方法不仅可以对关键字直接取模，也可在折叠、平方取中后再取模。<br>很显然，本方法的关键就在于选择合适的p，p如果选得不好，就可能会容易产生同义词。<br>根据前辈们的经验，若散列表表长为m，通常p为小于或等于表长（最好接近m）的最小质数或不包含小于20质因子的合数。  </p><h3 id="8-10-6-随机数法"><a href="#8-10-6-随机数法" class="headerlink" title="8.10.6 随机数法"></a>8.10.6 随机数法</h3><p>选择一个随机数，取关键字的随机函数值为它的散列地址。也就是<code>f（key）=random（key）</code>。这里random是随机函数。当关键字的长度不等时，采用这个方法构造散列函数是比较合适的。<br>总之，现实中，应该视不同的情况采用不同的散列函数。我们只能给出一些考虑的因素来提供参考：</p><ol><li>计算散列地址所需的时间。</li><li>关键字的长度。</li><li>散列表的大小。</li><li>关键字的分布情况。</li><li>记录查找的频率。</li></ol><p>综合这些因素，才能决策选择哪种散列函数更合适。  </p><h2 id="8-11-处理散列冲突的方法"><a href="#8-11-处理散列冲突的方法" class="headerlink" title="8.11 处理散列冲突的方法"></a>8.11 处理散列冲突的方法</h2><h3 id="8-11-1-开放定址法"><a href="#8-11-1-开放定址法" class="headerlink" title="8.11.1 开放定址法"></a>8.11.1 开放定址法</h3><p>所谓的<strong>开放定址法就是一旦发生了冲突，就代入公式去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。</strong><br>公式是： <code>fi(key)=(f(key)+di) MOD m   (di=1,2,3,……,m-1)</code><br>我们把这种解决冲突的开放定址法称为线性探测法。<br>从这个例子我们也看到，我们在解决冲突的时候，还会碰到如48和37这种本来都不是同义词却需要<strong>争夺一个地址的情况，我们称这种现象为堆积</strong>。很显然，堆积的出现，使得我们需要不断处理冲突，无论是存入还是查找效率都会大大降低。<br>我们可以把di该进为(di)²，增加平方运算的目的是<strong>为了不让关键字都聚集在某一块区域。我们称这种方法为二次探测法</strong>。<br><code>fi（key）=（f（key）+di）MOD m  （di=1²，(-1)²，2²,(-2)²,…，q²，(-q)²,q≤m/2）</code><br>还有一种方法是，<strong>在冲突时，对于位移量d采用随机函数计算得到，我们称之为随机探测法。</strong><br><code>fi（key）=（f（key）+di）MOD m   （di是一个随机数列）</code>  </p><h3 id="8-11-2-再散列函数法"><a href="#8-11-2-再散列函数法" class="headerlink" title="8.11.2 再散列函数法"></a>8.11.2 再散列函数法</h3><p>对于我们的散列表来说，我们事先准备多个散列函数。<br>f$_i$（key）=RH$_i$（key）（i=1,2,…,k）<br>这里RH$_i$，就是不同的散列函数，你可以把我们前面说的什么除留余数、折叠、平方取中全部用上。每当发生散列地址冲突时，就换一个散列函数计算，相信总会有一个可以把冲突解决掉。这种方法能够使得关键字不产生聚集，当然，相应地也增加了计算的时间。  </p><h3 id="8-11-3-链地址法"><a href="#8-11-3-链地址法" class="headerlink" title="8.11.3 链地址法"></a>8.11.3 链地址法</h3><p>将所有关键字为同义词的记录存储在一个单链表中，我们称这种表为同义词子表，在散列表中只存储所有同义词子表的头指针。对于关键字集合{12，67，56，16，25，37，22，29，15，47，48，34}，我们用前面同样的12为除数，进行除留余数法，可得到如图8-11-1结构，此时，已经不存在什么冲突换址的问题，无论有多少个冲突，都只是在当前位置给单链表增加结点的问题。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-11-1.JPG?raw=true" alt="8-11-1"><br>链地址法对于可能会造成很多冲突的散列函数来说，提供了绝不会出现找不到地址的保障。当然，这也就带来了查找时需要遍历单链表的性能损耗。  </p><h3 id="8-11-4-公共溢出区法"><a href="#8-11-4-公共溢出区法" class="headerlink" title="8.11.4 公共溢出区法"></a>8.11.4 公共溢出区法</h3><p>这个方法其实就更加好理解，你不是冲突吗？好吧，凡是冲突的都跟我走，我给你们这些冲突找个地儿待着。这就如同孤儿院收留所有无家可归的孩子一样，我们为所有冲突的关键字建立了一个公共的溢出区来存放。<br>就前面的例子而言，我们共有三个关键字{37，48，34}与之前的关键字位置有冲突，那么就将它们存储到溢出表中，如图8-11-2所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AB%E7%AB%A0/8-11-2.JPG?raw=true" alt="8-11-2"><br>图8-11-2在查找时，对给定值通过散列函数计算出散列地址后，先与基本表的相应位置进行比对，如果相等，则查找成功；如果不相等，则到溢出表去进行顺序查找。如果相对于基本表而言，有冲突的数据很少的情况下，公共溢出区的结构对查找性能来说还是非常高的。  </p><h2 id="8-12-散列表查找实现"><a href="#8-12-散列表查找实现" class="headerlink" title="8.12 散列表查找实现"></a>8.12 散列表查找实现</h2><h3 id="8-12-1-散列表查找算法实现"><a href="#8-12-1-散列表查找算法实现" class="headerlink" title="8.12.1 散列表查找算法实现"></a>8.12.1 散列表查找算法实现</h3><p>首先是需要定义一个散列表的结构以及一些相关的常数。其中HashTable 就是散列表结构。结构当中的elem为一个动态数组。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUCCESS 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UNSUCCESS 0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HASHSIZE 12 <span class="hljs-comment">/* 定义散列表长为数组的长度 */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NULLKEY -32768</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> *elem; <span class="hljs-comment">/* 数据元素存储基址，动态分配数组 */</span><br>    <span class="hljs-keyword">int</span> count; <span class="hljs-comment">/*  当前数据元素个数 */</span><br>&#125;HashTable;<br><span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 散列表表长，全局变量 */</span><br></code></pre></div></td></tr></table></figure><p>有了结构的定义，我们可以对散列表进行初始化。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 初始化散列表 */</span><br><span class="hljs-function">Status <span class="hljs-title">InitHashTable</span><span class="hljs-params">(HashTable *H)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    m = HASHSIZE;<br>    H-&gt;count = m;<br>    H-&gt;elem = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(m * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        H-&gt;elem[i] = NULLKEY;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>为了插入时计算地址，我们需要定义散列函数，散列函数可以根据不同情况更改算法。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 散列函数 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Hash</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> key % m; <span class="hljs-comment">/* 除留余数法 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>初始化完成后，我们可以对散列表进行插入操作。假设我们插入的关键字集合就是前面的{12，67，56，16，25，37，22，29，15，47，48，34}。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 插入关键字进散列表 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertHash</span><span class="hljs-params">(HashTable *H, <span class="hljs-keyword">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> addr = Hash(key); <span class="hljs-comment">/* 求散列地址 */</span><br>    <span class="hljs-keyword">while</span> (H-&gt;elem[addr] != NULLKEY) <span class="hljs-comment">/* 如果不为空，则冲突 */</span><br>        addr = (addr + <span class="hljs-number">1</span>) % m; <span class="hljs-comment">/* 开放定址法的线性探测 */</span><br>    H-&gt;elem[addr] = key; <span class="hljs-comment">/* 直到有空位后插入关键字 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码中插入关键字时，首先算出散列地址，如果当前地址不为空关键字，则说明有冲突。此时我们应用开放定址法的线性探测进行重新寻址，此处也可更改为链地址法等其他解决冲突的办法。<br>散列表存在后，我们在需要时就可以通过散列表查找要的记录。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 散列表查找关键字 */</span><br><span class="hljs-function">Status <span class="hljs-title">SearchHash</span><span class="hljs-params">(HashTable H, <span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span> *addr)</span></span><br><span class="hljs-function"></span>&#123;<br>    *addr = Hash(key);  <span class="hljs-comment">/* 求散列地址 */</span><br>    <span class="hljs-keyword">while</span> (H.elem[*addr] != key) <span class="hljs-comment">/* 如果不为空，则冲突 */</span><br>    &#123;<br>        *addr = (*addr + <span class="hljs-number">1</span>) % m; <span class="hljs-comment">/* 开放定址法的线性探测 */</span><br>        <span class="hljs-keyword">if</span> (H.elem[*addr] == NULLKEY || *addr == Hash(key)) <span class="hljs-comment">/* 如果循环回到原点 */</span><br>            <span class="hljs-keyword">return</span> UNSUCCESS;    <span class="hljs-comment">/* 则说明关键字不存在 */</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>查找的代码与插入的代码非常类似，只需做一个不存在关键字的判断而已。  </p><h3 id="8-12-2-散列表查找性能分析"><a href="#8-12-2-散列表查找性能分析" class="headerlink" title="8.12.2 散列表查找性能分析"></a>8.12.2 散列表查找性能分析</h3><p>最后，我们对散列表查找的性能作一个简单分析。如果没有冲突，散列查找是我们本章介绍的所有查找中效率最高的，因为它的时间复杂度为O(1)。可惜，我说的只是“如果”，没有冲突的散列只是一种理想，在实际的应用中，冲突是不可避免的。那么散列查找的平均查找长度取决于哪些因素呢？  </p><ol><li>散列函数是否均匀<br>散列函数的好坏直接影响着出现冲突的频繁程度，不过，由于不同的散列函数对同一组随机的关键字，产生冲突的可能性是相同的，因此我们可以不考虑它对平均查找长度的影响。</li><li>处理冲突的方法<br>相同的关键字、相同的散列函数，但处理冲突的方法不同，会使得平均查找长度不同。比如线性探测处理冲突可能会产生堆积，显然就没有二次探测法好，而链地址法处理冲突不会产生任何堆积，因而具有更佳的平均查找性能。</li><li>散列表的装填因子<br>所谓的装填因子α=填入表中的记录个数/散列表长度。α标志着散列表的装满的程度。当填入表中的记录越多，α就越大，产生冲突的可能性就越大。比如我们前面的例子，如图8-11-5所示，如果你的散列表长度是12，而填入表中的记录个数为11，那么此时的装填因子α=11/12=0.9167，再填入最后一个关键字产生冲突的可能性就非常之大。也就是说，散列表的平均查找长度取决于装填因子，而不是取决于查找集合中的记录个数。  </li></ol><p>不管记录个数n有多大，我们总可以选择一个合适的装填因子以便将平均查找长度限定在一个范围之内，此时我们散列查找的时间复杂度就真的是O(1)了。为了做到这一点，通常我们都是将散列表的空间设置得比查找集合大，此时虽然是浪费了一定的空间，但换来的是查找效率的大大提升，总的来说，还是非常值得的。  </p><h2 id="8-13-总结回顾"><a href="#8-13-总结回顾" class="headerlink" title="8.13 总结回顾"></a>8.13 总结回顾</h2><p>我们这一章全都是围绕一个主题“查找”来作文章的。<br>首先我们要弄清楚查找表、记录、关键字、主关键字、静态查找表、动态查找表等这些概念。<br>然后，对于顺序表查找来说，尽管很土（简单），但它却是后面很多查找的基础，注意设置“哨兵”的技巧，可以使得本已经很难提升的简单算法里还是提高了性能。<br>有序查找，我们着重讲了折半查找的思想，它在性能上比原来的顺序查找有了质的飞跃，由O（n）变成了O（㏒n）。之后我们又讲解了另外两种优秀的有序查找：插值查找和斐波那契查找，三者各有优缺点，望大家要仔细体会。<br>线性索引查找，我们讲解了稠密索引、分块索引和倒排索引。索引技术被广泛的用于文件检索、数据库和搜索引擎等技术领域，是进一步学习这些技术的基础。<br>二叉排序树是动态查找最重要的数据结构，它可以在兼顾查找性能的基础上，让插入和删除也变得效率较高。不过为了达到最优的状态，二叉排序树最好是构造成平衡的二叉树才最佳。因此我们就需要再学习关于平衡二叉树（AVL树）的数据结构，了解AVL树是如何处理平衡性的问题。这部分是本章重点，需要认真学习掌握。<br>B树这种数据结构是针对内存与外存之间的存取而专门设计的。由于内外存的查找性能更多取决于读取的次数，因此在设计中要考虑B树的平衡和层次。我们讲解时是先通过最最简单的B树（2-3树）来理解如何构建、插入、删除元素的操作，再通过2-3-4树的深化，最终来理解B树的原理。之后，我们还介绍了B+树的设计思想。<br>散列表是一种非常高效的查找数据结构，在原理上也与前面的查找不尽相同，它回避了关键字之间反复比较的烦琐，而是直接一步到位查找结果。当然，这也就带来了记录之间没有任何关联的弊端。应该说，散列表对于那种查找性能要求高，记录之间关系无要求的数据有非常好的适用性。在学习中要注意的是散列函数的选择和处理冲突的方法。  </p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>大话数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缪雪峰MySQL教程</title>
    <link href="/2020/01/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/%E7%BC%AA%E9%9B%AA%E5%B3%B0MySQL%E6%95%99%E7%A8%8B/"/>
    <url>/2020/01/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/%E7%BC%AA%E9%9B%AA%E5%B3%B0MySQL%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一：-MySQL执行外部sql脚本文件的命令"><a href="#一：-MySQL执行外部sql脚本文件的命令" class="headerlink" title="一： MySQL执行外部sql脚本文件的命令"></a>一： MySQL执行外部sql脚本文件的命令</h1><p>sql脚本是包含一到多个sql命令的sql语句，我们可以将这些sql脚本放在一个文本文件中（我们称之为“sql脚本文件”），然后通过相关的命令执行这个sql脚本文件。基本步骤如下：  </p><h2 id="1-1-创建包含sql命令的sql脚本文件"><a href="#1-1-创建包含sql命令的sql脚本文件" class="headerlink" title="1.1 创建包含sql命令的sql脚本文件"></a>1.1 创建包含sql命令的sql脚本文件</h2><p>文件中包含一些列的sql语句，每条语句最后以;结尾，文件内容示例如下：<br>–创建表，使用“–”进行注释</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称<br>(<br>  Guid <span class="hljs-type">Varchar</span>(<span class="hljs-number">38</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,  <br>  Title <span class="hljs-type">Varchar</span>(<span class="hljs-number">255</span>),<br><br>) TYPE<span class="hljs-operator">=</span>InnoDB;<br></code></pre></div></td></tr></table></figure><span id="more"></span><ul><li>在表A中增加字段Status<br><code>alter table A add Status TinyInt default &#39;0&#39;;</code></li><li>在表A上创建索引<br><code>create index XX_TaskId_1 on A(Id_);</code></li><li>在A表中添加一条记录<br><code>Insert into A (Id,ParentId, Name) values(1,0,&#39;名称&#39;);</code></li><li>添加、修改、删除数据后，有可能需要提交事务<br><code>Commit;</code></li></ul><h2 id="1-2-执行sql脚本文件"><a href="#1-2-执行sql脚本文件" class="headerlink" title="1.2 执行sql脚本文件"></a>1.2 执行sql脚本文件</h2><h3 id="1-2-1-方法一-：使用cmd命令执行-windows下，unix或linux在的其控制台下"><a href="#1-2-1-方法一-：使用cmd命令执行-windows下，unix或linux在的其控制台下" class="headerlink" title="1.2.1 方法一 ：使用cmd命令执行(windows下，unix或linux在的其控制台下)"></a>1.2.1 方法一 ：使用cmd命令执行(windows下，unix或linux在的其控制台下)</h3><p>【Mysql的bin目录】\mysql –u用户名 –p密码 –D数据库&lt;【sql脚本文件路径全名】，示例：<br><code>D:\mysql\bin\mysql –uroot –p123456 -Dtest&lt;d:\test\ss.sql</code><br>注意：<br>A、如果在sql脚本文件中使用了use 数据库，则-D数据库选项可以忽略<br>B、如果【Mysql的bin目录】中包含空格，则需要使用“”包含，如：<code>“C:\Program Files\mysql\bin\mysql” –u用户名 –p密码 –D数据库&lt;【sql脚本文件路径全名】</code></p><h3 id="1-2-2-方法二-：进入mysql的控制台后，使用source命令执行"><a href="#1-2-2-方法二-：进入mysql的控制台后，使用source命令执行" class="headerlink" title="1.2.2 方法二 ：进入mysql的控制台后，使用source命令执行"></a>1.2.2 方法二 ：进入mysql的控制台后，使用source命令执行</h3><p>Mysql&gt;source 【sql脚本文件的路径全名】 或 Mysql&gt;. 【sql脚本文件的路径全名】，示例：<code>source d:\test\ss.sql</code> 或者 <code>\. d:\test\ss.sql</code></p><h1 id="二：-关系数据库概述"><a href="#二：-关系数据库概述" class="headerlink" title="二： 关系数据库概述"></a>二： 关系数据库概述</h1><p>数据库按照数据结构来组织、存储和管理数据，实际上，数据库一共有三种模型：  </p><ul><li>层次模型</li><li>网状模型</li><li>关系模型</li></ul><p>随着时间的推移和市场竞争，最终，基于<strong>关系模型</strong>的关系数据库获得了绝对市场份额。  </p><h2 id="2-1-数据类型"><a href="#2-1-数据类型" class="headerlink" title="2.1 数据类型"></a>2.1 数据类型</h2><p>对于一个关系表，除了定义每一列的名称外，还需要定义每一列的数据类型。关系数据库支持的标准数据类型包括数值、字符串、时间等：  </p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>INT</td><td>整型</td><td>4字节整数类型，范围约+/-21亿</td></tr><tr><td>BIGINT</td><td>长整型</td><td>8字节整数类型，范围约+/-922亿亿</td></tr><tr><td>REAL</td><td>浮点型</td><td>4字节浮点数，范围约+/-1038</td></tr><tr><td>DOUBLE</td><td>浮点型</td><td>8字节浮点数，范围约+/-10308</td></tr><tr><td>DECIMAL(M,N)</td><td>高精度小数</td><td>由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算</td></tr><tr><td>CHAR(N)</td><td>定长字符串</td><td>存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串</td></tr><tr><td>VARCHAR(N)</td><td>变长字符串</td><td>存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串</td></tr><tr><td>BOOLEAN</td><td>布尔类型</td><td>存储True或者False</td></tr><tr><td>DATE</td><td>日期类型</td><td>存储日期，例如，2018-06-22</td></tr><tr><td>TIME</td><td>时间类型</td><td>存储时间，例如，12:20:59</td></tr><tr><td>DATETIME</td><td>日期和时间类型</td><td>存储日期+时间，例如，2018-06-22 12:20:59</td></tr></tbody></table><h2 id="2-2-SQL-DML-和-DDL"><a href="#2-2-SQL-DML-和-DDL" class="headerlink" title="2.2 SQL DML 和 DDL"></a>2.2 SQL DML 和 DDL</h2><p>总的来说，可以把 SQL 分为两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。<br>SQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。<br>查询和更新指令构成了 SQL 的 DML 部分：  </p><ol><li>SELECT - 从数据库表中获取数据</li><li>UPDATE - 更新数据库表中的数据</li><li>DELETE - 从数据库表中删除数据</li><li>INSERT INTO - 向数据库表中插入数据</li></ol><p>SQL 的数据定义语言 (DDL) 部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。<br>SQL 中最重要的 DDL 语句:  </p><ol><li>CREATE DATABASE - 创建新数据库</li><li>ALTER DATABASE - 修改数据库</li><li>CREATE TABLE - 创建新表</li><li>ALTER TABLE - 变更（改变）数据库表</li><li>DROP TABLE - 删除表</li><li>CREATE INDEX - 创建索引（搜索键）</li><li>DROP INDEX - 删除索引</li></ol><h2 id="2-3-安装MySQL"><a href="#2-3-安装MySQL" class="headerlink" title="2.3 安装MySQL"></a>2.3 安装MySQL</h2><p>要在Windows或Mac上安装MySQL，首先从MySQL官方网站下载最新的MySQL Community Server版本：<br><a href="https://dev.mysql.com/downloads/mysql/">MySQL官方网站</a><br>选择对应的操作系统版本，下载安装即可。在安装过程中，MySQL会自动创建一个root用户，并提示输入root口令。<br>要在Linux上安装MySQL，可以使用发行版的包管理器。例如，Debian和Ubuntu用户可以简单地通过命令<code>apt-get install mysql-server</code>安装最新的MySQL版本。  </p><h2 id="2-4-运行MySQL"><a href="#2-4-运行MySQL" class="headerlink" title="2.4 运行MySQL"></a>2.4 运行MySQL</h2><p>MySQL安装后会自动在后台运行。为了验证MySQL安装是否正确，我们需要通过mysql这个命令行程序来连接MySQL服务器。<br>在命令提示符下输入mysql -u root -p，然后输入口令，如果一切正确，就会连接到MySQL服务器，同时提示符变为mysql&gt;。<br>输入exit退出MySQL命令行。注意，MySQL服务器仍在后台运行。  </p><h1 id="三：-关系模型"><a href="#三：-关系模型" class="headerlink" title="三： 关系模型"></a>三： 关系模型</h1><p>我们已经知道，关系数据库是建立在关系模型上的。而关系模型本质上就是若干个存储数据的二维表，可以把它们看作很多Excel表。<br>表的每一行称为记录（Record），记录是一个逻辑意义上的数据。<br>表的每一列称为字段（Column），同一个表的每一行记录都拥有相同的若干字段。<br>字段定义了数据类型（整型、浮点型、字符串、日期等），以及是否允许为NULL。注意NULL表示字段数据不存在。一个整型字段如果为NULL不表示它的值为0，同样的，一个字符串型字段为NULL也不表示它的值为空串’’。  </p><blockquote><p>通常情况下，字段应该避免允许为NULL。不允许为NULL可以简化查询条件，加快查询速度，也利于应用程序读取数据后无需判断是否为NULL。  </p></blockquote><p>在关系数据库中，关系是通过主键和外键来维护的。</p><h2 id="3-1-主键"><a href="#3-1-主键" class="headerlink" title="3.1 主键"></a>3.1 主键</h2><p>在关系数据库中，一张表中的每一行数据被称为一条记录。一条记录就是由多个字段组成的。<br>每一条记录都包含若干定义好的字段。同一个表的所有记录都有相同的字段定义。<br><strong>对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为主键。</strong><br>对主键的要求，最关键的一点是：记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。<br>由于主键的作用十分重要，如何选取主键会对业务开发产生重要影响。如果我们以学生的身份证号作为主键，似乎能唯一定位记录。然而，身份证号也是一种业务场景，如果身份证号升位了，或者需要变更，作为主键，不得不修改的时候，就会对业务产生严重影响。<br>所以，选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。<br>因此，身份证号、手机号、邮箱地址这些看上去可以唯一的字段，均不可用作主键。<br>作为主键最好是完全业务无关的字段，我们一般把这个字段命名为id。常见的可作为id字段的类型有：  </p><ul><li>自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；</li><li>全局唯一GUID类型：使用一种全局唯一的字符串作为主键，类似8f55d96b-8acc-4636-8cb8-76bf8abc2f57。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。</li></ul><p>对于大部分应用来说，通常自增类型的主键就能满足需求。  </p><blockquote><p>PS:如果使用INT自增类型，那么当一张表的记录数超过2147483647（约21亿）时，会达到上限而出错。使用BIGINT自增类型则可以最多约922亿亿条记录。  </p></blockquote><p>关系数据库实际上还允许通过多个字段唯一标识记录，即两个或更多的字段都设置为主键，这种主键被称为<strong>联合主键</strong>。<br>对于联合主键，允许一列有重复，只要不是所有主键列都重复即可。<br>没有必要的情况下，我们尽量不使用联合主键，因为它给关系表带来了复杂度的上升。  </p><p><strong>小结</strong><br><strong>主键是关系表中记录的唯一标识。主键的选取非常重要：主键不要带有业务含义，而应该使用<code>BIGINT自增</code>或者<code>GUID类型</code>。主键也不应该允许<code>NULL</code>。可以使用多个列作为联合主键，但联合主键并不常用。</strong></p><h2 id="3-2-外键"><a href="#3-2-外键" class="headerlink" title="3.2 外键"></a>3.2 外键</h2><p>由于一个班级可以有多个学生，在关系模型中，这两个表的关系可以称为“一对多”，即一个<code>classes</code>的记录可以对应多个<code>students</code>表的记录。<br>为了表达这种一对多的关系，我们需要在<code>students</code>表中加入一列<code>class_id</code>，让它的值与<code>classes</code>表的某条记录相对应。<br>这样，我们就可以根据<code>class_id</code>这个列直接定位出一个<code>students</code>表的记录应该对应到<code>classes</code>的哪条记录。<br>在<code>students</code>表中，通过<code>class_id</code>的字段，可以把数据与另一张表关联起来，这种列称为外键。<br>外键并不是通过列名实现的，而是通过定义外键约束实现的：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> fk_class_id<br><span class="hljs-keyword">FOREIGN</span> KEY (class_id)<br><span class="hljs-keyword">REFERENCES</span> classes (id);<br></code></pre></div></td></tr></table></figure><p>其中，外键约束的名称<code>fk_class_id</code>可以任意，<code>FOREIGN KEY (class_id)</code>指定了<code>class_id</code>作为外键，<code>REFERENCES classes (id)</code>指定了这个外键将关联到<code>classes</code>表的id列（即<code>classes</code>表的主键）。<br>通过定义外键约束，关系数据库可以保证无法插入无效的数据。即如果<code>classes</code>表不存在id=99的记录，<code>students</code>表就无法插入<code>class_id=99</code>的记录。<br>由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠应用程序自身来保证逻辑的正确性。这种情况下，<code>class_id</code>仅仅是一个普通的列，只是它起到了外键的作用而已。<br>要删除一个外键约束，也是通过<code>ALTER TABLE</code>实现的：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> KEY fk_class_id;<br></code></pre></div></td></tr></table></figure><blockquote><p>注意：删除外键约束并没有删除外键这一列。删除列是通过<code>DROP COLUMN ...</code>实现的。  </p></blockquote><p>通过一个表的外键关联到另一个表，我们可以定义出一对多关系。有些时候，还需要定义“多对多”关系。例如，一个老师可以对应多个班级，一个班级也可以对应多个老师，因此，班级表和老师表存在多对多关系。<br>多对多关系实际上是通过两个一对多关系实现的，即<strong>通过一个中间表，关联两个一对多关系，就形成了多对多关系</strong>。<br>一对一关系是指，一个表的记录对应到另一个表的唯一一个记录。  目的是把经常读取和不经常读取的字段分开，提高查询速度，以获得更高的性能。  </p><p><strong>小结</strong><br><strong>关系数据库通过外键可以实现一对多、多对多和一对一的关系。外键既可以通过数据库来约束，也可以不设置约束，仅依靠应用程序的逻辑来保证。</strong></p><h2 id="3-3-索引"><a href="#3-3-索引" class="headerlink" title="3.3 索引"></a>3.3 索引</h2><p>在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。<br>索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。<br>如果要经常根据<code>score</code>列进行查询，就可以对<code>score</code>列创建索引：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students<br><span class="hljs-keyword">ADD</span> INDEX idx_score (score);<br></code></pre></div></td></tr></table></figure><p>使用<code>ADD INDEX idx_score (score)</code>就创建了一个名称为<code>idx_score</code>，使用列<code>score</code>的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students<br><span class="hljs-keyword">ADD</span> INDEX idx_name_score (name, score);<br></code></pre></div></td></tr></table></figure><p>索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如<code>gender</code>列，大约一半的记录值是M，另一半是F，因此，对该列创建索引就没有意义。<br>可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。<br>对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。  </p><p><strong>小结</strong><br><strong>通过对数据库表创建索引，可以提高查询速度。</strong><br><strong>通过创建唯一索引，可以保证某一列的值具有唯一性。</strong><br><strong>数据库索引对于用户和应用程序来说都是透明的。</strong></p><h1 id="四：-查询数据"><a href="#四：-查询数据" class="headerlink" title="四： 查询数据"></a>四： 查询数据</h1><p>在关系数据库中，最常用的操作就是查询。</p><h2 id="4-1-基本查询"><a href="#4-1-基本查询" class="headerlink" title="4.1 基本查询"></a>4.1 基本查询</h2><p>要查询数据库表的数据，我们使用如下的SQL语句：<br><code>SELECT * FROM &lt;表名&gt;</code><br>假设表名是<code>students</code>，要查询<code>students</code>表的所有行，我们用如下SQL语句：<br><code>SELECT * FROM students;</code>。<br>使用<code>SELECT * FROM students</code>时，<code>SELECT</code>是关键字，表示将要执行一个查询，<code>*</code>表示“所有列”，<code>FROM</code>表示将要从哪个表查询，本例中是<code>students</code>表。<br>该SQL将查询出<code>students</code>表的所有数据。注意：查询结果也是一个二维表，它包含列名和每一行的数据。  </p><p>在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同（distinct）的值。<br>关键词 DISTINCT 用于返回唯一不同的值。语法：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 列名称 <span class="hljs-keyword">FROM</span> 表名称<br></code></pre></div></td></tr></table></figure><p><strong>小结</strong><br><strong>使用<code>SELECT(选择、挑选、选拔)</code>查询的基本语句<code>SELECT * FROM &lt;表名&gt;</code>可以查询一个表的所有行和所有列的数据。<code>SELECT</code>查询的结果是一个二维表。</strong>  </p><h2 id="4-2-条件查询"><a href="#4-2-条件查询" class="headerlink" title="4.2 条件查询"></a>4.2 条件查询</h2><p><code>SELECT</code>语句可以通过<code>WHERE（到哪里）</code>条件来设定查询条件，查询结果是满足查询条件的记录。例如，要指定条件“分数在80分或以上的学生”，写成<code>WHERE</code>条件就是:<br><code>SELECT * FROM students WHERE score &gt;= 80;</code>。<br>其中，<code>WHERE</code>关键字后面的<code>score &gt;= 80</code>就是条件。<code>score</code>是列名，该列存储了学生的成绩，因此，<code>score &gt;= 80</code>就筛选出了指定条件的记录：<br><code>SELECT * FROM students WHERE score &gt;= 80;</code>。<br>因此，条件查询的语法就是：<br><code>SELECT * FROM &lt;表名&gt; WHERE &lt;条件表达式&gt;</code>  </p><p>条件表达式可以用<code>&lt;条件1&gt; AND &lt;条件2&gt;</code>表达满足条件1并且满足条件2。例如，符合条件“分数在80分或以上”，并且还符合条件“男生”，把这两个条件写出来：</p><ul><li>条件1：根据score列的数据判断：score &gt;= 80；</li><li>条件2：根据gender列的数据判断：gender = ‘M’，注意gender列存储的是字符串，需要用单引号括起来。</li></ul><p>就可以写出<code>WHERE</code>条件：<br><code>SELECT * FROM students WHERE score &gt;= 80 AND gender = &#39;M&#39;;</code>。<br>第二种条件是&lt;条件1&gt; OR &lt;条件2&gt;，表示满足条件1或者满足条件2。例如：<br><code>SELECT * FROM students WHERE score &gt;= 80 OR gender = &#39;M&#39;;</code><br>第三种条件是NOT &lt;条件&gt;，表示“不符合该条件”的记录。例如：<br><code>SELECT * FROM students WHERE NOT class_id = 2;</code>表示不是2班的学生。<br>要组合三个或者更多的条件，就需要用小括号()表示如何进行条件运算。例如，编写一个复杂的条件：分数在80以下或者90以上，并且是男生：<br><code>SELECT * FROM students WHERE (score &lt; 80 OR score &gt; 90) AND gender = &#39;M&#39;;</code><br>如果不加括号，条件运算按照<code>NOT、AND、OR</code>的优先级进行，即<code>NOT</code>优先级最高，其次是<code>AND</code>，最后是<code>OR</code>。加上括号可以改变优先级。  </p><p>常用的条件表达式：  </p><table><thead><tr><th>条件</th><th>表达式举例1</th><th>表达式举例2</th><th>说明</th></tr></thead><tbody><tr><td>使用=判断相等</td><td>score = 80</td><td>name = ‘abc’</td><td>字符串需要用单引号括起来</td></tr><tr><td>使用&gt;判断大于</td><td>score &gt; 80</td><td>name &gt; ‘abc’</td><td>字符串比较根据ASCII码，中文字符比较根据数据库设置</td></tr><tr><td>使用&gt;=判断大于或相等</td><td>score &gt;= 80</td><td>name &gt;= ‘abc’</td><td></td></tr><tr><td>使用&lt;判断小于</td><td>score &lt; 80</td><td>name &lt;= ‘abc’</td><td></td></tr><tr><td>使用&lt;=判断小于或相等</td><td>score &lt;= 80</td><td>name &lt;= ‘abc’</td><td></td></tr><tr><td>使用&lt;&gt;判断不相等</td><td>score &lt;&gt; 80</td><td>name &lt;&gt; ‘abc’</td><td></td></tr><tr><td>使用LIKE判断相似</td><td>name LIKE ‘ab%’</td><td>name LIKE ‘%bc%’</td><td>%表示任意字符，例如’ab%’将匹配’ab’，’abc’，’abcd’</td></tr></tbody></table><p><strong>小结</strong><br><strong>通过WHERE条件查询，可以筛选出符合指定条件的记录，而不是整个表的所有记录。</strong></p><h2 id="4-3-投影查询"><a href="#4-3-投影查询" class="headerlink" title="4.3 投影查询"></a>4.3 投影查询</h2><p>如果我们只希望返回某些列的数据，而不是所有列的数据，我们可以用<code>SELECT 列1, 列2, 列3 FROM ...</code>，让结果集仅包含指定列。这种操作称为投影查询。<br>例如，从<code>students</code>表中返回<code>id、score和name</code>这三列：<br><code>SELECT id, score, name FROM students;</code><br>这样返回的结果集就只包含了我们指定的列，并且，结果集的列的顺序和原表可以不一样。  </p><p>使用<code>SELECT 列1, 列2, 列3 FROM ...</code>时，还可以给每一列起个别名，这样，结果集的列名就可以与原表的列名不同。它的语法是<code>SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM ...</code>。</p><p>例如，以下<code>SELECT</code>语句将列名<code>score</code>重命名为<code>points</code>，而<code>id</code>和<code>name</code>列名保持不变：<code>SELECT id, score points, name FROM students;</code><br>投影查询同样可以接<code>WHERE</code>条件，实现复杂的查询：<br><code>SELECT id, score points, name FROM students WHERE gender = &#39;M&#39;;</code>  </p><p><strong>小结</strong><br><strong>使用<code>SELECT *</code>表示查询表的所有列，使用<code>SELECT 列1, 列2, 列3</code>则可以仅返回指定列，这种操作称为投影。<code>SELECT</code>语句可以对结果集的列进行重命名。</strong>  </p><h2 id="4-4-排序"><a href="#4-4-排序" class="headerlink" title="4.4 排序"></a>4.4 排序</h2><p>可以加上<code>ORDER BY</code>子句。可以按照成绩从低到高进行排序：<br><code>SELECT id, name, gender, score FROM students ORDER BY score;</code><br>如果要反过来，按照成绩从高到底排序，我们可以加上DESC表示“倒序”：<br><code>SELECT id, name, gender, score FROM students ORDER BY score DESC;</code><br>如果score列有相同的数据，要进一步排序，可以继续添加列名。例如，使用ORDER BY score DESC, gender表示先按score列倒序，如果有相同分数的，再按gender列排序：<br><code>SELECT id, name, gender, score FROM students ORDER BY score DESC, gender;</code><br>默认的排序规则是<code>ASC</code>：“升序”，即从小到大。<code>ASC</code>可以省略，即<code>ORDER BY score ASC</code>和<code>ORDER BY score</code>效果一样。<br>如果有<code>WHERE</code>子句，那么<code>ORDER BY</code>子句要放到<code>WHERE</code>子句后面。例如，查询一班的学生成绩，并按照倒序排序：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id, name, gender, score<br><span class="hljs-keyword">FROM</span> students<br><span class="hljs-keyword">WHERE</span> class_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span>;<br></code></pre></div></td></tr></table></figure><p>这样，结果集仅包含符合WHERE条件的记录，并按照ORDER BY的设定排序。<br><strong>小结</strong><br><strong>使用ORDER BY可以对结果集进行排序；可以对多列进行升序、倒序排序。</strong>  </p><h2 id="4-5-分页查询"><a href="#4-5-分页查询" class="headerlink" title="4.5 分页查询"></a>4.5 分页查询</h2><p>要实现分页功能，实际上就是从结果集中显示第1<del>100条记录作为第1页，显示第101</del>200条记录作为第2页，以此类推。<br>因此，分页实际上就是从结果集中“截取”出第M~N条记录。这个查询可以通过<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>子句实现。我们先把所有学生按照成绩从高到低进行排序，我们把结果集分页，每页3条记录。要获取第1页的记录，可以使用<code>LIMIT 3 OFFSET 0</code>：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id, name, gender, score<br><span class="hljs-keyword">FROM</span> students<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">3</span> <span class="hljs-keyword">OFFSET</span> <span class="hljs-number">0</span>;<br></code></pre></div></td></tr></table></figure><p>上述查询<code>LIMIT 3 OFFSET 0</code>表示，对结果集从0号记录开始，最多取3条。注意SQL记录集的索引从0开始。<br>如果要查询第2页，那么我们只需要“跳过”头3条记录，也就是对结果集从3号记录开始查询，把OFFSET设定为3：<code>LIMIT 3 OFFSET 3;</code><br>LIMIT 3表示的意思是“最多3条记录”。  </p><p>可见，分页查询的关键在于，首先要确定每页需要显示的结果数量pageSize（这里是3），然后根据当前页的索引pageIndex（从1开始），确定LIMIT和OFFSET应该设定的值：</p><ul><li>LIMIT总是设定为pageSize；</li><li>OFFSET计算公式为pageSize * (pageIndex - 1)。</li></ul><p>这样就能正确查询出第N页的记录集。</p><blockquote><p>PS:OFFSET超过了查询的最大数量并不会报错，而是得到一个空的结果集。<br>OFFSET是可选的，如果只写LIMIT 15，那么相当于LIMIT 15 OFFSET 0。<br>在MySQL中，<code>LIMIT 15 OFFSET 30</code>还可以简写成<code>LIMIT 30, 15</code>。<br>使用<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>分页时，随着N越来越大，查询效率也会越来越低。  </p></blockquote><p><strong>小结</strong><br><strong>使用<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>可以对结果集进行分页，每次查询返回结果集的一部分；分页查询需要先确定每页的数量和当前页数，然后确定LIMIT和OFFSET的值。</strong></p><h2 id="4-6-聚合查询"><a href="#4-6-聚合查询" class="headerlink" title="4.6 聚合查询"></a>4.6 聚合查询</h2><h3 id="4-6-1-聚合函数"><a href="#4-6-1-聚合函数" class="headerlink" title="4.6.1 聚合函数"></a>4.6.1 聚合函数</h3><p>对于统计总数、平均数这类计算，SQL提供了专门的聚合函数，使用聚合函数进行查询，就是聚合查询，它可以快速获得结果。<br>仍然以查询students表一共有多少条记录为例，我们可以使用SQL内置的COUNT()函数查询：<br><code>SELECT COUNT(*) FROM students;</code><br><code>COUNT(*)</code>表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是<code>COUNT(*)</code>。<br>通常，使用聚合查询时，我们应该给列名设置一个别名，便于处理结果：<br><code>SELECT COUNT(*) num FROM students;</code><br><code>COUNT(*)</code>和<code>COUNT(id)</code>实际上是一样的效果。另外注意，聚合查询同样可以使用WHERE条件，因此我们可以方便地统计出有多少男生、多少女生、多少80分以上的学生等：<br><code>SELECT COUNT(*) boys FROM students WHERE gender = &#39;M&#39;;</code><br>除了COUNT()函数外，SQL还提供了如下聚合函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SUM</td><td>计算某一列的合计值，该列必须为数值类型</td></tr><tr><td>AVG</td><td>计算某一列的平均值，该列必须为数值类型</td></tr><tr><td>MAX</td><td>计算某一列的最大值</td></tr><tr><td>MIN</td><td>计算某一列的最小值</td></tr></tbody></table><p>注意，MAX()和MIN()函数并不限于数值类型。如果是字符类型，MAX()和MIN()会返回排序最后和排序最前的字符。<br>要统计男生的平均成绩，我们用下面的聚合查询：<br><code>SELECT AVG(score) average FROM students WHERE gender = &#39;M&#39;;</code><br>要特别注意：如果聚合查询的WHERE条件没有匹配到任何行，COUNT()会返回0，而SUM()、AVG()、MAX()和MIN()会返回NULL。<br>通过聚合查询获得总页数:<br><code>SELECT CEILING(COUNT(*) / 3) FROM students;</code>  </p><h3 id="4-6-2-分组聚合"><a href="#4-6-2-分组聚合" class="headerlink" title="4.6.2 分组聚合"></a>4.6.2 分组聚合</h3><p>对于聚合查询，SQL还提供了“分组聚合”的功能。我们观察下面的聚合查询：<br><code>SELECT COUNT(*) num FROM students GROUP BY class_id;</code><br>执行这个查询，COUNT()的结果不再是一个，而是3个，这是因为，<code>GROUP(组) BY</code>子句指定了按class_id分组，因此，执行该SELECT语句时，会把class_id相同的列先分组，再分别计算，因此，得到了3行结果。<br>但是这3行结果分别是哪三个班级的，不好看出来，所以我们可以把class_id列也放入结果集中：<br><code>SELECT class_id, COUNT(*) num FROM students GROUP BY class_id;</code>这下结果集就可以一目了然地看出各个班级的学生人数。<br>也可以使用多个列进行分组。例如，我们想统计各班的男生和女生人数：<br><code>SELECT class_id, gender, COUNT(*) num FROM students GROUP BY class_id, gender;</code><br><strong>小结</strong><br><strong>使用SQL提供的聚合查询，我们可以方便地计算总数、合计值、平均值、最大值和最小值；聚合查询也可以添加WHERE条件。</strong></p><h2 id="4-7-多表查询"><a href="#4-7-多表查询" class="headerlink" title="4.7 多表查询"></a>4.7 多表查询</h2><p>SELECT查询不但可以从一张表查询数据，还可以从多张表同时查询数据。查询多张表的语法是：<code>SELECT * FROM &lt;表1&gt; &lt;表2&gt;</code>。<br>例如，同时从students表和classes表的“乘积”，即查询数据，可以这么写：<code>SELECT * FROM students, classes;</code><br>这种一次查询两个表的数据，查询的结果也是一个二维表，它是students表和classes表的“乘积”，即students表的每一行与classes表的每一行都两两拼在一起返回。结果集的列数是students表和classes表的列数之和，行数是students表和classes表的行数之积。<br>这种多表查询又称<strong>笛卡尔查询</strong>，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有100行记录的表进行笛卡尔查询将返回1万条记录，对两个各自有1万行记录的表进行笛卡尔查询将返回1亿条记录。  </p><p>上述查询的结果集有两列id和两列name，两列id是因为其中一列是students表的id，而另一列是classes表的id，但是在结果集中，不好区分。两列name同理。要解决这个问题，我们仍然可以利用投影查询的“设置列的别名”来给两个表各自的id和name列起别名：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    students.id sid,<br>    students.name,<br>    students.gender,<br>    students.score,<br>    classes.id cid,<br>    classes.name cname<br><span class="hljs-keyword">FROM</span> students, classes;<br></code></pre></div></td></tr></table></figure><p>注意，多表查询时，要使用<code>表名.列名</code>这样的方式来引用列和设置别名，这样就避免了结果集的列名重复问题。但是，用<code>表名.列名</code>这种方式列举两个表的所有列实在是很麻烦，所以SQL还允许给表设置一个别名，让我们在投影查询中引用起来稍微简洁一点：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    s.id sid,<br>    s.name,<br>    s.gender,<br>    s.score,<br>    c.id cid,<br>    c.name cname<br><span class="hljs-keyword">FROM</span> students s, classes c;<br></code></pre></div></td></tr></table></figure><p>注意到FROM子句给表设置别名的语法是<code>FROM &lt;表名1&gt; &lt;别名1&gt;, &lt;表名2&gt; &lt;别名2&gt;</code>。这样我们用别名s和c分别表示students表和classes表。<br>多表查询也是可以添加WHERE条件的：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    s.id sid,<br>    s.name,<br>    s.gender,<br>    s.score,<br>    c.id cid,<br>    c.name cname<br><span class="hljs-keyword">FROM</span> students s, classes c<br><span class="hljs-keyword">WHERE</span> s.gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;M&#x27;</span> <span class="hljs-keyword">AND</span> c.id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure><p><strong>小结</strong><br><strong>使用多表查询可以获取M x N行记录；多表查询的结果集可能非常巨大，要小心使用。</strong></p><h2 id="4-8-连接查询"><a href="#4-8-连接查询" class="headerlink" title="4.8 连接查询"></a>4.8 连接查询</h2><p>连接查询是另一种类型的多表查询。连接查询对多个表进行JOIN运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。<br>例如，我们想要选出students表的所有学生信息，可以用一条简单的SELECT语句完成：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.id, s.name, s.class_id, s.gender, s.score <span class="hljs-keyword">FROM</span> students s;<br></code></pre></div></td></tr></table></figure><p>但是，假设我们希望结果集同时包含所在班级的名称，上面的结果集只有class_id列，缺少对应班级的name列。<br>现在问题来了，存放班级名称的name列存储在classes表中，只有根据students表的class_id，找到classes表对应的行，再取出name列，就可以获得班级名称。<br>这时，连接查询就派上了用场。我们先使用最常用的一种内连接——INNER JOIN来实现：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score<br><span class="hljs-keyword">FROM</span> students s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> classes c<br><span class="hljs-keyword">ON</span> s.class_id <span class="hljs-operator">=</span> c.id;<br></code></pre></div></td></tr></table></figure><p>注意INNER JOIN查询的写法是：</p><ol><li>先确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；</li><li>再确定需要连接的表，使用<code>INNER(里面的) JOIN &lt;表2&gt;</code>的语法；</li><li>然后确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class_id = c.id</code>，表示students表的class_id列与classes表的id列相同的行需要连接；</li><li>可选：加上WHERE子句、ORDER BY等子句。</li></ol><p>那什么是内连接（INNER JOIN）呢？先别着急，有内连接（INNER JOIN）就有外连接（OUTER JOIN）。我们把内连接查询改成外连接查询，看看效果：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score<br><span class="hljs-keyword">FROM</span> students s<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> classes c<br><span class="hljs-keyword">ON</span> s.class_id <span class="hljs-operator">=</span> c.id;<br></code></pre></div></td></tr></table></figure><p>执行上述RIGHT OUTER JOIN可以看到，和INNER JOIN相比，RIGHT OUTER JOIN多了一行，多出来的一行是“四班”，但是，学生相关的列如name、gender、score都为NULL。<br>这也容易理解，因为根据ON条件<code>s.class_id = c.id</code>，classes表的id=4的行正是“四班”，但是，students表中并不存在class_id=4的行。<br>有RIGHT OUTER JOIN，就有LEFT OUTER JOIN，以及FULL OUTER JOIN。它们的区别是：  </p><ul><li>INNER JOIN只返回同时存在于两张表的行数据，由于students表的class_id包含1，2，3，classes表的id包含1，2，3，4，所以，INNER JOIN根据条件<code>s.class_id = c.id</code>返回的结果集仅包含1，2，3。</li><li>RIGHT OUTER JOIN返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以NULL填充剩下的字段。</li><li>LEFT OUTER JOIN则返回左表都存在的行。如果我们给students表增加一行，并添加class_id=5，由于classes表并不存在id=5的行，所以，LEFT OUTER JOIN的结果会增加一行，对应的class_name是NULL。</li></ul><p>对于这么多种JOIN查询，到底什么使用应该用哪种呢？其实我们用图来表示结果集就一目了然了。假设查询语句是：<br><code>SELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;</code><br>我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：<br><img src="https://www.liaoxuefeng.com/files/attachments/1246892164662976/l" alt="inner-join"><br>LEFT OUTER JOIN是选出左表存在的记录：<br><img src="https://www.liaoxuefeng.com/files/attachments/1246893588481376/l" alt="left-outer-join"><br>RIGHT OUTER JOIN是选出右表存在的记录：<br><img src="https://www.liaoxuefeng.com/files/attachments/1246893609222688/l" alt="right-outer-join"><br>FULL OUTER JOIN则是选出左右表都存在的记录：<br><img src="https://www.liaoxuefeng.com/files/attachments/1246893632359424/l" alt="full-outer-join">  </p><p><strong>小结</strong><br><strong>JOIN查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；  INNER JOIN是最常用的一种JOIN查询，它的语法是<code>SELECT ... FROM &lt;表1&gt; INNER JOIN &lt;表2&gt; ON &lt;条件...&gt;</code>；  JOIN查询仍然可以使用WHERE条件和ORDER BY排序。</strong></p><h1 id="五：-修改数据"><a href="#五：-修改数据" class="headerlink" title="五： 修改数据"></a>五： 修改数据</h1><p>关系数据库的基本操作就是增删改查，即CRUD：Create、Retrieve、Update、Delete。其中，对于查询，我们已经详细讲述了SELECT语句的详细用法。<br>而对于增、删、改，对应的SQL语句分别是：</p><ul><li>INSERT：插入新记录；</li><li>UPDATE：更新已有记录；</li><li>DELETE：删除已有记录。</li></ul><h2 id="5-1-INSERT"><a href="#5-1-INSERT" class="headerlink" title="5.1 INSERT"></a>5.1 INSERT</h2><p>当我们需要向数据库表中插入一条新记录时，就必须使用<code>INSERT</code>语句。<br>INSERT语句的基本语法是：<br><code>INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...);</code><br>例如，我们向students表插入一条新记录，先列举出需要插入的字段名称，然后在VALUES子句中依次写出对应字段的值：<br><code>INSERT INTO students (class_id, name, gender, score) VALUES (2, &#39;大牛&#39;, &#39;M&#39;, 80);</code><br>注意到我们并没有列出id字段，也没有列出id字段对应的值，这是因为id字段是一个自增主键，它的值可以由数据库自己推算出来。此外，如果一个字段有默认值，那么在INSERT语句中也可以不出现。<br>要注意，字段顺序不必和数据库表的字段顺序一致，但值的顺序必须和字段顺序一致。也就是说，可以写:<br><code>INSERT INTO students (score, gender, name, class_id) ...</code>，但是对应的VALUES就得变成<code>(80, &#39;M&#39;, &#39;大牛&#39;, 2)</code>。<br>还可以一次性添加多条记录，只需要在VALUES子句中指定多个记录值，每个记录是由(…)包含的一组值：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (class_id, name, gender, score) <span class="hljs-keyword">VALUES</span><br>  (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;大宝&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">87</span>),<br>  (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;二宝&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">81</span>);<br><span class="hljs-comment">--</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students;<br>```  <br><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span>小结<span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span>使用<span class="hljs-keyword">INSERT</span>，我们就可以一次向一个表中插入一条或多条记录。<span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><br>## <span class="hljs-number">5.2</span> UPDATE<br><br>如果要更新数据库表中的记录，我们就必须使用UPDATE语句。  <br>UPDATE语句的基本语法是：  <br>`UPDATE <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SET</span> 字段<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span>, ... <span class="hljs-keyword">WHERE</span> ...;`  <br>例如，我们想更新students表id<span class="hljs-operator">=</span><span class="hljs-number">1</span>的记录的name和score这两个字段：  <br>`UPDATE students <span class="hljs-keyword">SET</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;大牛&#x27;</span>, score<span class="hljs-operator">=</span><span class="hljs-number">66</span> <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;`  <br>注意到UPDATE语句的<span class="hljs-keyword">WHERE</span>条件和<span class="hljs-keyword">SELECT</span>语句的<span class="hljs-keyword">WHERE</span>条件其实是一样的，因此完全可以一次更新多条记录：  <br>`UPDATE students <span class="hljs-keyword">SET</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;小牛&#x27;</span>, score<span class="hljs-operator">=</span><span class="hljs-number">77</span> <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">&gt;=</span><span class="hljs-number">5</span> <span class="hljs-keyword">AND</span> id<span class="hljs-operator">&lt;=</span><span class="hljs-number">7</span>;`  <br>在UPDATE语句中，更新字段时可以使用表达式。例如，把所有<span class="hljs-number">80</span>分以下的同学的成绩加<span class="hljs-number">10</span>分：  <br>`UPDATE students <span class="hljs-keyword">SET</span> score<span class="hljs-operator">=</span>score<span class="hljs-operator">+</span><span class="hljs-number">10</span> <span class="hljs-keyword">WHERE</span> score<span class="hljs-operator">&lt;</span><span class="hljs-number">80</span>;`  <br>其中，<span class="hljs-keyword">SET</span> score<span class="hljs-operator">=</span>score<span class="hljs-operator">+</span><span class="hljs-number">10</span>就是给当前行的score字段的值加上了<span class="hljs-number">10</span>。  <br>如果<span class="hljs-keyword">WHERE</span>条件没有匹配到任何记录，UPDATE语句不会报错，也不会有任何记录被更新。  <br>最后，要特别小心的是，UPDATE语句可以没有<span class="hljs-keyword">WHERE</span>条件，例如：  <br>`UPDATE students <span class="hljs-keyword">SET</span> score<span class="hljs-operator">=</span><span class="hljs-number">60</span>;`  <br>这时，整个表的所有记录都会被更新。所以，在执行UPDATE语句时要非常小心，最好先用<span class="hljs-keyword">SELECT</span>语句来测试<span class="hljs-keyword">WHERE</span>条件是否筛选出了期望的记录集，然后再用UPDATE更新。  <br>在使用MySQL这类真正的关系数据库时，UPDATE语句会返回更新的行数以及<span class="hljs-keyword">WHERE</span>条件匹配的行数。  <br><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span>小结<span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span>使用UPDATE，我们就可以一次更新表中的一条或多条记录。<span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><br>## <span class="hljs-number">5.3</span> <span class="hljs-keyword">DELETE</span><br><br>如果要删除数据库表中的记录，我们可以使用<span class="hljs-keyword">DELETE</span>语句。  <br><span class="hljs-keyword">DELETE</span>语句的基本语法是：  <br>`<span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">WHERE</span> ...;`<br>例如，我们想删除students表中id<span class="hljs-operator">=</span><span class="hljs-number">1</span>的记录，就需要这么写：  <br>`<span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;`  <br>注意到<span class="hljs-keyword">DELETE</span>语句的<span class="hljs-keyword">WHERE</span>条件也是用来筛选需要删除的行，因此和UPDATE类似，<span class="hljs-keyword">DELETE</span>语句也可以一次删除多条记录：  <br>`<span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">&gt;=</span><span class="hljs-number">5</span> <span class="hljs-keyword">AND</span> id<span class="hljs-operator">&lt;=</span><span class="hljs-number">7</span>;`  <br>如果<span class="hljs-keyword">WHERE</span>条件没有匹配到任何记录，<span class="hljs-keyword">DELETE</span>语句不会报错，也不会有任何记录被删除。  <br>最后，要特别小心的是，和UPDATE类似，不带<span class="hljs-keyword">WHERE</span>条件的<span class="hljs-keyword">DELETE</span>语句会删除整个表的数据：  <br>`<span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> students;`  <br>这时，整个表的所有记录都会被删除。所以，在执行<span class="hljs-keyword">DELETE</span>语句时也要非常小心，最好先用<span class="hljs-keyword">SELECT</span>语句来测试<span class="hljs-keyword">WHERE</span>条件是否筛选出了期望的记录集，然后再用<span class="hljs-keyword">DELETE</span>删除。  <br>在使用MySQL这类真正的关系数据库时，<span class="hljs-keyword">DELETE</span>语句也会返回删除的行数以及<span class="hljs-keyword">WHERE</span>条件匹配的行数。  <br><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span>小结<span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span>使用<span class="hljs-keyword">DELETE</span>，我们就可以一次删除表中的一条或多条记录。<span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><br># 六： MySQL<br><br>安装完MySQL后，除了MySQL Server，即真正的MySQL服务器外，还附赠一个MySQL Client程序。MySQL Client是一个命令行客户端，可以通过MySQL Client登录MySQL，然后，输入<span class="hljs-keyword">SQL</span>语句并执行。  <br>打开命令提示符，输入命令`mysql <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p`，提示输入口令。填入MySQL的root口令，如果正确，就连上了MySQL Server，同时提示符变为mysql<span class="hljs-operator">&gt;</span>：  <br>输入exit断开与MySQL Server的连接并返回到命令提示符。<br><span class="hljs-operator">&gt;</span>MySQL Client的可执行程序是mysql，MySQL Server的可执行程序是mysqld。<br><br>在MySQL Client中输入的<span class="hljs-keyword">SQL</span>语句通过TCP连接发送到MySQL Server。默认端口号是<span class="hljs-number">3306</span>，即如果发送到本机MySQL Server，地址就是<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">3306</span>。  <br>也可以只安装MySQL Client，然后连接到远程MySQL Server。假设远程MySQL Server的IP地址是<span class="hljs-number">10.0</span><span class="hljs-number">.1</span><span class="hljs-number">.99</span>，那么就使用<span class="hljs-operator">-</span>h指定IP或域名：  <br>`mysql <span class="hljs-operator">-</span>h <span class="hljs-number">10.0</span><span class="hljs-number">.1</span><span class="hljs-number">.99</span> <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p 密码`  <br><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span>小结<span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span>命令行程序mysql实际上是MySQL客户端，真正的MySQL服务器程序是mysqld，在后台运行。<span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><br>## <span class="hljs-number">6.1</span> 管理MySQL<br><br>要管理MySQL，可以使用可视化图形界面[MySQL Workbench](https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>dev.mysql.com<span class="hljs-operator">/</span>downloads<span class="hljs-operator">/</span>workbench<span class="hljs-operator">/</span>)。  <br>MySQL Workbench可以用可视化的方式查询、创建和修改数据库表，但是，归根到底，MySQL Workbench是一个图形客户端，它对MySQL的操作仍然是发送<span class="hljs-keyword">SQL</span>语句并执行。因此，本质上，MySQL Workbench和MySQL Client命令行都是客户端，和MySQL交互，唯一的接口就是<span class="hljs-keyword">SQL</span>。  <br>因此，MySQL提供了大量的<span class="hljs-keyword">SQL</span>语句用于管理。虽然可以使用MySQL Workbench图形界面来直接管理MySQL，但是，很多时候，通过SSH远程连接时，只能使用<span class="hljs-keyword">SQL</span>命令，所以，了解并掌握常用的<span class="hljs-keyword">SQL</span>管理操作是必须的。  <br><br>### <span class="hljs-number">6.1</span><span class="hljs-number">.1</span> 数据库<br><br>在一个运行MySQL的服务器上，实际上可以创建多个数据库（Database）。要列出所有数据库，使用命令：  <br><br>```<span class="hljs-keyword">sql</span><br><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></div></td></tr></table></figure><p>其中，<code>information_schema</code>、<code>mysql</code>、<code>performance_schema</code>和<code>sys</code>四个是系统库，不要去改动它们。其他的是用户创建的数据库。<br>要创建一个新数据库，使用命令：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE test;<br></code></pre></div></td></tr></table></figure><p>要删除一个数据库，使用命令：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE test;<br></code></pre></div></td></tr></table></figure><p><em>注意：删除一个数据库将导致该数据库的所有表全部被删除。</em><br>对一个数据库进行操作时，要首先将其切换为当前数据库：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">USE test;<br>```  <br><br>### <span class="hljs-number">6.1</span><span class="hljs-number">.2</span> 表<br><br>列出当前数据库的所有表，使用命令：  <br><br>```<span class="hljs-keyword">sql</span><br><span class="hljs-keyword">SHOW</span> TABLES;<br>```  <br><br>要查看一个表的结构，使用命令：  <br><br>```<span class="hljs-keyword">sql</span><br><span class="hljs-keyword">DESC</span> students;<br></code></pre></div></td></tr></table></figure><p>还可以使用以下命令查看创建表的SQL语句：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> students;<br>```  <br><br>创建表使用<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span>语句，而删除表使用<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span>语句：  <br><br>```<span class="hljs-keyword">sql</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> students;<br>```  <br><br>修改表就比较复杂。如果要给students表新增一列birth，使用：  <br><br>```<span class="hljs-keyword">sql</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> birth <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br>```  <br><br>要修改birth列，例如把列名改为birthday，类型改为<span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)：<br><br>```<span class="hljs-keyword">sql</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students CHANGE <span class="hljs-keyword">COLUMN</span> birth birthday <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></div></td></tr></table></figure><p>要删除列，使用：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> birthday;<br></code></pre></div></td></tr></table></figure><h3 id="6-1-3-退出MySQL"><a href="#6-1-3-退出MySQL" class="headerlink" title="6.1.3 退出MySQL"></a>6.1.3 退出MySQL</h3><p>使用EXIT命令退出MySQL：<br><code>EXIT</code><br>注意EXIT仅仅断开了客户端和服务器的连接，MySQL服务器仍然继续运行。  </p><h2 id="6-2-实用SQL语句"><a href="#6-2-实用SQL语句" class="headerlink" title="6.2 实用SQL语句"></a>6.2 实用SQL语句</h2><p>在编写SQL时，灵活运用一些技巧，可以大大简化程序逻辑。  </p><p><strong>一. 插入或替换</strong><br>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就先删除原记录，再插入新记录。此时，可以使用<code>REPLACE</code>语句，这样就不必先查询，再决定是否先删除再插入：<br><code>REPLACE INTO students (id, class_id, name, gender, score) VALUES (1, 1, &#39;小明&#39;, &#39;F&#39;, 99);</code><br>若id=1的记录不存在，REPLACE语句将插入新记录，否则，当前id=1的记录将被删除，然后再插入新记录。  </p><p><strong>二. 插入或更新</strong><br>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就更新该记录，此时，可以使用<code>INSERT INTO ... ON DUPLICATE KEY UPDATE ...</code>语句：<br><code>INSERT INTO students (id, class_id, name, gender, score) VALUES (1, 1, &#39;小明&#39;, &#39;F&#39;, 99) ON DUPLICATE KEY UPDATE name=&#39;小明&#39;, gender=&#39;F&#39;, score=99;</code><br>若id=1的记录不存在，INSERT语句将插入新记录，否则，当前id=1的记录将被更新，更新的字段由UPDATE指定。  </p><p><strong>三. 插入或忽略</strong><br>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就啥事也不干直接忽略，此时，可以使用<code>INSERT IGNORE INTO ...</code>语句：<br><code>INSERT IGNORE INTO students (id, class_id, name, gender, score) VALUES (1, 1, &#39;小明&#39;, &#39;F&#39;, 99);</code><br>若id=1的记录不存在，INSERT语句将插入新记录，否则，不执行任何操作。  </p><p><strong>四. 快照</strong><br>如果想要对一个表进行快照，即复制一份当前表的数据到一个新表，可以结合CREATE TABLE和SELECT：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 对class_id=1的记录进行快照，并存储为新表students_of_class1:  </span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> students_of_class1 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> class_id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure><p>新创建的表结构和SELECT使用的表结构完全一致。</p><p><strong>五. 写入查询结果集</strong><br>如果查询结果集需要写入到表中，可以结合INSERT和SELECT，将SELECT语句的结果集直接插入到指定表中。<br>例如，创建一个统计成绩的表statistics，记录各班的平均成绩：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> statistics (<br>    id <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    class_id <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    average <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br></code></pre></div></td></tr></table></figure><p>然后，我们就可以用一条语句写入各班的平均成绩：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> statistics (class_id, average) <span class="hljs-keyword">SELECT</span> class_id, <span class="hljs-built_in">AVG</span>(score) <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> class_id;<br></code></pre></div></td></tr></table></figure><p>确保INSERT语句的列和SELECT语句的列能一一对应，就可以在statistics表中直接保存查询的结果：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> statistics;<br></code></pre></div></td></tr></table></figure><p><strong>六. 强制使用指定索引</strong><br>在查询的时候，数据库系统会自动分析查询语句，并选择一个最合适的索引。但是很多时候，数据库系统的查询优化器并不一定总是能使用最优索引。如果我们知道如何选择索引，可以使用FORCE INDEX强制查询使用指定的索引。例如：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students FORCE INDEX (idx_class_id) <span class="hljs-keyword">WHERE</span> class_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id <span class="hljs-keyword">DESC</span>;<br></code></pre></div></td></tr></table></figure><p>指定索引的前提是索引idx_class_id必须存在。  </p><h1 id="七：-事务"><a href="#七：-事务" class="headerlink" title="七： 事务"></a>七： 事务</h1><p>在执行SQL语句的时候，某些业务要求，一系列操作必须全部执行，而不能仅执行一部分。例如，一个转账操作：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 从id=1的账户给id=2的账户转账100元</span><br><span class="hljs-comment">-- 第一步：将id=1的A账户余额减去100</span><br>UPDATE accounts <span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">-</span> <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">-- 第二步：将id=2的B账户余额加上100</span><br>UPDATE accounts <span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">+</span> <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br></code></pre></div></td></tr></table></figure><p>这两条SQL语句必须全部执行，或者，由于某些原因，如果第一条语句成功，第二条语句失败，就必须全部撤销。<br>这种把<strong>多条语句作为一个整体进行操作的功能，被称为数据库事务</strong>。数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。如果事务失败，那么效果就和没有执行这些SQL一样，不会对数据库数据有任何改动。<br>可见，数据库事务具有ACID这4个特性：</p><ol><li>A：Atomic，原子性，将所有SQL作为原子工作单元执行，要么全部执行，要么全部不执行；</li><li>C：Consistent，一致性，事务完成后，所有数据的状态都是一致的，即A账户只要减去了100，B账户则必定加上了100；</li><li>I：Isolation，隔离性，如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离；</li><li>D：Duration，持久性，即事务完成后，对数据库数据的修改被持久化存储。</li></ol><p>对于单条SQL语句，数据库系统自动将其作为一个事务执行，这种事务被称为隐式事务。<br>要手动把多条SQL语句作为一个事务执行，使用<code>BEGIN</code>开启一个事务，使用<code>COMMIT</code>提交一个事务，这种事务被称为<strong>显式事务</strong>，例如，把上述的转账操作作为一个显式事务：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span>;<br>UPDATE accounts <span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">-</span> <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>UPDATE accounts <span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">+</span> <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></div></td></tr></table></figure><p>很显然多条SQL语句要想作为一个事务执行，就必须使用显式事务。<br>COMMIT是指提交事务，即试图把事务内的所有SQL所做的修改永久保存。如果COMMIT语句执行失败了，整个事务也会失败。<br>有些时候，我们希望主动让事务失败，这时，可以用ROLLBACK回滚事务，整个事务会失败：  </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span>;<br>UPDATE accounts <span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">-</span> <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>UPDATE accounts <span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">+</span> <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">ROLLBACK</span>;<br></code></pre></div></td></tr></table></figure><p>数据库事务是由数据库系统保证的，我们只需要根据业务逻辑使用它就可以。  </p><p><strong>隔离级别</strong></p><p>对于两个并发执行的事务，如果涉及到操作同一条记录的时候，可能会发生问题。因为并发操作会带来数据的不一致性，包括脏读、不可重复读、幻读等。数据库系统提供了隔离级别来让我们有针对性地选择事务的隔离级别，避免数据不一致的问题。<br>SQL标准定义了4种隔离级别，分别对应可能出现的数据不一致的情况：  </p><table><thead><tr><th>Isolation Level</th><th>脏读（Dirty Read）</th><th>不可重复读（Non Repeatable Read）</th><th>幻读（Phantom Read）</th></tr></thead><tbody><tr><td>Read Uncommitted</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Read Committed</td><td>-</td><td>Yes</td><td>Yes</td></tr><tr><td>Repeatable Read</td><td>-</td><td>-</td><td>Yes</td></tr><tr><td>Serializable</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p>我们会依次介绍4种隔离级别的数据一致性问题。  </p><p><strong>小结</strong><br><strong>数据库事务具有ACID特性，用来保证多条SQL的全部执行。</strong></p><h2 id="7-1-Read-Uncommitted"><a href="#7-1-Read-Uncommitted" class="headerlink" title="7.1 Read Uncommitted"></a>7.1 Read Uncommitted</h2><p>Read Uncommitted是隔离级别最低的一种事务级别。在这种隔离级别下，一个事务会读到另一个事务更新后但未提交的数据，如果另一个事务回滚，那么当前事务读到的数据就是脏数据，这就是脏读（Dirty Read）。<br>我们来看一个例子。首先，我们准备好students表的数据，该表仅一行记录。<br>然后，分别开启两个MySQL客户端连接，按顺序依次执行事务A和事务B：</p><table><thead><tr><th>时刻</th><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>1</td><td>SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td><td>SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td></tr><tr><td>2</td><td>BEGIN;</td><td>BEGIN;</td></tr><tr><td>3</td><td>UPDATE students SET name = ‘Bob’ WHERE id = 1;</td><td></td></tr><tr><td>4</td><td></td><td>SELECT * FROM students WHERE id = 1;</td></tr><tr><td>5</td><td>ROLLBACK;</td><td></td></tr><tr><td>6</td><td></td><td>SELECT * FROM students WHERE id = 1;</td></tr><tr><td>7</td><td></td><td>COMMIT;</td></tr></tbody></table><p>当事务A执行完第3步时，它更新了id=1的记录，但并未提交，而事务B在第4步读取到的数据就是未提交的数据。<br>随后，事务A在第5步进行了回滚，事务B再次读取id=1的记录，发现和上一次读取到的数据不一致，这就是脏读。<br>可见，在Read Uncommitted隔离级别下，一个事务可能读取到另一个事务更新但未提交的数据，这个数据有可能是脏数据。  </p><h2 id="7-2-Read-Committed"><a href="#7-2-Read-Committed" class="headerlink" title="7.2 Read Committed"></a>7.2 Read Committed</h2><p>在Read Committed隔离级别下，一个事务可能会遇到不可重复读（Non Repeatable Read）的问题。<br>不可重复读是指，在一个事务内，多次读同一数据，在这个事务还没有结束时，如果另一个事务恰好修改了这个数据，那么，在第一个事务中，两次读取的数据就可能不一致。<br>我们仍然先准备好students表的数据，然后，分别开启两个MySQL客户端连接，按顺序依次执行事务A和事务B：  </p><table><thead><tr><th>时刻</th><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>1</td><td>SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</td><td>SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</td></tr><tr><td>2</td><td>BEGIN;</td><td>BEGIN;</td></tr><tr><td>3</td><td></td><td>SELECT * FROM students WHERE id = 1;</td></tr><tr><td>4</td><td>UPDATE students SET name = ‘Bob’ WHERE id = 1;</td><td></td></tr><tr><td>5</td><td>COMMIT;</td><td></td></tr><tr><td>6</td><td></td><td>SELECT * FROM students WHERE id = 1;</td></tr><tr><td>7</td><td></td><td>COMMIT;</td></tr></tbody></table><p>当事务B第一次执行第3步的查询时，得到的结果是Alice，随后，由于事务A在第4步更新了这条记录并提交，所以，事务B在第6步再次执行同样的查询时，得到的结果就变成了Bob，因此，在Read Committed隔离级别下，事务不可重复读同一条记录，因为很可能读到的结果不一致。  </p><h2 id="7-3-Repeatable-Read"><a href="#7-3-Repeatable-Read" class="headerlink" title="7.3 Repeatable Read"></a>7.3 Repeatable Read</h2><p>在Repeatable Read隔离级别下，一个事务可能会遇到幻读（Phantom Read）的问题。<br>幻读是指，在一个事务中，第一次查询某条记录，发现没有，但是，当试图更新这条不存在的记录时，竟然能成功，并且，再次读取同一条记录，它就神奇地出现了。<br>我们仍然先准备好students表的数据，然后，分别开启两个MySQL客户端连接，按顺序依次执行事务A和事务B：  </p><table><thead><tr><th>时刻</th><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>1</td><td>SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</td><td>SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</td></tr><tr><td>2</td><td>BEGIN;</td><td>BEGIN;</td></tr><tr><td>3</td><td></td><td>SELECT * FROM students WHERE id = 99;</td></tr><tr><td>4</td><td>INSERT INTO students (id, name) VALUES (99, ‘Bob’);</td><td></td></tr><tr><td>5</td><td>COMMIT;</td><td></td></tr><tr><td>6</td><td></td><td>SELECT * FROM students WHERE id = 99;</td></tr><tr><td>7</td><td></td><td>UPDATE students SET name = ‘Alice’ WHERE id = 99;</td></tr><tr><td>8</td><td></td><td>SELECT * FROM students WHERE id = 99;</td></tr><tr><td>9</td><td></td><td>COMMIT;</td></tr></tbody></table><p>事务B在第3步第一次读取id=99的记录时，读到的记录为空，说明不存在id=99的记录。随后，事务A在第4步插入了一条id=99的记录并提交。事务B在第6步再次读取id=99的记录时，读到的记录仍然为空，但是，事务B在第7步试图更新这条不存在的记录时，竟然成功了，并且，事务B在第8步再次读取id=99的记录时，记录出现了。<br>可见，幻读就是没有读到的记录，以为不存在，但其实是可以更新成功的，并且，更新成功后，再次读取，就出现了。  </p><h2 id="7-4-Serializable"><a href="#7-4-Serializable" class="headerlink" title="7.4 Serializable"></a>7.4 Serializable</h2><p>Serializable是最严格的隔离级别。在Serializable隔离级别下，所有事务按照次序依次执行，因此，脏读、不可重复读、幻读都不会出现。<br>虽然Serializable隔离级别下的事务具有最高的安全性，但是，由于事务是串行执行，所以效率会大大下降，应用程序的性能会急剧降低。如果没有特别重要的情景，一般都不会使用Serializable隔离级别。  </p><p><strong>默认隔离级别</strong><br><strong>如果没有指定隔离级别，数据库就会使用默认的隔离级别。在MySQL中，如果使用InnoDB，默认的隔离级别是Repeatable Read。</strong>  </p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>MYSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大话数据结构第七章 图</title>
    <link href="/2020/01/08/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC7%E7%AB%A0%20%E5%9B%BE/"/>
    <url>/2020/01/08/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC7%E7%AB%A0%20%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="7-1-7-2-图的定义"><a href="#7-1-7-2-图的定义" class="headerlink" title="7.1-7.2 图的定义"></a>7.1-7.2 图的定义</h2><p>图（Graph）是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G（V，E），其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。<br>对于图的定义，我们需要明确几个注意的地方。</p><span id="more"></span><ul><li>线性表中我们把数据元素叫元素，树中将数据元素叫结点，<strong>在图中数据元素，我们则称之为顶点（Vertex）</strong>。</li><li>线性表中可以没有数据元素，称为空表。树中可以没有结点，叫做空树。我们根本不认为一张空白纸算作画的。同样，在图结构中，不允许没有顶点。在定义中，若V是顶点的集合，则强调了顶点集合V有穷非空。</li><li>线性表中，相邻的数据元素之间具有线性关系，树结构中，相邻两层的结点具有层次关系，而图中，任意两个顶点之间都可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的。</li></ul><h3 id="7-2-1-各种图定义"><a href="#7-2-1-各种图定义" class="headerlink" title="7.2.1 各种图定义"></a>7.2.1 各种图定义</h3><p><strong>无向边：若顶点vi到vj之间的边没有方向，则称这条边为无向边（Edge），用无序偶对（ViVj）来表示</strong>。<br>如果图中任意两个顶点之间的边都是无向边，则称该图为无向图（Undirected graphs）。<br>有向边：若从顶点Vi到Vj的边有方向，则称这条边为有向边，也称为弧（Arc）。<br>用有序偶&lt;vi，vj&gt;来表示，vi称为弧尾（Tail），vj称为弧头（Head）。如果图中任意两个顶点之间的边都是有向边，则称该图为有向图（Directed graphs）。图7-2-3就是一个有向图。连接顶点A到D的有向边就是弧，A是弧尾，D是弧头，&lt;A，D&gt;表示弧，注意不能写成&lt;D，A&gt;。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-2-3.JPG?raw=true" alt="7-2-3"><br>对于图7-2-3中的有向图G2来说，G2=(V2,{E2})，其中顶点集合V2={A.B，C，D}；弧集合E2={&lt;A，D&gt;，&lt;B，A&gt;，&lt;C，A&gt;，&lt;B，C&gt;}。<br>看清楚了，无向边用小括号“（）”表示，而有向边则是用尖括号“&lt;&gt;”表示。<br>在图中，若不存在顶点到其自身的边，且同一条边不重复出现，则称这样的图为简单图。<br><strong>在无向图中，如果任意两个顶点之间都存在边，则称该图为无向完全图</strong>。含有n个顶点的无向完全图有（nx(n-1)）/2条边。<br><strong>在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧，则称该图为有向完全图</strong>。含有n个顶点的有向完全图有n×（n-1）条边。<br><strong>有很少条边或弧的图称为稀疏图，反之称为稠密图</strong>。<br>有些图的边或弧具有与它相关的数字，这种<strong>与图的边或弧相关的数叫做权（Weight）</strong>。这些权可以表示从一个顶点到另一个顶点的距离或耗费。<strong>这种带权的图通常称为网（Network）</strong>。图7-2-7就是一张带权的图，即标识中国四大城市的直线距离的网，此图中的权就是两地的距离。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-2-7.JPG?raw=true" alt="7-2-7"><br>假设有两个图G=（V，{E}）和G’=（V’,{E’}），如果V’⊆V且E’⊆E，则称G’为G的子图（SubGraph）。  </p><h3 id="7-2-2-图的顶点与边间关系"><a href="#7-2-2-图的顶点与边间关系" class="headerlink" title="7.2.2 图的顶点与边间关系"></a>7.2.2 图的顶点与边间关系</h3><p>对于无向图G=（V,{E}），如果边（v,v’）∈E，则称顶点v和v’互为邻接点（Adjacent），即v和v’相邻接。边（v，v’）依附（incident）于顶点v和v’，或者说（v,v’）与顶点v和v’相关联。顶点v的度（Degree）是和v相关联的边的数目，记为TD（v）。<br>对于有向图G=（V,{E}），如果弧&lt;v,v’&gt;∈E，则称顶点v邻接到顶点v’，顶点v’邻接自顶点v。弧&lt;v，v’&gt;和顶点v，v’相关联。以顶点v为头的弧的数目称为v的入度（InDegree），记为ID（v）；以v为尾的弧的数目称为v的出度（OutDegree），记为OD（v）；顶点v的度为TD（v）=ID（v）+OD（v）。<br>无向图G=（V，{E}）中从顶点v到顶点v’的路径（Path）是一个顶点序列（v=$v_{i,0}$,$v_{i,1}$,…,$v_{i,m}$=v’），其中（$v_{i,j-1}$，$v_{i,j}$）∈E，1≤j≤m。<br>树中根结点到任意结点的路径是唯一的，但是图中顶点与顶点之间的路径却是不唯一的。<br><strong>路径的长度是路径上的边或弧的数目。</strong><br>第一个顶点到最后一个顶点相同的路径称为回路或环（Cycle）。序列中顶点不重复出现的路径称为简单路径。除了第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路，称为简单回路或简单环。  </p><h3 id="7-2-3-连通图相关术语"><a href="#7-2-3-连通图相关术语" class="headerlink" title="7.2.3 连通图相关术语"></a>7.2.3 连通图相关术语</h3><p>在无向图G中，如果从顶点v到顶点v’有路径，则称v和v’是连通的。如果对于图中任意两个顶点$v_i$、$v_j$∈E，$v_i$和$v_j$都是连通的，则称G是连通图（Connected Graph）。<br><strong>无向图中的极大连通子图称为连通分量</strong>。注意连通分量的概念，它强调：</p><ul><li>要是子图；</li><li>子图要是连通的；</li><li>连通子图含有极大顶点数；</li><li>具有极大顶点数的连通子图包含依附于这些顶点的所有边。</li></ul><p><strong>在有向图G中，如果对于每一对$v_i$、$v_j$∈V、$v_i$≠$v_j$，从$v_i$到$v_j$和从$v_j$到$v_i$都存在路径，则称G是强连通图。有向图中的极大强连通子图称做有向图的强连通分量</strong>。<br><strong>所谓的一个连通图的生成树是一个极小的连通子图，它含有图中全部的n个顶点，但只有足以构成一棵树的n-1条边</strong>。<br>如果一个有向图恰有一个顶点的入度为0，其余顶点的入度均为1，则是一棵有向树。<br>一个有向图的生成森林由若干棵有向树组成，含有图中全部顶点，但只有足以构成若干棵不相交的有向树的弧。  </p><h3 id="7-2-4-图的定义与术语总结"><a href="#7-2-4-图的定义与术语总结" class="headerlink" title="7.2.4 图的定义与术语总结"></a>7.2.4 图的定义与术语总结</h3><p>术语终于介绍得差不多了，可能有不少同学有些头晕，我们再来整理一下。<br>图按照有无方向分为无向图和有向图。无向图由顶点和边构成，有向图由顶点和弧构成。弧有弧尾和弧头之分。<br>图按照边或弧的多少分稀疏图和稠密图。如果任意两个顶点之间都存在边叫完全图，有向的叫有向完全图。若无重复的边或顶点到自身的边则叫简单图。<br>图中顶点之间有邻接点、依附的概念。无向图顶点的边数叫做度，有向图顶点分为入度和出度。<br>图上的边或弧上带权则称为网。<br>图中顶点间存在路径，两顶点存在路径则说明是连通的，如果路径最终回到起始点则称为环，当中不重复叫简单路径。若任意两顶点都是连通的，则图就是连通图，有向则称强连通图。图中有子图，若子图极大连通则就是连通分量，有向的则称强连通分量。<br>无向图中连通且n个顶点n-1条边叫生成树。有向图中一顶点入度为0其余顶点入度为1的叫有向树。一个有向图由若干棵有向树构成生成森林。  </p><h2 id="7-3-图的抽象数据类型"><a href="#7-3-图的抽象数据类型" class="headerlink" title="7.3 图的抽象数据类型"></a>7.3 图的抽象数据类型</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">ADT图（Graph）<br>Data<br>  顶点的有穷非空集合和边的集合。<br>Operation<br>  CreateGraph（*G，V，VR）：按照顶点集V和边弧集VR的定义构造图G。<br>  DestroyGraph（*G）：图G存在则销毁。<br>  LocateVex（G，u）：若图G中存在顶点u，则返回图中的位置。<br>  GetVex（G，v）：返回图G中顶点v的值。<br>  PutVex（G，v，value）：将图G中顶点v赋值value。<br>  FirstAdjVex（G，*v）：返回顶点v的一个邻接顶点，若顶点在G中无邻接顶点返回空。<br>  NextAdjVex（G，v，*w）：返回顶点v相对于顶点w的下一个邻接顶点，若w是v的最后一个邻接点则返回“空”。<br>  InsertVex（*G，v）：在图G中增添新顶点v。<br>  DeleteVex（*G，v）：删除图G中顶点v及其相关的弧。<br>  InsertArc（*G，V，w）：在图G中增添弧&lt;v，w&gt;，若G是无向图，还需要增添对称弧&lt;w，v&gt;。<br>  DeleteArc（*G，V，w）：在图G中删除弧&lt;v，w&gt;，若G是无向图，则还删除对称弧&lt;w，v&gt;。<br>  DFSTraverse（G）：对图G中进行深度优先遍历，在遍历过程对每个顶点调用。<br>  HFSTraverse（G）：对图G中进行广度优先遍历，在遍历过程对每个顶点调用。<br>endADT<br></code></pre></div></td></tr></table></figure><h2 id="7-4-图的存储结构"><a href="#7-4-图的存储结构" class="headerlink" title="7.4 图的存储结构"></a>7.4 图的存储结构</h2><p>前辈们提供了五种不同的存储结构。</p><h3 id="7-4-1-邻接矩阵"><a href="#7-4-1-邻接矩阵" class="headerlink" title="7.4.1 邻接矩阵"></a>7.4.1 邻接矩阵</h3><p><strong>图的邻接矩阵（Adjacency Matrix）存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组（称为邻接矩阵）存储图中的边或弧的信息</strong>。<br>无向图的边数组构成的是一个对称矩阵。<br>有了这个矩阵，我们就可以很容易地知道图中的信息。</p><ol><li>我们要判定任意两顶点是否有边无边就非常容易了。</li><li>我们要知道某个顶点的度，其实就是这个顶点vi在邻接矩阵中第i行（或第i列）的元素之和。比如顶点v1的度就是1+0+1+0=2。</li><li>求顶点vi的所有邻接点就是将矩阵中第i行元素扫描一遍，arc[i][j]为1就是邻接点。</li></ol><p>在图的术语中，我们提到了网的概念，也就是每条边上带有权的图叫做网。那么这些权值就需要存下来，如何处理这个矩阵来适应这个需求呢？我们有办法。<br>设图G是网图，有n个顶点，则邻接矩阵是一个n×n的方阵，定义为：<br>arc[i][j]=</p><ol><li>$W_{ij}$,若（$v_i$，$v_j$）∈E或&lt;$v_i$,$v_j$&gt;∈E</li><li>0,若i=j</li><li>∞，反之</li></ol><p>这里$W_{ij}$表示（$v_i$，$v_j$）或&lt;$v_i$,$v_j$&gt;上的权值。∞表示一个计算机允许的、大于所有边上权值的值，也就是一个不可能的极限值。<br>如图7-4-4左图就是一个有向网图，右图就是它的邻接矩阵。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-4-4.JPG?raw=true" alt="7-4-4">  </p><p>图的邻接矩阵存储的结构，代码如下。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> VertexType; <span class="hljs-comment">/* 顶点类型应由用户定义  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> EdgeType; <span class="hljs-comment">/* 边上的权值类型应由用户定义 */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXVEX 100 <span class="hljs-comment">/* 最大顶点数，应由用户定义 */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INFINITY 65535</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    VertexType vexs[MAXVEX]; <span class="hljs-comment">/* 顶点表 */</span><br>    EdgeType arc[MAXVEX][MAXVEX];<span class="hljs-comment">/* 邻接矩阵，可看作边表 */</span><br>    <span class="hljs-keyword">int</span> numVertexes, numEdges; <span class="hljs-comment">/* 图中当前的顶点数和边数  */</span><br>&#125;MGraph;<br></code></pre></div></td></tr></table></figure><p>有了这个结构定义，我们构造一个图，其实就是给顶点表和边表输入数据的过程。我们来看看无向网图的创建代码。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 建立无向网图的邻接矩阵表示 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateMGraph</span><span class="hljs-params">(MGraph *G)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j, k, w;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入顶点数和边数:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, &amp;G-&gt;numVertexes, &amp;G-&gt;numEdges); <span class="hljs-comment">/* 输入顶点数和边数 */</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G-&gt;numVertexes; i++) <span class="hljs-comment">/* 读入顶点信息,建立顶点表 */</span><br>        <span class="hljs-built_in">scanf</span>(&amp;G-&gt;vexs[i]);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G-&gt;numVertexes; i++)<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; G-&gt;numVertexes; j++)<br>            G-&gt;arc[i][j] = INFINITY;    <span class="hljs-comment">/* 邻接矩阵初始化 */</span><br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; G-&gt;numEdges; k++) <span class="hljs-comment">/* 读入numEdges条边，建立邻接矩阵 */</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入边(vi,vj)上的下标i，下标j和权w:\n&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d,%d&quot;</span>, &amp;i, &amp;j, &amp;w); <span class="hljs-comment">/* 输入边(vi,vj)上的权w */</span><br>        G-&gt;arc[i][j] = w;<br>        G-&gt;arc[j][i] = G-&gt;arc[i][j]; <span class="hljs-comment">/* 因为是无向图，矩阵对称 */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>从代码中也可以得到，n个顶点和e条边的无向网图的创建，时间复杂度为O（n+n²+e），其中对邻接矩阵Garc的初始化耗费了O（n²）的时间。</p><h3 id="7-4-2-邻接表"><a href="#7-4-2-邻接表" class="headerlink" title="7.4.2 邻接表"></a>7.4.2 邻接表</h3><p>将结点存入数组，并对结点的数组进行链式存储，不管有多少结点，也不会存在空间浪费问题。我们把这种数组与链表相结合的存储方法称为邻接表（Adjacency List）。<br>邻接表的处理办法是这样。</p><ol><li>图中顶点用一个一维数组存储，当然，顶点也可以用单链表来存储，不过数组可以较容易地读取顶点信息，更加方便。另外，对于顶点数组中，每个数据元素还需要存储指向第一个邻接点的指针，以便于查找该顶点的边信息。</li><li>图中每个顶点vi的所有邻接点构成一个线性表，由于邻接点的个数不定，所以用单链表存储，无向图称为顶点vi的边表，有向图则称为顶点vi作为弧尾的出边表。</li></ol><p>例如图7-4-6所示的就是一个无向图的邻接表结构。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-4-6.JPG?raw=true" alt="7-4-6"><br>从图中我们知道，顶点表的各个结点由data和firstedge两个域表示，data是数据域，存储顶点的信息，firstedge是指针域，指向边表的第一个结点，即此顶点的第一个邻接点。边表结点由adjvex和next两个域组成。adjvex是邻接点域，存储某顶点的邻接点在顶点表中的下标，next则存储指向边表中下一个结点的指针。比如v1顶点与v0、v2互为邻接点，则在v1的边表中，adjvex分别为v0的0和v2的2。<br>若是有向图，邻接表结构是类似的，比如图7-4-7中第一幅图的邻接表就是第二幅图。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-4-7.JPG?raw=true" alt="7-4-7"><br>但要注意的是有向图由于有方向，我们是以顶点为弧尾来存储边表的，这样很容易就可以得到每个顶点的出度。但也有时为了便于确定顶点的入度或以顶点为弧头的弧，我们可以建立一个有向图的逆邻接表，即对每个顶点vi都建立一个链接为vi为弧头的表。如图7-4-7的第三幅图所示。<br>对于带权值的网图，可以在边表结点定义中再增加一个weight的数据域，存储权值信息即可。<br>有了这些结构的图，下面关于结点定义的代码就很好理解了。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> VertexType; <span class="hljs-comment">/* 顶点类型应由用户定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> EdgeType; <span class="hljs-comment">/* 边上的权值类型应由用户定义 */</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> /* 边表结点  */</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> adjvex;    <span class="hljs-comment">/* 邻接点域,存储该顶点对应的下标 */</span><br>    EdgeType info;        <span class="hljs-comment">/* 用于存储权值,对于非网图可以不需要 */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">/* 链域,指向下一个邻接点 */</span><br>&#125;EdgeNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VertexNode</span> /* 顶点表结点 */</span><br><span class="hljs-class">&#123;</span><br>    VertexType data; <span class="hljs-comment">/* 顶点域,存储顶点信息 */</span><br>    EdgeNode *firstedge;<span class="hljs-comment">/* 边表头指针 */</span><br>&#125;VertexNode, AdjList[MAXVEX];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    AdjList adjList;<br>    <span class="hljs-keyword">int</span> numNodes,numEdges; <span class="hljs-comment">/* 图中当前顶点数和边数 */</span><br>&#125;GraphAdjList;<br></code></pre></div></td></tr></table></figure><p>对于邻接表的创建，也就是顺理成章之事。无向图的邻接表创建代码如下。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 建立图的邻接表结构 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">CreateALGraph</span><span class="hljs-params">(GraphAdjList *G)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i,j,k;<br>    EdgeNode *e;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入顶点数和边数:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>,&amp;G-&gt;numNodes,&amp;G-&gt;numEdges); <span class="hljs-comment">/* 输入顶点数和边数 */</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; G-&gt;numNodes;i++) <span class="hljs-comment">/* 读入顶点信息,建立顶点表 */</span><br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(&amp;G-&gt;adjList[i].data);     <span class="hljs-comment">/* 输入顶点信息 */</span><br>        G-&gt;adjList[i].firstedge=<span class="hljs-literal">NULL</span>;     <span class="hljs-comment">/* 将边表置为空表 */</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(k = <span class="hljs-number">0</span>;k &lt; G-&gt;numEdges;k++)<span class="hljs-comment">/* 建立边表 */</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入边(vi,vj)上的顶点序号:\n&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>,&amp;i,&amp;j); <span class="hljs-comment">/* 输入边(vi,vj)上的顶点序号 */</span><br>        e=(EdgeNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode)); <span class="hljs-comment">/* 向内存申请空间,生成边表结点 */</span><br>        e-&gt;adjvex=j;                    <span class="hljs-comment">/* 邻接序号为j */</span><br>        e-&gt;next=G-&gt;adjList[i].firstedge;    <span class="hljs-comment">/* 将e的指针指向当前顶点上指向的结点 */</span><br>        G-&gt;adjList[i].firstedge=e;        <span class="hljs-comment">/* 将当前顶点的指针指向e */</span><br>        e=(EdgeNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode)); <span class="hljs-comment">/* 向内存申请空间,生成边表结点 */</span><br>        e-&gt;adjvex=i;                    <span class="hljs-comment">/* 邻接序号为i */</span><br>        e-&gt;next=G-&gt;adjList[j].firstedge;    <span class="hljs-comment">/* 将e的指针指向当前顶点上指向的结点 */</span><br>        G-&gt;adjList[j].firstedge=e;        <span class="hljs-comment">/* 将当前顶点的指针指向e */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里代码，是应用了我们在单链表创建中讲解到的头插法，由于对于无向图，一条边对应都是两个顶点，所以在循环中，一次就针对i和j分别进行了插入。本算法的时间复杂度，对于n个顶点e条边来说，很容易得出是O（n+e）。</p><h3 id="7-4-3-十字链表"><a href="#7-4-3-十字链表" class="headerlink" title="7.4.3 十字链表"></a>7.4.3 十字链表</h3><p>有向图的一种存储方法：十字链表是邻接表与逆邻接表的结合。<br>我们重新定义顶点表结点结构如表7-4-1所示。<br>表7-4-1<br>data|firstin|firstout<br>-|-|-<br>其中firstin表示入边表头指针，指向该顶点的入边表中第一个结点，firstout表示出边表头指针，指向该顶点的出边表中的第一个结点。<br>重新定义的边表结点结构如表7-4-2所示。<br>表7-4-2<br>tailvex|headvex|headlink|taillink<br>-|-|-|-<br>其中tailvex是指弧起点在顶点表的下标，headvex是指弧终点在顶点表中的下标，headlink是指入边表指针域，指向终点相同的下一条边，taillink是指边表指针域，指向起点相同的下一条边。如果是网，还可以再增加一个weight域来存储权值。<br>比如图7-4-10，顶点依然是存入一个一维数组{v0，v1，v2，v3}，实线箭头指针的图示完全与图7-4-7的邻接表相同。就以顶点v0来说，firstout 指向的是出边表中的第一个结点v3。所以v0边表结点的headvex=3，而tailvex其实就是当前顶点v0的下标0，由于v0只有一个出边顶点，所以headlink和taillink都是空。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-4-10.JPG?raw=true" alt="7-4-10"><br>我们重点需要来解释虚线箭头的含义，它其实就是此图的逆邻接表的表示。对于v0来说，它有两个顶点v1和v2的入边。因此v0的firstin指向顶点v1的边表结点中headvex为0的结点，如图7-4-10右图中的①。接着由入边结点的headlink指向下一个入边顶点v2，如图中的②。对于顶点v1，它有一个入边顶点v2，所以它的firstin指向顶点v2的边表结点中headvex为1的结点，如图中的③。顶点v2和v3也是同样有一个入边顶点，如图中④和⑤。<br>十字链表的好处就是因为把邻接表和逆邻接表整合在了一起，这样既容易找到以vi为尾的弧，也容易找到以vi为头的弧，因而容易求得顶点的出度和入度。而且它除了结构复杂一点外，其实创建图算法的时间复杂度是和邻接表相同的，因此，在有向图的应用中，十字链表是非常好的数据结构模型。  </p><h3 id="7-4-4-邻接多重表"><a href="#7-4-4-邻接多重表" class="headerlink" title="7.4.4 邻接多重表"></a>7.4.4 邻接多重表</h3><p>仿照十字链表的方式，对边表结点的结构进行一些改造，可以优化无向图的邻接表的便操作。<br>重新定义的边表结点结构如表7-4-3所示。<br>ivex|ilink|jvex|jlink<br>-|-|-|-<br>其中<strong>ivex和jvex是与某条边依附的两个顶点在顶点表中下标。ilink 指向依附顶点ivex的下一条边，jlink 指向依附顶点jvex的下一条边。这就是邻接多重表结构</strong>。<br>我们来看结构示意图的绘制过程，理解了它是如何连线的，也就理解邻接多重表构造原理了。如图7-4-12所示，左图告诉我们它有4个顶点和5条边，显然，我们就应该先将4个顶点和5条边的边表结点画出来。由于是无向图，所以ivex是0、jvex是1还是反过来都是无所谓的，不过为了绘图方便，都将ivex值设置得与一旁的顶点下标相同。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-4-12.JPG?raw=true" alt="7-4-12"><br>我们开始连线，如图7-4-13。首先连线的①②③④就是将顶点的firstedge指向一条边，顶点下标要与ivex的值相同，这很好理解。接着，由于顶点v0的（v0，v1）边的邻边有（v0，v3）和（v0，v2）。因此⑤⑥的连线就是满足指向下一条依附于顶点v0的边的目标，注意ilink指向的结点的jvex一定要和它本身的ivex的值相同。同样的道理，连线⑦就是指（v1,v0）这条边，它是相当于顶点v1指向（v1，v2）边后的下一条。v2有三条边依附，所以在③之后就有了⑧⑨。连线⑩的就是顶点v3在连线④之后的下一条边。左图一共有5条边，所以右图有10条连线，完全符合预期。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-4-13.JPG?raw=true" alt="7-4-13"><br>到这里，大家应该可以明白，邻接多重表与邻接表的差别，仅仅是在于同一条边在邻接表中用两个结点表示，而在邻接多重表中只有一个结点。这样对边的操作就方便多了，若要删除左图的（v0，v2）这条边，只需要将右图的⑥⑨的链接指向改为^即可。由于各种基本操作的实现也和邻接表是相似的，这里我们就不讲解代码了。</p><h3 id="7-4-5-边集数组"><a href="#7-4-5-边集数组" class="headerlink" title="7.4.5 边集数组"></a>7.4.5 边集数组</h3><p>边集数组是由两个一维数组构成。一个是存储顶点的信息；另一个是存储边的信息，这个边数组每个数据元素由一条边的起点下标（begin）、终点下标（end）和权（weight）组成。</p><h2 id="7-5-图的遍历"><a href="#7-5-图的遍历" class="headerlink" title="7.5 图的遍历"></a>7.5 图的遍历</h2><p>从图中某一顶点出发访遍图中其余顶点，且使每一个顶点仅被访问一次，这一过程就叫做图的遍历（Traversing Graph）。<br>对于图的遍历来说，如何避免因回路陷入死循环，就需要科学地设计遍历方案，通常有两种遍历次序方案：它们是深度优先遍历和广度优先遍历。  </p><h3 id="7-5-1-深度优先遍历"><a href="#7-5-1-深度优先遍历" class="headerlink" title="7.5.1 深度优先遍历"></a>7.5.1 深度优先遍历</h3><p>深度优先遍历（Depth_FirstSearch），也有称为深度优先搜索，简称为DFS。<br>深度优先遍历其实就是一个递归的过程，就像是一棵树的前序遍历，从图中某个顶点v出发，访问此顶点，然后从v的未被访问的邻接点出发深度优先遍历图，直至图中所有和v有路径相通的顶点都被访问到。<br>若图中尚有顶点未被访问，则另选图中一个未曾被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。<br>如果我们用的是邻接矩阵的方式，则代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Boolean; <span class="hljs-comment">/* Boolean是布尔类型,其值是TRUE或FALSE */</span><br>Boolean visited[MAXVEX]; <span class="hljs-comment">/* 访问标志的数组 */</span><br><span class="hljs-comment">/* 邻接矩阵的深度优先递归算法 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(MGraph G, <span class="hljs-keyword">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> j;<br>    visited[i] = TRUE;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, G.vexs[i]);<span class="hljs-comment">/* 打印顶点，也可以其它操作 */</span><br>    <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; G.numVertexes; j++)<br>        <span class="hljs-keyword">if</span>(G.arc[i][j] == <span class="hljs-number">1</span> &amp;&amp; !visited[j])<br>            DFS(G, j);<span class="hljs-comment">/* 对为访问的邻接顶点递归调用 */</span><br>&#125;<br><br><span class="hljs-comment">/* 邻接矩阵的深度遍历操作 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">(MGraph G)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; i++)<br>        visited[i] = FALSE; <span class="hljs-comment">/* 初始所有顶点状态都是未访问过状态 */</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; i++)<br>        <span class="hljs-keyword">if</span>(!visited[i]) <span class="hljs-comment">/* 对未访问过的顶点调用DFS，若是连通图，只会执行一次 */</span><br>            DFS(G, i);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码的执行过程，其实就是我们刚才迷宫找寻所有顶点的过程。<br>如果图结构是邻接表结构，其DFSTraverse函数的代码是几乎相同的，只是在递归函数中因为将数组换成了链表而有不同，代码如下。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 邻接表的深度优先递归算法 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(GraphAdjList GL, <span class="hljs-keyword">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    EdgeNode *p;<br>    visited[i] = TRUE;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>,GL-&gt;adjList[i].data);<span class="hljs-comment">/* 打印顶点,也可以其它操作 */</span><br>    p = GL-&gt;adjList[i].firstedge;<br>    <span class="hljs-keyword">while</span>(p)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!visited[p-&gt;adjvex])<br>            DFS(GL, p-&gt;adjvex);<span class="hljs-comment">/* 对为访问的邻接顶点递归调用 */</span><br>        p = p-&gt;next;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 邻接表的深度遍历操作 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">(GraphAdjList GL)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; GL-&gt;numVertexes; i++)<br>        visited[i] = FALSE; <span class="hljs-comment">/* 初始所有顶点状态都是未访问过状态 */</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; GL-&gt;numVertexes; i++)<br>        <span class="hljs-keyword">if</span>(!visited[i]) <span class="hljs-comment">/* 对未访问过的顶点调用DFS,若是连通图,只会执行一次 */</span> <br>            DFS(GL, i);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>对比两个不同存储结构的深度优先遍历算法，对于n个顶点e条边的图来说，邻接矩阵由于是二维数组，要查找每个顶点的邻接点需要访问矩阵中的所有元素，因此都需要O(n²)的时间。而邻接表做存储结构时，找邻接点所需的时间取决于顶点和边的数量，所以是O（n+e）。显然对于点多边少的稀疏图来说，邻接表结构使得算法在时间效率上大大提高。  </p><h3 id="7-5-2-广度优先遍历"><a href="#7-5-2-广度优先遍历" class="headerlink" title="7.5.2 广度优先遍历"></a>7.5.2 广度优先遍历</h3><p>广度优先遍历（Breadth_First_Search），又称为广度优先搜索，简称BFS。<br>如果说图的深度优先遍历类似树的前序遍历，那么图的广度优先遍历就类似于树的层序遍历了。我们将图7-5-3的第一幅图稍微变形，变形原则是顶点A放置在最上第一层，让与它有边的顶点B、F为第二层，再让与B和F有边的顶点C、I、G、E为第三层，再将这四个顶点有边的D、H放在第四层，如图7-5-3的第二幅图所示。<br>此时在视觉上感觉图的形状发生了变化，其实顶点和边的关系还是完全相同的。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-5-3.JPG?raw=true" alt="7-5-3"><br>有了这个讲解，我们来看代码就非常容易了。以下是邻接矩阵结构的广度优先遍历算法。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 邻接矩阵的广度遍历算法 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFSTraverse</span><span class="hljs-params">(MGraph G)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    Queue Q;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; i++)<br>        visited[i] = FALSE;<br>    InitQueue(&amp;Q);        <span class="hljs-comment">/* 初始化一辅助用的队列 */</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; i++)  <span class="hljs-comment">/* 对每一个顶点做循环 */</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (!visited[i])    <span class="hljs-comment">/* 若是未访问过就处理 */</span><br>        &#123;<br>            visited[i]=TRUE;        <span class="hljs-comment">/* 设置当前顶点访问过 */</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, G.vexs[i]);<span class="hljs-comment">/* 打印顶点，也可以其它操作 */</span><br>            EnQueue(&amp;Q,i);        <span class="hljs-comment">/* 将此顶点入队列 */</span><br>            <span class="hljs-keyword">while</span>(!QueueEmpty(Q))    <span class="hljs-comment">/* 若当前队列不为空 */</span><br>            &#123;<br>                DeQueue(&amp;Q,&amp;i);<span class="hljs-comment">/* 将队对元素出队列，赋值给i */</span><br>                <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;G.numVertexes;j++) <br>                &#123;<br>                    <span class="hljs-comment">/* 判断其它顶点若与当前顶点存在边且未访问过  */</span><br>                    <span class="hljs-keyword">if</span>(G.arc[i][j] == <span class="hljs-number">1</span> &amp;&amp; !visited[j])<br>                    &#123;<br>                        visited[j]=TRUE;            <span class="hljs-comment">/* 将找到的此顶点标记为已访问 */</span><br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, G.vexs[j]);    <span class="hljs-comment">/* 打印顶点 */</span><br>                        EnQueue(&amp;Q,j);                <span class="hljs-comment">/* 将找到的此顶点入队列  */</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>对于邻接表的广度优先遍历，代码与邻接矩阵差异不大，代码如下。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 邻接表的广度遍历算法 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFSTraverse</span><span class="hljs-params">(GraphAdjList GL)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    EdgeNode *p;<br>    Queue Q;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; GL-&gt;numVertexes; i++)<br>        visited[i] = FALSE;<br>    InitQueue(&amp;Q);<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; GL-&gt;numVertexes; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!visited[i])<br>        &#123;<br>            visited[i]=TRUE;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>,GL-&gt;adjList[i].data);<span class="hljs-comment">/* 打印顶点,也可以其它操作 */</span><br>            EnQueue(&amp;Q,i);<br>            <span class="hljs-keyword">while</span>(!QueueEmpty(Q))<br>            &#123;<br>                DeQueue(&amp;Q,&amp;i);<br>                p = GL-&gt;adjList[i].firstedge;    <span class="hljs-comment">/* 找到当前顶点的边表链表头指针 */</span><br>                <span class="hljs-keyword">while</span>(p)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(!visited[p-&gt;adjvex])    <span class="hljs-comment">/* 若此顶点未被访问 */</span><br>                     &#123;<br>                        visited[p-&gt;adjvex]=TRUE;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>,GL-&gt;adjList[p-&gt;adjvex].data);<br>                        EnQueue(&amp;Q,p-&gt;adjvex);    <span class="hljs-comment">/* 将此顶点入队列 */</span><br>                    &#125;<br>                    p = p-&gt;next;    <span class="hljs-comment">/* 指针指向下一个邻接点 */</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>对比图的深度优先遍历与广度优先遍历算法，你会发现，它们在时间复杂度上是一样的，不同之处仅仅在于对顶点访问的顺序不同。可见两者在全图遍历上是没有优劣之分的，只是视不同的情况选择不同的算法。<br>不过如果图顶点和边非常多，不能在短时间内遍历完成，遍历的目的是为了寻找合适的顶点，那么选择哪种遍历就要仔细斟酌了。深度优先更适合目标比较明确，以找到目标为主要目的的情况，而广度优先更适合在不断扩大遍历范围时找到相对最优解的情况。  </p><h2 id="7-6-最小生成树"><a href="#7-6-最小生成树" class="headerlink" title="7.6 最小生成树"></a>7.6 最小生成树</h2><p>我们把构造连通网的最小代价生成树称为最小生成树（Minimum Cost Spanning Tree）。</p><h3 id="7-6-1-普里姆（Prim）算法"><a href="#7-6-1-普里姆（Prim）算法" class="headerlink" title="7.6.1 普里姆（Prim）算法"></a>7.6.1 普里姆（Prim）算法</h3><p>普里姆（Prim）算法代码如下，左侧数字为行号。其中INFINITY为权值极大值，不妨是65535，MAXVEX为顶点个数最大值，此处大于等于9即可。现在假设我们自己就是计算机，在调用MiniSpanTree_Prim函数，输入上述的邻接矩阵后，看看它是如何运行并打印出最小生成树的。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Prim算法生成最小生成树  */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MiniSpanTree_Prim</span><span class="hljs-params">(MGraph G)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> min, i, j, k;<br>    <span class="hljs-keyword">int</span> adjvex[MAXVEX];        <span class="hljs-comment">/* 保存相关顶点下标 */</span><br>    <span class="hljs-keyword">int</span> lowcost[MAXVEX];    <span class="hljs-comment">/* 保存相关顶点间边的权值 */</span><br>    lowcost[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<span class="hljs-comment">/* 初始化第一个权值为0，即v0加入生成树 */</span><br>            <span class="hljs-comment">/* lowcost的值为0，在这里就是此下标的顶点已经加入生成树 */</span><br>    adjvex[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;            <span class="hljs-comment">/* 初始化第一个顶点下标为0 */</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; G.numVertexes; i++)    <span class="hljs-comment">/* 循环除下标为0外的全部顶点 */</span><br>    &#123;<br>        lowcost[i] = G.arc[<span class="hljs-number">0</span>][i];    <span class="hljs-comment">/* 将v0顶点与之有边的权值存入数组 */</span><br>        adjvex[i] = <span class="hljs-number">0</span>;                    <span class="hljs-comment">/* 初始化都为v0的下标 */</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; G.numVertexes; i++)<br>    &#123;<br>        min = INFINITY;    <span class="hljs-comment">/* 初始化最小权值为∞， */</span><br>                        <span class="hljs-comment">/* 通常设置为不可能的大数字如32767、65535等 */</span><br>        j = <span class="hljs-number">1</span>;k = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(j &lt; G.numVertexes)    <span class="hljs-comment">/* 循环全部顶点 */</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(lowcost[j]!=<span class="hljs-number">0</span> &amp;&amp; lowcost[j] &lt; min)<span class="hljs-comment">/* 如果权值不为0且权值小于min */</span><br>            &#123;<br>                min = lowcost[j];    <span class="hljs-comment">/* 则让当前权值成为最小值 */</span><br>                k = j;            <span class="hljs-comment">/* 将当前最小值的下标存入k */</span><br>            &#125;<br>            j++;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%d, %d)\n&quot;</span>, adjvex[k], k);<span class="hljs-comment">/* 打印当前顶点边中权值最小的边 */</span><br>        lowcost[k] = <span class="hljs-number">0</span>;<span class="hljs-comment">/* 将当前顶点的权值设置为0,表示此顶点已经完成任务 */</span><br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">1</span>; j &lt; G.numVertexes; j++)    <span class="hljs-comment">/* 循环所有顶点 */</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(lowcost[j]!=<span class="hljs-number">0</span> &amp;&amp; G.arc[k][j] &lt; lowcost[j])<br>            &#123;<span class="hljs-comment">/* 如果下标为k顶点各边权值小于此前这些顶点未被加入生成树权值 */</span><br>                lowcost[j] = G.arc[k][j];<span class="hljs-comment">/* 将较小的权值存入lowcost相应位置 */</span><br>                adjvex[j] = k;                <span class="hljs-comment">/* 将下标为k的顶点存入adjvex */</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>假设N=（P,{E}）是连通网，TE是N上最小生成树中边的集合。算法从U={u0}（u0∈V），TE={}开始。重复执行下述操作：在所有u∈U，v∈V-U的边（u，v）∈E中找一条代价最小的边（u0，v0）并入集合TE，同时v0并入U，直至U=V为止。此时TE中必有n-1条边，则T=（V.{TE}）为N的最小生成树。<br>由算法代码中的循环嵌套可得知此算法的时间复杂度为O(n²)。</p><h3 id="7-6-2-克鲁斯卡尔（Kruskal）算法"><a href="#7-6-2-克鲁斯卡尔（Kruskal）算法" class="headerlink" title="7.6.2 克鲁斯卡尔（Kruskal）算法"></a>7.6.2 克鲁斯卡尔（Kruskal）算法</h3><p>现在我们来换一种思考方式，普里姆（Prim）算法是以某顶点为起点，逐步找各顶点上最小权值的边来构建最小生成树的。<br>同样的思路，我们也可以直接就以边为目标去构建，因为权值是在边上，直接去找最小权值的边来构建生成树也是很自然的想法，只不过构建时要考虑是否会形成环路而已。此时我们就用到了图的存储结构中的边集数组结构。以下是edge边集数组结构的定义代码：  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> begin;<br>    <span class="hljs-keyword">int</span> end;<br>    <span class="hljs-keyword">int</span> weight;<br>&#125;Edge;   <span class="hljs-comment">/* 对边集数组Edge结构的定义 */</span><br></code></pre></div></td></tr></table></figure><p>我们将图7-6-3的邻接矩阵通过程序转化为图7-6-7的右图的边集数组，并且对它们按权值从小到大排序。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-6-7.JPG?raw=true" alt="7-6-7"><br>于是克鲁斯卡尔（Kruskal）算法代码如下，左侧数字为行号。其中MAXEDGE为边数量的极大值，此处大于等于15即可，MAXVEX为顶点个数最大值，此处大于等于9即可。现在假设我们自己就是计算机，在调用MiniSpanTree_Kruskal函数，输入图7-6-3右图的邻接矩阵后，看看它是如何运行并打印出最小生成树的。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 查找连线顶点的尾部下标 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *parent, <span class="hljs-keyword">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> ( parent[f] &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        f = parent[f];<br>    &#125;<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br><br><span class="hljs-comment">/* Kruskal算法生成最小生成树 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MiniSpanTree_Kruskal</span><span class="hljs-params">(MGraph G)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j, n, m;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> parent[MAXVEX];<span class="hljs-comment">/* 定义一数组用来判断边与边是否形成环路 */</span><br>    Edge edges[MAXEDGE];<span class="hljs-comment">/* 定义边集数组,edge的结构为begin,end,weight,均为整型 */</span><br><br>    <span class="hljs-comment">/* 用来构建边集数组并排序********************* */</span><br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; G.numVertexes<span class="hljs-number">-1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; G.numVertexes; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (G.arc[i][j]&lt;INFINITY)<br>            &#123;<br>                edges[k].begin = i;<br>                edges[k].end = j;<br>                edges[k].weight = G.arc[i][j];<br>                k++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    sort(edges, &amp;G);<br>    <span class="hljs-comment">/* ******************************************* */</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; i++)<br>        parent[i] = <span class="hljs-number">0</span>;    <span class="hljs-comment">/* 初始化数组值为0 */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打印最小生成树：\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.numEdges; i++)    <span class="hljs-comment">/* 循环每一条边 */</span><br>    &#123;<br>        n = Find(parent,edges[i].begin);<br>        m = Find(parent,edges[i].end);<br>        <span class="hljs-keyword">if</span> (n != m) <span class="hljs-comment">/* 假如n与m不等，说明此边没有与现有的生成树形成环路 */</span><br>        &#123;<br>            parent[n] = m;    <span class="hljs-comment">/* 将此边的结尾顶点放入下标为起点的parent中。 */</span><br>                            <span class="hljs-comment">/* 表示此顶点已经在生成树集合中 */</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%d, %d) %d\n&quot;</span>, edges[i].begin, edges[i].end, edges[i].weight);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>好了，我们来把克鲁斯卡尔（Kruskal）算法的实现定义归纳一下结束这一节的讲解。<br>假设N=（V,{E}）是连通网，则令最小生成树的初始状态为只有n个顶点而无边的非连通图T={V，{}}，图中每个顶点自成一个连通分量。在E中选择代价最小的边，若该边依附的顶点落在T中不同的连通分量上，则将此边加入到T中，否则舍去此边而选择下一条代价最小的边。依次类推，直至T中所有顶点都在同一连通分量上为止。<br>此算法的Find函数由边数e决定，时间复杂度为O（㏒e），而外面有一个for 循环e次。所以克鲁斯卡尔算法的时间复杂度为O（e㏒e）。<br>对比两个算法，克鲁斯卡尔算法主要是针对边来展开，边数少时效率会非常高，所以对于稀疏图有很大的优势；而普里姆算法对于稠密图，即边数非常多的情况会更好一些。  </p><h2 id="7-7-最短路径"><a href="#7-7-最短路径" class="headerlink" title="7.7 最短路径"></a>7.7 最短路径</h2><p>对于网图来说，最短路径，是指两顶点之间经过的边上权值之和最少的路径，并且我们称路径上的第一个顶点是源点，最后一个顶点是终点。  </p><h3 id="7-7-1-迪杰斯特拉（Djkstra）算法"><a href="#7-7-1-迪杰斯特拉（Djkstra）算法" class="headerlink" title="7.7.1 迪杰斯特拉（Djkstra）算法"></a>7.7.1 迪杰斯特拉（Djkstra）算法</h3><p>迪杰斯特拉（Dijkstra）算法并不是一下子就求出了$v_0$到$V_n$的最短路径，而是一步步求出它们之间顶点的最短路径，过程中都是基于已经求出的最短路径的基础上，求得更远顶点的最短路径，最终得到你要的结果。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXVEX 20</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INFINITY 65535</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Patharc[MAXVEX];    <span class="hljs-comment">/* 用于存储最短路径下标的数组 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ShortPathTable[MAXVEX]; <span class="hljs-comment">/* 用于存储到各点最短路径的权值和 */</span><br><span class="hljs-comment">/* Dijkstra算法，求有向网G的v0顶点到其余顶点v的最短路径P[v]及带权长度D[v] */</span><br><span class="hljs-comment">/* P[v]的值为前驱顶点下标,D[v]表示v0到v的最短路径长度和 */</span>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShortestPath_Dijkstra</span><span class="hljs-params">(MGraph G, <span class="hljs-keyword">int</span> v0, Patharc *P, ShortPathTable *D)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> v,w,k,min;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">final</span>[MAXVEX];<span class="hljs-comment">/* final[w]=1表示求得顶点v0至vw的最短路径 */</span><br>    <span class="hljs-keyword">for</span>(v=<span class="hljs-number">0</span>; v&lt;G.numVertexes; v++)    <span class="hljs-comment">/* 初始化数据 */</span><br>    &#123;<br>        <span class="hljs-keyword">final</span>[v] = <span class="hljs-number">0</span>;            <span class="hljs-comment">/* 全部顶点初始化为未知最短路径状态 */</span><br>        (*D)[v] = G.arc[v0][v];<span class="hljs-comment">/* 将与v0点有连线的顶点加上权值 */</span><br>        (*P)[v] = <span class="hljs-number">-1</span>;                <span class="hljs-comment">/* 初始化路径数组P为-1  */</span><br>    &#125;<br>    (*D)[v0] = <span class="hljs-number">0</span>;  <span class="hljs-comment">/* v0至v0路径为0 */</span>  <br>    <span class="hljs-keyword">final</span>[v0] = <span class="hljs-number">1</span>;    <span class="hljs-comment">/* v0至v0不需要求路径 */</span><br>    <span class="hljs-comment">/* 开始主循环，每次求得v0到某个v顶点的最短路径 */</span><br>    <span class="hljs-keyword">for</span>(v=<span class="hljs-number">1</span>; v&lt;G.numVertexes; v++)<br>    &#123;<br>        min=INFINITY;    <span class="hljs-comment">/* 当前所知离v0顶点的最近距离 */</span><br>        <span class="hljs-keyword">for</span>(w=<span class="hljs-number">0</span>; w&lt;G.numVertexes; w++) <span class="hljs-comment">/* 寻找离v0最近的顶点 */</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">final</span>[w] &amp;&amp; (*D)[w]&lt;min)<br>            &#123;<br>                k=w;<br>                min = (*D)[w];    <span class="hljs-comment">/* w顶点离v0顶点更近 */</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">final</span>[k] = <span class="hljs-number">1</span>;    <span class="hljs-comment">/* 将目前找到的最近的顶点置为1 */</span><br>        <span class="hljs-keyword">for</span>(w=<span class="hljs-number">0</span>; w&lt;G.numVertexes; w++) <span class="hljs-comment">/* 修正当前最短路径及距离 */</span><br>        &#123;<br>            <span class="hljs-comment">/* 如果经过v顶点的路径比现在这条路径的长度短的话 */</span><br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">final</span>[w] &amp;&amp; (min+G.arc[k][w]&lt;(*D)[w]))<br>            &#123; <span class="hljs-comment">/*  说明找到了更短的路径，修改D[w]和P[w] */</span><br>                (*D)[w] = min + G.arc[k][w];  <span class="hljs-comment">/* 修改当前路径长度 */</span><br>                (*P)[w]=k;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>此算法的时间复杂度为O（n²）。  </p><h3 id="7-7-2-弗洛伊德（Floyd）算法"><a href="#7-7-2-弗洛伊德（Floyd）算法" class="headerlink" title="7.7.2 弗洛伊德（Floyd）算法"></a>7.7.2 弗洛伊德（Floyd）算法</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Patharc[MAXVEX][MAXVEX];<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ShortPathTable[MAXVEX][MAXVEX];<br><span class="hljs-comment">/* Floyd算法，求网图G中各顶点v到其余顶点w的最短路径P[v][w]及带权长度D[v][w]。 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShortestPath_Floyd</span><span class="hljs-params">(MGraph G, Patharc *P, ShortPathTable *D)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> v,w,k;<br>    <span class="hljs-keyword">for</span>(v=<span class="hljs-number">0</span>; v&lt;G.numVertexes; ++v) <span class="hljs-comment">/* 初始化D与P */</span>  <br>    &#123;<br>        <span class="hljs-keyword">for</span>(w=<span class="hljs-number">0</span>; w&lt;G.numVertexes; ++w)  <br>        &#123;<br>            (*D)[v][w]=G.arc[v][w];    <span class="hljs-comment">/* D[v][w]值即为对应点间的权值 */</span><br>            (*P)[v][w]=w;                <span class="hljs-comment">/* 初始化P */</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>; k&lt;G.numVertexes; ++k)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(v=<span class="hljs-number">0</span>; v&lt;G.numVertexes; ++v)  <br>        &#123;<br>            <span class="hljs-keyword">for</span>(w=<span class="hljs-number">0</span>; w&lt;G.numVertexes; ++w)<br>            &#123;<br>                <span class="hljs-keyword">if</span> ((*D)[v][w]&gt;(*D)[v][k]+(*D)[k][w])<br>                &#123;<span class="hljs-comment">/* 如果经过下标为k顶点路径比原两点间路径更短 */</span><br>                    (*D)[v][w]=(*D)[v][k]+(*D)[k][w];<span class="hljs-comment">/* 将当前两点间权值设为更小的一个 */</span><br>                    (*P)[v][w]=(*P)[v][k];<span class="hljs-comment">/* 路径设置为经过下标为k的顶点 */</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>求最短路径的显示代码可以这样写：  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(v=<span class="hljs-number">0</span>; v&lt;G.numVertexes; ++v)<br>&#123;<br>    <span class="hljs-keyword">for</span>(w=v+<span class="hljs-number">1</span>; w&lt;G.numVertexes; w++)  <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;v%d-v%d weight: %d &quot;</span>,v,w,D[v][w]);<br>        k=P[v][w];                <span class="hljs-comment">/* 获得第一个路径顶点下标 */</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; path: %d&quot;</span>,v);    <span class="hljs-comment">/* 打印源点 */</span><br>        <span class="hljs-keyword">while</span>(k!=w)                <span class="hljs-comment">/* 如果路径顶点下标不是终点 */</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; -&gt; %d&quot;</span>,k);    <span class="hljs-comment">/* 打印路径顶点 */</span><br>            k=P[k][w];            <span class="hljs-comment">/* 获得下一个路径顶点下标 */</span><br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; -&gt; %d\n&quot;</span>,w);    <span class="hljs-comment">/* 打印终点 */</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>再次回过头来看看弗洛伊德（Floyd）算法，它的代码简洁到就是一个二重循环初始化加一个三重循环权值修正，就完成了所有顶点到所有顶点的最短路径计算。几乎就如同是我们在学习C语言循环嵌套的样例代码而已。如此简单的实现，真是巧妙之极，在我看来，这是非常漂亮的算法，不知道你们是否喜欢？很可惜由于它的三重循环，因此也是O（n³）时间复杂度。如果你面临需要求所有顶点至所有顶点的最短路径问题时，弗洛伊德（Floyd）算法应该是不错的选择。  </p><h2 id="7-8-拓扑排序"><a href="#7-8-拓扑排序" class="headerlink" title="7.8 拓扑排序"></a>7.8 拓扑排序</h2><p>说了两个有环的图应用，现在我们来谈谈无环的图应用。无环，即是图中没有回路的意思。</p><p>能够拓扑排序的图都是有向无环图。</p><h3 id="7-8-1-拓扑排序介绍"><a href="#7-8-1-拓扑排序介绍" class="headerlink" title="7.8.1 拓扑排序介绍"></a>7.8.1 拓扑排序介绍</h3><p>在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系，这样的有向图为顶点表示活动的网，我们称为AOV网（Activity On Vertex Network）。<br>设G=（V，E）是一个具有n个顶点的有向图，V中的顶点序列v1，V2，……，Vn，满足若从顶点vi到vj有一条路径，则在顶点序列中顶点vi必在顶点vj之前。则我们称这样的顶点序列为一个拓扑序列。<br><strong>所谓拓扑排序，其实就是对一个有向图构造拓扑序列的过程。</strong>构造时会有两个结果，如果此网的全部顶点都被输出，则说明它是不存在环（回路）的AOV网；如果输出顶点数少了，哪怕是少了一个，也说明这个网存在环（回路），不是AOV网。  </p><h3 id="7-8-2-拓扑排序算法"><a href="#7-8-2-拓扑排序算法" class="headerlink" title="7.8.2 拓扑排序算法"></a>7.8.2 拓扑排序算法</h3><p>对AOV网进行拓扑排序的基本思路是：从AOV网中选择一个入度为0的顶点输出，然后删去此顶点，并删除以此顶点为尾的弧，继续重复此步骤，直到输出全部顶点或者AOV网中不存在入度为0的顶点为止。<br>首先我们需要确定一下这个图需要使用的数据结构。前面求最小生成树和最短路径时，我们用的都是邻接矩阵，但由于拓扑排序的过程中，需要删除顶点，显然用邻接表会更加方便。因此我们需要为AOV网建立一个邻接表。考虑到算法过程中始终要查找入度为0的顶点，我们在原来顶点表结点结构中，增加一个入度域in，结构如表7-8-1所示，其中in就是入度的数字。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-8-1.JPG?raw=true" alt="7-8-1"><br>因此对于图7-8-2的第一幅图AOV网，我们可以得到如第二幅图的邻接表数据结构。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-8-2.JPG?raw=true" alt="7-8-2"><br>在拓扑排序算法中，涉及的结构代码如下:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> /* 边表结点  */</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> adjvex;    <span class="hljs-comment">/* 邻接点域，存储该顶点对应的下标 */</span><br>    <span class="hljs-keyword">int</span> weight;        <span class="hljs-comment">/* 用于存储权值，对于非网图可以不需要 */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">/* 链域，指向下一个邻接点 */</span><br>&#125;EdgeNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VertexNode</span> /* 顶点表结点 */</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> in;    <span class="hljs-comment">/* 顶点入度 */</span><br>    <span class="hljs-keyword">int</span> data; <span class="hljs-comment">/* 顶点域，存储顶点信息 */</span><br>    EdgeNode *firstedge;<span class="hljs-comment">/* 边表头指针 */</span><br>&#125;VertexNode, AdjList[MAXVEX];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    AdjList adjList;<br>    <span class="hljs-keyword">int</span> numVertexes,numEdges; <span class="hljs-comment">/* 图中当前顶点数和边数 */</span><br>&#125;graphAdjList,*GraphAdjList;<br></code></pre></div></td></tr></table></figure><p>在算法中，我还需要辅助的数据结构一栈，用来存储处理过程中入度为0的顶点，目的是为了避免每个查找时都要去遍历顶点表找有没有入度为0的顶点。<br>现在我们来看代码:  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 拓扑排序，若GL无回路，则输出拓扑排序序列并返回1，若有回路返回0。 */</span><br><span class="hljs-function">Status <span class="hljs-title">TopologicalSort</span><span class="hljs-params">(GraphAdjList GL)</span></span><br><span class="hljs-function"></span>&#123;<br>    EdgeNode *e;<br>    <span class="hljs-keyword">int</span> i,k,gettop;<br>    <span class="hljs-keyword">int</span> top=<span class="hljs-number">0</span>;  <span class="hljs-comment">/* 用于栈指针下标  */</span><br>    <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<span class="hljs-comment">/* 用于统计输出顶点的个数  */</span><br>    <span class="hljs-keyword">int</span> *<span class="hljs-built_in">stack</span>;    <span class="hljs-comment">/* 建栈将入度为0的顶点入栈  */</span><br>    <span class="hljs-built_in">stack</span>=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(GL-&gt;numVertexes * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) );<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i&lt;GL-&gt;numVertexes; i++)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == GL-&gt;adjList[i].in) <span class="hljs-comment">/* 将入度为0的顶点入栈 */</span><br>            <span class="hljs-built_in">stack</span>[++top]=i;<br>    <span class="hljs-keyword">while</span>(top!=<span class="hljs-number">0</span>)<br>    &#123;<br>        gettop=<span class="hljs-built_in">stack</span>[top--];  <span class="hljs-comment">/* 出栈 */</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>,GL-&gt;adjList[gettop].data);<br>        count++;        <span class="hljs-comment">/* 输出i号顶点，并计数 */</span><br>        <span class="hljs-keyword">for</span>(e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next)<br>        &#123;<span class="hljs-comment">/* 对此顶点弧表遍历 */</span><br>            k=e-&gt;adjvex;<br>            <span class="hljs-keyword">if</span>( !(--GL-&gt;adjList[k].in) )  <span class="hljs-comment">/* 将k号顶点的邻接点的入度减1，如果减1后为0，则入栈 */</span><br>                <span class="hljs-built_in">stack</span>[++top]=k;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">if</span>(count &lt; GL-&gt;numVertexes)<span class="hljs-comment">/* 如果 count小于顶点数，说明存在环 */</span><br>        <span class="hljs-keyword">return</span> ERROR;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>分析整个算法，对一个具有n个顶点e条弧的AOV网来说，扫描顶点表，将入度为0的顶点入栈的时间复杂为O（n），而之后的while循环中，每个顶点进一次栈，出一次栈，入度减1的操作共执行了e次，所以整个算法的时间复杂度为O（n+e）。  </p><h2 id="7-9-关键路径"><a href="#7-9-关键路径" class="headerlink" title="7.9 关键路径"></a>7.9 关键路径</h2><p>在前面讲了AOV网的基础上，我们来介绍一个新的概念。在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，用边上的权值表示活动的持续时间，这种有向图的边表示活动的网，我们称之为AOE网（Activity On Edge Network）。<br>我们把AOE网中没有入边的顶点称为始点或源点，没有出边的顶点称为终点或汇点。<br>我们把路径上各个活动所持续的时间之和称为路径长度，从源点到汇点具有最大长度的路径叫关键路径，在关键路径上的活动叫关键活动。<br>如果我们需要缩短整个工期，去改进轮子的生产效率，哪怕改动成0.1也是无益于整个工期的变化，只有缩短关键路径上的关键活动时间才可以减少整个工期长度。<br>那么现在的问题就是如何找出关键路径。  </p><h3 id="7-9-1-关键路径算法原理"><a href="#7-9-1-关键路径算法原理" class="headerlink" title="7.9.1 关键路径算法原理"></a>7.9.1 关键路径算法原理</h3><p>我们只需要找到所有活动的最早开始时间和最晚开始时间，并且比较它们，如果相等就意味着此活动是关键活动，活动间的路径为关键路径。如果不等，则就不是。<br>为此，我们需要定义如下几个参数。</p><ol><li>事件的最早发生时间etv（earliest time of vertex）：即顶点vk的最早发生时间。</li><li>事件的最晚发生时间ltv（latest time of vertex）：即顶点Vk的最晚发生时间，也就是每个顶点对应的事件最晚需要开始的时间，超出此时间将会延误整个工期。</li><li>活动的最早开工时间ete（earliest time ofedge）：即弧ak的最早发生时间。</li><li>活动的最晚开工时间lte（latest time of edge）：即弧ak的最晚发生时间，也就是不推迟工期的最晚开工时间。  </li></ol><p>我们是由1和2可以求得3和4，然后再根据ete[k]是否与lte[k]相等来判断ak是否是关键活动。  </p><h3 id="7-9-2-关键路径算法"><a href="#7-9-2-关键路径算法" class="headerlink" title="7.9.2 关键路径算法"></a>7.9.2 关键路径算法</h3><p>我们将图7-9-2的AOE网转化为邻接表结构如图7-9-4所示，注意与拓扑排序时邻接表结构不同的地方在于，这里弧链表增加了weight域，用来存储弧的权值。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-9-4.JPG?raw=true" alt="7-9-4"><br>求事件的最早发生时间etv的过程，就是我们从头至尾找拓扑序列的过程，因此，在求关键路径之前，需要先调用一次拓扑序列算法的代码来计算etv和拓扑序列列表。为此，我们首先在程序开始处声明几个全局变量。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> *etv,*ltv; <span class="hljs-comment">/* 事件最早发生时间和最迟发生时间数组，全局变量 */</span><br><span class="hljs-keyword">int</span> *stack2;   <span class="hljs-comment">/* 用于存储拓扑序列的栈 */</span><br><span class="hljs-keyword">int</span> top2;      <span class="hljs-comment">/* 用于stack2的指针 */</span><br></code></pre></div></td></tr></table></figure><p>其中stack2用来存储拓扑序列，以便后面求关键路径时使用。<br>下面是改进过的求拓扑序列算法。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 拓扑排序,用于关键路径计算 */</span><br><span class="hljs-function">Status <span class="hljs-title">TopologicalSort</span><span class="hljs-params">(GraphAdjList GL)</span></span><br><span class="hljs-function"></span>&#123;    <span class="hljs-comment">/* 若GL无回路，则输出拓扑排序序列并返回1，若有回路返回0。 */</span><br>    EdgeNode *e;<br>    <span class="hljs-keyword">int</span> i,k,gettop;<br>    <span class="hljs-keyword">int</span> top=<span class="hljs-number">0</span>;  <span class="hljs-comment">/* 用于栈指针下标  */</span><br>    <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<span class="hljs-comment">/* 用于统计输出顶点的个数 */</span><br>    <span class="hljs-keyword">int</span> *<span class="hljs-built_in">stack</span>;    <span class="hljs-comment">/* 建栈将入度为0的顶点入栈  */</span><br>    <span class="hljs-built_in">stack</span>=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(GL-&gt;numVertexes * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) );<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i&lt;GL-&gt;numVertexes; i++)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == GL-&gt;adjList[i].in) <span class="hljs-comment">/* 将入度为0的顶点入栈 */</span><br>            <span class="hljs-built_in">stack</span>[++top]=i;<br><br>    top2=<span class="hljs-number">0</span>;         <span class="hljs-comment">/* 初始化为0 */</span><br>    etv=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(GL-&gt;numVertexes * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) ); <span class="hljs-comment">/* 事件最早发生时间数组 */</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;GL-&gt;numVertexes; i++)<br>        etv[i]=<span class="hljs-number">0</span>;    <span class="hljs-comment">/* 初始化为0 */</span><br>    stack2=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(GL-&gt;numVertexes * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) );<span class="hljs-comment">/* 初始化拓扑序列栈 */</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TopologicalSort:\t&quot;</span>);<br>    <span class="hljs-keyword">while</span>(top!=<span class="hljs-number">0</span>)<br>    &#123;<br>        gettop=<span class="hljs-built_in">stack</span>[top--];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>,GL-&gt;adjList[gettop].data);<br>        count++;        <span class="hljs-comment">/* 输出i号顶点，并计数 */</span><br><br>        stack2[++top2]=gettop;        <span class="hljs-comment">/* 将弹出的顶点序号压入拓扑序列的栈 */</span><br><br>        <span class="hljs-keyword">for</span>(e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next)<br>        &#123;<br>            k=e-&gt;adjvex;<br>            <span class="hljs-keyword">if</span>( !(--GL-&gt;adjList[k].in) )        <span class="hljs-comment">/* 将i号顶点的邻接点的入度减1，如果减1后为0，则入栈 */</span><br>                <span class="hljs-built_in">stack</span>[++top]=k;<br><br>            <span class="hljs-keyword">if</span>((etv[gettop] + e-&gt;weight)&gt;etv[k])    <span class="hljs-comment">/* 求各顶点事件的最早发生时间etv值 */</span><br>                etv[k] = etv[gettop] + e-&gt;weight;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(count &lt; GL-&gt;numVertexes)<br>        <span class="hljs-keyword">return</span> ERROR;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>下面我们来看求关键路径的算法代码。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 求关键路径,GL为有向网，输出G的各项关键活动 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CriticalPath</span><span class="hljs-params">(GraphAdjList GL)</span></span><br><span class="hljs-function"></span>&#123;<br>    EdgeNode *e;<br>    <span class="hljs-keyword">int</span> i,gettop,k,j;<br>    <span class="hljs-keyword">int</span> ete,lte;  <span class="hljs-comment">/* 声明活动最早发生时间和最迟发生时间变量 */</span><br>    TopologicalSort(GL);   <span class="hljs-comment">/* 求拓扑序列，计算数组etv和stack2的值 */</span><br>    ltv=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(GL-&gt;numVertexes*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<span class="hljs-comment">/* 事件最早发生时间数组 */</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;GL-&gt;numVertexes; i++)<br>        ltv[i]=etv[GL-&gt;numVertexes<span class="hljs-number">-1</span>];    <span class="hljs-comment">/* 初始化 */</span><br>    <span class="hljs-keyword">while</span>(top2!=<span class="hljs-number">0</span>)    <span class="hljs-comment">/* 出栈是求ltv */</span><br>    &#123;<br>        gettop=stack2[top2--];<br>        <span class="hljs-keyword">for</span>(e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next)<br>        &#123;<span class="hljs-comment">/* 求各顶点事件的最迟发生时间ltv值 */</span><br>            k=e-&gt;adjvex;<br>            <span class="hljs-keyword">if</span>(ltv[k] - e-&gt;weight &lt; ltv[gettop])<br>                ltv[gettop] = ltv[k] - e-&gt;weight;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;GL-&gt;numVertexes; j++)        <span class="hljs-comment">/* 求ete,lte和关键活动 */</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(e = GL-&gt;adjList[j].firstedge; e; e = e-&gt;next)<br>        &#123;<br>            k=e-&gt;adjvex;<br>            ete = etv[j];        <span class="hljs-comment">/* 活动最早发生时间 */</span><br>            lte = ltv[k] - e-&gt;weight; <span class="hljs-comment">/* 活动最迟发生时间 */</span><br>            <span class="hljs-keyword">if</span>(ete == lte)    <span class="hljs-comment">/* 两者相等即在关键路径上 */</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&lt;v%d - v%d&gt; length: %d \n&quot;</span>,GL-&gt;adjList[j].data,GL-&gt;adjList[k].data,e-&gt;weight);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最终求关键路径算法的时间复杂度依然是O（n+e）。<br>实践证明，通过这样的算法对于工程的前期工期估算和中期的计划调整都有很大的帮助。不过注意，本例是唯一一条关键路径，这并不等于不存在多条关键路径的有向无环图。如果是多条关键路径，则单是提高一条关键路径上的关键活动的速度并不能导致整个工程缩短工期，而必须提高同时在几条关键路径上的活动的速度。这就像仅仅是有事业的成功，而没有健康的身体以及快乐的生活，是根本谈不上幸福的人生一样，三者缺一不可。  </p><h2 id="7-10-总结回顾"><a href="#7-10-总结回顾" class="headerlink" title="7.10 总结回顾"></a>7.10 总结回顾</h2><p>图是计算机科学中非常常用的一类数据结构，有许许多多的计算问题都是用图来定义的。由于图也是最复杂的数据结构，对它讲解时，涉及到数组、链表、栈、队列、树等之前学的几乎所有数据结构。因此从某种角度来说，学好了图，基本就等于理解了数据结构这门课的精神。<br>我们在图的定义这一节，介绍了一大堆定义和术语，一开始可能会有些迷茫，不过一回生二回熟，多读几遍，基本都可以理解并记住它们的特征，在图的定义这一节的末尾，我们已经有所总结，这里就不再赘述了。<br>图的存储结构我们一共讲了五种，如图7-10-1所示，其中比较重要的是邻接矩阵和邻接表，它们分别代表着边集是用数组还是链表的方式存储。十字链表是邻接矩阵的一种升级，而邻接多重表则是邻接表的升级。边集数组更多考虑的是对边的关注。用什么存储结构需要具体问题具体分析，通常稠密图，或读存数据较多，结构修改较少的图，用邻接矩阵要更合适，反之则应该考虑邻接表。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%83%E7%AB%A0/7-10-1.JPG?raw=true" alt="7-10-1"><br>图的遍历分为深度和广度两种，各有优缺点，就像人在追求卓越时，是着重深度还是看重广度，总是很难说得清楚。<br>图的应用是我们这一章浓墨重彩的一部分，一共谈了三种应用：最小生成树、最短路径和有向无环图的应用。<br>最小生成树，我们讲了两种算法：普里姆（Prim）算法和克鲁斯卡尔（Kruskal）算法。普里姆算法像是走一步看一步的思维方式，逐步生成最小生成树。而克鲁斯卡尔算法则更有全局意识，直接从图中最短权值的边入手，找寻最后的答案。<br>最短路径的现实应用非常多，我们也介绍了两种算法。迪杰斯特拉（Dijkstra）算法更强调单源顶点查找路径的方式，比较符合我们正常的思路，容易理解原理，但算法代码相对复杂。而弗洛伊德（Floyd）算法则完全抛开了单点的局限思维方式，巧妙地应用矩阵的变换，用最清爽的代码实现了多顶点间最短路径求解的方案，原理理解有难度，但算法编写很简洁。<br>有向无环图时常应用于工程规划中，对于整个工程或系统来说，我们一方面关心的是工程能否顺利进行的问题，通过拓扑排序的方式，我们可以有效地分析出一个有向图是否存在环，如果不存在，那它的拓扑序列是什么？另一方面关心的是整个工程完成所必须的最短时间问题，利用求关键路径的算法，可以得到最短完成工程的工期以及关键的活动有哪些。  </p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>大话数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大话数据结构第六章 树</title>
    <link href="/2019/12/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC6%E7%AB%A0%20%E6%A0%91/"/>
    <url>/2019/12/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC6%E7%AB%A0%20%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="6-1-6-2-树的定义"><a href="#6-1-6-2-树的定义" class="headerlink" title="6.1-6.2 树的定义"></a>6.1-6.2 树的定义</h2><p><strong>树(Tree)是n(n≥0)个结点的有限集。n=0时称为空树。在任意一棵非空树中：1)有且仅有一个特定的称为根(Root)的结点；2)当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集T1、T2、……、Tm，其中每一个集合本身又是一棵树，并且称为根的子树(SubTree)。</strong> </p><span id="more"></span><p>对于树的定义还需要强调两点：  </p><ol><li>n&gt;0时根结点是唯一的，不可能存在多个根结点，数据结构中的树是只能有一个根结点。</li><li>m&gt;0时，子树的个数没有限制，但它们一定是互不相交的。  </li></ol><h3 id="6-2-1-结点分类"><a href="#6-2-1-结点分类" class="headerlink" title="6.2.1 结点分类"></a>6.2.1 结点分类</h3><p>树的结点包含一个数据元素及若干指向其子树的分支。结点拥有的子树数称为结点的度（Degree）。度为0的结点称为叶结点（Leaf）或终端结点；度不为0的结点称为非终端结点或分支结点。除根结点之外，分支结点也称为内部结点。树的度是树内各结点的度的最大值。如图6-2-4所示，因为这棵树结点的度的最大值是结点D的度为3，所以树的度也为3。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-2-4.JPG?raw=true" alt="6-2-4">  </p><h3 id="6-2-2-结点间关系"><a href="#6-2-2-结点间关系" class="headerlink" title="6.2.2 结点间关系"></a>6.2.2 结点间关系</h3><p>结点的子树的根称为该结点的孩子（Child），相应地，该结点称为孩子的双亲（Parent）。同一个双亲的孩子之间互称兄弟（Sibling）。结点的祖先是从根到该结点所经分支上的所有结点。反之，以某结点为根的子树中的任一结点都称为该结点的子孙。  </p><h3 id="6-2-3-树的其他相关概念"><a href="#6-2-3-树的其他相关概念" class="headerlink" title="6.2.3 树的其他相关概念"></a>6.2.3 树的其他相关概念</h3><p>结点的层次（Level）从根开始定义起，根为第一层，根的孩子为第二层。其双亲在同一层的结点互为堂兄弟。树中结点的最大层次称为树的深度（Depth）或高度。<br>如果将树中结点的各子树看成从左至右是有次序的，不能互换的，则称该树为有序树，否则称为无序树。<br>森林（Forest）是m（m&gt;0）棵互不相交的树的集合。<br>对比线性表与树的结构，它们有很大的不同，如图6-2-7所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-2-7.JPG?raw=true" alt="6-2-7"></p><h2 id="6-3-树的抽象数据类型"><a href="#6-3-树的抽象数据类型" class="headerlink" title="6.3 树的抽象数据类型"></a>6.3 树的抽象数据类型</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">ADT 树（tree）<br>Data<br>  树是由一个根结点和若干棵子树构成。树中结点具有相同数据类型及层次关系。<br>Operation<br>  InitTree（*T）：构造空树T。<br>  DestroyTree（*T）：销毁树T。<br>  CreateTree（*T，definition）：按definition中给出树的定义来构造树。<br>  ClearTree（*T）：若树T存在，则将树T清为空树。<br>  TreeEmpty（T）：若T为空树，返回<span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span>。<br>  TreeDepth（T）：返回T的深度。<br>  Root（T）：返回T的根结点。<br>  Value（T，cur_e）：cur_e是树T中一个结点，返回此结点的值。<br>  Assign（T，cur_e，value）：给树T的结点cur_e赋值为value。<br>  Parent（T，cur_e）：若cur_e是树T的非根结点，则返回它的双亲，否则返回空。<br>  LeftChild（T，cure）：若cur_e是树T的非叶结点，则返回它的最左孩子，否则返回空。<br>  RightSibling（T，cur_e）：若cur_e有右兄弟，则返回它的右兄弟，否则返回空。<br>  InsertChild（*T，*p，i，c）：其中p指向树T的某个结点，i为所指结点p的度加上<span class="hljs-number">1</span>，非空树c与T不相交，操作结果为插入c为树T中p指结点的第i棵子树。<br>  DeleteChild（*T，*p，i）：其中p指向树T的某个结点，i为所指结点p的度，操作结果为删除T中p所指结点的第i棵子树。<br>endADT<br></code></pre></div></td></tr></table></figure><h2 id="6-4-树的存储结构"><a href="#6-4-树的存储结构" class="headerlink" title="6.4 树的存储结构"></a>6.4 树的存储结构</h2><p>充分利用顺序存储和链式存储结构的特点，可以实现对树的存储结构的表示。我们这里要介绍三种不同的表示法：双亲表示法、孩子表示法、孩子兄弟表示法。  </p><h3 id="6-4-1-双亲表示法"><a href="#6-4-1-双亲表示法" class="headerlink" title="6.4.1 双亲表示法"></a>6.4.1 双亲表示法</h3><p>树除了根结点外，其余每个结点，它不一定有孩子，但是一定有且仅有一个双亲。<br>我们假设以一组连续空间存储树的结点，同时在每个结点中，附设一个指示器指示其双亲结点到链表中的位置。也就是说，每个结点除了知道自己是谁以外，还知道它的双亲在哪里。<br>data数据域，存储结点的数据信息。而parent指针域，存储该结点的双亲在数组中的下标。<br>以下是我们的双亲表示法的结点结构定义代码:  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 树的双亲表示法结点结构定义 */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_TREE_SIZE 100 <span class="hljs-comment">/* 二叉树的最大结点数 */</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> TElemType;  <span class="hljs-comment">/* 树结点的数据类型，目前暂定为整型 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PTNode</span>/*结点结构*/</span><br><span class="hljs-class">&#123;</span><br>  TElemType data;<span class="hljs-comment">/*结点数据*/</span><br>  <span class="hljs-keyword">int</span> parent;<span class="hljs-comment">/*双亲位置*/</span><br>&#125;PTNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> /* 树结构 */</span><br><span class="hljs-class">&#123;</span><br>  PTNode nodes[MAX_TREE_SI2E];<span class="hljs-comment">/* 结点数组 */</span><br>  <span class="hljs-keyword">int</span> r，n;<span class="hljs-comment">/* 根的位置和结点数 */</span><br>&#125;PTree;<br></code></pre></div></td></tr></table></figure><p>有了这样的结构定义，我们就可以来实现双亲表示法了。由于根结点是没有双亲的，所以我们约定根结点的位置域设置为-1，这也就意味着，我们所有的结点都存有它双亲的位置。如图6-4-1中的树结构和表6-4-2中的树双亲表示所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-1.JPG?raw=true" alt="6-4-1">  </p><p>这样的存储结构，我们可以根据结点的parent指针很容易找到它的双亲结点，所用的时间复杂度为O(1)，直到parent为-1时，表示找到了树结点的根。可如果我们要知道结点的孩子是什么，请遍历整个结构才行。如何改进呢？<br>我们增加一个结点最左边孩子的域，不妨叫它长子域，这样就可以很容易得到结点的孩子。如果没有孩子的结点，这个长子域就设置为-1，如表6-4-3所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-3.JPG?raw=true" alt="6-4-3">  </p><p>对于有0个或1个孩子结点来说，这样的结构是解决了要找结点孩子的问题了。甚至是有2个孩子，知道了长子是谁，另一个当然就是次子了。<br>另外一个问题是，我们很关注各兄弟之间的关系，双亲表示法无法体现这样的关系，那我们怎么办？嗯，可以增加一个右兄弟域来体现兄弟关系，也就是说，每一个结点如果它存在右兄弟，则记录下右兄弟的下标。同样的，如果右兄弟不存在，则赋值为-1。<br>但如果结点的孩子很多，超过了2个。我们又关注结点的双亲、又关注结点的孩子、还关注结点的兄弟，而且对时间遍历要求还比较高，那么我们还可以把此结构扩展为有双亲域、长子域、再有右兄弟域。存储结构的设计是一个非常灵活的过程。一个存储结构设计得是否合理，取决于基于该存储结构的运算是否适合、是否方便，时间复杂度好不好等。注意也不是越多越好，有需要时再设计相应的结构。  </p><h3 id="6-4-2-孩子表示法"><a href="#6-4-2-孩子表示法" class="headerlink" title="6.4.2 孩子表示法"></a>6.4.2 孩子表示法</h3><p>换一种完全不同的考虑方法。由于树中每个结点可能有多棵子树，可以考虑用多重链表，即每个结点有多个指针域，其中每个指针指向一棵子树的根结点，我们把这种方法叫做多重链表表示法。不过，树的每个结点的度，也就是它的孩子个数是不同的。所以可以设计两种方案来解决。  </p><h4 id="6-4-2-1-方案一"><a href="#6-4-2-1-方案一" class="headerlink" title="6.4.2.1 方案一"></a>6.4.2.1 方案一</h4><p>一种是指针域的个数就等于树的度，复习一下，树的度是树各个结点度的最大值。其结构如表6-4-5所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-5.JPG?raw=true" alt="6-4-5"><br>其中data是数据域。child1到child d是指针域，用来指向该结点的孩子结点。<br>对于图6-4-1的树来说，树的度是3，所以我们的指针域的个数是3，这种方法实现如图6-4-2所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-2.JPG?raw=true" alt="6-4-2"><br>这种方法对于树中各结点的度相差很大时，显然是很浪费空间的，因为有很多的结点，它的指针域都是空的。不过如果树的各结点度相差很小时，那就意味着开辟的空间被充分利用了，这时存储结构的缺点反而变成了优点。<br>既然很多指针域都可能为空，那么我们可以按需分配空间。  </p><h4 id="6-4-2-2-方案二"><a href="#6-4-2-2-方案二" class="headerlink" title="6.4.2.2 方案二"></a>6.4.2.2 方案二</h4><p>第二种方案每个结点指针域的个数等于该结点的度，我们专门取一个位置来存储结点指针域的个数，其结构如表6-4-6所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-6.JPG?raw=true" alt="6-4-6"><br>其中data为数据域，degree为度域，也就是存储该结点的孩子结点的个数，child1到child d为指针域，指向该结点的各个孩子的结点。<br>对于图6-4-2的树来说，这种方法实现如图6-4-3所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-7.JPG?raw=true" alt="6-4-7"><br>这种方法克服了浪费空间的缺点，对空间利用率是很高了，但是由于各个结点的链表是不相同的结构，加上要维护结点的度的数值，在运算上就会带来时间上的损耗。  </p><p>孩子表示法。具体办法是，<strong>把每个结点的孩子结点排列起来，以单链表作存储结构，则n个结点有n个孩子链表，如果是叶子结点则此单链表为空。然后n个头指针又组成一个线性表，采用顺序存储结构，存放进一个一维数组中</strong>，如图6-4-4所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-8.JPG?raw=true" alt="6-4-8"><br>以下是我们的孩子表示法的结构定义代码:  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*树的孩子表示法结构定义*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_TREE_SIZE 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cTNode</span>/* 孩子结点 */</span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">int</span> child;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CTNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;*ChildPtr;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>  /* 表头结构 */</span><br><span class="hljs-class">&#123;</span><br>  TElemType data;<br>  ChildPtr firstChild;<br>&#125;CTBox;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>  /* 树结构 */</span><br><span class="hljs-class">&#123;</span><br>  CTBox nodes[MAX_TREE_SIZE];  <span class="hljs-comment">/* 结点数组 */</span><br>  <span class="hljs-keyword">int</span> r，n;  <span class="hljs-comment">/* 根的位置和结点数 */</span><br>&#125;CTree;<br></code></pre></div></td></tr></table></figure><p>这样的结构对于我们要查找某个结点的某个孩子，或者找某个结点的兄弟，只需要查找这个结点的孩子单链表即可。对于遍历整棵树也是很方便的，对头结点的数组循环即可。<br>但是，这也存在着问题，我如何知道某个结点的双亲是谁呢？比较麻烦，需要整棵树遍历才行，难道就不可以把双亲表示法和孩子表示法综合一下吗？当然是可以。如图6-4-5所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-9.JPG?raw=true" alt="6-4-9"><br>我们把这种方法称为双亲孩子表示法。</p><h3 id="6-4-3-孩子兄弟表示法"><a href="#6-4-3-孩子兄弟表示法" class="headerlink" title="6.4.3 孩子兄弟表示法"></a>6.4.3 孩子兄弟表示法</h3><p><strong>我们观察后发现，任意一棵树，它的结点的第一个孩子如果存在就是唯一的，它的右兄弟如果存在也是唯一的。因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟。</strong><br>结点结构如下所示。<br>data | firstChild | rightSib<br>—–|————|———<br>其中data是数据域，firstChild为指针域，存储该结点的第一个孩子结点的存储地址，rightSib是指针域，存储该结点的右兄弟结点的存储地址。<br>结构定义代码如下:  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*树的孩子兄弟表示法结构定义*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CSNode</span></span><br><span class="hljs-class">&#123;</span><br>  TElemType data;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CSNode</span> *<span class="hljs-title">firstChild</span>， *<span class="hljs-title">rightSib</span>;</span><br>&#125;CSNode,*CSTree;<br></code></pre></div></td></tr></table></figure><p>对于图6-4-1的树来说，这种方法实现的示意图如图6-4-6所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-4-10.JPG?raw=true" alt="6-4-10"><br>这种表示法，给查找某个结点的某个孩子带来了方便，只需要通过firstChild找到此结点的长子，然后再通过长子结点的rightSib找到它的二弟，接着一直下去，直到找到具体的孩子。</p><h2 id="6-5-二叉树的定义"><a href="#6-5-二叉树的定义" class="headerlink" title="6.5 二叉树的定义"></a>6.5 二叉树的定义</h2><p><strong>二叉树（Binary Tree）是n（n≥0）个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。</strong></p><h3 id="6-5-1-二叉树特点"><a href="#6-5-1-二叉树特点" class="headerlink" title="6.5.1 二叉树特点"></a>6.5.1 二叉树特点</h3><p>二叉树的特点有：</p><ul><li>每个结点最多有两棵子树，所以二叉树中不存在度大于2的结点。注意不是只有两棵子树，而是最多有。没有子树或者有一棵子树都是可以的。</li><li>左子树和右子树是有顺序的，次序不能任意颠倒。</li><li>即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。  </li></ul><p>二叉树具有五种基本形态：</p><ol><li>空二叉树。</li><li>只有一个根结点。</li><li>根结点只有左子树。</li><li>根结点只有右子树。</li><li>根结点既有左子树又有右子树。</li></ol><h3 id="6-5-2-特殊二叉树"><a href="#6-5-2-特殊二叉树" class="headerlink" title="6.5.2 特殊二叉树"></a>6.5.2 特殊二叉树</h3><p>一、斜树:所有的结点都只有左子树的二叉树叫左斜树。所有结点都是只有右子树的二叉树叫右斜树。这两者统称为斜树。</p><p>二、满二叉树：在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。<br>满二叉树的特点有：</p><ul><li>叶子只能出现在最下一层。出现在其他层就不可能达成平衡。</li><li>非叶子结点的度一定是2。否则就是“缺胳膊少腿”了。</li><li>在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。</li></ul><p>三、完全二叉树：对一棵具有n个结点的二叉树按层序编号，如果编号为i（1≤i≤n）的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。<br>完全二叉树的特点：</p><ol><li>叶子结点只能出现在最下两层。</li><li>最下层的叶子一定集中在左部连续位置。</li><li>倒数二层，若有叶子结点，一定都在右部连续位置。</li><li>如果结点度为1，则该结点只有左孩子，即不存在只有右子树的情况。</li><li>同样结点数的二叉树，完全二叉树的深度最小。</li></ol><h2 id="6-6-二叉树的性质"><a href="#6-6-二叉树的性质" class="headerlink" title="6.6 二叉树的性质"></a>6.6 二叉树的性质</h2><p>二叉树有一些需要理解并记住的特性，以便于我们更好地使用它。</p><h3 id="6-6-1-二叉树性质1"><a href="#6-6-1-二叉树性质1" class="headerlink" title="6.6.1 二叉树性质1"></a>6.6.1 二叉树性质1</h3><p>性质1：在二叉树的第i层上至多有$2^{i-1}$个结点（i≥1）。</p><h3 id="6-6-2-二叉树性质2"><a href="#6-6-2-二叉树性质2" class="headerlink" title="6.6.2 二叉树性质2"></a>6.6.2 二叉树性质2</h3><p>性质2：深度为k的二叉树至多有$2^k-1$个结点（k≥1）。</p><h3 id="6-6-3-二叉树性质3"><a href="#6-6-3-二叉树性质3" class="headerlink" title="6.6.3 二叉树性质3"></a>6.6.3 二叉树性质3</h3><p>性质3：对任何一棵二叉树T，如果其叶子结点数为$n_0$，度为2的结点数为$n_2$，则$n_0=n_2+1$。  </p><h3 id="6-6-4-二叉树性质4"><a href="#6-6-4-二叉树性质4" class="headerlink" title="6.6.4 二叉树性质4"></a>6.6.4 二叉树性质4</h3><p>性质4：具有n个结点的完全二叉树的深度为[㏒$_2$n]+1（[x]表示不大于x的最大整数）。</p><h3 id="6-6-5-二叉树性质5"><a href="#6-6-5-二叉树性质5" class="headerlink" title="6.6.5 二叉树性质5"></a>6.6.5 二叉树性质5</h3><p>性质5：如果对一棵有n个结点的完全二叉树（其深度为[㏒$_2$n]+1）的结点按层序编号（从第1层到第[㏒$_2$n]+1层，每层从左到右），对任一结点i（1≤i≤n）有：</p><ol><li>如果i=1，则结点i是二叉树的根，无双亲；如果i&gt;1，则其双亲是结点[i/2]。</li><li>如果2i&gt;n，则结点i无左孩子（结点i为叶子结点）；否则其左孩子是结点2i。</li><li>如果2i+1&gt;n，则结点i无右孩子；否则其右孩子是结点2i+1。</li></ol><h2 id="6-7-二叉树的存储结构"><a href="#6-7-二叉树的存储结构" class="headerlink" title="6.7 二叉树的存储结构"></a>6.7 二叉树的存储结构</h2><h3 id="6-7-1-二叉树顺序存储结构"><a href="#6-7-1-二叉树顺序存储结构" class="headerlink" title="6.7.1 二叉树顺序存储结构"></a>6.7.1 二叉树顺序存储结构</h3><p>二叉树的顺序存储结构就是用一维数组存储二叉树中的结点，并且结点的存储位置，也就是数组的下标要能体现结点之间的逻辑关系。<br>所以用来表示完全二叉树比较好。由于它定义的严格，所以用顺序结构也可以表现出二叉树的结构来。<br>当然对于一般的二叉树，尽管层序编号不能反映逻辑关系，但是可以将其按完全二叉树编号，只不过，把不存在的结点设置为“^”而已。如图6-7-3所示，浅色结点表示不存在。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-7-3.JPG?raw=true" alt="6-7-3"><br>但是对于一般二叉树，一棵深度为k的右斜树，它只有k个结点，却需要分配$2^k$-1个存储单元空间，这显然是对存储空间的浪费。<br>所以，顺序存储结构一般只用于完全二叉树。  </p><h3 id="6-7-2-二叉链表"><a href="#6-7-2-二叉链表" class="headerlink" title="6.7.2 二叉链表"></a>6.7.2 二叉链表</h3><p>链式存储结构中。二叉树每个结点最多有两个孩子，所以为它设计一个数据域和两个指针域是比较自然的想法，我们称这样的链表叫做二叉链表。结点结构图如表格6-7-1所示。<br>lChild|data|rChild|<br>–|–|–<br>其中data是数据域，lChild和rChild都是指针域，分别存放指向左孩子和右孩子的指针。<br>以下是我们的二叉链表的结点结构定义代码。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span>  /* 结点结构 */</span><br><span class="hljs-class">&#123;</span><br>   TElemType data;    <span class="hljs-comment">/* 结点数据 */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>,*<span class="hljs-title">rchild</span>;</span> <span class="hljs-comment">/* 左右孩子指针 */</span><br>&#125;BiTNode,*BiTree;<br></code></pre></div></td></tr></table></figure><p>就如同树的存储结构中讨论的一样，如果有需要，还可以再增加一个指向其双亲的指针域，那样就称之为三叉链表。  </p><h2 id="6-8遍历二叉树"><a href="#6-8遍历二叉树" class="headerlink" title="6.8遍历二叉树"></a>6.8遍历二叉树</h2><h3 id="6-8-1二叉树遍历原理"><a href="#6-8-1二叉树遍历原理" class="headerlink" title="6.8.1二叉树遍历原理"></a>6.8.1二叉树遍历原理</h3><p>二叉树的遍历（traversing binary tree）是指从根结点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。  </p><h3 id="6-8-2二叉树遍历方法"><a href="#6-8-2二叉树遍历方法" class="headerlink" title="6.8.2二叉树遍历方法"></a>6.8.2二叉树遍历方法</h3><p>二叉树的遍历方式可以很多，如果我们限制了从左到右的习惯方式，那么主要就分为四种：  </p><ol><li><p>前序遍历-根左右<br>规则是若二叉树为空，则空操作返回，否则先访问根结点，然后前序遍历左子树，再前序遍历右子树。</p></li><li><p>中序遍历-左根右<br>规则是若树为空，则空操作返回，否则从根结点开始（注意并不是先访问根结点），中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树。</p></li><li><p>后序遍历-左右根<br>规则是若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后是访问根结点。</p></li><li><p>层序遍历<br>规则是若树为空，则空操作返回，否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。</p></li></ol><p>技巧：每个结点单独看。比如后序遍历，每个右结点的左边是该结点的左节点，右边必然是对应的根结点。</p><h3 id="6-8-3-前序遍历算法"><a href="#6-8-3-前序遍历算法" class="headerlink" title="6.8.3 前序遍历算法"></a>6.8.3 前序遍历算法</h3><p>二叉树的定义是用递归的方式，所以，实现遍历算法也可以采用递归，而且极其简洁明了。先来看看二叉树的前序遍历算法。代码如下：  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 二叉树的前序遍历递归算法 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreOrderTraverse</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, T-&gt;data); <span class="hljs-comment">/* 显示结点数据，可以更改为其它对结点操作 */</span><br>    PreOrderTraverse(T-&gt;lchild); <span class="hljs-comment">/* 再先序遍历左子树 */</span><br>    PreOrderTraverse(T-&gt;rchild); <span class="hljs-comment">/* 最后先序遍历右子树 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-8-4-中序遍历算法"><a href="#6-8-4-中序遍历算法" class="headerlink" title="6.8.4 中序遍历算法"></a>6.8.4 中序遍历算法</h3><p>二叉树的中序遍历算法和前序遍历算法仅仅只是代码的顺序上的差异。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 二叉树的中序遍历递归算法 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrderTraverse</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>;<br>    InOrderTraverse(T-&gt;lchild); <span class="hljs-comment">/* 中序遍历左子树 */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, T-&gt;data);<span class="hljs-comment">/* 显示结点数据，可以更改为其它对结点操作 */</span><br>    InOrderTraverse(T-&gt;rchild); <span class="hljs-comment">/* 最后中序遍历右子树 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-8-5后序遍历算法"><a href="#6-8-5后序遍历算法" class="headerlink" title="6.8.5后序遍历算法"></a>6.8.5后序遍历算法</h3><p>那么同样的，后序遍历也就很容易想到应该如何写代码了。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 二叉树的后序遍历递归算法 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrderTraverse</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>;<br>    PostOrderTraverse(T-&gt;lchild); <span class="hljs-comment">/* 先后序遍历左子树  */</span><br>    PostOrderTraverse(T-&gt;rchild); <span class="hljs-comment">/* 再后序遍历右子树  */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, T-&gt;data);<span class="hljs-comment">/* 显示结点数据，可以更改为其它对结点操作 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-8-6-推导遍历结果"><a href="#6-8-6-推导遍历结果" class="headerlink" title="6.8.6 推导遍历结果"></a>6.8.6 推导遍历结果</h3><p>两个二叉树遍历的性质。</p><ul><li>已知前序遍历序列和中序遍历序列，可以唯一确定一棵二叉树。</li><li>已知后序遍历序列和中序遍历序列，可以唯一确定一棵二叉树。</li></ul><p>但要注意了，已知前序和后序遍历，是不能确定一棵二叉树的，原因也很简单，比如前序序列是ABC，后序序列是CBA。我们可以确定A一定是根结点，但接下来，我们无法知道，哪个结点是左子树，哪个是右子树。这棵树可能有如图6-8-24所示的四种可能。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-8-24.JPG?raw=true" alt="6-8-24"></p><p><strong>推导遍历结果的具体方法如下：</strong></p><ol><li><strong>根据前序或后续遍历序列确定二叉树的各子树的根；</strong></li><li><strong>根据中序遍历序列确定各子树根的左、右子树。</strong></li></ol><p>【例】 二叉树的中序序列是ABCDEFG，后序序列是BDCAFGE，求前序序列？</p><ol><li>由后序的BDCAFG|E，得到E是根结点，因此前序首字母是E。  </li><li>以中序序列的根节点E将中序序列分为两棵树ABCD和FG，后序序列分为BDCA和FG，知道A是E的左孩子。  </li><li>再由中序序列的A|BCD，知道BCD是A结点的右孩子，再由后序序列的BDC|A，知道C结点是A结点的右孩子。  </li><li>中序序列AB|C|D，得到B是C的左孩子，D是C的右孩子。  </li><li>由后序序列F|G|E，得到G是E的右孩子；在看中序序列F|G，F就是G的左孩子。</li><li>至此，二叉树画出来了。前序遍历序列的最终结果就是EACBDGF。</li></ol><h2 id="6-9-二叉树的建立"><a href="#6-9-二叉树的建立" class="headerlink" title="6.9 二叉树的建立"></a>6.9 二叉树的建立</h2><p>如果我们要在内存中建立一个二叉树，为了能让每个结点确认是否有左右孩子，我们对它进行了扩展，也就是将二叉树中每个结点的空指针引出一个虚结点，其值为一特定值，比如“#”。我们称这种处理后的二叉树为原二叉树的扩展二叉树。扩展二叉树就可以做到一个遍历序列确定一棵二叉树了。<br>前序遍历序列生成二叉树的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 按前序输入二叉树中结点的值（一个字符） */</span><br><span class="hljs-comment">/* #表示空树，构造二叉链表表示二叉树T。 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateBiTree</span><span class="hljs-params">(BiTree *T)</span></span><br><span class="hljs-function"></span>&#123;<br>    TElemType ch;<br>    <span class="hljs-comment">/* scanf(&quot;%c&quot;,&amp;ch); */</span><br>    ch = str[index++];<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;#&#x27;</span>)<br>        *T = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        *T = (BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>        <span class="hljs-keyword">if</span> (!*T)<br>            <span class="hljs-built_in">exit</span>(OVERFLOW);<br>        (*T)-&gt;data = ch; <span class="hljs-comment">/* 生成根结点 */</span><br>        CreateBiTree(&amp;(*T)-&gt;lchild); <span class="hljs-comment">/* 构造左子树 */</span><br>        CreateBiTree(&amp;(*T)-&gt;rchild); <span class="hljs-comment">/* 构造右子树 */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当然，你完全也可以用中序或后序遍历的方式实现二叉树的建立，只不过代码里生成结点和构造左右子树的代码顺序交换一下。另外，输入的字符也要做相应的更改。</p><h2 id="6-10-线索二叉树"><a href="#6-10-线索二叉树" class="headerlink" title="6.10 线索二叉树"></a>6.10 线索二叉树</h2><h3 id="6-10-1-线索二叉树原理"><a href="#6-10-1-线索二叉树原理" class="headerlink" title="6.10.1 线索二叉树原理"></a>6.10.1 线索二叉树原理</h3><p><strong>指向前驱和后继的指针称为线索，加上线索的二叉链表称为线索链表，相应的二叉树就称为线索二叉树（Threaded Binary Tree）。</strong><br>其实线索二叉树，等于是把一棵二叉树转变成了一个双向链表，这样对我们的插入删除结点、查找某个结点都带来了方便。所以<strong>我们对二叉树以某种次序遍历使其变为线索二叉树的过程称做是线索化</strong>。<br>但是变为线索二叉树，我们并不知道某个结点的lChild是指向它的左孩子还是指向前驱…<br>因此，我们在每个结点再增设两个标志域lTag和rTag，注意lTag和rTag只是存放0或1数字的布尔型变量，其占用的内存空间要小于像lchild和rchild的指针变量。结点结构如下表所示。<br>lChild|lTag|data|rTag|rChild<br>-|-|-|-|-<br>其中：</p><ul><li>lTag为0时指向该结点的左孩子，为1时指向该结点的前驱。</li><li>rTag为0时指向该结点的右孩子，为1时指向该结点的后继。</li></ul><h3 id="6-10-2-线索二叉树结构实现"><a href="#6-10-2-线索二叉树结构实现" class="headerlink" title="6.10.2 线索二叉树结构实现"></a>6.10.2 线索二叉树结构实现</h3><p>由此二叉树的线索存储结构定义代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 二叉树的二叉线索存储结构定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span> Link, Thread &#125; PointerTag; <span class="hljs-comment">/* Link==0表示指向左右孩子指针, */</span><br>                                          <span class="hljs-comment">/* Thread==1表示指向前驱或后继的线索 */</span><br><span class="hljs-keyword">typedef</span>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiThrNode</span>                 /* 二叉线索存储结点结构 */</span><br><span class="hljs-class">&#123;</span><br>    TElemType data;    <span class="hljs-comment">/* 结点数据 */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiThrNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span>    <span class="hljs-comment">/* 左右孩子指针 */</span><br>    PointerTag LTag;<br>    PointerTag RTag;        <span class="hljs-comment">/* 左右标志 */</span><br>&#125; BiThrNode, *BiThrTree;<br></code></pre></div></td></tr></table></figure><p>线索化的实质就是将二叉链表中的空指针改为指向前驱或后继的线索。由于前驱和后继的信息只有在遍历该二叉树时才能得到，所以<strong>线索化的过程就是在遍历的过程中修改空指针的过程</strong>。<br>中序遍历线索化的递归函数代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">BiThrTree pre; <span class="hljs-comment">/* 全局变量,始终指向刚刚访问过的结点 */</span><br><span class="hljs-comment">/* 中序遍历进行中序线索化 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InThreading</span><span class="hljs-params">(BiThrTree p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p)<br>    &#123;<br>        InThreading(p-&gt;lchild); <span class="hljs-comment">/* 递归左子树线索化 */</span><br>        <span class="hljs-keyword">if</span> (!p-&gt;lchild) <span class="hljs-comment">/* 没有左孩子 */</span><br>        &#123;<br>            p-&gt;LTag = Thread; <span class="hljs-comment">/* 前驱线索 */</span><br>            p-&gt;lchild = pre; <span class="hljs-comment">/* 左孩子指针指向前驱 */</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (!pre-&gt;rchild) <span class="hljs-comment">/* 前驱没有右孩子 */</span><br>        &#123;<br>            pre-&gt;RTag = Thread; <span class="hljs-comment">/* 后继线索 */</span><br>            pre-&gt;rchild = p; <span class="hljs-comment">/* 前驱右孩子指针指向后继(当前结点p) */</span><br>        &#125;<br>        pre = p; <span class="hljs-comment">/* 保持pre指向p的前驱 */</span><br>        InThreading(p-&gt;rchild); <span class="hljs-comment">/* 递归右子树线索化 */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>if（!p-&gt;lChild）表示如果某结点的左指针域为空，因为其前驱结点刚刚访问过，赋值给了pre，所以可以将pre赋值给p-&gt;lChild，并修改p-&gt;LTag=Thread（也就是定义为1）以完成前驱结点的线索化。<br>后继就要稍稍麻烦一些。因为此时p结点的后继还没有访问到，因此只能对它的前驱结点pre的右指针rchild做判断，if（!pre-&gt;rchild）表示如果为空，则p就是pre的后继，于是pre-&gt;rchild=p，并且设置pre-&gt;RTag=Thread，完成后继结点的线素化。<br>完成前驱和后继的判断后，别忘记将当前的结点p赋值给pre，以便于下一次使用。<br>有了线索二叉树后，我们对它进行遍历时发现，其实就等于是操作一个双向链表结构。<br>和双向链表结构一样，在二叉树线素链表上添加一个头结点，如图6-10-6所示，并令其lchild域的指针指向二叉树的根结点（图中的①），其rchild域的指针指向中序遍历时访问的最后一个结点（图中的②）。反之，令二叉树的中序序列中的第一个结点中，lchild 域指针和最后一个结点的rchild 域指针均指向头结点（图中的③和④）。这样定义的好处就是我们既可以从第一个结点起顺后继进行遍历，也可以从最后一个结点起顺前驱进行遍历。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-10-6.JPG?raw=true" alt="6-10-6">  </p><p>遍历的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*T指向头结点，头结点左链lchild指向根结点，头结点右链rchild指向中序遍历的*/</span><br><span class="hljs-comment">/*最后一个结点。中序遍历二叉线索链表表示的二叉树T*/</span><br><span class="hljs-function">Status <span class="hljs-title">InOrderTraverse_Thr</span><span class="hljs-params">(BiThrTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    BiThrTree p;<br>    p = T-&gt;lchild; <span class="hljs-comment">/* p指向根结点 */</span><br>    <span class="hljs-keyword">while</span> (p != T) <span class="hljs-comment">/* 空树或遍历结束时，p==T */</span><br>    &#123; <span class="hljs-comment">/* 空树或遍历结束时,p==T */</span><br>        <span class="hljs-keyword">while</span> (p-&gt;LTag == Link) <span class="hljs-comment">/*当LTag==0时循环到中序序列第一个结点 */</span><br>            p = p-&gt;lchild;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,p-&gt;data); <span class="hljs-comment">/* 显示结点数据，可以更改为其他对结点操作 */</span><br>        <span class="hljs-keyword">while</span> (p-&gt;RTag == Thread &amp;&amp; p-&gt;rchild != T)<br>        &#123;<br>            p = p-&gt;rchild;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,p-&gt;data);<br>        &#125;<br>        p = p-&gt;rchild; <span class="hljs-comment">/* p进至其右子树根 */</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>从这段代码也可以看出，它等于是一个链表的扫描，所以时间复杂度为O(n)。<br>由于它充分利用了空指针域的空间（这等于节省了空间），又保证了创建时的一次遍历就可以终生受用前驱后继的信息（这意味着节省了时间）。所以在实际问题中，<strong>如果所用的二叉树需经常遍历或查找结点时需要某种遍历序列中的前驱和后继，那么采用线索二叉链表的存储结构就是非常不错的选择</strong>。</p><h2 id="6-11-树、森林与二叉树的转换"><a href="#6-11-树、森林与二叉树的转换" class="headerlink" title="6.11 树、森林与二叉树的转换"></a>6.11 树、森林与二叉树的转换</h2><h3 id="6-11-1-树转换为二叉树"><a href="#6-11-1-树转换为二叉树" class="headerlink" title="6.11.1 树转换为二叉树"></a>6.11.1 树转换为二叉树</h3><p>将树转换为二叉树的步骤如下</p><ol><li>加线。在所有兄弟结点之间加一条连线。</li><li>去线。对树中每个结点，只保留它与第一个孩子结点的连线，删除它与其他孩子结点之间的连线。</li><li>层次调整。以树的根结点为轴心，将整棵树顺时针旋转一定的角度，使之结构层次分明。注意第一个孩子是二叉树结点的左孩子，兄弟转换过来的孩子是结点的右孩子。</li></ol><h3 id="6-11-2-森林转换为二叉树"><a href="#6-11-2-森林转换为二叉树" class="headerlink" title="6.11.2 森林转换为二叉树"></a>6.11.2 森林转换为二叉树</h3><p>森林是由若干棵树组成的，所以完全可以理解为，森林中的每一棵树都是兄弟，可以按照兄弟的处理办法来操作。步骤如下：</p><ol><li>把每个树转换为二叉树。</li><li>第一棵二叉树不动，从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树的根结点的右孩子，用线连接起来。当所有的二叉树连接起来后就得到了由森林转换来的二叉树。</li></ol><h3 id="6-11-3-二叉树转换为树"><a href="#6-11-3-二叉树转换为树" class="headerlink" title="6.11.3 二叉树转换为树"></a>6.11.3 二叉树转换为树</h3><p>二叉树转换为树是树转换为二叉树的逆过程，也就是反过来做而已。如图6-11-4所示。步骤如下：</p><ol><li>加线。若某结点的左孩子结点存在，则将这个左孩子的右孩子结点、右孩子的右孩子结点、右孩子的右孩子的右孩子结点……哈，反正就是左孩子的n个右孩子结点都作为此结点的孩子。将该结点与这些右孩子结点用线连接起来。</li><li>去线。删除原二叉树中所有结点与其右孩子结点的连线。</li><li>层次调整。使之结构层次分明。</li></ol><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-11-4.JPG?raw=true" alt="6-11-4"></p><h3 id="6-11-4-二叉树转换为森林"><a href="#6-11-4-二叉树转换为森林" class="headerlink" title="6.11.4 二叉树转换为森林"></a>6.11.4 二叉树转换为森林</h3><p>判断一棵二叉树能够转换成一棵树还是森林，标准很简单，那就是只要看这棵二叉树的根结点有没有右孩子，有就是森林，没有就是一棵树。<br>那么如果是转换成森林，步骤如下：</p><ol><li>从根结点开始，若右孩子存在，则把与右孩子结点的连线删除，再查看分离后的二叉树，若右孩子存在，则连线删除……，直到所有右孩子连线都删除为止，得到分离的二叉树。</li><li>再将每棵分离后的二叉树转换为树即可。</li></ol><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-11-5.JPG?raw=true" alt="6-11-5"></p><h3 id="6-11-5-树与森林的遍历"><a href="#6-11-5-树与森林的遍历" class="headerlink" title="6.11.5 树与森林的遍历"></a>6.11.5 树与森林的遍历</h3><p>树的遍历分为两种方式。</p><ol><li>一种是先根遍历树，即先访问树的根结点，然后依次先根遍历根的每棵子树。</li><li>另一种是后根遍历，即先依次后根遍历每棵子树，然后再访问根结点。比如图6-11-4中最右侧的树，它的先根遍历序列为ABEFCDG，后根遍历序列为EFBCGDA。</li></ol><p>森林的遍历也分为两种方式：</p><ol><li>前序遍历：先访问森林中第一棵树的根结点，然后再依次先根遍历根的每棵子树，再依次用同样方式遍历除去第一棵树的剩余树构成的森林。比如图6-11-5右侧三棵树的森林，前序遍历序列的结果就是ABCDEFGHJI。</li><li>后序遍历：是先访问森林中第一棵树，后根遍历的方式遍历每棵子树，然后再访问根结点，再依次同样方式遍历除去第一棵树的剩余树构成的森林。比如图6-11-5右侧三棵树的森林，后序遍历序列的结果就是BCDAFEJHIG。</li></ol><p>可如果我们对二叉树进行分析就会发现，森林的前序遍历和二叉树的前序遍历结果相同，森林的后序遍历和二叉树的中序遍历结果相同。<br>这也就告诉我们，当以二叉链表作树的存储结构时，树的先根遍历和后根遍历完全可以借用二叉树的前序遍历和中序遍历的算法来实现。这其实也就证实，我们找到了对树和森林这种复杂问题的简单解决办法。  </p><h2 id="6-12-赫夫曼-也有称为哈夫曼-树及其应用"><a href="#6-12-赫夫曼-也有称为哈夫曼-树及其应用" class="headerlink" title="6.12 赫夫曼(也有称为哈夫曼)树及其应用"></a>6.12 赫夫曼(也有称为哈夫曼)树及其应用</h2><h3 id="6-12-1-赫夫曼树"><a href="#6-12-1-赫夫曼树" class="headerlink" title="6.12.1 赫夫曼树"></a>6.12.1 赫夫曼树</h3><p>压缩软件如何做到压缩而不出错的呢？简单说，就是把我们要压缩的文本进行重新编码，以减少不必要的空间。我们今天就来介绍一下最基本的压缩编码方法——赫夫曼编码。<br>由美国数学家赫夫曼（David Huffman）在1952年发明了赫夫曼编码。他在编码中用到的特殊的二叉树称之为赫夫曼树，他的编码方法称为赫夫曼编码。  </p><h3 id="6-12-2-赫夫曼树定义与原理"><a href="#6-12-2-赫夫曼树定义与原理" class="headerlink" title="6.12.2 赫夫曼树定义与原理"></a>6.12.2 赫夫曼树定义与原理</h3><p><strong>从树中一个结点到另一个结点之间的分支构成两个结点之间的路径，路径上的分支数目称做路径长度。</strong><br><strong>树的路径长度就是从树根到每一结点的路径长度之和。</strong><br>如果考虑到带权的结点，结点的带权的路径长度为从该结点到树根之间的路径长度与结点上权的乘积。树的带权路径长度为树中所有叶子结点的带权路径长度之和。假设有n个权值{w1，w2，…，Wn}，构造一棵有n个叶子结点的二叉树，每个叶子结点带权Wk，每个叶子的路径长度为lk，我们通常记作，则其中<strong>带权路径长度WPL最小的二叉树称做赫夫曼树</strong>。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-12-4.JPG?raw=true" alt="6-12-4"><br>有了赫夫曼对带权路径长度的定义，我们来计算一下图6-12-4这两棵树的WPL值。<br>二叉树a的WPL=5×1+15×2+40×3+30×4+10×4=315<br>注意：这里5是A结点的权，1是A结点的路径长度，其他同理。<br>二叉树b的WPL=5×3+15×3+40×2+30×2+10×2=220<br>参考图6-12-4的二叉树b，最优赫夫曼树的解法如下：</p><ol><li>先把有权值的叶子结点按照从小到大的顺序排列成一个有序序列，即：A5，E10，B15，D30，C40。</li><li>取头两个最小权值的结点作为一个新节点N1的两个子结点，注意相对较小的是左孩子，这里就是A为N1的左孩子，E为N1的右孩子，如图6-12-5所示。新结点的权值为两个叶子权值的和5+10=15。</li><li>将N1替换A与E，插入有序序列中，保持从小到大排列。即：N1 15，B15，D30，C40。</li><li>重复步骤2。将N1与B作为一个新节点N2的两个子结点。如图6-12-6所示。N2的权值=15+15=30。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-12-5.JPG?raw=true" alt="6-12-5"></li><li>将N2替换N1与B，插入有序序列中，保持从小到大排列。即：N2 30，D30，C40。</li><li>重复步骤2。将N2与D作为一个新节点N3的两个子结点。如图6-12-7所示。N3的权值=30+30=60。</li><li>将N3替换N2与D，插入有序序列中，保持从小到大排列。即：C40，N3 60。</li><li>重复步骤2。将C与N3作为一个新节点T的两个子结点，如图6-12-8所示。由于T即是根结点，完成赫夫曼树的构造。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-12-7.JPG?raw=true" alt="6-12-7">  </li></ol><p>此时的图6-12-8二叉树的带权路径长度WPL=40×1+30×2+15×3+10×4+5×4=205。与图6-12-4的二叉树b的WPL值220相比，还少了15。显然此时构造出来的二叉树才是最优的赫夫曼树。</p><p>通过刚才的步骤，我们可以得出构造赫夫曼树的赫夫曼算法描述。</p><ol><li>根据给定的n个权值{$w_{1} ，w_{2} ，…，w_{n}$}构成n棵二叉树的集合$F=${$T_{1}，T_{2}，…，T_{n}$}，其中每棵二叉树$T_{i}$中只有一个带权为$w_{i}$根结点，其左右子树均为空。</li><li>在森林$F$中选取两棵根结点的权值最小的树作为左右子树构造一棵新的二叉树，且置新的二叉树的根结点的权值为其左右子树上根结点的权值之和。</li><li>在$F$中删除这两棵树，同时将新得到的二叉树加入$F$中。</li><li>重复2和3步骤，直到F只含一棵树为止。这棵树便是赫夫曼树。</li></ol><h3 id="6-12-3-赫夫曼编码"><a href="#6-12-3-赫夫曼编码" class="headerlink" title="6.12.3 赫夫曼编码"></a>6.12.3 赫夫曼编码</h3><p>按照不同字母出现的频率重新按照赫夫曼树来规划它们。将规划出来的树权值左分支改为0，右分支改为1后。对字母从树根到叶子所经过路径的0或1来编码，可以看出结果串变小了，编码得到了压缩，节约了存储和传输成本。  </p><p>当我们接收到压缩过的新编码时，我们应该如何把它解码出来呢？  </p><p>编码中非0即1，长短不等的话其实是很容易混淆的，所以<strong>若要设计长短不等的编码，则必须是任一字符的编码都不是另一个字符的编码的前缀，这种编码称做前缀编码</strong>。  </p><p>可以利用哈夫曼树来设计二进制的前缀编码。</p><p>【例】如图6-12-9所示哈夫曼树，其左分支表示字符“0”，右分支表示字符“1”，则以根节点到叶结点路径上的分支字符组成的串作为该叶结点的字符编码，则可得字符a、b、c、d的二进制前缀编码分别为：0、10、110、111。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%85%AD%E7%AB%A0/6-12-9.JPG?raw=true" alt="6-12-9">  </p><p>为了让我们去方便地解码的，在解码时，还是要用到赫夫曼树，即发送方和接收方必须要约定好同样的赫夫曼编码规则。</p><p><strong>一般地，设需要编码的字符集为{$d_{1} ，d_{2} ，…，d_{n}$}，各个字符在电文中出现的次数或频率集合为{$w_{1} ，w_{2} ，…，w_{n}$}，以$d_{1} ，d_{2} ，…，d_{n}$作为叶子结点，以$w_{1} ，w_{2} ，…，w_{n}$作为相应叶子结点的权值来构造一棵赫夫曼树。规定赫夫曼树的左分支代表0，右分支代表1，则从根结点到叶子结点所经过的路径分支组成的0和1的序列便为该结点对应字符的编码，这就是赫夫曼编码</strong>。  </p><p><strong>简而言之，设计电文总长最短的二进制前缀编码，就是以$n$种字符出现的频率作为权构造一棵哈夫曼树，由哈夫曼树求得的编码就是哈夫曼编码。</strong></p><h2 id="6-13-总结回顾"><a href="#6-13-总结回顾" class="headerlink" title="6.13 总结回顾"></a>6.13 总结回顾</h2><p>终于到了总结的时间，这一章与前面章节相比，显得过于庞大了些，原因也就在于树的复杂性和变化丰富度是前面的线性表所不可比拟的。即使在本章之后，我们还要讲解关于树这一数据结构的相关知识，可见它的重要性。<br>开头我们提到了树的定义，讲到了递归在树定义中的应用。提到了如子树、结点、度、叶子、分支结点、双亲、孩子、层次、深度、森林等诸多概念，这些都是需要在理解的基础上去记忆的。<br>我们谈到了树的存储结构时，讲了双亲表示法、孩子表示法、孩子兄弟表示法等不同的存储结构。<br>并由孩子兄弟表示法引出了我们这章中最重要一种树，二叉树。<br>二叉树每个结点最多两棵子树，有左右之分。提到了斜树，满二叉树、完全二叉树等特殊二叉树的概念。<br>我们接着谈到它的各种性质，这些性质给我们研究二叉树带来了方便。<br>二叉树的存储结构由于其特殊性使得既可以用顺序存储结构又可以用链式存储结构表示。<br>遍历是二叉树最重要的一门学问，前序、中序、后序以及层序遍历都是需要熟练掌握的知识。要让自己要学会用计算机的运行思维去模拟递归的实现，可以加深我们对递归的理解。不过，并非二叉树遍历就一定要用到递归，只不过递归的实现比较优雅而已。这点需要明确。<br>二叉树的建立自然也是可以通过递归来实现。<br>研究中也发现，二叉链表有很多浪费的空指针可以利用，查找某个结点的前驱和后继为什么非要每次遍历才可以得到，这就引出了如何构造一棵线索二叉树的问题。<br>线索二叉树给二叉树的结点查找和遍历带来了高效率。<br>树、森林看似复杂，其实它们都可以转化为简单的二叉树来处理，我们提供了树、森林与二叉树的互相转换的办法，这样就使得面对树和森林的数据结构时，编码实现成为了可能。<br>最后，我们提到了关于二叉树的一个应用，赫夫曼树和赫夫曼编码，对于带权路径的二叉树做了详尽地讲述，让你初步理解数据压缩的原理，并明白其是如何做到无损编码和无错解码的。  </p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>大话数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大话数据结构第五章 串</title>
    <link href="/2019/12/25/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC5%E7%AB%A0%20%E4%B8%B2/"/>
    <url>/2019/12/25/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC5%E7%AB%A0%20%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="5-1-5-2-串的定义"><a href="#5-1-5-2-串的定义" class="headerlink" title="5.1-5.2 串的定义"></a>5.1-5.2 串的定义</h2><p>串(string)是由零个或多个字符组成的有限序列，又名叫字符串。<br>一般记为s=“a1a2……an”(n&gt;0)，其中，s是串的名称，用双引号(有些书中也用单引号)括起来的字符序列是串的值，注意单引号不属于串的内容。ai(1≤i≤n)可以是字母、数字或其他字符，i就是该字符在串中的位置。串中的字符数目n称为串的长度，定义中谈到“有限”是指长度n是一个有限的数值。零个字符的串称为空串(null string)，它的长度为零，可以直接用两双引号“”””表示，也可以用希腊字母“Φ”来表示。所谓的序列，说明串的相邻字符之间具有前驱和后继的关系。  </p><span id="more"></span><p>还有一些概念需要解释：  </p><ul><li>空格串，是只包含空格的串。注意它与空串的区别，空格串是有内容有长度的，而且可以不止一个空格。</li><li>子串与主串，串中任意个数的连续字符组成的子序列称为该串的子串，相应地，包含子串的串称为主串。</li><li>子串在主串中的位置就是子串的第一个字符在主串中的序号。</li></ul><p>开头我所提到的“over”、“end”、“lie”其实可以认为是“over”、“friend”、“believe”这些单词字符串的子串。  </p><h2 id="5-3-串的比较"><a href="#5-3-串的比较" class="headerlink" title="5.3 串的比较"></a>5.3 串的比较</h2><p>两个字符串的长度以及它们每个位置各个对应位置的字符都相等时，才算是相等。<br>那么对于两个串不相等时，如何判定它们的大小呢。我们这样定义：<br>给定两个串：s=“a1a2……an”，t=“b1b2……bm”，当满足以下条件之一时，<code>s&lt;t</code>。</p><ol><li><code>n&lt;m</code>，且ai=bi(i=1，2，…，n)。<br>例如当s=“hap”，t=“happy”，就有sst。因为t比s多出了两个字母。</li><li>存在某个<code>k&lt;min(m，n)</code>，使得ai=bi；(i=1，2，……，k-1)，<code>ak&lt;bk</code>。<br>例如当s=“happen”，t=“happy”，因为两串的前4个子母均相同，间内串第5个字母(k值)，字母e的ASCII码是101，而字母y的ASCII码是121，显然<code>e&lt;y</code>，所以<code>s&lt;t</code>。</li></ol><h2 id="5-4-串的抽象数据类型"><a href="#5-4-串的抽象数据类型" class="headerlink" title="5.4 串的抽象数据类型"></a>5.4 串的抽象数据类型</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">ADT 串(<span class="hljs-built_in">string</span>)<br>Data<br>  串中元素仅由一个字符组成，相邻元素具有前驱和后继关系。<br><span class="hljs-function">Operation</span><br><span class="hljs-function">  <span class="hljs-title">strAssign</span><span class="hljs-params">(T，*chars)</span>：生成一个其值等于字符串常量chars的串T。</span><br><span class="hljs-function">  <span class="hljs-title">StrCopy</span><span class="hljs-params">(T，S)</span>：串S存在，由串S复制得串T。</span><br><span class="hljs-function">  <span class="hljs-title">ClearString</span><span class="hljs-params">(S)</span>：串S存在，将串清空。</span><br><span class="hljs-function">  <span class="hljs-title">StringEmpty</span><span class="hljs-params">(S)</span>；若串S为空，返回<span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span>。</span><br><span class="hljs-function">  <span class="hljs-title">StrLength</span><span class="hljs-params">(S)</span>：返回串S的元素个数，即串的长度。</span><br><span class="hljs-function">  <span class="hljs-title">StrCompare</span><span class="hljs-params">(S，T)</span>：若S&gt;T，返回值&gt;0，若S</span>=T，返回<span class="hljs-number">0</span>，若S&lt;T，返回值&lt;<span class="hljs-number">0</span>。<br>  Concat(T，S1，S2)：用T返回由S1和S2联接而成的新串。<br>  SubString(Sub，S，pos，len)：串S存在，<span class="hljs-number">1</span>≤pos≤StrLength(S)，且<span class="hljs-number">0</span>≤len≤StrLength(S)-pos+<span class="hljs-number">1</span>，用Sub返回串S的第pos个字符起长度为len的子串。<br>  Index(S，T，pos)：串S和T存在，T是非空串，<span class="hljs-number">1</span>≤pos≤StrLength(S)。若主串S中存在和串T值相同的子串，则返回它在主串S中第pos个字符之后第一次出现的位置，否则返回<span class="hljs-number">0</span>。<br>  Replace(S，T，V)：串S、T和v存在，T是非空串。用V替换主串S中出现的所有与T相等的不重叠的子串。<br>  StrInsert(S，pos，T)：串s和T存在，<span class="hljs-number">1</span>≤pos≤StrLength(S)+<span class="hljs-number">1</span>。在串S的第pos个字符之前插入串T。<br>  StrDelete(S，pos，len)：串S存在，<span class="hljs-number">1</span>≤pos≤StrLength(S)-len+<span class="hljs-number">1</span>。从串S中删除第pos个字符起长度为len的子串。<br>endADT<br></code></pre></div></td></tr></table></figure><h2 id="5-5-串的存储结构"><a href="#5-5-串的存储结构" class="headerlink" title="5.5 串的存储结构"></a>5.5 串的存储结构</h2><p>串的存储结构与线性表相同，分为两种。  </p><h3 id="5-5-1-串的顺序存储结构"><a href="#5-5-1-串的顺序存储结构" class="headerlink" title="5.5.1 串的顺序存储结构"></a>5.5.1 串的顺序存储结构</h3><p>串的顺序存储结构是用一组地址连续的存储单元来存储串中的字符序列的。按照预定义的大小，为每个定义的串变量分配一个固定长度的存储区。一般是用定长数组来定义。<br>既然是定长数组，就存在一个预定义的最大串长度，一般可以将实际的串长度值保存在数组的0下标位置，有的书中也会定义存储在数组的最后一个下标位置。但也有些编程语言不想这么干，觉得存个数字占个空间麻烦。它规定在串值后面加一个不计入串长度的结束标记字符，比如“\0”来表示串值的终结，这个时候，你要想知道此时的串长度，就需要遍历计算一下才知道了，其实这还是需要占用一个空间，何必呢。</p><h3 id="5-5-2-串的链式存储结构"><a href="#5-5-2-串的链式存储结构" class="headerlink" title="5.5.2 串的链式存储结构"></a>5.5.2 串的链式存储结构</h3><p>对于串的链式存储结构，与线性表是相似的，但由于串结构的特殊性，结构中的每个元素数据是一个字符，如果也简单的应用链表存储串值，一个结点对应一个字符，就会存在很大的空间浪费。因此，一个结点可以存放一个字符，也可以考虑存放多个字符，最后一个结点若是未被占满时，可以用“#”或其他非串值字符补全，如图5-5-3所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%BA%94%E7%AB%A0/5-5-3.JPG?raw=true" alt="5-5-3"><br>当然，这里一个结点存多少个字符才合适就变得很重要，这会直接影响着串处理的效率，需要根据实际情况做出选择。<br>但串的链式存储结构除了在连接串与串操作时有一定方便之外，总的来说不如顺序存储灵活，性能也不如顺序存储结构好。  </p><h2 id="5-6-朴素的模式匹配算法-暴力算法匹配"><a href="#5-6-朴素的模式匹配算法-暴力算法匹配" class="headerlink" title="5.6 朴素的模式匹配算法(暴力算法匹配)"></a>5.6 朴素的模式匹配算法(暴力算法匹配)</h2><p>子串的定位操作通常称做串的模式匹配，也算是串中最重要的操作之一。<br>用基本的数组来实现朴素的模式匹配算法。我们假设主串S和要匹配的子串T的长度存在S[0]与T[0]中。实现代码如下：  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 返回子串T在主串S中第pos个字符之后的位置。若不存在,则函数返回值为0。 */</span><br><span class="hljs-comment">/* 其中,T非空,1≤pos≤StrLength(S)。 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Index</span><span class="hljs-params">(String S, String T, <span class="hljs-keyword">int</span> pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = pos;    <span class="hljs-comment">/* i用于主串S中当前位置下标值，若pos不为1，则从pos位置开始匹配 */</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;                <span class="hljs-comment">/* j用于子串T中当前位置下标值 */</span><br>    <span class="hljs-keyword">while</span> (i &lt;= S[<span class="hljs-number">0</span>] &amp;&amp; j &lt;= T[<span class="hljs-number">0</span>]) <span class="hljs-comment">/* 若i小于S的长度并且j小于T的长度时，循环继续 */</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (S[i] == T[j])     <span class="hljs-comment">/* 两字母相等则继续 */</span><br>          &#123;<br>            ++i;<br>            ++j;<br>          &#125;<br>          <span class="hljs-keyword">else</span>                 <span class="hljs-comment">/* 指针后退重新开始匹配 */</span><br>          &#123;  <br>             i = i-j+<span class="hljs-number">2</span>;        <span class="hljs-comment">/* i退回到上次匹配首位的下一位 */</span><br>             j = <span class="hljs-number">1</span>;             <span class="hljs-comment">/* j退回到子串T的首位 */</span><br>          &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (j &gt; T[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> i-T[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>非最坏情况下，只需要匹配2个串的首字母，所以根据等概率原则，平均是(n+m)/2次查找，时间复杂度为O(n+m)。<br>而最坏情况就是0000000000000000001，此时时间复杂度为O((n-m+1)*m)。  </p><h2 id="5-7-KMP-模式匹配算法"><a href="#5-7-KMP-模式匹配算法" class="headerlink" title="5.7 KMP 模式匹配算法"></a>5.7 KMP 模式匹配算法</h2><p>有三位前辈，D.E.Knuth、J.H.Morris 和V.R.Pratt（其中Knuth和Pratt 共同研究，Morris独立研究）发表一个模式匹配算法，可以大大避免重复遍历的情况，我们把它称之为克努特一莫里斯一普拉特算法，简称KMP算法。  </p><h3 id="5-7-1-KMP模式匹配算法原理"><a href="#5-7-1-KMP模式匹配算法原理" class="headerlink" title="5.7.1 KMP模式匹配算法原理"></a>5.7.1 KMP模式匹配算法原理</h3><p>首先要理解上面的朴素模式的匹配算法，主串设为S，要匹配的模式串设为T。<br>对于在子串中有与首字符相等的字符，也是可以省略一部分不必要的判断步骤。<br>我们在朴素的模式匹配算法中，主串的i值是不断地回溯来完成的。而我们的分析发现，这种回溯其实是可以不需要的，我们的KMP模式匹配算法就是为了让这没必要的回溯不发生。<br>既然i值不回溯，也就是不可以变小，那么要考虑的变化就是j(j在模式串中所在的位置)值了。通过观察也可发现，我们屡屡提到了T串的首字符与自身后面字符的比较，发现如果有相等字符，j(j在模式串中所在的位置)值的变化就会不相同。也就是说，这个j(j在模式串中所在的位置)值的变化与主串其实没什么关系，关键就取决于T串的结构中是否有重复的问题。<br>我们可以得出规律，j(j在模式串中所在的位置)值的多少取决于当前字符之前的串的前后缀的相似度。<br>我们把T串各个位置的j(j在模式串中所在的位置)值的变化定义为一个数组next，那么next的长度就是T串的长度。于是我们可以得到下面的函数定义：<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%BA%94%E7%AB%A0/5-7-6.JPG?raw=true" alt="5-7-6"></p><h3 id="5-7-2-next数组值推导"><a href="#5-7-2-next数组值推导" class="headerlink" title="5.7.2 next数组值推导"></a>5.7.2 next数组值推导</h3><p>“前缀”指除了最后一个字符以外，一个字符串的全部头部组合；<br>“后缀”指除了第一个字符以外，一个字符串的全部尾部组合。<br>“部分匹配值”就是”前缀”和”后缀”的最长的共有元素的长度。以”ABCDABD”为例，</p><ul><li>“A”的前缀和后缀都为空集，共有元素的长度为0；</li><li>“AB”的前缀为[A]，后缀为[B]，共有元素的长度为0；</li><li>“ABC”的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；</li><li>“ABCD”的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；</li><li>“ABCDA”的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为”A”，长度为1；</li><li>“ABCDAB”的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为”AB”，长度为2；</li><li>“ABCDABD”的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。  </li></ul><p>我们可以根据经验得到:如果前缀后缀最长共有元素的长度为1，k值是2，最长的共有元素的长度为2，k值是3。<br><strong>最长的共有元素的长度为n，k值就是n+1</strong>。  </p><h3 id="5-7-3KMP模式匹配算法实现"><a href="#5-7-3KMP模式匹配算法实现" class="headerlink" title="5.7.3KMP模式匹配算法实现"></a>5.7.3KMP模式匹配算法实现</h3><p>next代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 通过计算返回子串T的next数组。 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_next</span><span class="hljs-params">(String T, <span class="hljs-keyword">int</span> *next)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    i = <span class="hljs-number">1</span>;<br>    j = <span class="hljs-number">0</span>;<br>    next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; T[<span class="hljs-number">0</span>])  <span class="hljs-comment">/* 此处T[0]表示串T的长度 */</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || T[i] == T[j])     <span class="hljs-comment">/* T[i]表示后缀的单个字符，T[j]表示前缀的单个字符 */</span><br>        &#123;<br>            ++i;<br>            ++j;<br>            next[i] = j;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            j = next[j];    <span class="hljs-comment">/* 若字符不相同，则j值回溯 */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这段代码的目的就是为了计算出当前要匹配的串T的next数组。  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 返回子串T在主串S中第pos个字符之后的位置。若不存在，则函数返回值为0。 */</span><br><span class="hljs-comment">/*  T非空，1≤pos≤StrLength(S)。 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Index_KMP</span><span class="hljs-params">(String S, String T, <span class="hljs-keyword">int</span> pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = pos;        <span class="hljs-comment">/* i用于主串S中当前位置下标值，若pos不为1，则从pos位置开始匹配 */</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;            <span class="hljs-comment">/* j用于子串T中当前位置下标值 */</span><br>    <span class="hljs-keyword">int</span> next[<span class="hljs-number">255</span>];        <span class="hljs-comment">/* 定义一next数组 */</span><br>    get_next(T, next);    <span class="hljs-comment">/* 对串T作分析，得到next数组 */</span><br>    <span class="hljs-keyword">while</span> (i &lt;= S[<span class="hljs-number">0</span>] &amp;&amp; j &lt;= T[<span class="hljs-number">0</span>]) <span class="hljs-comment">/* 若i小于S的长度并且j小于T的长度时，循环继续 */</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || S[i] == T[j])     <span class="hljs-comment">/* 两字母相等则继续，与朴素算法增加了j=0判断 */</span><br>        &#123;<br>            ++i;<br>            ++j;<br>        &#125;<br>        <span class="hljs-keyword">else</span>             <span class="hljs-comment">/* 指针后退重新开始匹配 */</span><br>            j = next[j];<span class="hljs-comment">/* j退回合适的位置，i值不变 */</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (j &gt; T[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> i - T[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>对于get_next函数来说，若模式串的长度为m，因只涉及到简单的单循环，其时间复杂度为O(m)，而由于i值的不回溯，使得indexKMP算法效率得到了提高，while 循环的时间复杂度为O(n)。因此，整个算法的时间复杂度为O(n+m)。相较于朴素模式匹配算法的O((n-m+1)*m)来说，是要好一些。  </p><h3 id="5-7-4-KMP模式匹配算法改进"><a href="#5-7-4-KMP模式匹配算法改进" class="headerlink" title="5.7.4 KMP模式匹配算法改进"></a>5.7.4 KMP模式匹配算法改进</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 求模式串T的next函数修正值并存入数组nextval */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_nextval</span><span class="hljs-params">(String T, <span class="hljs-keyword">int</span> *nextval)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    i = <span class="hljs-number">1</span>;<br>    j = <span class="hljs-number">0</span>;<br>    nextval[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; T[<span class="hljs-number">0</span>])  <span class="hljs-comment">/* 此处T[0]表示串T的长度 */</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || T[i] == T[j])     <span class="hljs-comment">/* T[i]表示后缀的单个字符，T[j]表示前缀的单个字符 */</span><br>        &#123;<br>            ++i;<br>            ++j;<br>            <span class="hljs-keyword">if</span> (T[i] != T[j])      <span class="hljs-comment">/* 若当前字符与前缀字符不同 */</span><br>                nextval[i] = j;    <span class="hljs-comment">/* 则当前的j为nextval在i位置的值 */</span><br>            <span class="hljs-keyword">else</span><br>                nextval[i] = nextval[j];    <span class="hljs-comment">/* 如果与前缀字符相同，则将前缀字符的 */</span><br>                                            <span class="hljs-comment">/* nextval值赋值给nextval在i位置的值 */</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            j = nextval[j];            <span class="hljs-comment">/* 若字符不相同，则j值回溯 */</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-7-5-nextval-数组值推导"><a href="#5-7-5-nextval-数组值推导" class="headerlink" title="5.7.5 nextval 数组值推导"></a>5.7.5 nextval 数组值推导</h3><p>总结改进过的KMP算法，它是在计算出next值的同时，如果a位字符与它next值指向的b位字符相等，则该a位的nextval就指向b位的nextval值，如果不等，则该a位的nextval值就是它自己a位的next的值。  </p><h2 id="5-8-总结回顾"><a href="#5-8-总结回顾" class="headerlink" title="5.8 总结回顾"></a>5.8 总结回顾</h2><p>这一章节我们重点讲了“串”这样的数据结构，串（string）是由零个或多个字符组成的有限序列，又名叫字符串。本质上，它是一种线性表的扩展，但相对于线性表关注一个个元素来说，我们对串这种结构更多的是关注它子串的应用问题，如查找、替换等操作。现在的高级语言都有针对串的函数可以调用。我们在使用这些函数的时候，同时也应该要理解它当中的原理，以便于在碰到复杂的问题时，可以更加灵活的使用，比如KMP模式匹配算法的学习，就是更有效地去理解index函数当中的实现细节。  </p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>大话数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo next主题导航栏图标显示问号解决方案</title>
    <link href="/2019/12/10/hexo/hexo-next%E4%B8%BB%E9%A2%98%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E9%97%AE%E5%8F%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2019/12/10/hexo/hexo-next%E4%B8%BB%E9%A2%98%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E9%97%AE%E5%8F%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>导航栏图标显示问号，当修改<code>hexo\themes\next\_config.yml</code>主题配置文件后，图标显示正常，但是点击链接不能打开相应主页、标签页、归档页…<br>经研究，应该把menu下面的不同页面的/后面的空格删掉，即可。<br>具体配置如下：  </p><span id="more"></span><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/||</span> <span class="hljs-string">home</span>                  <span class="hljs-comment">#主页</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/||</span> <span class="hljs-string">archive</span>  <span class="hljs-comment">#归档</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-string">/categories/||</span> <span class="hljs-string">th</span>   <span class="hljs-comment">#分类</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">/tags/||</span> <span class="hljs-string">tags</span>             <span class="hljs-comment">#标签</span><br>  <span class="hljs-attr">about:</span> <span class="hljs-string">/about/||</span> <span class="hljs-string">user</span>           <span class="hljs-comment">#关于我</span><br>  <span class="hljs-comment">#search: /search</span><br>  <span class="hljs-comment">#schedule: /schedule/ || calendar</span><br>  <span class="hljs-comment">#sitemap: /sitemap.xml || sitemap</span><br>  <span class="hljs-comment">#commonweal: /404.html</span><br><br><span class="hljs-comment"># Enable/Disable menu icons.</span><br><span class="hljs-attr">menu_icons:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Icon Mapping.</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">home</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">archive</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-string">th</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">tags</span><br>  <span class="hljs-attr">about:</span> <span class="hljs-string">user</span><br>  <span class="hljs-comment">#commonweal: heartbeat</span><br>  <span class="hljs-comment">#search: search</span><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 多客户端上更新博客</title>
    <link href="/2019/12/09/hexo/hexo%20%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8A%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2/"/>
    <url>/2019/12/09/hexo/hexo%20%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8A%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p><code>git add source/ &amp;&amp; git commit -m &quot;blog update&quot; &amp;&amp; git push githuborigin hexo &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; exit</code></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>静态网页文件存放在<code>master主分支</code>，个人文件存放在<code>hexo分支</code>。  </p><span id="more"></span><h2 id="一、本地电脑设置"><a href="#一、本地电脑设置" class="headerlink" title="一、本地电脑设置"></a>一、本地电脑设置</h2><p>先新建一个hexo文件夹，在git bash下cd进入hexo文件夹。</p><p>1.<code>git init</code></p><p>2.<code>git checkout -b hexo</code> //新建hexo分支并切换到hexo</p><p>3.将原来博客文件夹里面的<code>_config.yml</code>，<code>theme/</code>，<code>source/</code>，<code>scaffolds/</code>，<code>package.json</code>，<code>.gitignore</code>，共6个文件/文件夹 拷贝到hexo文件夹下面。</p><p>需要拷贝的文件如下:  </p><ul><li>_config.yml（站点配置）；</li><li>theme文件夹里面的主题；</li><li>source文件夹；</li><li>scaffolds文件夹（文章的模板）；</li><li>package.json（说明使用哪些包）；</li><li>.gitignore（限定在提交的时候哪些文件可以忽略）；  </li><li><strong>注意：不要<code>hexo init</code>去整体初始化，因为需要的文件我们已经拷贝过来了。</strong></li></ul><p>4.将theme文件夹里面的你的主题文件夹下的.git文件夹删除。</p><p>5.<code>git add scaffolds/ source/ themes/ .gitignore _config.yml package.json</code><br>   <code>git commit -m &quot;init&quot;</code>  </p><p>6.<code>git remote add githuborigin git@github.com:你的ID/你的仓库名字</code>  //添加本地hexo和远程仓库的关联</p><p>7.登录github，将分支仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为hexo，Update保存。</p><p>8.<code>git push githuborigin hexo</code>  //上传更新</p><h2 id="二、另外一台电脑上配置"><a href="#二、另外一台电脑上配置" class="headerlink" title="二、另外一台电脑上配置"></a>二、另外一台电脑上配置</h2><ol><li>官网下载安装：  </li></ol><ul><li><a href="https://nodejs.org/en/">安装 Node.js；</a></li><li><a href="https://git-scm.com/">安装 Git。</a></li></ul><ol start="2"><li>新建hexo目录，cd进入。</li><li><code>git clone https://github.com/你的ID/你的ID.github.io.git</code>  //克隆到本地</li><li>将新电脑生成的ssh key添加到gitHub账户上。<br>需要配置 git。</li></ol><ul><li><code>git config --global user.email &quot;xxx@qq.com&quot;</code> 引号内的<a href="mailto:&#120;&#120;&#x78;&#x40;&#x71;&#113;&#46;&#99;&#111;&#109;">&#120;&#120;&#x78;&#x40;&#x71;&#113;&#46;&#99;&#111;&#109;</a>改为你github注册并且验证的邮箱；</li><li><code>git config --global user.name &quot;xxxx&quot;</code>   引号内的xxxx改为你的 github 用户名；</li><li><code>ssh-keygen</code> 会出现下面的内容，一直按Enter键就行；</li><li>打开用户目录下的 <code>.ssh</code>目录下面生成 <code>id_rsa(私钥)id_rsa.pub(公钥)</code>两个文件，打开<code>id_rsa.pub</code>，复制里面的内容,到 github: <code>Settings -&gt; SSH and GPG keys -&gt; SSH keys -&gt; New SSH key -&gt; (填写)Title -&gt; (粘贴)Key -&gt; Add SSH Key</code>；</li><li>测试 <code>ssh -T git@github.com</code>，输出 <strong>You’ve successfully authenticated</strong> 表示添加key 成功。</li></ul><ol start="5"><li><code>npm install hexo-cli -g</code> //安装hexo</li><li><code>npm install</code> //安装依赖包  </li></ol><ul><li>如果出现报错<code>ERROR Try runing: &#39;npm install hexo --save</code>则执行命令<code>npm install hexo --save</code>，如果没有，则忽略。</li></ul><ol start="7"><li><code>git remote remove origin</code> //和origin远程库解除关联</li><li><code>git remote add githuborigin git@github.com:你的ID/你的ID.github.io.git</code> //和GitHuborigin库添加关联</li></ol><h2 id="三、发布博客"><a href="#三、发布博客" class="headerlink" title="三、发布博客"></a>三、发布博客</h2><ol><li>cd进入博客目录</li><li><code>git pull githuborigin hexo</code> //保证和分支同步</li><li><code>hexo n &quot;新建博客&quot;</code></li><li><code>git add source/</code>      //因为博客文件是在source文件夹下面的</li><li><code>git commit -m &quot;博客更新&quot;</code></li><li><code>git push githuborigin hexo</code>//上传更新</li><li><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>//部署博客</li></ol><p>至此，多终端发布博客已经配置完成。</p><h2 id="四、更新主题"><a href="#四、更新主题" class="headerlink" title="四、更新主题"></a>四、更新主题</h2><p>配置好主题文件后，执行：<br><code>git add scaffolds/ source/ themes/ .gitignore _config.yml package.json</code><br><code>git commit -m &quot;更新主题&quot;</code><br><code>git push githuborigin hexo</code>  //上传更新</p><h2 id="五、快速上传部署命令"><a href="#五、快速上传部署命令" class="headerlink" title="五、快速上传部署命令"></a>五、快速上传部署命令</h2><p>只更新博客内容，可以从上述第 三 大步第 4 步后可以这样子发布：<br><code>git add source/ &amp;&amp; git commit -m &quot;blog update&quot; &amp;&amp; git push githuborigin hexo &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; exit</code><br>把所有命令用<code>&amp;&amp;</code>串起来，有一个失败就会停止；成功，最后一条命令就会退出终端。</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>多客户端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo配置文件设置</title>
    <link href="/2019/12/09/hexo/hexo%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE/"/>
    <url>/2019/12/09/hexo/hexo%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo配置文件设置"><a href="#hexo配置文件设置" class="headerlink" title="hexo配置文件设置"></a>hexo配置文件设置</h2><p>hexo配置文件<code>_config.yml</code>基本配置</p><span id="more"></span><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Hexo Configuration</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="hljs-comment">## Source: https://github.com/hexojs/hexo/</span><br><br><span class="hljs-comment"># Site 网站</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">closer的个人博客</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">此后如竟没有炬火，我便是唯一的光.</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">沧海横流，尽显英雄本色；激浊扬清，正是猛士当时</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">closer</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment">#语言</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># URL 网址</span><br><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://zhaoshuai.top/</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/</span> <span class="hljs-comment">#根目录位置，如果只是github pages的子目录需要更改</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><br><span class="hljs-comment"># Directory #文件结构 默认即可</span><br><span class="hljs-attr">source_dir:</span> <span class="hljs-string">source</span><br><span class="hljs-attr">public_dir:</span> <span class="hljs-string">public</span><br><span class="hljs-attr">tag_dir:</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">archive_dir:</span> <span class="hljs-string">archives</span><br><span class="hljs-attr">category_dir:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">code_dir:</span> <span class="hljs-string">downloads/code</span><br><span class="hljs-attr">i18n_dir:</span> <span class="hljs-string">lang</span><br><span class="hljs-attr">skip_render:</span><br><br><span class="hljs-comment"># Writing #编辑博文的选项</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span> <span class="hljs-comment"># File name of new posts</span><br><span class="hljs-attr">default_layout:</span> <span class="hljs-string">post</span><br><span class="hljs-attr">auto_spacing:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">titlecase:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 把标题转换为 title case</span><br><span class="hljs-attr">external_link:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Open external links in new tab</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">site</span> <span class="hljs-comment"># Apply to the whole site</span><br>  <span class="hljs-attr">exclude:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">filename_case:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#把文件名称转换为 (1) 小写或 (2) 大写 </span><br><span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#显示草稿</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#启动 Asset 文件夹 </span><br><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#把链接改为与根目录的相对位址 </span><br><span class="hljs-attr">future:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#显示未来的文章 </span><br><span class="hljs-attr">highlight:</span>  <span class="hljs-comment">#代码块的设置 </span><br> <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment">#开启代码块高亮 </span><br> <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#如果未指定语言，则启用自动检测 </span><br> <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#显示行数 </span><br> <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#用 n 个空格替换 tabs；如果值为空，则不会替换 tabs </span><br> <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span><br> <span class="hljs-attr">hljs:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Home page setting</span><br><span class="hljs-comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="hljs-comment"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="hljs-comment"># order_by: Posts order. (Order by date descending by default)</span><br><span class="hljs-attr">index_generator:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br><br><span class="hljs-comment"># Category &amp; Tag #分类 &amp; 标签</span><br><span class="hljs-attr">default_category:</span> <span class="hljs-string">uncategorized</span><br><span class="hljs-attr">category_map:</span><br><span class="hljs-attr">tag_map:</span><br><br><span class="hljs-comment"># Metadata elements</span><br><span class="hljs-comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><br><span class="hljs-attr">meta_generator:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Date / Time format #日期显示格式</span><br><span class="hljs-comment">## Hexo uses Moment.js to parse and display date</span><br><span class="hljs-comment">## You can customize the date format as defined in</span><br><span class="hljs-comment">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="hljs-attr">date_format:</span> <span class="hljs-string">YYYY-MM-DD</span> <span class="hljs-comment">#日期格式 </span><br><span class="hljs-attr">time_format:</span> <span class="hljs-string">HH:mm:ss</span> <span class="hljs-comment">#时间格式</span><br><span class="hljs-comment">## Use post&#x27;s date for updated date unless set in front-matter</span><br><span class="hljs-attr">use_date_for_updated:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Pagination #分页器</span><br><span class="hljs-comment">## Set per_page to 0 to disable pagination</span><br><span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span> <span class="hljs-comment">#每页显示的文章量 (0 = 关闭分页功能) 10</span><br><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span> <span class="hljs-comment">#分页目录 </span><br><br><span class="hljs-comment"># Include / Exclude file(s)</span><br><span class="hljs-comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span><br><span class="hljs-attr">include:</span><br><span class="hljs-attr">exclude:</span><br><span class="hljs-attr">ignore:</span><br><br><span class="hljs-comment"># Extensions #拓展</span><br><span class="hljs-comment">## Plugins: http://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: http://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">hexo-theme-fluid-1.8.0</span> <span class="hljs-comment">#主题更换</span><br><br><span class="hljs-comment"># Deployment #部署参数</span><br><span class="hljs-comment">## Docs: http://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span><br>        <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:closer2018/closer2018.github.io.git</span><br>        <span class="hljs-attr">gitee:</span> <span class="hljs-string">git@gitee.com:closer_laps/closer_laps.git</span><br>        <span class="hljs-attr">coding:</span> <span class="hljs-string">git@e.coding.net:closer_laps/closer_laps.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br><br><span class="hljs-comment"># 搜索设置</span><br><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br>  <span class="hljs-attr">format:</span> <span class="hljs-string">html</span><br>  <span class="hljs-attr">limit:</span> <span class="hljs-number">10000</span><br><br><span class="hljs-comment"># 发布字数统计</span><br><span class="hljs-attr">symbols_count_time:</span><br>    <span class="hljs-attr">symbols:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">time:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">total_symbols:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">total_time:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Security</span><br><span class="hljs-attr">encrypt:</span> <span class="hljs-comment"># hexo-blog-encrypt</span><br>  <span class="hljs-attr">abstract:</span> <span class="hljs-string">有东西被加密了,</span> <span class="hljs-string">请输入密码查看.</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">您好,</span> <span class="hljs-string">这里需要密码.</span><br>  <span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">tagName</span>, <span class="hljs-attr">password:</span> <span class="hljs-string">密码A</span>&#125;<br>  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">tagName</span>, <span class="hljs-attr">password:</span> <span class="hljs-string">密码B</span>&#125;<br>  <span class="hljs-attr">template:</span> <span class="hljs-string">&lt;div</span> <span class="hljs-string">id=&quot;hexo-blog-encrypt&quot;</span> <span class="hljs-string">data-wpm=&quot;&#123;&#123;hbeWrongPassMessage&#125;&#125;&quot;</span> <span class="hljs-string">data-whm=&quot;&#123;&#123;hbeWrongHashMessage&#125;&#125;&quot;&gt;&lt;div</span> <span class="hljs-string">class=&quot;hbe-input-container&quot;&gt;&lt;input</span> <span class="hljs-string">type=&quot;password&quot;</span> <span class="hljs-string">id=&quot;hbePass&quot;</span> <span class="hljs-string">placeholder=&quot;&#123;&#123;hbeMessage&#125;&#125;&quot;</span> <span class="hljs-string">/&gt;&lt;label&gt;&#123;&#123;hbeMessage&#125;&#125;&lt;/label&gt;&lt;div</span> <span class="hljs-string">class=&quot;bottom-line&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script</span> <span class="hljs-string">id=&quot;hbeData&quot;</span> <span class="hljs-string">type=&quot;hbeData&quot;</span> <span class="hljs-string">data-hmacdigest=&quot;&#123;&#123;hbeHmacDigest&#125;&#125;&quot;&gt;&#123;&#123;hbeEncryptedData&#125;&#125;&lt;/script&gt;&lt;/div&gt;</span><br>  <span class="hljs-attr">wrong_pass_message:</span> <span class="hljs-string">这个密码看着不太对,</span> <span class="hljs-string">请再试试.</span><br>  <span class="hljs-attr">wrong_hash_message:</span> <span class="hljs-string">抱歉,</span> <span class="hljs-string">这个文章不能被校验,</span> <span class="hljs-string">不过您还是能看看解密后的内容.</span><br></code></pre></div></td></tr></table></figure><p>以上就是配置文件的基础设置。</p><h2 id="更换主题NexT"><a href="#更换主题NexT" class="headerlink" title="更换主题NexT"></a>更换主题NexT</h2><p>Hexo安装主题的方式非常简单，只需要将主题文件放置于站点目录的themes下，然后修改下配置文件即可。这里我以NexT主题为例。<br>在git bash操作下cd至博客根目录，执行如下代码：  </p><p><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p><p>等待下载完成后，修改根目录下_config.yml文件的theme字段为next即可启用NexT主题，十分简单便捷。<br>其它具体设置可参照<a href="http://theme-next.iissnan.com/">NexT官方文档</a>。</p><h2 id="更换fluid主题"><a href="#更换fluid主题" class="headerlink" title="更换fluid主题"></a>更换fluid主题</h2><p><a href="https://hexo.fluid-dev.com/docs/">fluid主题配置</a></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>cd至blog根目录。  </p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">--save</span> <span class="hljs-string">hexo-blog-encrypt</span>   <span class="hljs-comment">#添加密码访问</span><br><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-generator-sitemap</span> <span class="hljs-string">--save</span>   <span class="hljs-comment"># 添加google站点统计</span><br><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-generator-baidu-sitemap</span> <span class="hljs-string">--save</span>  <span class="hljs-comment"># 添加baidu站点统计</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo配置文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo上传部署命令</title>
    <link href="/2019/12/01/hexo/hexo%E4%B8%8A%E4%BC%A0%E9%83%A8%E7%BD%B2%E5%91%BD%E4%BB%A4/"/>
    <url>/2019/12/01/hexo/hexo%E4%B8%8A%E4%BC%A0%E9%83%A8%E7%BD%B2%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo上传部署三连杀命令-先cd进入git目录"><a href="#hexo上传部署三连杀命令-先cd进入git目录" class="headerlink" title="hexo上传部署三连杀命令(先cd进入git目录)"></a>hexo上传部署三连杀命令(先<code>cd</code>进入git目录)</h2><div class="hljs code-wrapper"><pre><code class="bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre></div><span id="more"></span><h2 id="我们运行测试时，经常用到的有三个命令"><a href="#我们运行测试时，经常用到的有三个命令" class="headerlink" title="我们运行测试时，经常用到的有三个命令"></a>我们运行测试时，经常用到的有三个命令</h2><div class="hljs code-wrapper"><pre><code class="bash">hexo clean #用来清理缓存文件hexo g      #生成文件hexo  d   #上传到服务器</code></pre></div><h2 id="本地检测时运行"><a href="#本地检测时运行" class="headerlink" title="本地检测时运行"></a>本地检测时运行</h2><div class="hljs code-wrapper"><pre><code class="bash">hexo s</code></pre></div><p>然后打开浏览器，输入localhost:4000，就能看到博客了。<br>这样说明本地环境搭建完成。</p><h2 id="特别感谢B站up主CodeSheep的帮助和细心指导"><a href="#特别感谢B站up主CodeSheep的帮助和细心指导" class="headerlink" title="特别感谢B站up主CodeSheep的帮助和细心指导"></a>特别感谢<a href="https://space.bilibili.com/384068749/">B站up主CodeSheep</a>的帮助和细心指导</h2>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大话数据结构第四章 栈与队列</title>
    <link href="/2019/11/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC4%E7%AB%A0%20%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
    <url>/2019/11/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC4%E7%AB%A0%20%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="4-1-4-2-栈的定义"><a href="#4-1-4-2-栈的定义" class="headerlink" title="4.1-4.2 栈的定义"></a>4.1-4.2 栈的定义</h2><h3 id="4-2-1-栈的定义"><a href="#4-2-1-栈的定义" class="headerlink" title="4.2.1 栈的定义"></a>4.2.1 栈的定义</h3><p><strong>栈是限定仅在表尾进行插入和删除操作的线性表。</strong><br>我们把允许插入和删除的一端称为栈顶(top)，另一端称为栈底(bottom)，不含任何数据元素的栈称为空栈。栈又称为后进先出(Last In First Out)的线性表，简尔LIFO结构。<br>它的特殊之处就在于限制了这个线性表的插入和删除位置，它始终只在栈顶进行。这也就使得：栈底是固定的，最先进栈的只能在栈底。<br>栈的插入操作，叫作进栈，也称压栈、入栈(push)。  </p><span id="more"></span><p>栈的删除操作，叫作出栈，也有的叫作弹栈(pop)。  </p><h2 id="4-3-栈的抽象数据类型"><a href="#4-3-栈的抽象数据类型" class="headerlink" title="4.3 栈的抽象数据类型"></a>4.3 栈的抽象数据类型</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">ADT 栈(<span class="hljs-built_in">stack</span>)<br>Data<br>    同线性表。元素具有相同的类型，相邻元素具有前驱和后继关系。<br><span class="hljs-function">Operation</span><br><span class="hljs-function">    <span class="hljs-title">InitStack</span><span class="hljs-params">(*s)</span>：初始化操作，建立一个空栈s。</span><br><span class="hljs-function">    <span class="hljs-title">DestroyStack</span><span class="hljs-params">(*s)</span>：若楼存在，则销毁它。</span><br><span class="hljs-function">    <span class="hljs-title">ClearStack</span><span class="hljs-params">(*s)</span>：将栽清空。</span><br><span class="hljs-function">    <span class="hljs-title">StackEmpty</span><span class="hljs-params">(S)</span>：若为空，返回<span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span>。</span><br><span class="hljs-function">    <span class="hljs-title">GetTop</span><span class="hljs-params">(s，*e)</span>：若栽存在且非空，用e返回s的栽顶元素。</span><br><span class="hljs-function">    <span class="hljs-title">Push</span><span class="hljs-params">(*s，e)</span>：若栈S存在，插入新元素e到栈S中并成为栈顶元素。</span><br><span class="hljs-function">    <span class="hljs-title">Pop</span><span class="hljs-params">(*S，*e)</span>：删除栈S中栈顶元素，并用e返回其值。</span><br><span class="hljs-function">    <span class="hljs-title">StackLength</span><span class="hljs-params">(s)</span>：返回栈s的元素个数。</span><br><span class="hljs-function">endADT</span><br></code></pre></div></td></tr></table></figure><h2 id="4-4-栈的顺序存储结构及实现"><a href="#4-4-栈的顺序存储结构及实现" class="headerlink" title="4.4 栈的顺序存储结构及实现"></a>4.4 栈的顺序存储结构及实现</h2><h3 id="4-4-1-栈的顺序存储结构"><a href="#4-4-1-栈的顺序存储结构" class="headerlink" title="4.4.1 栈的顺序存储结构"></a>4.4.1 栈的顺序存储结构</h3><p>栈是线性表的特例，那么栈的顺序存储其实也是线性表顺序存储的简化，我们简称为顺序栈。线性表是用数组来实现的。<br>我们定义一个top变量来指示栈顶元素在数组中的位置，它可以来回移动，意味着栈顶的top可以变大变小，但无论如何游标不能超出栈的长度。同理，若存储栈的长度为StackSize，则栈顶位置top必须小于StackSize。当栈存在一个元素时，top等于0，因此通常把空栈的判定条件定为top等于-1。</p><p>栈的结构定义：  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> SElemType; <span class="hljs-comment">/* SElemType类型根据实际情况而定，这里假设为int */</span><br><span class="hljs-comment">/* 顺序栈结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>        SElemType data[MAXSIZE];<br>        <span class="hljs-keyword">int</span> top; <span class="hljs-comment">/* 用于栈顶指针 */</span><br>&#125;SqStack;<br></code></pre></div></td></tr></table></figure><p>若现在有一个栈，StackSize是5，则栈普通情况、空栈和栈满的情况示意图如图4-4-2所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-4-2.JPG?raw=true" alt="4-4-2">  </p><h3 id="4-4-2-栈的顺序存储结构——进栈操作"><a href="#4-4-2-栈的顺序存储结构——进栈操作" class="headerlink" title="4.4.2 栈的顺序存储结构——进栈操作"></a>4.4.2 栈的顺序存储结构——进栈操作</h3><p>对于栈的插入，即进栈操作，其实就是在栈顶插入一个元素。<br>进栈操作push，其代码如下：  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 插入元素e为新的栈顶元素 */</span><br><span class="hljs-function">Status <span class="hljs-title">Push</span><span class="hljs-params">(SqStack *S,SElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">if</span>(S-&gt;top == MAXSIZE <span class="hljs-number">-1</span>) <span class="hljs-comment">/* 栈满 */</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> ERROR;<br>        &#125;<br>        S-&gt;top++;   <span class="hljs-comment">/* 栈顶指针增加一 */</span><br>        S-&gt;data[S-&gt;top]=e;  <span class="hljs-comment">/* 将新插入元素赋值给栈顶空间 */</span><br>        <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-4-3-栈的顺序存储结构——出栈操作"><a href="#4-4-3-栈的顺序存储结构——出栈操作" class="headerlink" title="4.4.3 栈的顺序存储结构——出栈操作"></a>4.4.3 栈的顺序存储结构——出栈操作</h3><p>出栈操作pop，代码如下：  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR */</span><br><span class="hljs-function">Status <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack *S,SElemType *e)</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">if</span>(S-&gt;top==<span class="hljs-number">-1</span>)<br>                <span class="hljs-keyword">return</span> ERROR;<br>        *e=S-&gt;data[S-&gt;top]; <span class="hljs-comment">/* 将要删除的栈顶元素赋值给e */</span><br>        S-&gt;top--;   <span class="hljs-comment">/* 栈顶指针减一 */</span><br>        <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>两者没有涉及到任何循环语句，因此时间复杂度均是O(1)。  </p><h2 id="4-5-两栈共享空间"><a href="#4-5-两栈共享空间" class="headerlink" title="4.5 两栈共享空间"></a>4.5 两栈共享空间</h2><p>如果我们有两个相同类型的栈，我们为它们各自开辟了数组空间，极有可能是第一个栈已经满了，再进栈就溢出了，而另一个栈还有很多存储空间空闲。这又何必呢？我们完全可以用一个数组来存储两个栈，只不过需要点小技巧。<br>数组有两个端点，两个栈有两个栈底，让一个栈的栈底为数组的始端，即下标为0处，另一个栈为栈的末端，即下标为数组长度n-1处。这样，两个栈如果增加元素，就是两端点向中间延伸。<br>其实关键思路是：它们是在数组的两端，向中间靠拢。top1和top2是栈1和栈2的栈顶指针，可以想象，只要它们俩不见面，两个栈就可以一直使用。<br>从这里也就可以分析出来，栈1为空时，就是top1等于-1时；而当top2等于n时，即是栈2为空时，那什么时候栈满呢？<br>想想极端的情况，若栈2是空栈，栈1的top1等于n-1时，就是栈1满了。反之，当栈1为空栈时，top2等于0时，为栈2满。但更多的情况，其实就是我刚才说的，两个栈见面之时，也就是两个指针之间相差1时，即top1+1==top2为栈满。<br>两栈共享空间的结构的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 两栈共享空间结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    SElemType data[MAXSIZE];<br>    <span class="hljs-keyword">int</span> top1;    <span class="hljs-comment">/* 栈1栈顶指针 */</span><br>    <span class="hljs-keyword">int</span> top2;    <span class="hljs-comment">/* 栈2栈顶指针 */</span><br>&#125;SqDoubleStack;<br></code></pre></div></td></tr></table></figure><p>对于两栈共享空间的push方法，我们除了要插入元素值参数外，还需要有一个判断是栈1还是栈2的栈号参数stackNumber。插入元素的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 插入元素e为新的栈顶元素 */</span><br><span class="hljs-function">Status <span class="hljs-title">Push</span><span class="hljs-params">(SqDoubleStack *S, SElemType e, <span class="hljs-keyword">int</span> stackNumber)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (S-&gt;top1 + <span class="hljs-number">1</span> == S-&gt;top2)    <span class="hljs-comment">/* 栈已满，不能再push新元素了 */</span><br>        <span class="hljs-keyword">return</span> ERROR;<br>    <span class="hljs-keyword">if</span> (stackNumber == <span class="hljs-number">1</span>)            <span class="hljs-comment">/* 栈1有元素进栈 */</span><br>        S-&gt;data[++S-&gt;top1] = e; <span class="hljs-comment">/* 若是栈1则先top1+1后给数组元素赋值。 */</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stackNumber == <span class="hljs-number">2</span>)    <span class="hljs-comment">/* 栈2有元素进栈 */</span><br>        S-&gt;data[--S-&gt;top2] = e; <span class="hljs-comment">/* 若是栈2则先top2-1后给数组元素赋值。 */</span><br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>因为在开始已经判断了是否有栈满的情况，所以后面的top1+1或top2-1是不担心溢出问题的。<br>对于两栈共享空间的pop方法，参数就只是判断栈1栈2的参数stackNumber，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR */</span><br><span class="hljs-function">Status <span class="hljs-title">Pop</span><span class="hljs-params">(SqDoubleStack *S, SElemType *e, <span class="hljs-keyword">int</span> stackNumber)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (stackNumber == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (S-&gt;top1 == <span class="hljs-number">-1</span>)<br>            <span class="hljs-keyword">return</span> ERROR; <span class="hljs-comment">/* 说明栈1已经是空栈，溢出 */</span><br>        *e = S-&gt;data[S-&gt;top1--]; <span class="hljs-comment">/* 将栈1的栈顶元素出栈 */</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stackNumber == <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (S-&gt;top2 == MAXSIZE)<br>            <span class="hljs-keyword">return</span> ERROR; <span class="hljs-comment">/* 说明栈2已经是空栈，溢出 */</span><br>        *e = S-&gt;data[S-&gt;top2++]; <span class="hljs-comment">/* 将栈2的栈顶元素出栈 */</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>事实上，使用这样的数据结构，通常都是当两个栈的空间需求有相反关系时，也就是一个栈增长时另一个栈在缩短的情况。就像买卖股票一样，你买入时，一定是有一个你不知道的人在做卖出操作。有人赚钱，就一定是有人赔钱。这样使用两栈共享空间存储方法才有比较大的意义。否则两个栈都在不停地增长，那很快就会因栈满而溢出了。  </p><h2 id="4-6-栈的链式存储结构及实现"><a href="#4-6-栈的链式存储结构及实现" class="headerlink" title="4.6 栈的链式存储结构及实现"></a>4.6 栈的链式存储结构及实现</h2><h3 id="4-6-1-栈的链式存储结构"><a href="#4-6-1-栈的链式存储结构" class="headerlink" title="4.6.1 栈的链式存储结构"></a>4.6.1 栈的链式存储结构</h3><p>栈的链式存储结构，简称为链栈。<br>链栈的结构代码如下：  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 链栈结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span></span><br><span class="hljs-class">&#123;</span><br>    SElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;StackNode,*LinkStackPtr;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkStack</span></span><br><span class="hljs-class">&#123;</span><br>    LinkStackPtr top;<br>    <span class="hljs-keyword">int</span> count;<br>&#125;LinkStack;<br></code></pre></div></td></tr></table></figure><h3 id="4-6-2-栈的链式存储结构-进栈操作"><a href="#4-6-2-栈的链式存储结构-进栈操作" class="headerlink" title="4.6.2 栈的链式存储结构-进栈操作"></a>4.6.2 栈的链式存储结构-进栈操作</h3><p>对于链栈的进栈push操作，假设元素值为e的新结点是s，top为栈顶指针，示意图如图4-6-2所示代码如下。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-6-2.JPG?raw=true" alt="4-6-2">  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 插入元素e为新的栈顶元素 */</span><br><span class="hljs-function">Status <span class="hljs-title">Push</span><span class="hljs-params">(LinkStack *S,SElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>    LinkStackPtr s=(LinkStackPtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(StackNode));<br>    s-&gt;data=e;<br>    s-&gt;next=S-&gt;top;<span class="hljs-comment">/* 把当前的栈顶元素赋值给新结点的直接后继，见图中① */</span><br>    S-&gt;top=s;         <span class="hljs-comment">/* 将新的结点s赋值给栈顶指针，见图中② */</span><br>    S-&gt;count++;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-6-3-栈的链式存储结构——出栈操作"><a href="#4-6-3-栈的链式存储结构——出栈操作" class="headerlink" title="4.6.3 栈的链式存储结构——出栈操作"></a>4.6.3 栈的链式存储结构——出栈操作</h3><p>至于链栈的出栈pop操作，也是很简单的三句操作。假设变量p用来存储要删除的栈顶结点，将栈顶指针下移一位，最后释放p即可，如图4-6-3所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-6-3.JPG?raw=true" alt="4-6-3">  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR */</span><br><span class="hljs-function">Status <span class="hljs-title">Pop</span><span class="hljs-params">(LinkStack *S,SElemType *e)</span></span><br><span class="hljs-function"></span>&#123;<br>        LinkStackPtr p;<br>        <span class="hljs-keyword">if</span>(StackEmpty(*S))<br>                <span class="hljs-keyword">return</span> ERROR;<br>        *e=S-&gt;top-&gt;data;<br>        p=S-&gt;top;               <span class="hljs-comment">/* 将栈顶结点赋值给p，见图中③ */</span><br>        S-&gt;top=S-&gt;top-&gt;next;    <span class="hljs-comment">/* 使得栈顶指针下移一位，指向后一结点，见图中④ */</span><br>        <span class="hljs-built_in">free</span>(p);                    <span class="hljs-comment">/* 释放结点p */</span><br>        S-&gt;count--;<br>        <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>链栈的进栈push和出栈pop操作都很简单，时间复杂度均是O(1)。<br>对比一下顺序栈与链栈，它们在时间复杂度上是一样的，均为O(1)。对于空间性能，顺序栈需要事先确定一个固定的长度，可能会存在内存空间浪费的问题，但它的优势是存取时定位很方便，而链栈则要求每个元素都有指针域，这同时也增加了一些内存开销，但对于栈的长度无限制。所以它们的区别是如果栈的使用过程中元素变化不可预料，有时很小，有时非常大，那么最好是用链栈，反之，如果它的变化在可控范围内，建议使用顺序栈会更好一些。  </p><h2 id="4-7-栈的作用"><a href="#4-7-栈的作用" class="headerlink" title="4.7 栈的作用"></a>4.7 栈的作用</h2><p>栈的引入简化了程序设计的问题，划分了不同关注层次，使得思考范围缩小，更加聚焦于我们要解决的问题核心。反之，像数组等，因为要分散精力去考虑数组的下标增减等细节问题，反而掩盖了问题的本质。  </p><h2 id="4-8-栈的应用——递归"><a href="#4-8-栈的应用——递归" class="headerlink" title="4.8 栈的应用——递归"></a>4.8 栈的应用——递归</h2><h3 id="4-8-1-4-8-2递归定义"><a href="#4-8-1-4-8-2递归定义" class="headerlink" title="4.8.1-4.8.2递归定义"></a>4.8.1-4.8.2递归定义</h3><p>我们<strong>把一个直接调用自己或通过一系列的调用语句间接地调用自己的函数，称做递归函数</strong>。<br>当然，写递归程序最怕的就是陷入永不结束的无穷递归中，所以，<strong>每个递归定义必须至少有一个条件，满足时递归不再进行，即不再引用自身而是返回值退出</strong>。  </p><h2 id="4-9-栈的应用——四则运算表达式求值"><a href="#4-9-栈的应用——四则运算表达式求值" class="headerlink" title="4.9 栈的应用——四则运算表达式求值"></a>4.9 栈的应用——四则运算表达式求值</h2><h3 id="4-9-1-后缀-逆波兰-表示法定义"><a href="#4-9-1-后缀-逆波兰-表示法定义" class="headerlink" title="4.9.1 后缀(逆波兰)表示法定义"></a>4.9.1 后缀(逆波兰)表示法定义</h3><p>栈的现实应用也很多，我们再来重点讲一个比较常见的应用：数学表达式的求值。<br>一种不需要括号的后缀表达法，我们也把它称为逆波兰(Reverse Polish Notation，RPN)表示。<br>我们先来看看，对于“<code>9+(3-1)×3+10÷2</code>”，如果要用后缀表示法应该是：“<code>9 3 1-3*+10 2/+</code>”，这样的表达式称为后缀表达式，叫后缀的原因在于<strong>所有的符号都是在要运算数字的后面出现</strong>。  </p><h3 id="4-9-2-后缀表达式计算结果"><a href="#4-9-2-后缀表达式计算结果" class="headerlink" title="4.9.2 后缀表达式计算结果"></a>4.9.2 后缀表达式计算结果</h3><p>后缀表达式：<code>9 3 1-3*+10 2/+</code><br>规则：<strong>从左到右遍历表达式的每个数字和符号，遇到是数字就进栈，遇到是符号，就将处于栈顶两个数字出栈，进行运算，运算结果进栈，一直到最终获得结果。</strong>  </p><h3 id="4-9-3-中缀表达式转后缀表达式"><a href="#4-9-3-中缀表达式转后缀表达式" class="headerlink" title="4.9.3 中缀表达式转后缀表达式"></a>4.9.3 中缀表达式转后缀表达式</h3><p>我们把平时所用的标准四则运算表达式，即“<code>9+(3-1)×3+10÷2</code>”叫做中缀表达式。因为所有的运算符号都在两数字的中间。<br>中缀表达式“<code>9+(3-1)×3+10÷2</code>”转化为后缀表达式“<code>9 3 1-3*+10 2/+</code>”。<br>规则：<strong>从左到右遍历中缀表达式的每个数字和符号，若是数字就输出，即成为后缀表达式的一部分；若是符号，则判断其与栈顶符号的优先级，是右括号或优先级低于栈顶符号(乘除优先加减)则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终输出后缀表达式为止。</strong>  </p><h2 id="4-10-队列的定义"><a href="#4-10-队列的定义" class="headerlink" title="4.10 队列的定义"></a>4.10 队列的定义</h2><p>队列(queue)是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。<br>队列是一种先进先出(First In First Out)的线性表，简称FIFO。允许插入的一端称为队尾，允许删除的一端称为队头。  </p><h2 id="4-11-队列的抽象数据类型"><a href="#4-11-队列的抽象数据类型" class="headerlink" title="4.11 队列的抽象数据类型"></a>4.11 队列的抽象数据类型</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">ADT 队列(Queue)<br>Data<br>    同线性表。元素具有相同的类型，相邻元素具有前驱和后继关系。<br><span class="hljs-function">Operation</span><br><span class="hljs-function">    <span class="hljs-title">InitQueue</span><span class="hljs-params">(*Q)</span>：初始化操作，建立一个空队列Q。</span><br><span class="hljs-function">    <span class="hljs-title">DestroyQueue</span><span class="hljs-params">(*Q)</span>：若队列Q存在，则销毁它。</span><br><span class="hljs-function">    <span class="hljs-title">ClearQueue</span><span class="hljs-params">(*Q)</span>：将队列Q清空。</span><br><span class="hljs-function">    <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(Q)</span>：若队列Q为空，返回<span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span>。</span><br><span class="hljs-function">    <span class="hljs-title">GetHead</span><span class="hljs-params">(Q，*e)</span>：若队列Q存在且非空，用e返回队列Q的队头元素。</span><br><span class="hljs-function">    <span class="hljs-title">EnQueue</span><span class="hljs-params">(*Q，e)</span>：若队列Q存在，插入新元素e到队列Q中并成为队尾元素。</span><br><span class="hljs-function">    <span class="hljs-title">DeQueue</span><span class="hljs-params">(*Q，*e)</span>：删除队列Q中队头元素，并用e返回其值。</span><br><span class="hljs-function">    <span class="hljs-title">QueueLength</span><span class="hljs-params">(Q)</span>：返回队列Q的元素个数</span><br><span class="hljs-function">endADT</span><br></code></pre></div></td></tr></table></figure><h2 id="4-12-循环队列"><a href="#4-12-循环队列" class="headerlink" title="4.12 循环队列"></a>4.12 循环队列</h2><h3 id="4-12-1-队列顺序存储的不足"><a href="#4-12-1-队列顺序存储的不足" class="headerlink" title="4.12.1 队列顺序存储的不足"></a>4.12.1 队列顺序存储的不足</h3><p>入队的时间复杂度为O(1)。<br>与栈不同的是，队列元素的出列是在队头，即下标为0的位置，那也就意味着，队列中的所有元素都得向前移动，以保证队列的队头，也就是下标为0的位置不为空，此时时间复杂度为出队的时间复杂度为O(n)，效率太低。<br>如果队列前面的位置空的，后面的位置排满了，那么新进的元素可以排到前面，这就引进了循环队列的概念。<br>为了避免当只有一个元素时，队头和队尾重合使处理变得麻烦，所以引入两个指针，front指针指向队头元素，rear指针指向队尾元素的下一个位置，这样当front等于rear时，此队列是空队列。  </p><h3 id="4-12-2-循环队列定义"><a href="#4-12-2-循环队列定义" class="headerlink" title="4.12.2 循环队列定义"></a>4.12.2 循环队列定义</h3><p>队列中头尾相接的顺序存储结构称为循环队列。<br>此时问题又出来了，空队列时，front等于rear，现在当队列满时，也是front等于rear，那么如何判断此时的队列究竟是空还是满呢？</p><ol><li>办法一是设置一个标志变量flag，当<code>front==rear</code>，且flag=0时为队列空，当<code>front==rear</code>，且flag=1时为队列满。</li><li>办法二是当队列空时，条件就是<code>front=rear</code>，当队列满时，我们修改其条件，保留一个元素空间。也就是说，队列满时，数组中还有一个空闲单元。<br>我们重点来讨论第二种方法，由于rear可能比front大，也可能比front小，所以尽管它们只相差一个位置时就是满的情况，但也可能是相差整整一圈。所以若队列的最大尺寸为QueueSize，那么队列满的条件是“<code>(rear+1)%QueueSize==front</code>”(取模“%”的目的就是为了整合rear与front大小为一个问题)。<br>通用的计算队列长度公式为：<code>(rear-front+QueueSize)%QueueSize</code>。<br>循环队列的顺序存储结构代码如下：</li></ol><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> QElemType; <span class="hljs-comment">/* QElemType类型根据实际情况而定，这里假设为int */</span><br><span class="hljs-comment">/* 循环队列的顺序存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    QElemType data[MAXSIZE];<br>    <span class="hljs-keyword">int</span> front;      <span class="hljs-comment">/* 头指针 */</span><br>    <span class="hljs-keyword">int</span> rear;       <span class="hljs-comment">/* 尾指针，若队列不空，指向队列尾元素的下一个位置 */</span><br>&#125;SqQueue;<br></code></pre></div></td></tr></table></figure><p>循环队列的初始化代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 初始化一个空队列Q */</span><br><span class="hljs-function">Status <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue *Q)</span></span><br><span class="hljs-function"></span>&#123;<br>    Q-&gt;front = <span class="hljs-number">0</span>;<br>    Q-&gt;rear = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span>  OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>循环队列求队列长度代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 返回Q的元素个数，也就是队列的当前长度 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">QueueLength</span><span class="hljs-params">(SqQueue Q)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span>  (Q.rear - Q.front + MAXSIZE) % MAXSIZE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>循环队列的入队列操作代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 若队列未满，则插入元素e为Q新的队尾元素 */</span><br><span class="hljs-function">Status <span class="hljs-title">EnQueue</span><span class="hljs-params">(SqQueue *Q, QElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> ((Q-&gt;rear + <span class="hljs-number">1</span>) % MAXSIZE == Q-&gt;front)    <span class="hljs-comment">/* 队列满的判断 */</span><br>        <span class="hljs-keyword">return</span> ERROR;<br>    Q-&gt;data[Q-&gt;rear] = e;               <span class="hljs-comment">/* 将元素e赋值给队尾 */</span><br>    Q-&gt;rear = (Q-&gt;rear + <span class="hljs-number">1</span>) % MAXSIZE;<span class="hljs-comment">/* rear指针向后移一位置， */</span><br>                                      <span class="hljs-comment">/* 若到最后则转到数组头部 */</span><br>    <span class="hljs-keyword">return</span>  OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>循环队列的出队列操作代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 若队列不空，则删除Q中队头元素，用e返回其值 */</span><br><span class="hljs-function">Status <span class="hljs-title">DeQueue</span><span class="hljs-params">(SqQueue *Q, QElemType *e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (Q-&gt;front == Q-&gt;rear)            <span class="hljs-comment">/* 队列空的判断 */</span><br>        <span class="hljs-keyword">return</span> ERROR;<br>    *e = Q-&gt;data[Q-&gt;front];                <span class="hljs-comment">/* 将队头元素赋值给e */</span><br>    Q-&gt;front = (Q-&gt;front + <span class="hljs-number">1</span>) % MAXSIZE;    <span class="hljs-comment">/* front指针向后移一位置 */</span><br>                                    <span class="hljs-comment">/* 若到最后则转到数组头部 */</span><br>    <span class="hljs-keyword">return</span>  OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-13-队列的链式存储结构及实现"><a href="#4-13-队列的链式存储结构及实现" class="headerlink" title="4.13 队列的链式存储结构及实现"></a>4.13 队列的链式存储结构及实现</h2><p>队列的链式存储结构，其实就是线性表的单链表，只不过它只能尾进头出而已，我们把它简称为链队列。<br>为了操作上的方便，我们将队头指针指向链队列的头结点，而队尾指针指向终端结点，如图4-13-1所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-13-1.JPG?raw=true" alt="4-13-1"><br>空队列时，front和rear都指向头结点，如图4-13-2所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-13-2.JPG?raw=true" alt="4-13-2"><br>链队列的结构为：  </p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> QElemType; <span class="hljs-comment">/* QElemType类型根据实际情况而定，这里假设为int */</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span>    /* 结点结构 */</span><br><span class="hljs-class">&#123;</span><br>    QElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;QNode, *QueuePtr;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>            /* 队列的链表结构 */</span><br><span class="hljs-class">&#123;</span><br>    QueuePtr front, rear; <span class="hljs-comment">/* 队头、队尾指针 */</span><br>&#125;LinkQueue;<br></code></pre></div></td></tr></table></figure><h3 id="4-13-1-队列的链式存储结构——入队操作"><a href="#4-13-1-队列的链式存储结构——入队操作" class="headerlink" title="4.13.1 队列的链式存储结构——入队操作"></a>4.13.1 队列的链式存储结构——入队操作</h3><p>入队操作时，其实就是在链表尾部插入结点，如图4-13-3所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-13-3.JPG?raw=true" alt="4-13-3"><br>入队代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 插入元素e为Q的新的队尾元素 */</span><br><span class="hljs-function">Status <span class="hljs-title">EnQueue</span><span class="hljs-params">(LinkQueue *Q, QElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>    QueuePtr s = (QueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br>    <span class="hljs-keyword">if</span> (!s) <span class="hljs-comment">/* 存储分配失败 */</span><br>        <span class="hljs-built_in">exit</span>(OVERFLOW);<br>    s-&gt;data = e;<br>    s-&gt;next = <span class="hljs-literal">NULL</span>;<br>    Q-&gt;rear-&gt;next = s;    <span class="hljs-comment">/* 把拥有元素e的新结点s赋值给原队尾结点的后继，见图中① */</span><br>    Q-&gt;rear = s;        <span class="hljs-comment">/* 把当前的s设置为队尾结点，rear指向s，见图中② */</span><br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-13-2-队列的链式存储结构——出队操作"><a href="#4-13-2-队列的链式存储结构——出队操作" class="headerlink" title="4.13.2 队列的链式存储结构——出队操作"></a>4.13.2 队列的链式存储结构——出队操作</h3><p>出队操作时，就是头结点的后继结点出队，将头结点的后继改为它后面的结点，若链表除头结点外只剩一个元素时，则需将rear指向头结点，如图4-13-4所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-13-4.JPG?raw=true" alt="4-13-4">  </p><p>出队代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 若队列不空,删除Q的队头元素,用e返回其值,并返回OK,否则返回ERROR */</span><br><span class="hljs-function">Status <span class="hljs-title">DeQueue</span><span class="hljs-params">(LinkQueue *Q, QElemType *e)</span></span><br><span class="hljs-function"></span>&#123;<br>    QueuePtr p;<br>    <span class="hljs-keyword">if</span> (Q-&gt;front == Q-&gt;rear)<br>        <span class="hljs-keyword">return</span> ERROR;<br>    p = Q-&gt;front-&gt;next;        <span class="hljs-comment">/* 将欲删除的队头结点暂存给p，见图中① */</span><br>    *e = p-&gt;data;                <span class="hljs-comment">/* 将欲删除的队头结点的值赋值给e */</span><br>    Q-&gt;front-&gt;next = p-&gt;next;<span class="hljs-comment">/* 将原队头结点的后继p-&gt;next赋值给头结点后继，见图中② */</span><br>    <span class="hljs-keyword">if</span> (Q-&gt;rear == p)<span class="hljs-comment">/* 空队列的时候 */</span> <span class="hljs-comment">/* 若队头就是队尾，则删除后将rear指向头结点，见图中③ */</span><br>        Q-&gt;rear = Q-&gt;front;<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>对于循环队列与链队列的比较，可以从两方面来考虑，从时间上，其实它们的基本操作都是常数时间，即都为O（1）的，不过循环队列是事先申请好空间，使用期间不释放，而对于链队列，每次申请和释放结点也会存在一些时间开销，如果入队出队频繁，则两者还是有细微差异。对于空间上来说，循环队列必须有一个固定的长度，所以就有了存储元素个数和空间浪费的问题。而链队列不存在这个问题，尽管它需要一个指针域，会产生一些空间上的开销，但也可以接受。所以在空间上，链队列更加灵活。<br>总的来说，在可以确定队列长度最大值的情况下，建议用循环队列，如果你无法预估队列的长度时，则用链队列。  </p><h2 id="4-14-总结回顾"><a href="#4-14-总结回顾" class="headerlink" title="4.14 总结回顾"></a>4.14 总结回顾</h2><p>这一章讲的是栈和队列，它们都是特殊的线性表，只不过对插入和删除操作做了限制。<br>栈(stack)是限定仅在表尾进行插入和删除操作的线性表。<br>队列(queue)是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。<br>它们均可以用线性表的顺序存储结构来实现，但都存在着顺序存储的一些弊端。因此它们各自有各自的技巧来解决这个问题。<br>对于栈来说，如果是两个相同数据类型的栈，则可以用数组的两端作栈底的方法来让两个栈共享数据，这就可以最大化地利用数组的空间。<br>对于队列来说，为了避免数组插入和删除时需要移动数据，于是就引入了循环队列，使得队头和队尾可以在数组中循环变化。解决了移动数据的时间损耗，使得本来插入和删除是O(n)的时间复杂度变成了O(1)。<br>它们也都可以通过链式存储结构来实现，实现原则上与线性表基本相同如图4-14-1所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E5%9B%9B%E7%AB%A0/4-14-1.JPG?raw=true" alt="4-14-1">  </p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>大话数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>数据结构</tag>
      
      <tag>栈和队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大话数据结构第三章 线性表</title>
    <link href="/2019/11/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC3%E7%AB%A0%20%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/2019/11/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E7%AC%AC3%E7%AB%A0%20%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>线性表：零个或多个数据元素的有限序列。</p><h2 id="3-1-3-2线性表的定义"><a href="#3-1-3-2线性表的定义" class="headerlink" title="3.1-3.2线性表的定义"></a>3.1-3.2线性表的定义</h2><p>线性表（List）：零个或多个数据元素的有限序列。</p><p>若将线性表记为（a_1，…，a_(i−1)，a_i，a_(i+1)，…，a_n），则表中a_(i−1) 领先于a_i，a_i 领先于a_(i+1)，称a_(i−1) 是a_i 的直接前驱元素，a_(i+1) 是a_i 的直接后继元素。当i=1，2，…，n-1时，a_i 有且仅有一个直接后继，当i=2，3，…，n时，a_i 有且仅有一个直接前驱。<br>如图3-2-1所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.2.1.GIF?raw=true" alt="3-2-1"></p><p>所以线性表元素的个数n（n&gt;0）定义为线性表的长度，当n=0时，称为空表。</p><span id="more"></span><p>在较复杂的线性表中，一个数据元素可以由若干个数据项组成。</p><h2 id="3-3线性表的抽象数据类型"><a href="#3-3线性表的抽象数据类型" class="headerlink" title="3.3线性表的抽象数据类型"></a>3.3线性表的抽象数据类型</h2><p>线性表的抽象数据类型定义如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">ADT线性表（List）<br>Data<br>    线性表的数据对象集合为&#123;a1，a2…，an），每个元素的类型均为DataType。其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，除了最后一个元素an外，每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。<br>Operation<br>    InitList（*L）；初始化操作，建立一个空的线性表L。<br>    ListEmpty（L）；若线性表为空，返回<span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span>。<br>    ClearList（*L）；将线性表清空。<br>    GetElem（L，i，*e）；将线性表L中的第i个位置元素值返回给e。<br>    LocateElem（L，e）；在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回<span class="hljs-number">0</span>表示失败。<br>    ListInsert（*L，i，e）；在线性表L中的第i个位置插入新元素e。<br>    ListDelete（*L，i，*e）；删除线性表L中第i个位置元素，并用e返回其值。<br>    ListLength（L）；返回线性表L的元素个数。<br>endADT<br></code></pre></div></td></tr></table></figure><h3 id="3-3-1两个线性表集合的并集操作"><a href="#3-3-1两个线性表集合的并集操作" class="headerlink" title="3.3.1两个线性表集合的并集操作"></a>3.3.1两个线性表集合的并集操作</h3><p>要使得集合A=AUB。说白了，就是把存在集合B中但并不存在A中的数据元素插入到A中即可。<br>仔细分析一下这个操作，发现我们只要循环集合B中的每个元素，判断当前元素是否存在A中，若不存在，则插入到A中即可。思路应该是很容易想到的。<br>我们假设La表示集合A，Lb表示集合B，则实现的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*将所有的在线性表Lb中但不在La中的数据元素插入到La中*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unionL</span><span class="hljs-params">(SqList *La, SqList Lb)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> La_len, Lb_len, i;<br>    ElemType e;                          <span class="hljs-comment">/*声明与La和Lb相同的数据元素e*/</span><br>    La_len = ListLength(*La);                <span class="hljs-comment">/*求线性表的长度*/</span><br>    Lb_len = ListLength(Lb);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= Lb_len; i++)<br>    &#123;<br>        GetElem(Lb, i, &amp;e);           <span class="hljs-comment">/*取Lb中第i个数据元素赋给e*/</span><br>        <span class="hljs-keyword">if</span> (!LocateElem(*La, e))           <span class="hljs-comment">/*La中不存在和e相同数据元素*/</span><br>            ListInsert(La, ++La_len, e);          <span class="hljs-comment">/*插入*/</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-4线性表的顺序存储结构"><a href="#3-4线性表的顺序存储结构" class="headerlink" title="3.4线性表的顺序存储结构"></a>3.4线性表的顺序存储结构</h2><h3 id="3-4-1顺序存储定义"><a href="#3-4-1顺序存储定义" class="headerlink" title="3.4.1顺序存储定义"></a>3.4.1顺序存储定义</h3><p>线性表的两种物理结构的第一种——顺序存储结构。<br>线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。</p><h3 id="3-4-2顺序存储方式"><a href="#3-4-2顺序存储方式" class="headerlink" title="3.4.2顺序存储方式"></a>3.4.2顺序存储方式</h3><p>可以用C语言（其他语言也相同）的一维数组来实现顺序存储结构。<br>线性表的顺序存储的结构代码如下</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXSIZE 20<span class="hljs-comment">/*存储空间初始分配量*/</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;  <span class="hljs-comment">/*ElemType 类型根据实际情况而定，这里假设为int*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    ElemType data[MAXSIZE];<span class="hljs-comment">/*数组存储数据元素，最大值为MAXSIZE*/</span><br>    <span class="hljs-keyword">int</span> length;  <span class="hljs-comment">/*线性表当前长度*/</span><br>&#125;SqList;<br></code></pre></div></td></tr></table></figure><p>这里，我们就发现描述顺序存储结构需要三个属性：<br>    • 存储空间的起始位置：数组data，它的存储位置就是存储空间的存储位置。<br>    • 线性表的最大存储容量：数组长度MaxSize。<br>    • 线性表的当前长度：length。</p><h3 id="3-4-3数据长度与线性表长度区别"><a href="#3-4-3数据长度与线性表长度区别" class="headerlink" title="3.4.3数据长度与线性表长度区别"></a>3.4.3数据长度与线性表长度区别</h3><p>数组的长度是存放线性表的存储空间的长度，存储分配后这个量是一般是不变的。<br>线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。<br>在任意时刻，线性表的长度应该小于等于数组的长度。</p><h3 id="3-4-4地址计算方法"><a href="#3-4-4地址计算方法" class="headerlink" title="3.4.4地址计算方法"></a>3.4.4地址计算方法</h3><p>存储器中的每个存储单元都有自己的编号，这个编号称为地址。<br>假设占用的是c个存储单元，那么线性表中第i+1个数据元素的存储位置和第i个数据元素的存储位置满足下列关系（LOC表示获得存储位置的函数）。<br>    LOC（a_(i+1)）=LOC（a_i）+c<br>所以对于第i个数据元素ai的存储位置可以由a1推算得出：<br>    LOC（a_i）=LOC（a_1）+（i-1）*c</p><h2 id="3-5顺序存储结构的插入与删除"><a href="#3-5顺序存储结构的插入与删除" class="headerlink" title="3.5顺序存储结构的插入与删除"></a>3.5顺序存储结构的插入与删除</h2><h3 id="3-5-1获得元素操作"><a href="#3-5-1获得元素操作" class="headerlink" title="3.5.1获得元素操作"></a>3.5.1获得元素操作</h3><p>我们要实现GetElem操作，即将线性表L中的第i个位置元素值返回。只要i的数值在数组下标范围内，就是把数组第i-1下标的值返回即可。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ERROR 0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TRUE 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FALSE 0</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Status;          <span class="hljs-comment">/* Status是函数的类型,其值是函数结果状态代码，如OK等 */</span><br><span class="hljs-comment">/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */</span><br><span class="hljs-comment">/* 操作结果：用e返回L中第i个数据元素的值,注意i是指位置，第1个位置的数组是从0开始 */</span><br><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList L, <span class="hljs-keyword">int</span> i, ElemType *e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (L.length == <span class="hljs-number">0</span> || i&lt;<span class="hljs-number">1</span> || i&gt;L.length)<br>        <span class="hljs-keyword">return</span> ERROR;<br>    *e = L.data[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-5-2插入操作"><a href="#3-5-2插入操作" class="headerlink" title="3.5.2插入操作"></a>3.5.2插入操作</h3><p>插入算法的思路：<br>    • 如果插入位置不合理，抛出异常；<br>    • 如果线性表长度大于等于数组长度，则抛出异常或动态增加容量；<br>    • 从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；<br>    • 将要插入元素填入位置i处；<br>    • 表长加1。<br>实现代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 初始条件：顺序线性表L已存在,1≤i≤ListLength(L)， */</span><br><span class="hljs-comment">/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */</span><br><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> i, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k;<br>    <span class="hljs-keyword">if</span> (L-&gt;length == MAXSIZE)  <span class="hljs-comment">/* 顺序线性表已经满 */</span><br>        <span class="hljs-keyword">return</span> ERROR;<br>    <span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span> || i&gt;L-&gt;length + <span class="hljs-number">1</span>)<span class="hljs-comment">/* 当i比第一位置小或者比最后一位置后一位置还要大时 */</span><br>        <span class="hljs-keyword">return</span> ERROR;<br>    <span class="hljs-keyword">if</span> (i &lt;= L-&gt;length)        <span class="hljs-comment">/* 若插入数据位置不在表尾 */</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (k = L-&gt;length - <span class="hljs-number">1</span>; k &gt;= i - <span class="hljs-number">1</span>; k--)  <span class="hljs-comment">/* 将要插入位置之后的数据元素向后移动一位 */</span><br>            L-&gt;data[k + <span class="hljs-number">1</span>] = L-&gt;data[k];<br>    &#125;<br>    L-&gt;data[i - <span class="hljs-number">1</span>] = e;          <span class="hljs-comment">/* 将新元素插入 */</span><br>    L-&gt;length++;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-5-3删除操作"><a href="#3-5-3删除操作" class="headerlink" title="3.5.3删除操作"></a>3.5.3删除操作</h3><p>删除算法的思路：<br>    • 如果删除位置不合理，抛出异常；<br>    • 取出删除元素；<br>    • 从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；<br>    • 表长减1。<br>实现代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */</span><br><span class="hljs-comment">/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1 */</span><br><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList *L, <span class="hljs-keyword">int</span> i, ElemType *e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k;<br>    <span class="hljs-keyword">if</span> (L-&gt;length == <span class="hljs-number">0</span>)               <span class="hljs-comment">/* 线性表为空 */</span><br>        <span class="hljs-keyword">return</span> ERROR;<br>    <span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span> || i&gt;L-&gt;length)         <span class="hljs-comment">/* 删除位置不正确 */</span><br>        <span class="hljs-keyword">return</span> ERROR;<br>    *e = L-&gt;data[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (i &lt; L-&gt;length)                <span class="hljs-comment">/* 如果删除不是最后位置 */</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (k = i; k &lt; L-&gt;length; k++)<span class="hljs-comment">/* 将删除位置后继元素前移 */</span><br>            L-&gt;data[k - <span class="hljs-number">1</span>] = L-&gt;data[k];<br>    &#125;<br>    L-&gt;length--;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是O（1）；而插入或删除时，时间复杂度都是O（n）。</p><h3 id="3-5-4线性表顺序存储结构的优缺点"><a href="#3-5-4线性表顺序存储结构的优缺点" class="headerlink" title="3.5.4线性表顺序存储结构的优缺点"></a>3.5.4线性表顺序存储结构的优缺点</h3><p>线性表的顺序存储结构的优缺点如图3-5-3所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.5.3.GIF?raw=true" alt="3-5-3"></p><h3 id="3-6线性表的链式存储结构"><a href="#3-6线性表的链式存储结构" class="headerlink" title="3.6线性表的链式存储结构"></a>3.6线性表的链式存储结构</h3><h3 id="3-6-2线性表链式存储结构定义"><a href="#3-6-2线性表链式存储结构定义" class="headerlink" title="3.6.2线性表链式存储结构定义"></a>3.6.2线性表链式存储结构定义</h3><p>为了表示每个数据元素a_i 与其直接后继数据元素a_(i+1) 之间的逻辑关系，对数据元素a1来说，除了存储其本身的信息之外，还需存储一个指示其直接后继的信息（即直接后继的存储位置）。我们把存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素a_i 的存储映像，称为结点（Node）。<br>n个结点（a_i 的存储映像）链结成一个链表，即为线性表（a_1，a_2，…，a_n）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。<br>我们把链表中第一个结点的存储位置叫做头指针,线性链表的最后一个结点指针为“空”（通常用NULL或“^”符号表示）。<br>有时，我们为了更加方便地对链表进行操作，会在单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息。</p><h3 id="3-6-3头指针与头结点的异同"><a href="#3-6-3头指针与头结点的异同" class="headerlink" title="3.6.3头指针与头结点的异同"></a>3.6.3头指针与头结点的异同</h3><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.6.3.GIF?raw=true" alt="3-6-3"></p><h3 id="3-6-4线性表链式存储结构代码描述"><a href="#3-6-4线性表链式存储结构代码描述" class="headerlink" title="3.6.4线性表链式存储结构代码描述"></a>3.6.4线性表链式存储结构代码描述</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//线性表的单链表存储结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span><br>&#125;Node;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">LinkList</span>;</span><span class="hljs-comment">/* 定义LinkList */</span><br></code></pre></div></td></tr></table></figure><p>节点Node是由存放数据元素的数据域和存放后继节点地址的指针域组成。  </p><h2 id="3-7单链表的读取"><a href="#3-7单链表的读取" class="headerlink" title="3.7单链表的读取"></a>3.7单链表的读取</h2><p>获得链表第i个的数据的算法思路：  </p><ol><li>声明一个结点p指向链表第一个结点，初始化j从1开始;  </li><li>当<code>j&lt;i</code>时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1;  </li><li>若到链表末尾p为空，则说明第i个元素不存在;  </li><li>否则查找成功，返回结点p的数据。  </li></ol><p>实现代码算法如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */</span><br><span class="hljs-comment">/* 操作结果：用e返回L中第i个数据元素的值 */</span><br><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L,<span class="hljs-keyword">int</span> i,ElemType *e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> j;<br>    LinkList p;  <span class="hljs-comment">/* 声明一结点p */</span><br>    p = L-&gt;next;  <span class="hljs-comment">/* 让p指向链表L的第一个结点 */</span><br>    j = <span class="hljs-number">1</span>;        <span class="hljs-comment">/*  j为计数器 */</span><br>    <span class="hljs-keyword">while</span> (p &amp;&amp; j&lt;i)  <span class="hljs-comment">/* p不为空或者计数器j还没有等于i时，循环继续 */</span><br>    &#123;<br>        p = p-&gt;next;  <span class="hljs-comment">/* 让p指向下一个结点 */</span><br>        ++j;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( !p || j&gt;i )<br>        <span class="hljs-keyword">return</span> ERROR;  <span class="hljs-comment">/*  第i个元素不存在 */</span><br>    *e = p-&gt;data;   <span class="hljs-comment">/*  取第i个元素的数据 */</span><br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个算法的最坏情况时间复杂度为O(n)。  </p><h2 id="3-8-单链表的插入和删除"><a href="#3-8-单链表的插入和删除" class="headerlink" title="3.8 单链表的插入和删除"></a>3.8 单链表的插入和删除</h2><h3 id="3-8-1-单链表的插入"><a href="#3-8-1-单链表的插入" class="headerlink" title="3.8.1 单链表的插入"></a>3.8.1 单链表的插入</h3><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.8.1.GIF?raw=true" alt="图3-8-1"><br>假设上一个结点是p，下一个结点是p-&gt;next,现在要把结点s插入这两个结点中去。只需要2行代码：<br><code>s-&gt;next=p-&gt;next;//先让s的指针域指向p-&gt;next</code><br><code>p-&gt;next=s;//把s的地址赋给p的指针域</code></p><p>ps:这两句顺序不能交换。<br>如果先<code>p-&gt;next=s</code>;再<code>s-&gt;next=p-&gt;next</code>;就等于<code>s-&gt;next=s</code>;<br>所以这2句如论如何都不能反，这点初学者一定要注意。  </p><p>单链表第i个数据插入结点的算法思路：</p><ol><li>声明一结点p指向链表第一个结点，初始化j从1开始;</li><li>当j&lt;1时，就遍历链表，让p的指针向后移动，不断指向下一个结点，j累加1;</li><li>若到链表末尾p为空，则说明第i个元素不存在;</li><li>否则查找成功，在系统中生成一个空结点s;</li><li>将数据元素e赋值给<code>s-&gt;data</code>;</li><li>单链表的插入标准语句<code>s-&gt;next=p-&gt;next;p-&gt;next=s;</code>;</li><li>返回成功;  </li></ol><p>实现代码算法如下:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 初始条件：顺序线性表L已存在,1≤i≤ListLength(L)， */</span><br><span class="hljs-comment">/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */</span><br><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList *L,<span class="hljs-keyword">int</span> i,ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> j;<br>    LinkList p,s;<br>    p = *L;<br>    j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (p &amp;&amp; j &lt; i)     <span class="hljs-comment">/* 寻找第i个结点 */</span><br>    &#123;<br>        p = p-&gt;next;<br>        ++j;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!p || j &gt; i)<br>        <span class="hljs-keyword">return</span> ERROR;   <span class="hljs-comment">/* 第i个元素不存在 */</span><br>    s = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));  <span class="hljs-comment">/*  生成新结点(C语言标准函数) */</span><br>    s-&gt;data = e;  <br>    s-&gt;next = p-&gt;next;      <span class="hljs-comment">/* 将p的后继结点赋值给s的后继  */</span><br>    p-&gt;next = s;          <span class="hljs-comment">/* 将s赋值给p的后继 */</span><br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-8-2-单链表的删除"><a href="#3-8-2-单链表的删除" class="headerlink" title="3.8.2 单链表的删除"></a>3.8.2 单链表的删除</h3><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.8.5.GIF?raw=true" alt="3-8-5"><br>要删除节点q，其实就是要让<code>p-&gt;next=q-&gt;next</code>;<br>单链表第i个数据删除结点的算法思路：</p><ol><li>声明一结点p指向链表第一个结点，初始化j从1开始</li><li>当<code>j&lt;i</code>时，就遍历链表，让p的指针向后移动，不断指向下一个结点，j累加1；</li><li>若到链表末尾p为空，则说明第i个元素不存在；</li><li>否则查找成功，将欲删除的结点<code>p-&gt;next</code>赋值给q；</li><li>单链表的删除标准语句<code>p-&gt;next=q-&gt;next</code>；</li><li>将q结点中的数据赋值给e，作为返回；</li><li>释放q结点；</li><li>返回成功。  </li></ol><p>实现代码算法如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */</span><br><span class="hljs-comment">/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1 */</span><br><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList *L,<span class="hljs-keyword">int</span> i,ElemType *e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> j;<br>    LinkList p,q;<br>    p = *L;<br>    j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i)    <span class="hljs-comment">/* 遍历寻找第i个元素 */</span><br>    &#123;<br>        p = p-&gt;next;<br>        ++j;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!(p-&gt;next) || j &gt; i)<br>        <span class="hljs-keyword">return</span> ERROR;           <span class="hljs-comment">/* 第i个元素不存在 */</span><br>    q = p-&gt;next;              <span class="hljs-comment">//q结点指向要删除的结点（即要删除的结点地址赋值给q）</span><br>    p-&gt;next = q-&gt;next;            <span class="hljs-comment">/* 将q的后继(第三个结点)赋值给p的后继 */</span><br>    *e = q-&gt;data;               <span class="hljs-comment">/* 将q结点中的数据给e */</span><br>    <span class="hljs-built_in">free</span>(q);                    <span class="hljs-comment">/* 让系统回收此结点，释放内存 */</span><br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>分析一下刚才我们讲解的单链表插入和删除算法，我们很容易推导出：它们的时间复杂度都是O（n）。<br>显然，对于<strong>插入或删除数据越频繁的操作，单链表的效率优势就越是明显</strong>。</p><h2 id="3-9单链表的整表创建"><a href="#3-9单链表的整表创建" class="headerlink" title="3.9单链表的整表创建"></a>3.9单链表的整表创建</h2><p>单链表整表创建的算法思路：</p><ol><li>声明一结点p和计数器变量i；</li><li>初始化一空链表L；</li><li>让L的头结点的指针指向NULL，即建立一个带头结点的单链表；</li><li>循环：<ul><li>生成一新结点赋值给p；</li><li>随机生成一数字赋值给p的数据域p&gt;data；  </li><li>将p插入到头结点与前一新结点之间。  </li></ul></li></ol><p>实现头插法的代码算法如下(这段算法代码里,我们用插队的办法，始终让新结点在第一的位置。这种算法简称为头插法)：</p><div class="hljs code-wrapper"><pre><code class="c">/*  随机产生n个元素的值，建立带表头结点的单链线性表L（头插法） */void CreateListHead(LinkList *L, int n)&#123;    LinkList p;    int i;    srand(time(0));                         /* 初始化随机数种子 */    *L = (LinkList)malloc(sizeof(Node));    (*L)-&gt;next = NULL;                      /*  先建立一个带头结点的单链表 */    for (i=0; i&lt;n; i++)    &#123;        p = (LinkList)malloc(sizeof(Node)); /*  生成新结点 */        p-&gt;data = rand()%100+1;             /*  随机生成100以内的数字 */        p-&gt;next = (*L)-&gt;next;        (*L)-&gt;next = p;                        /*  插入到表头 */    &#125;&#125;</code></pre></div><p>事实上，我们一般插队都是放在最后的。如果我们把每次的新结点都插在终端结点的后面，这种算法称之为尾插法。  </p><p>实现尾插法代码算法如下：</p><div class="hljs code-wrapper"><pre><code class="c">/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */void CreateListTail(LinkList *L, int n)&#123;    LinkList p,r;    int i;    srand(time(0));                      /* 初始化随机数种子 */    *L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */    r=*L;                                /* r为指向尾部的结点 */    for (i=0; i&lt;n; i++)    &#123;        p = (Node *)malloc(sizeof(Node)); /*  生成新结点 */        p-&gt;data = rand()%100+1;           /*  随机生成100以内的数字 */        r-&gt;next=p;                        /* 将表尾终端结点的指针指向新结点 */        r = p;                            /* 将当前的新结点定义为表尾终端结点 */    &#125;    r-&gt;next = NULL;                       /* 表示当前链表结束 */&#125;</code></pre></div><p>PS：这里需解释一下，<code>r-&gt;next=p</code>的意思，其实就是将刚才的表尾终端结点r的指针指向新结点p，如图3-9-2所示，当中①位置的连线就是表示这个意思。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.9.2.GIF?raw=true" alt="3-9-2"><br><code>r=p</code>的意思请看图3-9-3，就是本来r是a_(i-1)元素的结点，现在它已经不是最后的结点了，现在最后的结点是a_i，所以应该将p结点这个最后的结点赋值给r。此时r又是最终的尾结点了。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.9.3.GIF?raw=true" alt="3-9-3">  </p><p>循环结束后，那么应该让这个链表的指针域置空，因此有了<code>r-&gt;next=NULL</code>，以便以后遍历时可以确认其是尾部。  </p><h2 id="3-10单链表的整表删除"><a href="#3-10单链表的整表删除" class="headerlink" title="3.10单链表的整表删除"></a>3.10单链表的整表删除</h2><p>单链表整表删除的算法思路如下：</p><ol><li>声明一结点p和q；</li><li>将第一个结点赋值给p；</li><li>循环：<ul><li>将下一结点赋值给q；</li><li>释放p；将q赋值给p。  </li></ul></li></ol><p>实现代码算法如下：  </p><div class="hljs code-wrapper"><pre><code class="c">/* 初始条件：顺序线性表L已存在。操作结果：将L重置为空表 */Status ClearList(LinkList *L)&#123;    LinkList p,q;    p=(*L)-&gt;next;           /*  p指向第一个结点 */    while(p)                /*  没到表尾 */    &#123;        q=p-&gt;next;   //下一个结点地址赋值给临时结点q        free(p);     //释放p结点内存        p=q;         //临时结点q的地址赋值给p，使p能够指向继续指向下一个结点    &#125;    (*L)-&gt;next=NULL;        /* 头结点指针域为空 */    return OK;&#125;</code></pre></div><h2 id="3-11单链表结构与顺序存储结构优缺点"><a href="#3-11单链表结构与顺序存储结构优缺点" class="headerlink" title="3.11单链表结构与顺序存储结构优缺点"></a>3.11单链表结构与顺序存储结构优缺点</h2><p>简单地对单链表结构和顺序存储结构做对比,如图3-11-1：<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.11.1.GIF?raw=true" alt="3-11-1">  </p><p>通过上面的对比，我们可以得出一些经验性的结论：</p><ul><li>若线性表需要频繁查找，很少进行插入和删除操作时，宜采用顺序存储结构。若需要频繁插入和删除时，宜采用单链表结构。</li><li>当线性表中的元素个数变化较大或者根本不知道有多大时，最好用单链表结构，这样可以不需要考虑存储空间的大小问题。  </li></ul><p>总之，线性表的顺序存储结构和单链表结构各有其优缺点，不能简单的说哪个好，哪个不好，需要根据实际情况，来综合平衡采用哪种数据结构更能满足和达到需求和性能。  </p><h2 id="3-12静态链表"><a href="#3-12静态链表" class="headerlink" title="3.12静态链表"></a>3.12静态链表</h2><p>静态链表是由数组组成。<br>我们让数组的元素都是由两个数据域组成，data和cur。也就是说，数组的每个下标都对应一个data和一个cur。数据域data，用来存放数据元素，也就是通常我们要处理的数据；而游标cur相当于单链表中的next 指针，存放该元素的后继在数组中的下标。<br>我们把这种用数组描述的链表叫做静态链表，这种描述方法还有起名叫做游标实现法。<br>静态链表的结构定义如下：  </p><div class="hljs code-wrapper"><pre><code class="c">/* 线性表的静态链表存储结构 */typedef struct&#123;    ElemType data;    int cur;  /* 游标(Cursor) ，为0时表示无指向 */&#125; Component,StaticLinkList[MAXSIZE];</code></pre></div><p>另外我们对数组第一个和最后一个元素作为特殊元素处理，不存数据。我们通常把未被使用的数组元素称为备用链表。而数组第一个元素，即<strong>下标为0的元素的cur就存放备用链表的第一个结点的下标；而数组的最后一个元素的cur则存放第一个有数值的元素的下标</strong>，相当于单链表中的头结点作用，当整个链表为空时，则为0。如图3-12-1所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.12.1.GIF?raw=true" alt="3-12-1">  </p><p>初始化数组状态，代码如下：  </p><div class="hljs code-wrapper"><pre><code class="c">/* 将一维数组space中各分量链成一个备用链表，space[0].cur为头指针，&quot;0&quot;表示空指针 */Status InitList(StaticLinkList space)&#123;    int i;    for (i=0; i&lt;MAXSIZE-1; i++)          space[i].cur = i+1;    space[MAXSIZE-1].cur = 0; /* 目前静态链表为空，最后一个元素的cur为0 */    return OK;&#125;</code></pre></div><h3 id="3-12-1静态链表的插入操作"><a href="#3-12-1静态链表的插入操作" class="headerlink" title="3.12.1静态链表的插入操作"></a>3.12.1静态链表的插入操作</h3><p>在静态链表中，需要我们自己实现结点的申请和释放这2个函数，才可以做插入和删除的操作。<br>为了辨明数组中哪些分量未被使用，解决的办法是将所有未被使用过的及已被删除的分量用游标链成一个备用的链表，每当进行插入时，便可以从备用链表上取得第一个结点作为待插入的新结点。  </p><div class="hljs code-wrapper"><pre><code class="c">/* 若备用空间链表非空，则返回分配的结点下标，否则返回0 */int Malloc_SSL(StaticLinkList space)&#123;    int i = space[0].cur;                   /* 当前数组第一个元素的cur存的值 */                                            /* 就是要返回的第一个备用空闲的下标 */    if (space[0]. cur)        space[0]. cur = space[i].cur;       /* 由于要拿出一个分量来使用了， */                               ll             /* 所以我们就得把它的下一个 */                                            /* 分量用来做备用 */    return i;&#125;</code></pre></div><p>这段代码有意思，它的作用就是返回一个下标值，这个值就是数组头元素的cur存的第一个空闲的下标,同时把这个空闲的下标给<code>space[0].cur</code>，之后就可以继续分配新的空闲分量，实现类似mallbc（）函数的作用。<br>插入操作的实现代码如下：  </p><div class="hljs code-wrapper"><pre><code class="c">/*  在L中第i个元素之前插入新的数据元素e   */Status ListInsert(StaticLinkList L, int i, ElemType e)&#123;      int j, k, l;    k = MAXSIZE - 1;   /* 注意k首先是最后一个元素的下标 */    if (i &lt; 1 || i &gt; ListLength(L) + 1)        return ERROR;    j = Malloc_SSL(L);   /* 获得空闲分量的下标 */    if (j)    &#123;        L[j].data = e;   /* 将数据赋值给此分量的data */        for(l = 1; l &lt;= i - 1; l++)   /* 找到第i个元素之前的位置 */           k = L[k].cur;        L[j].cur = L[k].cur;    /* 把第i个元素之前的cur赋值给新元素的cur */        L[k].cur = j;           /* 把新元素的下标赋值给第i个元素之前元素的ur */        return OK;    &#125;    return ERROR;&#125;</code></pre></div><h3 id="3-12-2静态链表的删除操作"><a href="#3-12-2静态链表的删除操作" class="headerlink" title="3.12.2静态链表的删除操作"></a>3.12.2静态链表的删除操作</h3><p>删除元素时，实现的代码如下：  </p><div class="hljs code-wrapper"><pre><code class="c">/*  删除在L中第i个数据元素   */Status ListDelete(StaticLinkList L, int i)&#123;    int j, k;    if (i &lt; 1 || i &gt; ListLength(L))        return ERROR;    k = MAXSIZE - 1;    for (j = 1; j &lt;= i - 1; j++)        k = L[k].cur;    j = L[k].cur;    L[k].cur = L[j].cur;    Free_SSL(L, j);    return OK;&#125;</code></pre></div><p>释放结点的函数代码如下：  </p><div class="hljs code-wrapper"><pre><code class="c">/*  将下标为k的空闲结点回收到备用链表 */void Free_SSL(StaticLinkList space, int k)&#123;      space[k].cur = space[0].cur;    /* 把第一个元素的cur值赋给要删除的分量cur */    space[0].cur = k;               /* 把要删除的分量下标赋值给第一个元素的cur */&#125;</code></pre></div><p>返回静态链表长度的代码实现如下：  </p><div class="hljs code-wrapper"><pre><code class="c">/* 初始条件：静态链表L已存在。操作结果：返回L中数据元素个数 */int ListLength(StaticLinkList L)&#123;    int j=0;    int i=L[MAXSIZE-1].cur;    while(i)    &#123;        i=L[i].cur;        j++;    &#125;    return j;&#125;</code></pre></div><h3 id="3-12-3静态链表优缺点"><a href="#3-12-3静态链表优缺点" class="headerlink" title="3.12.3静态链表优缺点"></a>3.12.3静态链表优缺点</h3><p>总结一下静态链表的优缺点（见图3-12-5）：<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.12.5.GIF?raw=true" alt="3-12-5"><br>总的来说，静态链表其实是为了给没有指针的高级语言设计的一种实现单链表能力的方法。尽管大家不一定会用得上，但这样的思考方式是非常巧妙的，应该理解其思想，以备不时之需。  </p><h2 id="3-13循环链表"><a href="#3-13循环链表" class="headerlink" title="3.13循环链表"></a>3.13循环链表</h2><p>将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表（circular linked list）。<br>其实循环链表和单链表的主要差异就在于循环的判断条件上，原来是判断<code>p-&gt;next</code>是否为空，现在则是<code>p-&gt;next</code>不等于头结点，则循环未结束。<br>在单链表中，我们有了头结点时，我们可以用O（1）的时间访问第一个结点，但如果想要用O（1）的时间访问到最后一个结点，则需要改造一下这个循环链表，不用头指针，而是用指向终端结点的尾指针来表示循环链表（如图3-13-5）。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.13.5.GIF?raw=true" alt="3-13-5"><br>从上图可以看出，终端结点用尾指针rear指示，则查找终端结点是O（1），而开始结点，其实就是<code>rear-&gt;next-&gt;next</code>，其时间复杂也为O（1）。<br>举个程序的例子，要将两个循环链表合并成一个表时，有了尾指针就非常简单了。比如下面的这两个循环链表，它们的尾指针分别是rearA和rearB，如图3-13-6所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.13.6.GIF?raw=true" alt="3-13-6"><br>要想把它们合并，只需要如下的操作即可，如图3-13-7所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.13.7.GIF?raw=true" alt="3-13-7"><br>具体代码如下：  </p><div class="hljs code-wrapper"><pre><code class="c">p=rearA-&gt;next;     /*保存A表的头结点，即①*/rearA-&gt;next=rearB-&gt;next-&gt;next;     /*将本是指向B表的第一个结点（不是头结点）赋值给reaA-&gt;next,即②*/rearB-&gt;next=p;/*将原A表的头结点赋值给rearB-&gt;next，即③**/free(p);/*释放p*/</code></pre></div><h2 id="3-14双向链表"><a href="#3-14双向链表" class="headerlink" title="3.14双向链表"></a>3.14双向链表</h2><p>双向链表（double linked list）是在单链表的每个结点中，再设置一个指向其前驱结点的指针域。<br>所以在双向链表中的结点都有两个指针域，一个指向直接后继，另一个指向直接前驱。  </p><div class="hljs code-wrapper"><pre><code class="c">/*线性表的双向链表存储结构*/typedef struct DulNode&#123;    ElemType data；    struct DuLNode *prior；/*直接前驱指针*/    struct DuLNode *next；/*直接后继指针*/&#125;DulNode，*DuLinkList；</code></pre></div><p>既然单链表也可以有循环链表，那么双向链表当然也可以是循环表。<br>双向链表的循环带头结点的空链表如图3-14-3所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.14.3.GIF?raw=true" alt="3-14-3"><br>非空的循环的带头结点的双向链表如图3-14-4所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.14.4.GIF?raw=true" alt="3-14-4"><br>PS：双向链表在插入和删除时，需要更改两个指针变量。<br>插入操作时，其实并不复杂，不过<strong>顺序很重要，千万不能写反了</strong>。<br>我们现在假设存储元素e的结点为s，要实现将结点s插入到结点p和<code>p-&gt;next</code>之间需要下面几步，如图3-14-5所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.14.5.GIF?raw=true" alt="3-14-5">  </p><div class="hljs code-wrapper"><pre><code class="c">s-&gt;prior=p;/*把p赋值给s的前驱，如图中①*/s-&gt;next=p-&gt;next;/*把p-&gt;next赋值给s的后继，如图中②*/p-&gt;next-&gt;prior=s;/*把s赋值给p-&gt;next的前驱，如图中③*/p-&gt;next=s;/*把s赋值给p的后继，如图中④*/</code></pre></div><p>关键在于它们的顺序，由于第2步和第3步都用到了<code>p-&gt;next</code>。如果第4步先执行，则会使得<code>p-&gt;next</code>提前变成了s，使得插入的工作完不成。所以我们不妨把上面这张图在理解的基础上记忆，顺序是先搞定s的前驱和后继，再搞定后结点的前驱，最后解决前结点的后继。  </p><p>若要删除结点p，只需要下面两步骤，如图3-14-6所示。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.14.6.GIF?raw=true" alt="3-14-6">  </p><div class="hljs code-wrapper"><pre><code class="c">p-&gt;prior-&gt;next=p-&gt;next；/*把p-&gt;next赋值给p-&gt;prior的后继，如图中①*/p-&gt;next-&gt;prior=p-&gt;prior；/*把p-&gt;prior 赋值给p-&gt;next的前驱，如图中②*/free（p）；/*释放结点*/</code></pre></div><h2 id="3-15总结回顾"><a href="#3-15总结回顾" class="headerlink" title="3.15总结回顾"></a>3.15总结回顾</h2><p>这一章，主要讲的是线性表。<br>先谈了它的定义，线性表是零个或多个具有相同类型的数据元素的有限序列。然后谈了线性表的抽象数据类型，如它的一些基本操作。<br>之后我们就线性表的两大结构做了讲述，先讲的是比较容易的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。通常我们都是用数组来实现这一结构。<br>后来是我们的重点，由顺序存储结构的插入和删除操作不方便，引出了链式存储结构。它具有不受固定的存储空间限制，可以比较快捷的插入和删除操作的特点。然后我们分别就链式存储结构的不同形式，如单链表、循环链表和双向链表做了讲解，另外我们还讲了若不使用指针如何处理链表结构的静态链表方法。<br>总的来说，线性表的这两种结构（如图3-15-1所示）是后面其他数据结构的基础，把它们学明白了，对后面的学习有着至关重要的作用。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0/3.15.1.GIF?raw=true" alt="3-15-1"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>大话数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>数据结构</tag>
      
      <tag>线性表</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
