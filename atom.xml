<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>closer的自留地</title>
  
  <subtitle>此后如竟没有炬火，我便是唯一的光.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://closer_laps.gitee.io/"/>
  <updated>2020-05-23T11:44:22.166Z</updated>
  <id>https://closer_laps.gitee.io/</id>
  
  <author>
    <name>closer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>爬虫实战</title>
    <link href="https://closer_laps.gitee.io/2020/05/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    <id>https://closer_laps.gitee.io/2020/05/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/</id>
    <published>2020-05-12T15:26:43.000Z</published>
    <updated>2020-05-23T11:44:22.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一：-requests"><a href="#一：-requests" class="headerlink" title="一： requests"></a>一： requests</h2><h3 id="1-1-豆瓣影讯之xpath"><a href="#1-1-豆瓣影讯之xpath" class="headerlink" title="1.1 豆瓣影讯之xpath"></a>1.1 豆瓣影讯之xpath</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<span class="hljs-keyword">import</span> requests<span class="hljs-comment">## 1.获取目标网站源码</span>headers = &#123;    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50"</span>,    <span class="hljs-string">'Referer'</span>: <span class="hljs-string">"https://cn.bing.com/"</span>&#125;url = <span class="hljs-string">'https://movie.douban.com/cinema/nowplaying/beijing/'</span>res = requests.get(url, headers=headers)<span class="hljs-comment"># 网页源码存为text</span>text = res.text<span class="hljs-comment"># response.text 返回的是Unicode格式的数据</span><span class="hljs-comment"># response.content返回的字节流数据，是bytes类型</span><span class="hljs-comment">## 2. 按一定规则提取数据</span><span class="hljs-comment"># 从字符串常量解析HTML文档。</span>html = etree.HTML(text)<span class="hljs-comment"># 获取正在上映[0],即将上映[1]。通过xpath表达式来定位class='lists'</span>ul = html.xpath(<span class="hljs-string">"//ul[@class='lists']"</span>)[<span class="hljs-number">0</span>]<span class="hljs-comment"># print(etree.tostring(ul, encoding='utf-8').decode('utf-8'))</span><span class="hljs-comment"># 通过xpath表达式来定位li标签，存为lis列表</span>lis = ul.xpath(<span class="hljs-string">"./li"</span>)<span class="hljs-comment">#构建movies字典</span>movies = []<span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> lis:    <span class="hljs-comment"># print(etree.tostring(li, encoding='utf-8').decode('utf-8'))</span>    title = li.xpath(<span class="hljs-string">"@data-title"</span>)    score = li.xpath(<span class="hljs-string">"@data-score"</span>)    duration = li.xpath(<span class="hljs-string">"@data-duration"</span>)    region = li.xpath(<span class="hljs-string">"@data-region"</span>)    direcotr = li.xpath(<span class="hljs-string">"@data-direcotr"</span>)    actors = li.xpath(<span class="hljs-string">"@data-actors"</span>)    thumbnail = li.xpath(<span class="hljs-string">".//img/@src"</span>)    movie = &#123;        <span class="hljs-string">'title'</span>: title,        <span class="hljs-string">'score'</span>: score,        <span class="hljs-string">'duration'</span>: duration,        <span class="hljs-string">'region'</span>: region,        <span class="hljs-string">'direcotr'</span>: direcotr,        <span class="hljs-string">'actors'</span>: actors,        <span class="hljs-string">'thumbnail'</span>: thumbnail    &#125;    movies.append(movie)<span class="hljs-keyword">for</span> movie <span class="hljs-keyword">in</span> movies:    print(movie)</code></pre></div><h3 id="1-2-电影天堂之xpath"><a href="#1-2-电影天堂之xpath" class="headerlink" title="1.2 电影天堂之xpath"></a>1.2 电影天堂之xpath</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<span class="hljs-keyword">import</span> requestsBASE_DOMAIN = <span class="hljs-string">'https://dytt8.net'</span>HEADERS = &#123;    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50"</span>,    <span class="hljs-string">'Referer'</span>: <span class="hljs-string">"http://whois.chinaz.com/dytt8.net"</span>&#125;<span class="hljs-comment"># 获取每一部电影详情页的url</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_detail_urls</span><span class="hljs-params">(url)</span>:</span>    res = requests.get(url, headers=HEADERS)    <span class="hljs-comment"># requests库，会默认使用自己猜测得编码方式进行解码，有时会猜错，需要手动指定解码</span>    text = res.content.decode(<span class="hljs-string">'gbk'</span>, errors=<span class="hljs-string">'ignore'</span>)    html = etree.HTML(text)  <span class="hljs-comment"># &lt;Element html at 0x168712c4540&gt;</span>    detail_urls = html.xpath(<span class="hljs-string">"//table[@class='tbspan']//a/@href"</span>)    <span class="hljs-comment"># 注释掉得等同于下面得列表表达式</span>    <span class="hljs-comment"># def abc(url):</span>    <span class="hljs-comment">#     return BASE_DOMAIN+url</span>    <span class="hljs-comment"># index = 0</span>    <span class="hljs-comment"># for detail_url in detail_urls:</span>    <span class="hljs-comment">#     detail_url = abc(detail_url)</span>    <span class="hljs-comment">#     detail_urls[index] = detail_url</span>    <span class="hljs-comment">#     index += 1</span>    <span class="hljs-comment"># 列表表达式</span>    <span class="hljs-comment"># map() 会根据提供的函数对指定序列做映射。</span>    <span class="hljs-comment"># 处理详情页的url，获取的url加上BASE_DOMAIN才是正确的url</span>    detail_urls = map(<span class="hljs-keyword">lambda</span> url: BASE_DOMAIN + url, detail_urls)    <span class="hljs-keyword">return</span> detail_urls<span class="hljs-comment"># 解析详情页面</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_detail_page</span><span class="hljs-params">(url)</span>:</span>    movie = &#123;&#125;    response = requests.get(url, headers=HEADERS)    text = response.content.decode(<span class="hljs-string">'gbk'</span>, errors=<span class="hljs-string">'ignore'</span>)    html = etree.HTML(text)    <span class="hljs-comment"># 标题，返回一个字典，加上0就正常了</span>    <span class="hljs-comment"># title = html.xpath("//div[@class='title_all']//font[@color='#07519a']/text()")[0]</span>    title = html.xpath(<span class="hljs-string">"//h1/font/text()"</span>)[<span class="hljs-number">0</span>]    movie[<span class="hljs-string">'title'</span>] = title    <span class="hljs-comment"># 海报</span>    zoomE = html.xpath(<span class="hljs-string">"//div[@id='Zoom']"</span>)[<span class="hljs-number">0</span>]    imgs = zoomE.xpath(<span class="hljs-string">".//img/@src"</span>)    cover = imgs[<span class="hljs-number">0</span>]    movie[<span class="hljs-string">'cover'</span>] = cover    <span class="hljs-comment"># 详情</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_info</span><span class="hljs-params">(info, rule)</span>:</span>        <span class="hljs-keyword">return</span> info.replace(rule, <span class="hljs-string">""</span>).strip()    infos = zoomE.xpath(<span class="hljs-string">".//text()"</span>)    <span class="hljs-keyword">for</span> index, info <span class="hljs-keyword">in</span> enumerate(infos):        <span class="hljs-keyword">if</span> info.startswith(<span class="hljs-string">"◎年　　代"</span>):            <span class="hljs-comment"># 把'◎年　　代'替换掉，strip()消除year前后空格</span>            info = parse_info(info, <span class="hljs-string">"◎年　　代"</span>)            movie[<span class="hljs-string">'year'</span>] = info        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">"◎产　　地"</span>):            info = parse_info(info, <span class="hljs-string">"◎产　　地"</span>)            movie[<span class="hljs-string">'country'</span>] = info        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">"◎类　　别"</span>):            info = parse_info(info, <span class="hljs-string">"◎类　　别"</span>)            movie[<span class="hljs-string">'category'</span>] = info        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">"◎豆瓣评分"</span>):            info = parse_info(info, <span class="hljs-string">"◎豆瓣评分"</span>)            movie[<span class="hljs-string">'douban_rating'</span>] = info        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">"◎片　　长"</span>):            info = parse_info(info, <span class="hljs-string">"◎片　　长"</span>)            movie[<span class="hljs-string">'duration'</span>] = info        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">"◎导　　演"</span>):            info = parse_info(info, <span class="hljs-string">"◎导　　演"</span>)            movie[<span class="hljs-string">'director'</span>] = info        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">"◎主　　演"</span>):            info = parse_info(info, <span class="hljs-string">"◎主　　演"</span>)            actors = [info]            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(index + <span class="hljs-number">1</span>, len(infos)):                actor = infos[x].strip()                <span class="hljs-keyword">if</span> actor.startswith(<span class="hljs-string">"◎"</span>):                    <span class="hljs-keyword">break</span>                actors.append(actor)            movie[<span class="hljs-string">'actors'</span>] = info        <span class="hljs-keyword">elif</span> info.startswith(<span class="hljs-string">"◎简　　介"</span>):            info = infos[index + <span class="hljs-number">1</span>].strip()            movie[<span class="hljs-string">"profile"</span>] = info    <span class="hljs-comment"># 下载地址</span>    downloadUrl = html.xpath(<span class="hljs-string">"//td[@bgcolor='#fdfddf']/a/text()"</span>)[<span class="hljs-number">0</span>]    movie[<span class="hljs-string">"downloadUrl"</span>] = downloadUrl    <span class="hljs-keyword">return</span> movie<span class="hljs-comment"># 爬取</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">spider</span><span class="hljs-params">()</span>:</span>    base_url = <span class="hljs-string">'https://dytt8.net/html/gndy/dyzz/list_23_&#123;&#125;.html'</span>    <span class="hljs-comment"># 获取1到n页</span>    movies = []    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>):        <span class="hljs-comment"># format 格式化函数 x替代&#123;&#125;</span>        url = base_url.format(x)        detail_urls = get_detail_urls(url)        <span class="hljs-comment"># 遍历详情页内信息</span>        <span class="hljs-keyword">for</span> detail_url <span class="hljs-keyword">in</span> detail_urls:            movie = parse_detail_page(detail_url)            movies.append(movie)            print(movie)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:    spider()</code></pre></div><h3 id="1-3-古诗文之正则表达式re"><a href="#1-3-古诗文之正则表达式re" class="headerlink" title="1.3 古诗文之正则表达式re"></a>1.3 古诗文之正则表达式re</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> re<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_page</span><span class="hljs-params">(url)</span>:</span>    headers = &#123;        <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50"</span>    &#125;    response = requests.get(url, headers)    text = response.text    <span class="hljs-comment"># 获取古诗文标题</span>    <span class="hljs-comment"># .不能匹配\n，所以加上re.DOTALL</span>    titles = re.findall(<span class="hljs-string">r'&lt;div\sclass="cont"&gt;.*?&lt;b&gt;(.*?)&lt;/b&gt;'</span>, text, re.DOTALL)    <span class="hljs-comment"># 朝代 ,re.S == re.DOTALL</span>    dynasties = re.findall(<span class="hljs-string">r'&lt;p class="source"&gt;.*?&lt;a.*?&gt;(.*?)&lt;/a&gt;'</span>, text, re.S)    <span class="hljs-comment"># 作者</span>    authors = re.findall(<span class="hljs-string">r'&lt;p class="source"&gt;.*?&lt;a.*?&gt;.*?&lt;a.*?&gt;(.*?)&lt;/a&gt;'</span>,  text, re.S)    <span class="hljs-comment"># 诗文正文</span>    content_tags = re.findall(<span class="hljs-string">r'&lt;div class="contson" .*?&gt;(.*?)&lt;/div&gt;'</span>,  text, re.S)    contents = []    <span class="hljs-keyword">for</span> content <span class="hljs-keyword">in</span> content_tags:        <span class="hljs-comment"># .strip()去掉换行</span>        content = re.sub(<span class="hljs-string">r'&lt;.*?&gt;|\n'</span>, <span class="hljs-string">""</span>, content).strip()        contents.append(content)    <span class="hljs-comment"># 整理格式</span>    poems = []    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> zip(titles, dynasties, authors, contents):        title, dynasty, author, content = value        poem = &#123;            <span class="hljs-string">'title'</span>: title,            <span class="hljs-string">'dynasty'</span>: dynasty,            <span class="hljs-string">'author'</span>: author,            <span class="hljs-string">'content'</span>: content        &#125;        poems.append(poem)    <span class="hljs-keyword">for</span> poem <span class="hljs-keyword">in</span> poems:        print(poem)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    url = <span class="hljs-string">'https://www.gushiwen.org/default_1.aspx'</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>):        url = <span class="hljs-string">'https://www.gushiwen.org/default_%s.aspx'</span> % i        parse_page(url)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div><h2 id="二：-文件存储之json和csv"><a href="#二：-文件存储之json和csv" class="headerlink" title="二： 文件存储之json和csv"></a>二： 文件存储之json和csv</h2><h3 id="2-1-json"><a href="#2-1-json" class="headerlink" title="2.1 json"></a>2.1 json</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> jsonpersons = [    &#123;        <span class="hljs-string">'name'</span>: <span class="hljs-string">'张三'</span>,        <span class="hljs-string">'age'</span>: <span class="hljs-number">20</span>,        <span class="hljs-string">'city'</span>: <span class="hljs-string">'beijing'</span>    &#125;,    &#123;        <span class="hljs-string">'name'</span>: <span class="hljs-string">'李四'</span>,        <span class="hljs-string">'age'</span>: <span class="hljs-number">20</span>,        <span class="hljs-string">'city'</span>: <span class="hljs-string">'shanghai'</span>    &#125;]<span class="hljs-comment"># 打印用dumps，存为json文件用dump，有中文则需指定ensure_ascii=False</span>print(json.dumps(persons, ensure_ascii=<span class="hljs-literal">False</span>))<span class="hljs-keyword">with</span> open(<span class="hljs-string">'persons.json'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> fp:    json.dump(persons, fp, ensure_ascii=<span class="hljs-literal">False</span>)<span class="hljs-comment"># 读取json文件</span><span class="hljs-keyword">with</span> open(<span class="hljs-string">'persons.json'</span>, <span class="hljs-string">'r'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> fp:    persons = json.load(fp)    print(persons)</code></pre></div><h3 id="2-2-csv"><a href="#2-2-csv" class="headerlink" title="2.2 csv"></a>2.2 csv</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> csv<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_list</span><span class="hljs-params">()</span>:</span>    <span class="hljs-keyword">with</span> open(<span class="hljs-string">'temp.csv'</span>, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> fp:        <span class="hljs-comment"># reader是一个迭代器</span>        reader = csv.reader(fp)        <span class="hljs-comment"># 不获取第一行</span>        next(reader)        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> reader:            time = x[<span class="hljs-number">1</span>]            volumn = x[<span class="hljs-number">-2</span>]            print(&#123;<span class="hljs-string">'time'</span>: time, <span class="hljs-string">'volumn'</span>: volumn&#125;)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_dict</span><span class="hljs-params">()</span>:</span>    <span class="hljs-keyword">with</span> open(<span class="hljs-string">'temp1.csv'</span>, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> fp:        <span class="hljs-comment"># 不包含标题那行数据</span>        reader = csv.DictReader(fp)        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> reader:            print(x)students = [<span class="hljs-string">'name'</span>, <span class="hljs-string">'age'</span>, <span class="hljs-string">'height'</span>]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_list</span><span class="hljs-params">()</span>:</span>    values = [        &#123;<span class="hljs-string">'张三'</span>, <span class="hljs-number">18</span>, <span class="hljs-number">170</span>&#125;,        &#123;<span class="hljs-string">'李四'</span>, <span class="hljs-number">20</span>, <span class="hljs-number">180</span>&#125;    ]    <span class="hljs-comment"># newline='\n'为默认，连续多行则指定为空字符串</span>    <span class="hljs-keyword">with</span> open(<span class="hljs-string">"temp.csv"</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>, newline=<span class="hljs-string">''</span>) <span class="hljs-keyword">as</span> fp:        writer = csv.writer(fp)        writer.writerow(students)        <span class="hljs-comment"># 写入多行</span>        writer.writerows(values)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_dict</span><span class="hljs-params">()</span>:</span>    values = [        &#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'张三'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">18</span>, <span class="hljs-string">'height'</span>:<span class="hljs-number">170</span>&#125;,        &#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'李四'</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">19</span>, <span class="hljs-string">'height'</span>:<span class="hljs-number">190</span>&#125;    ]    <span class="hljs-keyword">with</span> open(<span class="hljs-string">"temp1.csv"</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>, newline=<span class="hljs-string">''</span>) <span class="hljs-keyword">as</span> fp:        writer = csv.DictWriter(fp, students)        <span class="hljs-comment"># 写入表头数据的时候，需要调用writeheader方法</span>        writer.writeheader()        writer.writerows(values)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div><h2 id="三：-数据库操作之MySQL"><a href="#三：-数据库操作之MySQL" class="headerlink" title="三： 数据库操作之MySQL"></a>三： 数据库操作之MySQL</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> pymysqldb = pymysql.connect(host=<span class="hljs-string">'192.168.2.4'</span>, user=<span class="hljs-string">'root'</span>, passwd=<span class="hljs-string">'root'</span>,                     db=<span class="hljs-string">'test'</span>, port=<span class="hljs-number">3306</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_db</span><span class="hljs-params">(cursor)</span>:</span>    <span class="hljs-comment"># 如果是变量，必须都用%s</span>    sql = <span class="hljs-string">"""        insert into students(class_id,name,gender,score) values(%s,%s,%s,%s)    """</span>    class_id = <span class="hljs-string">'4'</span>;name = <span class="hljs-string">'小龙'</span>;gender = <span class="hljs-string">'M'</span>;score = <span class="hljs-string">'99'</span>    <span class="hljs-comment"># 执行sql语句</span>    cursor.execute(sql, (class_id, name, gender, score))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_db</span><span class="hljs-params">(cursor)</span>:</span>    sql = <span class="hljs-string">"""select * from students"""</span>    cursor.execute(sql)    <span class="hljs-comment"># print(cursor.fetchall()[-1])</span>    result = cursor.fetchall()    <span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> result:        print(temp)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_db</span><span class="hljs-params">(cursor)</span>:</span>    sql = <span class="hljs-string">"""update students set score='100' where name='小龙'"""</span>    cursor.execute(sql)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_db</span><span class="hljs-params">(cursor)</span>:</span>    sql = <span class="hljs-string">"""delete from students where name='小龙'"""</span>    cursor.execute(sql)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    cursor = db.cursor()    insert_db(cursor)    update_db(cursor)    delete_db(cursor)    find_db(cursor)    db.commit()    db.close()</code></pre></div><h2 id="四：-多线程"><a href="#四：-多线程" class="headerlink" title="四： 多线程"></a>四： 多线程</h2><h3 id="4-1-多线程类操作"><a href="#4-1-多线程类操作" class="headerlink" title="4.1 多线程类操作"></a>4.1 多线程类操作</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> threading, time<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CodingThread</span><span class="hljs-params">(threading.Thread)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):            print(<span class="hljs-string">'正在写代码%s'</span> % threading.current_thread())            time.sleep(<span class="hljs-number">1</span>)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DrawingThread</span><span class="hljs-params">(threading.Thread)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):            print(<span class="hljs-string">'正在画图%s'</span> % threading.current_thread())            time.sleep(<span class="hljs-number">1</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    t1 = CodingThread()    t2 = DrawingThread()    t1.start()    t2.start()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div><h3 id="4-2-多线程加锁解锁"><a href="#4-2-多线程加锁解锁" class="headerlink" title="4.2 多线程加锁解锁"></a>4.2 多线程加锁解锁</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> threadingVALUE = <span class="hljs-number">0</span>gLock = threading.Lock()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_value</span><span class="hljs-params">()</span>:</span>    <span class="hljs-keyword">global</span> VALUE    <span class="hljs-comment"># 加锁</span>    gLock.acquire()    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1000000</span>):        VALUE += <span class="hljs-number">1</span>    <span class="hljs-comment"># 解锁</span>    gLock.release()    print(<span class="hljs-string">'value: %d'</span> % VALUE)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):        <span class="hljs-comment"># 注意函数名后面不要加括号，加上括号返回的则是函数的返回值</span>        t = threading.Thread(target=add_value)        t.start()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div><h3 id="4-3-Condition锁"><a href="#4-3-Condition锁" class="headerlink" title="4.3 Condition锁"></a>4.3 Condition锁</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<span class="hljs-keyword">import</span> random<span class="hljs-keyword">import</span> timegMoney = <span class="hljs-number">1000</span>gCondition = threading.Condition()gTimes = <span class="hljs-number">0</span>gTotalTimes = <span class="hljs-number">5</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span><span class="hljs-params">(threading.Thread)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">global</span> gMoney        <span class="hljs-keyword">global</span> gCondition        <span class="hljs-keyword">global</span> gTimes        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            money = random.randint(<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>)            gCondition.acquire()            <span class="hljs-keyword">if</span> gTimes &gt;= gTotalTimes:                gCondition.release()                print(<span class="hljs-string">'当前生产者总共生产了%s次'</span> % gTimes)                <span class="hljs-keyword">break</span>            gMoney += money            print(<span class="hljs-string">'%s当前存入%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))            gTimes += <span class="hljs-number">1</span>            time.sleep(<span class="hljs-number">0.5</span>)            gCondition.notify_all()            gCondition.release()<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span><span class="hljs-params">(threading.Thread)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">global</span> gMoney        <span class="hljs-keyword">global</span> gCondition        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            money = random.randint(<span class="hljs-number">100</span>, <span class="hljs-number">500</span>)            gCondition.acquire()            <span class="hljs-comment"># 这里要给个while循环判断，因为等轮到这个线程的时候</span>            <span class="hljs-comment"># 条件有可能又不满足了</span>            <span class="hljs-keyword">while</span> gMoney &lt; money:                <span class="hljs-keyword">if</span> gTimes &gt;= gTotalTimes:                    gCondition.release()                    <span class="hljs-keyword">return</span>                print(<span class="hljs-string">'%s准备取%s元钱，剩余%s元钱，不足！'</span> % (threading.current_thread(), money, gMoney))                gCondition.wait()            gMoney -= money            print(<span class="hljs-string">'%s当前取出%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))            time.sleep(<span class="hljs-number">0.5</span>)            gCondition.release()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):        Consumer(name=<span class="hljs-string">'消费者线程%d'</span> % x).start()    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):        Producer(name=<span class="hljs-string">'生产者线程%d'</span> % x).start()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div><h3 id="4-4-斗图啦"><a href="#4-4-斗图啦" class="headerlink" title="4.4 斗图啦"></a>4.4 斗图啦</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request<span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> re<span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<span class="hljs-comment"># 获取每个表情的url</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span><span class="hljs-params">(threading.Thread)</span>:</span>    headers = &#123;        <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>    &#125;    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, page_queue, img_queue, *args, **kwargs)</span>:</span>        super(Producer, self).__init__(*args, **kwargs)        self.page_queue = page_queue        self.img_queue = img_queue    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            <span class="hljs-keyword">if</span> self.page_queue.empty():                <span class="hljs-keyword">break</span>            url = self.page_queue.get()            self.parse_page(url)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_page</span><span class="hljs-params">(self, url)</span>:</span>        response = requests.get(url, headers=self.headers)        text = response.text        html = etree.HTML(text)        <span class="hljs-comment"># 获取class不等于gif的图片内容</span>        imgs = html.xpath(<span class="hljs-string">"//div[@class='page-content text-center']//img[@class!='gif']"</span>)        <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> imgs:            img_url = img.get(<span class="hljs-string">'data-original'</span>)            <span class="hljs-comment"># img_url = img.xpath(".//@data-original")[0]</span>            <span class="hljs-comment"># 提取图片url的后缀名</span>            suffix = os.path.splitext(img_url)[<span class="hljs-number">1</span>]            <span class="hljs-comment"># suffix = '.' + img_url.split('.')[-1]</span>            alt = img.get(<span class="hljs-string">'alt'</span>)            <span class="hljs-comment"># alt = img.xpath(".//@alt")[0]</span>            <span class="hljs-comment"># 替换掉文件名中的，。？?,/\\·等不支持的文件名字符</span>            alt = re.sub(<span class="hljs-string">r'[，。？?,/\\·*！《]'</span>, <span class="hljs-string">''</span>, alt)            img_name = alt + suffix            <span class="hljs-comment"># 图片的url和name放入队列</span>            self.img_queue.put((img_url, img_name))<span class="hljs-comment"># 下载表情</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span><span class="hljs-params">(threading.Thread)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, page_queue, img_queue, *args, **kwargs)</span>:</span>        super(Consumer, self).__init__(*args, **kwargs)        self.page_queue = page_queue        self.img_queue = img_queue    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            <span class="hljs-keyword">if</span> self.img_queue.empty() <span class="hljs-keyword">and</span> self.page_queue.empty():                <span class="hljs-keyword">return</span>            url, filename = self.img_queue.get(block=<span class="hljs-literal">True</span>)            <span class="hljs-comment"># 下载图片放入images目录下</span>            request.urlretrieve(url, <span class="hljs-string">'images/'</span> + filename)            print(filename + <span class="hljs-string">'  下载完成！'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    page_queue = Queue(<span class="hljs-number">100</span>)    img_queue = Queue(<span class="hljs-number">500</span>)    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):        url = <span class="hljs-string">"http://www.doutula.com/photo/list/?page=%d"</span> % x        <span class="hljs-comment"># url 添加到队列中</span>        page_queue.put(url)    <span class="hljs-comment"># 判断是否创建images目录用于存放图片</span>    <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">'images/'</span>) <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:        os.makedirs(<span class="hljs-string">'images/'</span>)    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):        t = Producer(page_queue, img_queue)        t.start()    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):        t = Consumer(page_queue, img_queue)        t.start()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1aJ411C7oM" target="_blank" rel="noopener">Python爬虫教程</a></p><p><a href="https://selenium-python.readthedocs.io/" target="_blank" rel="noopener">selenium官方docs</a></p><p><a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">selenium-python中文文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一：-requests&quot;&gt;&lt;a href=&quot;#一：-requests&quot; class=&quot;headerlink&quot; title=&quot;一： requests&quot;&gt;&lt;/a&gt;一： requests&lt;/h2&gt;&lt;h3 id=&quot;1-1-豆瓣影讯之xpath&quot;&gt;&lt;a href=&quot;#1-1
      
    
    </summary>
    
    
      <category term="python" scheme="https://closer_laps.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://closer_laps.gitee.io/tags/python/"/>
    
      <category term="爬图" scheme="https://closer_laps.gitee.io/tags/%E7%88%AC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理-读书笔记</title>
    <link href="https://closer_laps.gitee.io/2020/05/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://closer_laps.gitee.io/2020/05/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-03T13:54:17.000Z</published>
    <updated>2020-05-04T17:11:21.711Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://closer_laps.gitee.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="https://closer_laps.gitee.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="读书笔记" scheme="https://closer_laps.gitee.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="https://closer_laps.gitee.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络原理-读书笔记</title>
    <link href="https://closer_laps.gitee.io/2020/05/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://closer_laps.gitee.io/2020/05/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-03T13:22:34.000Z</published>
    <updated>2020-05-04T17:11:21.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先学习计算机组成原理和操作系统…"><a href="#先学习计算机组成原理和操作系统…" class="headerlink" title="先学习计算机组成原理和操作系统…"></a>先学习计算机组成原理和操作系统…</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;先学习计算机组成原理和操作系统…&quot;&gt;&lt;a href=&quot;#先学习计算机组成原理和操作系统…&quot; class=&quot;headerlink&quot; title=&quot;先学习计算机组成原理和操作系统…&quot;&gt;&lt;/a&gt;先学习计算机组成原理和操作系统…&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://closer_laps.gitee.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="network" scheme="https://closer_laps.gitee.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/"/>
    
    
      <category term="读书笔记" scheme="https://closer_laps.gitee.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="network" scheme="https://closer_laps.gitee.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>openwrt的编译及其使用</title>
    <link href="https://closer_laps.gitee.io/2020/05/02/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/openwrt%E7%9A%84%E7%BC%96%E8%AF%91%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/"/>
    <id>https://closer_laps.gitee.io/2020/05/02/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/openwrt%E7%9A%84%E7%BC%96%E8%AF%91%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/</id>
    <published>2020-05-02T12:18:25.000Z</published>
    <updated>2020-05-09T03:25:40.263Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于coolsnowwolf大神源码编译,<a href="https://github.com/coolsnowwolf/lede" target="_blank" rel="noopener">源码地址</a></p></blockquote><h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>自己编译需要linux知识、装系统的知识和能够全局的访问外网，而折腾openwrt需要部分计算机网络原理的知识。</p><p>如果不能自己编译，可以下载<a href="https://github.com/coolsnowwolf/lede/releases" target="_blank" rel="noopener">Lean大编译好的固件</a></p><p>也可以下载<a href="https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh" target="_blank" rel="noopener">eSir大佬基于L大源码编译的固件。</a></p><h2 id="二、-编译"><a href="#二、-编译" class="headerlink" title="二、 编译"></a>二、 编译</h2><h3 id="2-1-搭建编译环境"><a href="#2-1-搭建编译环境" class="headerlink" title="2.1 搭建编译环境"></a>2.1 搭建编译环境</h3><p>首先打开Lean大的GitHub项目地址，仔细阅读说明，其实很简单，直接复制黏贴命令行就行。</p><p>然后虚拟机安装<a href="http://releases.ubuntu.com/18.04/ubuntu-18.04.4-live-server-amd64.iso.torrent?_ga=2.101048392.870121867.1588423003-365844835.1588423003" target="_blank" rel="noopener">Ubuntu 18 LTS x64 Server版本</a></p><p>然后ssh登录Ubuntu，后面命令需要全局外网来进行编译了。</p><p>输入如下命令行</p><div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 命令行输入</span>sudo apt-get update<span class="hljs-comment"># 然后输入</span>sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf<span class="hljs-comment"># 下载好源代码</span>git <span class="hljs-built_in">clone</span> https://github.com/coolsnowwolf/lede<span class="hljs-comment"># 进入目录</span><span class="hljs-built_in">cd</span> lede./scripts/feeds update -a./scripts/feeds install -amake menuconfig</code></pre></div><h3 id="2-2-定制配置"><a href="#2-2-定制配置" class="headerlink" title="2.2 定制配置"></a>2.2 定制配置</h3><p><code>make menuconfig</code>后，会有一个编译管理器，在里面可以选择型号、OP功能组件，需要用到方向键、回车键、空格键。方向键是移动光标，回车键是确认，空格键是选择（在选项框按下空格键，*号是编译进固件，M是编译但是不编译进固件）</p><p>下面的假如没有说明，就是默认选项。</p><p>①. Target System（Atheros AR7xxx…）<br>选择CPU型号,看你的CPU架构，软路由或虚拟机一般是是X86<br>②. Subtarget(x86_64)<br>选择多少位系统，默认64即可<br>③. Target Profile<br>选择路由型号，默认即可<br>④. Target Images<br>勾选上squashfs（new）即可，然后其他默认<br>⑤. Base system<br>选择默认的dnsmasq-full即可,另外2个dnsmasq切记不要选。<br>⑥. Administration<br>根据你的需求选择。<br>⑦. LuCI-&gt;Applications<br>整个系统精华所在，非常重要，<a id="常用配置">常用配置如下</a></p><div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 选择LuCI常用配置 添加常用插件应用：</span><span class="hljs-comment">#-----------------------------------------------------------------------------------------</span>LuCI ---&gt; Applications ---&gt; luci-app-accesscontrol  <span class="hljs-comment">#访问时间控制</span>LuCI ---&gt; Applications ---&gt; luci-app-adbyby-plus   <span class="hljs-comment">#广告屏蔽大师Plus +</span>LuCI ---&gt; Applications ---&gt; luci-app-aria2 <span class="hljs-comment"># Aria2下载工具</span>LuCI ---&gt; Applications ---&gt; luci-app-arpbind  <span class="hljs-comment">#IP/MAC绑定</span>LuCI ---&gt; Applications ---&gt; luci-app-autoreboot  <span class="hljs-comment">#支持计划重启</span>LuCI ---&gt; Applications ---&gt; luci-app-ddns   <span class="hljs-comment">#动态域名 DNS（集成阿里DDNS客户端）</span>LuCI ---&gt; Applications ---&gt; luci-app-filetransfer  <span class="hljs-comment">#文件传输（可web安装ipk包）</span>LuCI ---&gt; Applications ---&gt; luci-app-firewall   <span class="hljs-comment">#添加防火墙</span>LuCI ---&gt; Applications ---&gt; luci-app-hd-idle  <span class="hljs-comment">#硬盘休眠</span>LuCI ---&gt; Applications ---&gt; luci-app-flowoffload  <span class="hljs-comment">#Turbo ACC网络加速（集成FLOW,BBR,NAT,DNS...</span>LuCI ---&gt; Applications ---&gt; luci-app-sfe  <span class="hljs-comment">#Turbo ACC网络加速（flowoffload二选一）</span>LuCI ---&gt; Applications ---&gt; luci-app-frpc   <span class="hljs-comment">#内网穿透 Frp</span>LuCI ---&gt; Applications ---&gt; luci-app-ipsec-virtual**d  <span class="hljs-comment">#virtual**服务器 IPSec</span>LuCI ---&gt; Applications ---&gt; luci-app-mwan3   <span class="hljs-comment">#MWAN3负载均衡</span>LuCI ---&gt; Applications ---&gt; luci-app-mwan3helper   <span class="hljs-comment">#MWAN3分流助手</span>LuCI ---&gt; Applications ---&gt; luci-app-nlbwmon   <span class="hljs-comment">#网络带宽监视器</span>LuCI ---&gt; Applications ---&gt; luci-app-ramfree  <span class="hljs-comment">#释放内存</span>LuCI ---&gt; Applications ---&gt; luci-app-samba   <span class="hljs-comment">#网络共享（Samba）</span>LuCI ---&gt; Applications ---&gt; luci-app-sqm  <span class="hljs-comment">#流量智能队列管理（QOS）</span><span class="hljs-comment">#-------------------------------------------------------------------------------------------</span>LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料-plus   <span class="hljs-comment">#乳酸菌饮料低调上网Plus+</span>    luci-app-乳酸菌饮料-plus ---&gt; Include s<span class="hljs-_">-s</span> v贰瑞 Plugin  <span class="hljs-comment">#SS v贰瑞插件   *</span>    luci-app-乳酸菌饮料-plus ---&gt; Include v贰瑞  <span class="hljs-comment">#v贰瑞代理</span>    luci-app-乳酸菌饮料-plus ---&gt; Include Trojan  <span class="hljs-comment">#Trojan代理</span>    luci-app-乳酸菌饮料-plus ---&gt; Include red---socks2  <span class="hljs-comment">#red---socks2代理   *</span>    luci-app-乳酸菌饮料-plus ---&gt; Include Kcptun  <span class="hljs-comment">#Kcptun加速</span>    luci-app-乳酸菌饮料-plus ---&gt; Include 违禁软件 Server  <span class="hljs-comment">#乳酸菌饮料服务器</span><span class="hljs-comment">#-------------------------------------------------------------------------------------------</span>LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料server-python  <span class="hljs-comment">#软件的Python服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-syncdial  <span class="hljs-comment">#多拨虚拟网卡（原macvlan）</span>LuCI ---&gt; Applications ---&gt; luci-app-unblockmusic  <span class="hljs-comment">#解锁网易云灰色歌曲3合1新版本</span>    UnblockNeteaseMusic Golang Version  <span class="hljs-comment">#Golang版本   *</span>    UnblockNeteaseMusic NodeJS Version  <span class="hljs-comment">#NodeJS版本   *</span>LuCI ---&gt; Applications ---&gt; luci-app-upnp   <span class="hljs-comment">#通用即插即用UPnP（端口自动转发）</span>LuCI ---&gt; Applications ---&gt; luci-app-vlmcsd  <span class="hljs-comment">#KMS服务器激活win和office</span>LuCI ---&gt; Applications ---&gt; luci-app-vsftpd  <span class="hljs-comment">#FTP服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-wifischedule  <span class="hljs-comment">#WiFi 计划</span>LuCI ---&gt; Applications ---&gt; luci-app-wirele违禁软件egdb  <span class="hljs-comment">#WiFi无线</span>LuCI ---&gt; Applications ---&gt; luci-app-wol   <span class="hljs-comment">#WOL网络唤醒</span>LuCI ---&gt; Applications ---&gt; luci-app-wrtbwmon  <span class="hljs-comment">#实时流量监测</span>LuCI ---&gt; Applications ---&gt; luci-app-xlnetacc  <span class="hljs-comment">#迅雷快鸟</span>LuCI ---&gt; Applications ---&gt; luci-app-zerotier  <span class="hljs-comment">#ZeroTier内网穿透</span>Extra packages  ---&gt;  ipv6helper  <span class="hljs-comment">#支持 ipv6</span>Utilities  ---&gt;  open-vm-tools  <span class="hljs-comment">#打开适用于VMware的VM Tools</span></code></pre></div><p><a href="#2-4-全部LuCI-gt-Applications配置">查看详细LuCI配置</a></p><p>⑧. Network-&gt;Download Manager<br>选择ariaNG<br>⑨. Utilities-&gt;Editors<br>1. 选择默认编辑器-&gt;nano，习惯vim的选择vim<br>2. 打开适用于VMware的VM Tools<br>Utilities —&gt; open-vm-tools<br>⑩. 如果要支持 iPv6，勾选下面的选项：<br>Extra packages —&gt; ipv6helper （选定这个后下面几项自动选择了）<br>Network —&gt; odhcp6c<br>Network —&gt; odhcpd-ipv6only<br>LuCI —&gt; Protocols —&gt; luci-proto-ipv6<br>LuCI —&gt; Protocols —&gt; luci-proto-ppp</p><p>离开选择功能界面，EXIT-&gt;YES</p><div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment">#  下载dl库</span>make -j8 download V=s<span class="hljs-comment"># 进行编译，初次编译看配置，可能会4小时以上，以后会快一点</span><span class="hljs-comment"># （-j1 后面是线程数。第一次编译推荐用单线程）即可开始编译你要的固件了。</span>make -j1 V=s</code></pre></div><h3 id="2-3-功能不满意？二次编译"><a href="#2-3-功能不满意？二次编译" class="headerlink" title="2.3 功能不满意？二次编译"></a>2.3 功能不满意？二次编译</h3><div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 编译完成后清除之前的编译作业（使用这个命令前，记得把编译好的固件备份出来，不然会被删除掉，切记）</span>make clean<span class="hljs-comment"># 进入LEDE目录</span><span class="hljs-built_in">cd</span> lede<span class="hljs-comment"># 同步更新大雕源码</span>git pull<span class="hljs-comment"># 更新Feeds</span>./scripts/feeds update -a &amp;&amp; ./scripts/feeds install -a<span class="hljs-comment"># 清除编译配置和缓存</span>rm -rf ./tmp &amp;&amp; rm -rf .config<span class="hljs-comment"># 进入编译配置菜单</span>make menuconfig<span class="hljs-comment"># 开始编译 n=线程数+1，例如4线程的I5填-j5</span>make -jn V=99</code></pre></div><h3 id="2-4-全部LuCI-gt-Applications配置"><a href="#2-4-全部LuCI-gt-Applications配置" class="headerlink" title="2.4 全部LuCI-&gt;Applications配置"></a>2.4 全部LuCI-&gt;Applications配置</h3><p><a href="#常用配置">返回常用LuCI配置</a></p><div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 以下是详细配置：               注：应用后面标记 “ * ” 为最近新添加</span><span class="hljs-comment"># -----------------------------------------------------------------------------------------</span>LuCI ---&gt; Applications ---&gt; luci-app-accesscontrol  <span class="hljs-comment">#访问时间控制</span>LuCI ---&gt; Applications ---&gt; luci-app-acme  <span class="hljs-comment">#ACME自动化证书管理环境</span>LuCI ---&gt; Applications ---&gt; luci-app-adblock   <span class="hljs-comment">#ADB广告过滤</span>LuCI ---&gt; Applications ---&gt; luci-app-adbyby-plus  <span class="hljs-comment">#广告屏蔽大师Plus +</span>LuCI ---&gt; Applications ---&gt; luci-app-adbyby   <span class="hljs-comment">#广告过滤大师（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-adkill   <span class="hljs-comment">#广告过滤（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-advanced-reboot  <span class="hljs-comment">#Linksys高级重启</span>LuCI ---&gt; Applications ---&gt; luci-app-ahcp  <span class="hljs-comment">#支持AHCPd</span>LuCI ---&gt; Applications ---&gt; luci-app-airplay2   <span class="hljs-comment">#AirPlay音乐推流(安卓+IOS)   *</span>LuCI ---&gt; Applications ---&gt; luci-app-aliddns   <span class="hljs-comment">#阿里DDNS客户端（已弃，集成至ddns）</span>LuCI ---&gt; Applications ---&gt; luci-app-amule  <span class="hljs-comment">#aMule下载工具</span>LuCI ---&gt; Applications ---&gt; luci-app-aria2 <span class="hljs-comment"># Aria2下载工具</span>LuCI ---&gt; Applications ---&gt; luci-app-arpbind  <span class="hljs-comment">#IP/MAC绑定</span>LuCI ---&gt; Applications ---&gt; luci-app-asterisk  <span class="hljs-comment">#支持Asterisk电话服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-attendedsysupgrade  <span class="hljs-comment">#固件更新升级相关</span>LuCI ---&gt; Applications ---&gt; luci-app-autoreboot  <span class="hljs-comment">#支持计划重启</span>LuCI ---&gt; Applications ---&gt; luci-app-baidupcs-web  <span class="hljs-comment">#百度网盘管理</span>LuCI ---&gt; Applications ---&gt; luci-app-bcp38  <span class="hljs-comment">#BCP38网络入口过滤（不确定）</span>LuCI ---&gt; Applications ---&gt; luci-app-bird1-ipv4  <span class="hljs-comment">#对Bird1-ipv4的支持</span>LuCI ---&gt; Applications ---&gt; luci-app-bird1-ipv6  <span class="hljs-comment">#对Bird1-ipv6的支持</span>LuCI ---&gt; Applications ---&gt; luci-app-bird4   <span class="hljs-comment">#Bird 4（未知）（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-bird6   <span class="hljs-comment">#Bird 6（未知）（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-bmx6  <span class="hljs-comment">#BMX6路由协议</span>LuCI ---&gt; Applications ---&gt; luci-app-bmx7  <span class="hljs-comment">#BMX7路由协议</span>LuCI ---&gt; Applications ---&gt; luci-app-caldav  <span class="hljs-comment">#联系人（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-cifs-mount   <span class="hljs-comment">#CIFS/SMB挂载设置   *</span>LuCI ---&gt; Applications ---&gt; luci-app-cifsd  <span class="hljs-comment">#CIFS/SMB网络共享   *</span>LuCI ---&gt; Applications ---&gt; luci-app-cjdns  <span class="hljs-comment">#加密IPV6网络相关</span>LuCI ---&gt; Applications ---&gt; luci-app-clamav  <span class="hljs-comment">#ClamAV杀毒软件</span>LuCI ---&gt; Applications ---&gt; luci-app-commands   <span class="hljs-comment">#Shell命令模块</span>LuCI ---&gt; Applications ---&gt; luci-app-cshark   <span class="hljs-comment">#CloudShark捕获工具</span>LuCI ---&gt; Applications ---&gt; luci-app-ddns   <span class="hljs-comment">#动态域名 DNS（集成阿里DDNS客户端）</span>LuCI ---&gt; Applications ---&gt; luci-app-diag-core   <span class="hljs-comment">#core诊断工具</span>LuCI ---&gt; Applications ---&gt; luci-app-diskman   <span class="hljs-comment">#磁盘管理工具   *</span>    luci-app-diskman ---&gt; Include btrfs-progs   <span class="hljs-comment">#新型的写时复制 (COW)</span>    luci-app-diskman ---&gt; Include lsblk   <span class="hljs-comment">#lsblk命令 用于列出所有可用块设备的信息</span>    luci-app-diskman ---&gt; Include mdadm   <span class="hljs-comment">#mdadm命令 用于创建、管理、监控RAID设备的工具</span>    luci-app-diskman ---&gt; Include kmod-md-raid456   <span class="hljs-comment">#RAID 4,5,6 驱动程序模块</span>    luci-app-diskman ---&gt; Include kmod-md-linear   <span class="hljs-comment">#RAID 驱动程序模块</span>LuCI ---&gt; Applications ---&gt; luci-app-dnscrypt-proxy  <span class="hljs-comment">#DNSCrypt解决DNS污染</span>LuCI ---&gt; Applications ---&gt; luci-app-dnsforwarder  <span class="hljs-comment">#DNSForwarder防DNS污染</span>LuCI ---&gt; Applications ---&gt; luci-app-dnspod  <span class="hljs-comment">#DNSPod动态域名解析（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-dockerman  <span class="hljs-comment">#Docker容器</span>LuCI ---&gt; Applications ---&gt; luci-app-dump1090  <span class="hljs-comment">#民航无线频率（不确定）</span>LuCI ---&gt; Applications ---&gt; luci-app-dynapoint  <span class="hljs-comment">#DynaPoint（未知）</span>LuCI ---&gt; Applications ---&gt; luci-app-e2guardian   <span class="hljs-comment">#Web内容过滤器</span>LuCI ---&gt; Applications ---&gt; luci-app-familycloud   <span class="hljs-comment">#家庭云盘</span>LuCI ---&gt; Applications ---&gt; luci-app-filetransfer  <span class="hljs-comment">#文件传输（可web安装ipk包）</span>LuCI ---&gt; Applications ---&gt; luci-app-firewall   <span class="hljs-comment">#添加防火墙</span>LuCI ---&gt; Applications ---&gt; luci-app-flowoffload  <span class="hljs-comment">#Turbo ACC网络加速（集成FLOW,BBR,NAT,DNS...</span>LuCI ---&gt; Applications ---&gt; luci-app-freifunk-diagnostics   <span class="hljs-comment">#freifunk组件 诊断（未知）</span>LuCI ---&gt; Applications ---&gt; luci-app-freifunk-policyrouting  <span class="hljs-comment">#freifunk组件 策略路由（未知）</span>LuCI ---&gt; Applications ---&gt; luci-app-freifunk-widgets  <span class="hljs-comment">#freifunk组件 索引（未知）</span>LuCI ---&gt; Applications ---&gt; luci-app-frpc   <span class="hljs-comment">#内网穿透Frp客户端</span>LuCI ---&gt; Applications ---&gt; luci-app-frps   <span class="hljs-comment">#内网穿透Frp服务端   *</span>LuCI ---&gt; Applications ---&gt; luci-app-fwknopd  <span class="hljs-comment">#Firewall Knock Operator服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-guest-wifi   <span class="hljs-comment">#WiFi访客网络</span>LuCI ---&gt; Applications ---&gt; luci-app-gfwlist   <span class="hljs-comment">#GFW域名列表（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-haproxy-tcp   <span class="hljs-comment">#HAProxy负载均衡-TCP</span>LuCI ---&gt; Applications ---&gt; luci-app-hd-idle  <span class="hljs-comment">#硬盘休眠</span>LuCI ---&gt; Applications ---&gt; luci-app-hnet  <span class="hljs-comment">#Homenet Status家庭网络控制协议</span>LuCI ---&gt; Applications ---&gt; luci-app-ipsec-virtual**d  <span class="hljs-comment">#virtual**服务器 IPSec</span>LuCI ---&gt; Applications ---&gt; luci-app-kodexplorer  <span class="hljs-comment">#KOD可道云私人网盘</span>LuCI ---&gt; Applications ---&gt; luci-app-kooldns  <span class="hljs-comment">#virtual**服务器 ddns替代方案（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-koolproxy  <span class="hljs-comment">#KP去广告（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-lxc   <span class="hljs-comment">#LXC容器管理</span>LuCI ---&gt; Applications ---&gt; luci-app-meshwizard <span class="hljs-comment">#网络设置向导</span>LuCI ---&gt; Applications ---&gt; luci-app-minidlna   <span class="hljs-comment">#完全兼容DLNA / UPnP-AV客户端的服务器软件</span>LuCI ---&gt; Applications ---&gt; luci-app-mjpg-streamer   <span class="hljs-comment">#兼容Linux-UVC的摄像头程序</span>LuCI ---&gt; Applications ---&gt; luci-app-mtwifi  <span class="hljs-comment">#MTWiFi驱动的支持</span>LuCI ---&gt; Applications ---&gt; luci-app-mmc-over-gpio   <span class="hljs-comment">#添加SD卡操作界面（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-multiwan   <span class="hljs-comment">#多拨虚拟网卡（已弃，移至syncdial）</span>LuCI ---&gt; Applications ---&gt; luci-app-mwan   <span class="hljs-comment">#MWAN负载均衡（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-music-remote-center   <span class="hljs-comment">#DAAP遥控音乐服务器   *</span>LuCI ---&gt; Applications ---&gt; luci-app-mwan3   <span class="hljs-comment">#MWAN3负载均衡</span>LuCI ---&gt; Applications ---&gt; luci-app-mwan3helper   <span class="hljs-comment">#MWAN3分流助手</span>LuCI ---&gt; Applications ---&gt; luci-app-n2n_v2   <span class="hljs-comment">#N2N内网穿透 N2N v2 virtual**服务</span>LuCI ---&gt; Applications ---&gt; luci-app-netdata  <span class="hljs-comment">#Netdata实时监控（图表）</span>LuCI ---&gt; Applications ---&gt; luci-app-nfs   <span class="hljs-comment">#NFS网络共享   *</span>LuCI ---&gt; Applications ---&gt; luci-app-nft-qos  <span class="hljs-comment">#QOS流控 Nftables版</span>LuCI ---&gt; Applications ---&gt; luci-app-ngrokc  <span class="hljs-comment">#Ngrok 内网穿透（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-nlbwmon   <span class="hljs-comment">#网络带宽监视器</span>LuCI ---&gt; Applications ---&gt; luci-app-noddos  <span class="hljs-comment">#NodDOS Clients 阻止DDoS攻击</span>LuCI ---&gt; Applications ---&gt; luci-app-ntpc   <span class="hljs-comment">#NTP时间同步服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-ocserv  <span class="hljs-comment">#OpenConnect virtual**服务</span>LuCI ---&gt; Applications ---&gt; luci-app-olsr  <span class="hljs-comment">#OLSR配置和状态模块</span>LuCI ---&gt; Applications ---&gt; luci-app-olsr-services  <span class="hljs-comment">#OLSR服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-olsr-viz   <span class="hljs-comment">#OLSR可视化</span>LuCI ---&gt; Applications ---&gt; luci-app-openvirtual**  <span class="hljs-comment">#Openvirtual**客户端</span>LuCI ---&gt; Applications ---&gt; luci-app-openvirtual**-server  <span class="hljs-comment">#易于使用的Openvirtual**服务器 Web-UI</span>LuCI ---&gt; Applications ---&gt; luci-app-oscam   <span class="hljs-comment">#OSCAM服务器（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-p910nd   <span class="hljs-comment">#打印服务器模块</span>LuCI ---&gt; Applications ---&gt; luci-app-pagekitec   <span class="hljs-comment">#Pagekite内网穿透客户端</span>LuCI ---&gt; Applications ---&gt; luci-app-polipo  <span class="hljs-comment">#Polipo代理(是一个小型且快速的网页缓存代理)</span>LuCI ---&gt; Applications ---&gt; luci-app-pppoe-relay  <span class="hljs-comment">#PPPoE NAT穿透 点对点协议（PPP）</span>LuCI ---&gt; Applications ---&gt; luci-app-p p t p-server  <span class="hljs-comment">#virtual**服务器 p p t p（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-privoxy  <span class="hljs-comment">#Privoxy网络代理(带过滤无缓存)</span>LuCI ---&gt; Applications ---&gt; luci-app-qbittorrent  <span class="hljs-comment">#BT下载工具（qBittorrent）</span>LuCI ---&gt; Applications ---&gt; luci-app-qos   <span class="hljs-comment">#流量服务质量(QoS)流控</span>LuCI ---&gt; Applications ---&gt; luci-app-radicale   <span class="hljs-comment">#CalDAV/CardDAV同步工具</span>LuCI ---&gt; Applications ---&gt; luci-app-ramfree  <span class="hljs-comment">#释放内存</span>LuCI ---&gt; Applications ---&gt; luci-app-rp-pppoe-server  <span class="hljs-comment">#Roaring Penguin PPPoE Server 服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-samba   <span class="hljs-comment">#网络共享（Samba）</span>LuCI ---&gt; Applications ---&gt; luci-app-samba4   <span class="hljs-comment">#网络共享（Samba4）</span>LuCI ---&gt; Applications ---&gt; luci-app-sfe  <span class="hljs-comment">#Turbo ACC网络加速（flowoffload二选一）</span>LuCI ---&gt; Applications ---&gt; luci-app<span class="hljs-_">-s</span><span class="hljs-_">-s</span>   <span class="hljs-comment">#SS低调上网（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app<span class="hljs-_">-s</span><span class="hljs-_">-s</span>-libes  <span class="hljs-comment">#SS-libev服务端</span>LuCI ---&gt; Applications ---&gt; luci-app-shairplay  <span class="hljs-comment">#支持AirPlay功能</span>LuCI ---&gt; Applications ---&gt; luci-app-siitwizard  <span class="hljs-comment">#SIIT配置向导  SIIT-Wizzard</span>LuCI ---&gt; Applications ---&gt; luci-app-simple-adblock  <span class="hljs-comment">#简单的广告拦截</span>LuCI ---&gt; Applications ---&gt; luci-app-smartdns  <span class="hljs-comment">#SmartDNS本地服务器（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-softethervirtual**  <span class="hljs-comment">#SoftEther virtual**服务器  NAT穿透</span>LuCI ---&gt; Applications ---&gt; luci-app-splash  <span class="hljs-comment">#Client-Splash是无线MESH网络的一个热点认证系统</span>LuCI ---&gt; Applications ---&gt; luci-app-sqm  <span class="hljs-comment">#流量智能队列管理（QOS）</span>LuCI ---&gt; Applications ---&gt; luci-app-squid   <span class="hljs-comment">#Squid代理服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料-plus   <span class="hljs-comment">#乳酸菌饮料低调上网Plus+</span>    luci-app-乳酸菌饮料-plus ---&gt; Include s<span class="hljs-_">-s</span> New Version  <span class="hljs-comment">#新SS代理（已弃）</span>    luci-app-乳酸菌饮料-plus ---&gt; Include s<span class="hljs-_">-s</span> Simple-obfs Plugin  <span class="hljs-comment">#simple-obfs简单混淆工具（已弃）</span>    luci-app-乳酸菌饮料-plus ---&gt; Include s<span class="hljs-_">-s</span> v贰瑞 Plugin  <span class="hljs-comment">#SS v贰瑞插件   *</span>    luci-app-乳酸菌饮料-plus ---&gt; Include v贰瑞  <span class="hljs-comment">#v贰瑞代理</span>    luci-app-乳酸菌饮料-plus ---&gt; Include Trojan  <span class="hljs-comment">#Trojan代理</span>    luci-app-乳酸菌饮料-plus ---&gt; Include red---socks2  <span class="hljs-comment">#red---socks2代理   *</span>    luci-app-乳酸菌饮料-plus ---&gt; Include Kcptun  <span class="hljs-comment">#Kcptun加速</span>    luci-app-乳酸菌饮料-plus ---&gt; Include 违禁软件 Server  <span class="hljs-comment">#乳酸菌饮料服务器</span>    luci-app-乳酸菌饮料-plus ---&gt; Include DNS2SOCKS  <span class="hljs-comment">#DNS服务器（已弃）</span>    luci-app-乳酸菌饮料-plus ---&gt; Include 违禁软件 Socks and Tunnel（已弃）    luci-app-乳酸菌饮料-plus ---&gt; Include Socks Server  <span class="hljs-comment">#socks代理服务器（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料-pro  <span class="hljs-comment">#乳酸菌饮料-Pro（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-乳酸菌饮料server-python  <span class="hljs-comment">#违禁软件 Python服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-statistics  <span class="hljs-comment">#流量监控工具</span>LuCI ---&gt; Applications ---&gt; luci-app-syncdial  <span class="hljs-comment">#多拨虚拟网卡（原macvlan）</span>LuCI ---&gt; Applications ---&gt; luci-app-tinyproxy  <span class="hljs-comment">#Tinyproxy是 HTTP(S)代理服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-transmission   <span class="hljs-comment">#BT下载工具</span>LuCI ---&gt; Applications ---&gt; luci-app-travelmate  <span class="hljs-comment">#旅行路由器</span>LuCI ---&gt; Applications ---&gt; luci-app-ttyd   <span class="hljs-comment">#网页终端命令行</span>LuCI ---&gt; Applications ---&gt; luci-app-udpxy  <span class="hljs-comment">#udpxy做组播服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-uhttpd  <span class="hljs-comment">#uHTTPd Web服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-unblockmusic  <span class="hljs-comment">#解锁网易云灰色歌曲3合1新版本</span>    UnblockNeteaseMusic Golang Version  <span class="hljs-comment">#Golang版本   *</span>    UnblockNeteaseMusic NodeJS Version  <span class="hljs-comment">#NodeJS版本   *</span>LuCI ---&gt; Applications ---&gt; luci-app-unblockneteasemusic-go  <span class="hljs-comment">#解除网易云音乐（合并）</span>LuCI ---&gt; Applications ---&gt; luci-app-unblockneteasemusic-mini  <span class="hljs-comment">#解除网易云音乐（合并）</span>LuCI ---&gt; Applications ---&gt; luci-app-unbound  <span class="hljs-comment">#Unbound DNS解析器</span>LuCI ---&gt; Applications ---&gt; luci-app-upnp   <span class="hljs-comment">#通用即插即用UPnP（端口自动转发）</span>LuCI ---&gt; Applications ---&gt; luci-app-usb-printer   <span class="hljs-comment">#USB 打印服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-v贰瑞-server   <span class="hljs-comment">#v贰瑞 服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-v贰瑞-pro  <span class="hljs-comment">#v贰瑞透明代理（已弃，集成乳酸菌饮料）</span>LuCI ---&gt; Applications ---&gt; luci-app-verysync  <span class="hljs-comment">#微力同步</span>LuCI ---&gt; Applications ---&gt; luci-app-vlmcsd  <span class="hljs-comment">#KMS服务器设置</span>LuCI ---&gt; Applications ---&gt; luci-app-vnstat   <span class="hljs-comment">#vnStat网络监控（图表）</span>LuCI ---&gt; Applications ---&gt; luci-app-virtual**bypass  <span class="hljs-comment">#virtual** BypassWebUI  绕过virtual**设置</span>LuCI ---&gt; Applications ---&gt; luci-app-vsftpd  <span class="hljs-comment">#FTP服务器</span>LuCI ---&gt; Applications ---&gt; luci-app-watchcat  <span class="hljs-comment">#断网检测功能与定时重启</span>LuCI ---&gt; Applications ---&gt; luci-app-webadmin  <span class="hljs-comment">#Web管理页面设置</span>LuCI ---&gt; Applications ---&gt; luci-app-webshell  <span class="hljs-comment">#网页命令行终端（已弃）</span>LuCI ---&gt; Applications ---&gt; luci-app-wifischedule  <span class="hljs-comment">#WiFi 计划</span>LuCI ---&gt; Applications ---&gt; luci-app-wireguard  <span class="hljs-comment">#virtual**服务器 WireGuard状态</span>LuCI ---&gt; Applications ---&gt; luci-app-wirele违禁软件egdb  <span class="hljs-comment">#WiFi无线</span>LuCI ---&gt; Applications ---&gt; luci-app-wol   <span class="hljs-comment">#WOL网络唤醒</span>LuCI ---&gt; Applications ---&gt; luci-app-wrtbwmon  <span class="hljs-comment">#实时流量监测</span>LuCI ---&gt; Applications ---&gt; luci-app-xlnetacc  <span class="hljs-comment">#迅雷快鸟</span>LuCI ---&gt; Applications ---&gt; luci-app-zerotier  <span class="hljs-comment">#ZeroTier内网穿透</span></code></pre></div><h3 id="2-5-自动编译"><a href="#2-5-自动编译" class="headerlink" title="2.5 自动编译"></a>2.5 自动编译</h3><p><a href="https://github.com/esirplayground/AutoBuild-OpenWrt" target="_blank" rel="noopener">项目地址</a></p><p>自定义编译前需要在编译环境中运行<code>./scripts/diffconfig.sh &gt; diffconfig</code></p><p>然后把<code>/lede/diffconfig</code>里内容替换项目里面相应的.config文件内容。</p><p><a href="https://www.youtube.com/watch?v=9YO7nxNry-4" target="_blank" rel="noopener">自动编译视频教程</a></p><h2 id="三、-使用"><a href="#三、-使用" class="headerlink" title="三、 使用"></a>三、 使用</h2><h3 id="3-1-初始设置"><a href="#3-1-初始设置" class="headerlink" title="3.1 初始设置"></a>3.1 初始设置</h3><p>winscp登录Ubuntu系统，在<code>/home/you_name/lede/bin/targets/x86/64/</code>下面</p><p><code>openwrt-x86-x64-combined-squashfs.img</code>就是我们需要的镜像文件了</p><p>把镜像文件下载下来，通过<code>winPE</code>的U盘安装烧录到路由器硬盘里，也可以烧写到U盘里，通过U盘启动</p><p>网线连接到路由器的Lan口，默认登陆IP <code>192.168.1.1</code>, 密码 <code>password</code>，进行配置(也可以通过PUTTY连接，端口22)</p><div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 修改LAN口固定IP</span>vi /etc/config/network<span class="hljs-comment"># option ipaddr可以改为你想要管理路由的IP地址，比如'192.168.10.1'</span><span class="hljs-comment"># 重启网络</span>/etc/init.d/network restart</code></pre></div><p>网页地址栏输入<code>192.168.10.1</code>，进行配置。</p><p>接线配置可参考如下2张图片</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E5%9B%BE.png" srcset="/img/loading.gif" alt="家庭网络结构图"></p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%9B%BE.png" srcset="/img/loading.gif" alt="家庭网络配置图"></p><h3 id="3-2-openwrt内部配置"><a href="#3-2-openwrt内部配置" class="headerlink" title="3.2 openwrt内部配置"></a>3.2 openwrt内部配置</h3><ol><li><p>网络 -&gt; 接口 -&gt; LAN口修改 -&gt; IPv4地址 修改为访问路由的地址 -&gt; 网关为路由ip地址 -&gt;<strong>DNS</strong>填写114.114.114.114,119.29.29.29,223.5.5.5和<strong>你的网络运营商提供的DNS</strong>(可以在命令行中用ping ip来查看哪个DNS访问的最快) -&gt; IPv6分配长度停用 -&gt; 旁路由关闭DHCP，主路由开启动态DHCP</p></li><li><p>Turbo ACC 网络加速设置 -&gt; 除了HWNAT硬件加速全选 -&gt; 上游 DNS 服务器(国内) -&gt; 查询填入你所在的网络运营商所提供的DNS<a href="https://ip.cn/dns.html" target="_blank" rel="noopener">查询地址1</a>、<a href="https://cloud.tencent.com/developer/article/1352604" target="_blank" rel="noopener">查询地址2</a></p></li><li><p>旁路由不用设置wan口，主路由自行设置wan口，不用ipv6，最好关闭ipv6.</p></li><li><p>某科学的超电磁炮设置，①客户端—&gt;分流服务器和主服务器相同，ip模式，DNS为默认8.8.4.4。②第二项自行添加。③高级设置开启自动切换。④服务端不设置不开启。⑤访问控制按需设置。</p></li></ol><h3 id="3-3-单网口openwrt小主机旁路由设置"><a href="#3-3-单网口openwrt小主机旁路由设置" class="headerlink" title="3.3 单网口openwrt小主机旁路由设置"></a>3.3 单网口openwrt小主机旁路由设置</h3><ol><li>登录主路由，设置LAN口IP地址,子网掩码为255.255.255.0 -&gt; DHCP服务关闭 -&gt; 保存。</li><li>网络 -&gt; 接口 -&gt; LAN修改 -&gt; 基本设置 -&gt; ip4地址 -&gt; 网关为主路由LAN口IP地址 -&gt; DNS服务器参考上面设置 -&gt; IP6停用 -&gt; 物理设置 -&gt; 桥接接口不要勾选 -&gt; 接口选择旁路由LAN口 -&gt; -&gt; 下方 -&gt; -&gt; -&gt; DHCP服务器（启用即不要勾选忽略此接口） -&gt; DHCP服务器高级设置 -&gt; 勾选动态DHCP，强制 -&gt; IP6设置可以关掉 -&gt; 保存并应用。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/coolsnowwolf/lede" target="_blank" rel="noopener">Lean大源码地址</a></p><p><a href="https://www.right.com.cn/forum/thread-3682029-1-1.html" target="_blank" rel="noopener">OpenWrt 编译 LuCI -&gt; Applications 添加插件应用说明</a></p><p><a href="https://www.youtube.com/watch?v=ZMh-AvQV8n0&t=57s" target="_blank" rel="noopener">How to build your own Openwrt firmware</a></p><p><a href="https://www.youtube.com/watch?v=zy16nR8MlX0" target="_blank" rel="noopener">openwrt基础设置</a></p><p><a href="https://zhuanlan.zhihu.com/p/112484256" target="_blank" rel="noopener">OpenWrt中，旁路由的设置与使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;基于coolsnowwolf大神源码编译,&lt;a href=&quot;https://github.com/coolsnowwolf/lede&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;源码地址&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;
      
    
    </summary>
    
    
      <category term="linux" scheme="https://closer_laps.gitee.io/categories/linux/"/>
    
      <category term="openwrt" scheme="https://closer_laps.gitee.io/categories/linux/openwrt/"/>
    
    
      <category term="openwrt" scheme="https://closer_laps.gitee.io/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记</title>
    <link href="https://closer_laps.gitee.io/2020/04/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://closer_laps.gitee.io/2020/04/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-24T14:56:44.000Z</published>
    <updated>2020-05-02T11:08:38.993Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://docs.docker.com/" target="_blank" rel="noopener">docker官方文档</a></p></blockquote><h2 id="一、-安装及加速"><a href="#一、-安装及加速" class="headerlink" title="一、 安装及加速"></a>一、 安装及加速</h2><p>安装适用于ubuntu,其他系统请参考官方文档。基础配置及加速通用。</p><div class="hljs"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装（根据系统自行选择方式）</span>sudo apt install docker.io<span class="hljs-meta">#</span><span class="bash"> 查看版本</span>docker -v<span class="hljs-meta">#</span><span class="bash"> 配置docker镜像加速</span><span class="hljs-meta">#</span><span class="bash"> 阿里云镜像获取地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，登陆后，左侧菜单选中镜像加速器就可以看到你的专属地址了</span><span class="hljs-meta">#</span><span class="bash"> 按照页面的操作文档配置加速</span>sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'&#123;  "registry-mirrors": ["https://改为你的加速器地址.mirror.aliyuncs.com"]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span class="hljs-meta">#</span><span class="bash"> 下载 Docker 图形化界面 portainer</span>sudo docker pull portainer/portainer<span class="hljs-meta">#</span><span class="bash"> 创建 portainer 容器</span>sudo docker volume create portainer_data<span class="hljs-meta">#</span><span class="bash"> 运行 portainer(需要9000端口没有被占用，如被占用，自行更换第一个宿主机端口)</span>sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer<span class="hljs-meta">#</span><span class="bash"> 浏览器输入ip:9000登录图形管理界面</span></code></pre></div><h2 id="二、-基础命令"><a href="#二、-基础命令" class="headerlink" title="二、 基础命令"></a>二、 基础命令</h2><h3 id="2-1-安装、启动及停止"><a href="#2-1-安装、启动及停止" class="headerlink" title="2.1 安装、启动及停止"></a>2.1 安装、启动及停止</h3><div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 安装命令：</span>apt-get install docker.io<span class="hljs-comment"># 关闭docker服务，命令：</span>service docker stop<span class="hljs-comment"># 启动docker 服务，命令：</span>service docker start</code></pre></div><h3 id="2-2-常用命令"><a href="#2-2-常用命令" class="headerlink" title="2.2 常用命令"></a>2.2 常用命令</h3><div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># 查看docker版本，命令：</span>docker version<span class="hljs-comment"># 搜索可用docker镜像，命令：如搜索mysql</span>docker search mysql<span class="hljs-comment"># 下载容器镜像，命令：如拉取mysql镜像</span>docker pull mysql<span class="hljs-comment"># 查看docker镜像及镜像id，命令：</span>docker images<span class="hljs-comment"># 运行一个容器，命令：基于mysql镜像运行一个容器(需要3310端口没有被占用，如被占用，自行更换第一个宿主机端口)</span>docker run --name firstMysql -p 3310:3306 -e MYSQL\_ROOT\_PASSWORD=123456 -d mysql</code></pre></div><p><a href="#3-1-docker-run命令参数">跳转到docker run的命令参数详解</a></p><div class="hljs"><pre><code class="hljs SHELL"><span class="hljs-meta">#</span><span class="bash"> 查看在运行的容器，及容器id，命令：</span>docker ps<span class="hljs-meta">#</span><span class="bash"> 查看所有容器（包括未运行的容器）及容器id，命令:</span>docker ps -a<span class="hljs-meta">#</span><span class="bash"> 停止一个容器，命令：</span>docker stop 容器id<span class="hljs-meta">#</span><span class="bash"> 删除一个容器（正在运行的容器，必须先停止才能删除），命令：</span>docker rm 容器id<span class="hljs-meta">#</span><span class="bash"> 删除一个镜像（镜像下有容器，必须先删除容器，才能删除镜像），命令：</span>docker rmi 镜像id<span class="hljs-meta">#</span><span class="bash"> 启动所有容器，命令：</span>docker start $(docker ps -a | awk '&#123; print $1&#125;' | tail -n +2)<span class="hljs-meta">#</span><span class="bash"> 关闭所有容器，命令：</span>docker stop $(docker ps -a | awk '&#123; print $1&#125;' | tail -n +2)<span class="hljs-meta">#</span><span class="bash"> 删除所有容器，命令：</span>docker rm $(docker ps -a | awk '&#123; print $1&#125;' | tail -n +2)<span class="hljs-meta">#</span><span class="bash"> 删除所有镜像（先关闭所有的容器，再删除所有容器，才能删除所有镜像），命令：</span>docker rmi $(docker images | awk '&#123;print $3&#125;' |tail -n +2)<span class="hljs-meta">#</span><span class="bash"> 查看镜像详细信息，命令：</span>docker inspect 镜像id<span class="hljs-meta">#</span><span class="bash"> 进入运行的容器修改相关参数</span>docker exec -it 容器名称 bash<span class="hljs-meta">#</span><span class="bash"> 其中bash为进入容器后执行的命令。</span><span class="hljs-meta">#</span><span class="bash"> 其中  -d :分离模式: 在后台运行</span><span class="hljs-meta">#</span><span class="bash">       -i :即使没有附加也保持STDIN 打开</span><span class="hljs-meta">#</span><span class="bash">       -t :分配一个伪终端</span></code></pre></div><h2 id="三、-进阶命令"><a href="#三、-进阶命令" class="headerlink" title="三、 进阶命令"></a>三、 进阶命令</h2><h3 id="3-1-docker-run命令参数"><a href="#3-1-docker-run命令参数" class="headerlink" title="3.1 docker run命令参数"></a>3.1 docker run命令参数</h3><div class="hljs"><pre><code class="hljs SH">Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]-d, --detach=<span class="hljs-literal">false</span>     指定容器运行于前台还是后台，默认为<span class="hljs-literal">false</span>-i, --interactive=<span class="hljs-literal">false</span>    打开STDIN，用于控制台交互-t, --tty=<span class="hljs-literal">false</span>            分配tty设备，该可以支持终端登录，默认为<span class="hljs-literal">false</span>-u, --user=<span class="hljs-string">""</span>              指定容器的用户-a, --attach=[]            登录容器（必须是以docker run -d启动的容器）  -w, --workdir=<span class="hljs-string">""</span>           指定容器的工作目录-c, --cpu-shares=0         设置容器CPU权重，在CPU共享场景使用-e, --env=[]               指定环境变量，容器中可以使用该环境变量-m, --memory=<span class="hljs-string">""</span>            指定容器的内存上限-P, --publish-all=<span class="hljs-literal">false</span>    指定容器暴露的端口-p, --publish=[]           指定容器暴露的端口-h, --hostname=<span class="hljs-string">""</span>          指定容器的主机名-v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录--volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录  --<span class="hljs-built_in">cap</span>-add=[]               添加权限，权限清单详见：http://linux.die.net/man/7/capabilities--<span class="hljs-built_in">cap</span>-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/7/capabilities--cidfile=<span class="hljs-string">""</span>               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法--cpuset=<span class="hljs-string">""</span>                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU--device=[]                添加主机设备给容器，相当于设备直通--dns=[]                   指定容器的dns服务器--dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件--entrypoint=<span class="hljs-string">""</span>            覆盖image的入口点--env-file=[]              指定环境变量文件，文件格式为每行一个环境变量--expose=[]                指定容器暴露的端口，即修改镜像的暴露端口--link=[]                  指定容器间的关联，使用其他容器的IP、env等信息--lxc-conf=[]              指定容器的配置文件，只有在指定--<span class="hljs-built_in">exec</span>-driver=lxc时使用--name=<span class="hljs-string">""</span>                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字--net=<span class="hljs-string">"bridge"</span>             容器网络设置:                                bridge 使用docker daemon指定的网桥                              host    //容器使用主机的网络                              container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源                              none 容器使用自己的网络（类似--net=bridge），但是不进行配置--privileged=<span class="hljs-literal">false</span>         指定容器是否为特权容器，特权容器拥有所有的capabilities--restart=<span class="hljs-string">"no"</span>             指定容器停止后的重启策略:                                no：容器退出时不重启                              on-failure：容器故障退出（返回值非零）时重启                              always：容器退出时总是重启--rm=<span class="hljs-literal">false</span>                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)--sig-proxy=<span class="hljs-literal">true</span>           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</code></pre></div><p>未完待续。。。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://odcn.top/2019/02/13/2529/" target="_blank" rel="noopener">Docker run命令参数中文介绍</a></p><p><a href="https://www.youtube.com/watch?v=lb5wFaquqas" target="_blank" rel="noopener">Play with Docker，second round，hands on</a></p><p><a href="https://www.youtube.com/redirect?event=video_description&v=lb5wFaquqas&redir_token=-EHPdTiyLT7PYyQ3D_AubsTWnFd8MTU4ODUwMTg2OUAxNTg4NDE1NDY5&q=https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh" target="_blank" rel="noopener">eSirPG on googleDrive with play openwrt</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;docker官方文档&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;一、-安装及加速&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="linux" scheme="https://closer_laps.gitee.io/categories/linux/"/>
    
      <category term="docker" scheme="https://closer_laps.gitee.io/categories/linux/docker/"/>
    
    
      <category term="docker" scheme="https://closer_laps.gitee.io/tags/docker/"/>
    
      <category term="linux" scheme="https://closer_laps.gitee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>DNF搭建说明</title>
    <link href="https://closer_laps.gitee.io/2020/04/21/games/DNF/DNF%E6%90%AD%E5%BB%BA/"/>
    <id>https://closer_laps.gitee.io/2020/04/21/games/DNF/DNF%E6%90%AD%E5%BB%BA/</id>
    <published>2020-04-21T02:17:27.000Z</published>
    <updated>2020-04-21T03:07:31.149Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="b9109b700f8842012936f841d67bf72349198cf349e4017a891e2e5e23529be0"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      有东西被加密了, 请输入密码查看.
    
    </summary>
    
    
      <category term="DNF" scheme="https://closer_laps.gitee.io/categories/DNF/"/>
    
    
      <category term="DNF" scheme="https://closer_laps.gitee.io/tags/DNF/"/>
    
      <category term="SQL" scheme="https://closer_laps.gitee.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>按键精灵语法</title>
    <link href="https://closer_laps.gitee.io/2020/04/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5/%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5%E8%AF%AD%E6%B3%95/"/>
    <id>https://closer_laps.gitee.io/2020/04/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5/%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5%E8%AF%AD%E6%B3%95/</id>
    <published>2020-04-09T12:58:18.000Z</published>
    <updated>2020-04-13T04:17:30.012Z</updated>
    
    <content type="html"><![CDATA[<p>windows或者Android(需要root权限)下按键精灵有时候写一些简单的脚本还是挺好用的。没有最好的语言，只有最适合的工具。在此记录下常用的基本语法。</p><h2 id="句柄及后台运行"><a href="#句柄及后台运行" class="headerlink" title="句柄及后台运行"></a>句柄及后台运行</h2><p>句柄可以获取后台窗口的类名或者标题，以达到获取坐标或后台运行脚本的目的。<br><strong>后台只支持部分窗口，以实际测试为准。</strong></p><p>句柄的类名或者标题，可以用按键精灵自带的抓抓工具抓取。</p><div class="hljs"><pre><code class="hljs vb">//声明窗口句柄变量，窗口大小变量Dim Hwnd, sRect//声明数组Dim Array//Plugin.Window.Find()--命令功能-查找窗口类名或者标题//下面这句是查找窗口类名("Notepad")或者标题(0),返回找到的句柄HwndHwnd = Plugin.Window.Find("Notepad","0")//调试输出句柄-功能-在调试窗口打印文字TracePrint Hwnd//该函数返回窗口大小sRect = Plugin.Window.GetWindowRect(Hwnd)//窗口大小转为数组，可以获得窗口左上角的坐标//语法 Split(expression[, delimiter[, count[, start]]])//字符串为sRect，分割方式‘|’Array = Split(sRect, "|")//左上角坐标的X,Y轴坐标TracePrint Array(0)TracePrint Array(1)//下拉型自定义变量//格式: UserVar 变量名=DropList&#123;选项0:值0|选项1:值1|选项2:值2&#125;=默认显示的选项编号 &#123;注释&#125;//解释:这个命令预先设定多个变量值，用户可在基面通过下拉方式进行选择//示例UserVar Var1=DropList&#123;"低于10%时补血":0.1|"低于20%时补血":0.2|"低于30%时补血":0.3&#125;=2 "自动补血设置"//左键点击5次LeftClick 5//Function函数Function increase(x,y)    If v = 1 Then        //键盘输入enter        KeyPress "Enter", 1    Else        //鼠标移动到指定坐标        MoveTo Array(0)+406, Array(1)+342    End IfEnd Function//调用函数或子程序call Function_name//LeftClick 左键单击//命令功能 向后台窗口句柄送一个鼠标左键单击 (注意：只支持部分窗口，以实际测试为准。)Call Plugin.Bkgnd.LeftClick(Hwnd, 550, 262)//后台输入按键enter，13是按键码，可以在按键精灵中与实际按键互相转换Call Plugin.Bkgnd.KeyPress(Hwnd, 13)//添加延迟，单位毫秒msDelay 500//For循环For i=0 To 5    For j=0 TO 7        Call increase(x, y)        x = x + 30    Next    x = 488    y = y + 30Next</code></pre></div><h2 id="带GUI的脚本"><a href="#带GUI的脚本" class="headerlink" title="带GUI的脚本"></a>带GUI的脚本</h2><p>先要在界面画出窗体（form）及各种输入框，下拉框，标签，按钮等。。。</p><p>下面是QQ后台刷屏脚本，先画4个标签，4个输入框，1个下拉框，1个按钮</p><div class="hljs"><pre><code class="hljs VB">//事件：form是窗体，load是加载，定义下拉框属性Event Form1.Load    //窗体1中的ComboBox1下拉框1有是和否2个选择    Form1.ComboBox1.List = "是|否"    //窗体下拉框初始选项    Form1.ComboBox1.ListIndex = 0End Event//定义窗体1的按钮1的点击触发事件Event Form1.Button1.Click    //窗体1的输入框1的文本赋予变量title    title = Form1.InputBox1.Text    //找到QQ窗口句柄    Hwnd=Plugin.Window.Find("TXGuiFoundation",title)    t = 1    //窗体1的输入框4的文本转化为int赋予变量times    times = Int(Form1.InputBox4.Text)    //数组真假赋予subfix    subfix=Array(true,false)    text = Form1.InputBox2.Text    rate = Form1.InputBox3.Text    //while循环    While t &lt;= times OR times = 0        If subfix(Form1.ComboBox1.ListIndex) Then            //后台发送文本加自增计数变量            Call Plugin.Bkgnd.SendString(Hwnd,text &amp; t)        Else            //后台发送文本text            Call Plugin.Bkgnd.SendString(Hwnd,text)        End If        //输入enter        Call Plugin.Bkgnd.KeyPress(Hwnd, 13)        t = t + 1        //发送事件间隔为变量rate        Delay rate    WendEnd Event</code></pre></div><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><div class="hljs"><pre><code class="hljs VB">DimEnv T1DimEnv T2Call start_1Sub start_1    //线程1    T1 = BeginThread(thread1)    T2 = BeginThread(thread2)    BeginThread StopEnd SubSub thread1    name_1 = "测试1"    t_1 = 0    rate_1 = 1000    times_1 = 100    subfix_1=true    test_1 = "测试"    //while循环    Hwnd_1 = Plugin.Window.Find(0, name_1)    //当输入t=-1时则循环发送消息至按终止键为止    While t_1 &lt;= times_1 OR times_1 = 0        If subfix_1 Then            //后台发送文本加自增计数变量            Call Plugin.Bkgnd.SendString(Hwnd_1,test_1 &amp; t_1)        Else            //后台发送文本test_1            Call Plugin.Bkgnd.SendString(Hwnd_1,test_1)        End If        Call Plugin.Bkgnd.KeyPress(Hwnd_1, 13)        t_1 = t_1 + 1        //发送事件间隔为变量rate_1        Delay rate_1    WendEnd SubSub thread2    name_2 = "测试2"    t_2 = 0    rate_2 = 1000    times_2 = 100    subfix_2=true    test_2 = "测试"    //while循环    Hwnd_2 = Plugin.Window.Find(0,name_2)    While t_2 &lt;= times_2 OR times_2 = 0        If subfix_2 Then            //后台发送文本加自增计数变量            Call Plugin.Bkgnd.SendString(Hwnd_2,test_2 &amp; t_2)        Else            //后台发送文本test_2            Call Plugin.Bkgnd.SendString(Hwnd_2,test_2)        End If        Call Plugin.Bkgnd.KeyPress(Hwnd_2, 13)        t_2 = t_2 + 1        //发送事件间隔为变量rate_2        Delay rate_2    WendEnd SubSub stop    s_1 = "A"    s_2 = "Z"    running = True    While True        //监听按键        s = Waitkey        If s = Asc(s_1) and running  Then            PauseThread T1            running = False        ElseIf s = Asc(s_1) and not running Then            PauseThread T1            running = True        ElseIf s = Asc(s_2) Then            StopThread T2        End If    WendEnd Sub</code></pre></div><h2 id="一个简单的脚本示例"><a href="#一个简单的脚本示例" class="headerlink" title="一个简单的脚本示例"></a>一个简单的脚本示例</h2><div class="hljs"><pre><code class="hljs VB">//声明窗口句柄变量Dim Hwnd, sRectDim Array//下面这句是查找窗口类名("Notepad")或者标题(0),返回找到的句柄HwndHwnd = Plugin.Window.Find("DNF Taiwan","DNF Taiwan")//调试输出TracePrint Hwnd//返回窗口大小sRect = Plugin.Window.GetWindowRect(Hwnd)//窗口大小转为数组Array = Split(sRect, "|")TracePrint Array(0)TracePrint Array(1)//功能选择UserVar Var0 = DropList&#123;"自动增幅":"1"|"娃娃机":"2"|"先娃娃机再增幅":"3"|"鼠标左键连点":"4"|"自动锻造":"5"&#125;=3 "功能选择"//选择窗口，选择力量还是智力UserVar Var1 = DropList&#123;"增幅力量":"1"|"增幅智力":"2"&#125;=0 "选择增幅力量还是智力"//选择窗口，选择15还是13增幅券UserVar Var2 = DropList&#123;"13":13|"15":15&#125;=1 "选择13还是15增幅券"//设置鼠标点击延迟UserVar Yanshi=50 "两次点击的时间间隔（毫秒）"//强打增幅1件装备Function increase(x,y)    //使用强打书    KeyPress "1", 1    //延迟    Delay 200    //点击力量增幅    If var1 = 1 Then        MoveTo Array(0)+406, Array(1)+300        LeftClick 1        //点击智力增幅    Else        MoveTo Array(0)+406, Array(1)+342        LeftClick 1    End If    Delay 200    //点击使用    MoveTo Array(0)+374, Array(1)+391    LeftClick 1    Delay 200    //点击第一格装备    MoveTo Array(0)+x, Array(1)+y    LeftClick 1    Delay 200    //确定    KeyPress "Enter", 1    Delay 200    KeyPress "Enter", 1    Delay 200    //使用增幅书    KeyPress "2", 1    Delay 200    //点击第一格装备    MoveTo Array(0)+x, Array(1)+y    LeftClick 1    Delay 200    //确定    KeyPress "Enter", 1    Delay 200    If var2 = 13 Then        KeyPress "Enter", 1        Delay 200    End If    //一格装备完成End Function//增幅装备栏Function zengfu()    //主程序    x = 488    y = 288    For i=0 To 5        For j=0 TO 7            Call increase(x, y)            x = x + 30        Next        x = 488        y = y + 30    NextEnd Function//抽娃娃机Function wawaji()    For temp=0 TO 46        //投币        MoveTo Array(0)+152, Array(1)+402        LeftClick 1        Delay 200        //确认        MoveTo Array(0)+358, Array(1)+345        LeftClick 1        Delay 200        //停止        MoveTo Array(0)+200, Array(1)+402        LeftClick 1        Delay 5500        //确定        KeyPress "Enter", 1        Delay 200    NextEnd Function//抽娃娃机和增幅装备栏Function wawajiandzengfu()    Call wawaji()    KeyPress "Esc", 1    Delay 200    KeyPress "i", 1    Delay 200    Call zengfu()End Function//鼠标左击Function autoLeftClick()    While True        //说明：按照一定频率反复点击鼠标左键        //1秒 = 1000毫秒        LeftClick 1        Delay Yanshi    WendEnd Function//自动锻造Function autoDuanZao()    SetSimMode 0    While True        //拖拽第一格装备到锻造炉        MoveTo Array(0) + 488, Array(1) + 288        LeftDownS 1        Delay 200        MoveTo Array(0) + 331, Array(1) + 295        Delay 200        LeftUpS 1        //确定        MoveTo Array(0) + 336, Array(1) + 375        Delay 200        LeftClick 1        //延迟        Delay 6500        //确定        KeyPress "Enter", 1        Delay 200    WendEnd Function//主程序If Var0 = 1 Then    Call zengfu()ElseIf Var0 = 2 Then    Call wawaji()ElseIf Var0 = 3 Then    Call wawajiandzengfu()ElseIf Var0 = 4 Then    Call autoLeftClick()ElseIf  Var0 = 5 Then    Call autoDuanZao()End If</code></pre></div><h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><p><a href="https://space.bilibili.com/3196036/channel/detail?cid=100704" target="_blank" rel="noopener">https://space.bilibili.com/3196036/channel/detail?cid=100704</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;windows或者Android(需要root权限)下按键精灵有时候写一些简单的脚本还是挺好用的。没有最好的语言，只有最适合的工具。在此记录下常用的基本语法。&lt;/p&gt;&lt;h2 id=&quot;句柄及后台运行&quot;&gt;&lt;a href=&quot;#句柄及后台运行&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
    
      <category term="按键精灵" scheme="https://closer_laps.gitee.io/tags/%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5/"/>
    
  </entry>
  
  <entry>
    <title>SQL语言学习笔记</title>
    <link href="https://closer_laps.gitee.io/2020/04/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/SQL%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://closer_laps.gitee.io/2020/04/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/SQL%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-03T06:31:27.000Z</published>
    <updated>2020-04-26T14:04:41.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、SQL简介"><a href="#一、SQL简介" class="headerlink" title="一、SQL简介"></a>一、SQL简介</h2><h3 id="1-1-SQL是什么"><a href="#1-1-SQL是什么" class="headerlink" title="1.1 SQL是什么"></a>1.1 SQL是什么</h3><blockquote><p>SQL是结构化查询语言，它是一种用于存储，操作和检索存储在关系数据库中的数据的计算机语言</p></blockquote><p>关系型数据库可以通过E-R图转换而来，E-R图中矩形是实体集，菱形是关系，椭圆是属性。</p><h3 id="1-2-SQL命令"><a href="#1-2-SQL命令" class="headerlink" title="1.2 SQL命令"></a>1.2 SQL命令</h3><h4 id="1）-DDL——数据定义语言"><a href="#1）-DDL——数据定义语言" class="headerlink" title="1） DDL——数据定义语言"></a>1） DDL——数据定义语言</h4><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>CREATE</td><td>用于在数据库中创建新表，表视图或其他对象</td></tr><tr><td>2</td><td>ALTER</td><td>用于修改现有数据库对象，例如：表</td></tr><tr><td>3</td><td>DROP</td><td>用于删除整个表，数据库中的表或其他对象的视图</td></tr></tbody></table><h4 id="2）-DML——数据操纵语言"><a href="#2）-DML——数据操纵语言" class="headerlink" title="2） DML——数据操纵语言"></a>2） DML——数据操纵语言</h4><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>SELECT</td><td>从一个或多个表中检索某些记录</td></tr><tr><td>2</td><td>INSERT</td><td>创建一条记录</td></tr><tr><td>3</td><td>UPDATE</td><td>用于修改(更新)记录</td></tr><tr><td>4</td><td>DELETE</td><td>删除记录</td></tr></tbody></table><h4 id="3）-DCL——数据控制语言"><a href="#3）-DCL——数据控制语言" class="headerlink" title="3） DCL——数据控制语言"></a>3） DCL——数据控制语言</h4><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GRANT</td><td>为用户提供权限</td></tr><tr><td>2</td><td>REVOKE</td><td>撤销用户授予的权限</td></tr></tbody></table><h3 id="1-3-数据的完整性"><a href="#1-3-数据的完整性" class="headerlink" title="1.3 数据的完整性"></a>1.3 数据的完整性</h3><p>每个RDBMS(关系型数据库)都存在以下类别的数据完整性</p><ul><li><p>实体完整性 - 表中没有重复的行。</p></li><li><p>域完整性 - 通过限制值的类型，格式或范围，为给定列强制执行有效条目。</p></li><li><p>参照完整性 - 其他记录使用(引用)导致这些行无法删除。</p></li><li><p>用户定义的完整性 - 实施一些不属于实体，域或参照完整性的特定业务规则</p></li></ul><h3 id="1-4-SQL约束"><a href="#1-4-SQL约束" class="headerlink" title="1.4 SQL约束"></a>1.4 SQL约束</h3><ul><li><p><a href="https://www.yiibai.com/sql/sql-not-null.html" target="_blank" rel="noopener">NOT NULL约束</a> - 确保列不能具有NULL值。</p></li><li><p><a href="https://www.yiibai.com/sql/sql-default.html" target="_blank" rel="noopener">默认值约束</a> - 在未指定列时为列提供默认值。</p></li><li><p><a href="https://www.yiibai.com/sql/sql-unique.html" target="_blank" rel="noopener">唯一约束</a> - 确保列中的所有值都不同。</p></li><li><p><a href="https://www.yiibai.com/sql/sql-primary-key.html" target="_blank" rel="noopener">主键</a> - 唯一标识数据库表中的每一行/记录。</p></li><li><p><a href="https://www.yiibai.com/sql/sql-foreign-key.html" target="_blank" rel="noopener">外键</a> - 唯一标识任何其他数据库表中的行/记录。</p></li><li><p><a href="https://www.yiibai.com/sql/sql-check.html" target="_blank" rel="noopener">检查约束</a> - CHECK约束确保列中的所有值都满足特定条件。</p></li><li><p><a href="https://www.yiibai.com/sql/sql-index.html" target="_blank" rel="noopener">索引</a> - 用于非常快速地从数据库创建和检索数据。</p></li></ul><h3 id="1-5-数据库范式"><a href="#1-5-数据库范式" class="headerlink" title="1.5 数据库范式"></a>1.5 数据库范式</h3><h4 id="1）-第一范式（1NF）"><a href="#1）-第一范式（1NF）" class="headerlink" title="1） 第一范式（1NF）"></a>1） 第一范式（1NF）</h4><ol><li>在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。</li><li>所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式（1NF）中表的每一行只包含一个实例的信息。</li><li>简而言之，第一范式就是无重复的列。</li></ol><h4 id="2）-第二范式（2NF）"><a href="#2）-第二范式（2NF）" class="headerlink" title="2） 第二范式（2NF）"></a>2） 第二范式（2NF）</h4><ol><li>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被唯一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。这个唯一属性列被称为主关键字或主键、主码。</li><li>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。</li><li>简而言之，第二范式就是非主属性<strong>部分依赖于主关键字</strong>。</li></ol><h4 id="3）-第三范式（3NF）"><a href="#3）-第三范式（3NF）" class="headerlink" title="3） 第三范式（3NF）"></a>3） 第三范式（3NF）</h4><ol><li>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</li><li>例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。</li><li>简而言之，第三范式就是属性<strong>不依赖于其它非主属性</strong>。</li></ol><h3 id="1-6-运算符"><a href="#1-6-运算符" class="headerlink" title="1.6 运算符"></a>1.6 运算符</h3><p>假设变量a的值是：10，变量b的值是：20</p><h4 id="1）-SQL算术运算符"><a href="#1）-SQL算术运算符" class="headerlink" title="1） SQL算术运算符"></a>1） SQL算术运算符</h4><table><thead><tr><th>操作符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法，执行加法运算。</td><td>a + b = 30</td></tr><tr><td>-</td><td>减法，执行减法运算。</td><td>a + b = -10</td></tr><tr><td>*</td><td>除法，执行除法运算</td><td>a * b = 200</td></tr><tr><td>/</td><td>用左操作数除右手操作数</td><td>b / a = 2</td></tr><tr><td>%</td><td>用左手操作数除左手操作数并返回余数</td><td>b % a = 0</td></tr></tbody></table><h3 id="1-7-在MySQL中创建表的示例"><a href="#1-7-在MySQL中创建表的示例" class="headerlink" title="1.7 在MySQL中创建表的示例"></a>1.7 在MySQL中创建表的示例</h3><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">default</span> <span class="hljs-built_in">character</span> <span class="hljs-keyword">set</span> utf8 <span class="hljs-keyword">collate</span> utf8_general_ci;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> regions (    region_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,    region_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">25</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>);<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> countries (    country_id <span class="hljs-built_in">CHAR</span> (<span class="hljs-number">2</span>) PRIMARY <span class="hljs-keyword">KEY</span>,    country_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,    region_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (region_id) <span class="hljs-keyword">REFERENCES</span> regions (region_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span>);<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> locations (    location_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,    street_address <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,    postal_code <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">12</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,    city <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    state_province <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">25</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,    country_id <span class="hljs-built_in">CHAR</span> (<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (country_id) <span class="hljs-keyword">REFERENCES</span> countries (country_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span>);<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> jobs (    job_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,    job_title <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">35</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    min_salary <span class="hljs-built_in">DECIMAL</span> (<span class="hljs-number">8</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,    max_salary <span class="hljs-built_in">DECIMAL</span> (<span class="hljs-number">8</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>);<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> departments (    department_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,    department_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    location_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (location_id) <span class="hljs-keyword">REFERENCES</span> locations (location_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span>);<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employees (    employee_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,    first_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,    last_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">25</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    email <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    phone_number <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,    hire_date <span class="hljs-built_in">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    job_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    salary <span class="hljs-built_in">DECIMAL</span> (<span class="hljs-number">8</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    manager_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,    department_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (job_id) <span class="hljs-keyword">REFERENCES</span> jobs (job_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span>,    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (department_id) <span class="hljs-keyword">REFERENCES</span> departments (department_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span>,    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (manager_id) <span class="hljs-keyword">REFERENCES</span> employees (employee_id));<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> dependents (    dependent_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,    first_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    last_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    relationship <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">25</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    employee_id <span class="hljs-built_in">INT</span> (<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (employee_id) <span class="hljs-keyword">REFERENCES</span> employees (employee_id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span>);</code></pre></div><h2 id="二、SQL数据库操作"><a href="#二、SQL数据库操作" class="headerlink" title="二、SQL数据库操作"></a>二、SQL数据库操作</h2><p>语句<code>SHOW DATABASES;</code>用于查看可用数据库列表。</p><h3 id="2-0-帮助命令-help"><a href="#2-0-帮助命令-help" class="headerlink" title="2.0 帮助命令 help"></a>2.0 帮助命令 help</h3><p>如果不知道命令或者函数怎么用，可以使用help命令，mariaDB里面都会罗列出语法。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--示例1</span><span class="hljs-keyword">help</span><span class="hljs-comment">/*示例2*/</span><span class="hljs-keyword">help</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span><span class="hljs-keyword">help</span> <span class="hljs-keyword">join</span><span class="hljs-keyword">help</span> <span class="hljs-keyword">trigger</span><span class="hljs-keyword">help</span> <span class="hljs-keyword">grant</span></code></pre></div><h3 id="2-1-Create-Database-语句"><a href="#2-1-Create-Database-语句" class="headerlink" title="2.1 Create Database 语句"></a>2.1 Create Database 语句</h3><p>SQL中<code>CREATE DATABASE</code>语句用于创建新的SQL数据库：</p><div class="hljs"><pre><code class="hljs SQL">--语法格式CREATE &#123;DATABASE|SCHEMA&#125; [IF NOT EXISTS] database_name[DEFAULT] CHARACTER SET [=]charset_name|[DEFAULT] COLLATE [=]collation_name;/*[]标记其内容为可选，|用于分隔跨括号中的选择项，DEFAULT用于指定默认值，关键字CHARACTER SET用于指定数据库字符集，关键字COLLATE用于指定字符集的校对规则*//*示例*/CREATE DATABASE testdb;/*查看*/mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || testdb             |+--------------------+3 rows in set</code></pre></div><p><strong>数据库名称(<code>database_name</code>)在<code>RDBMS(关系数据库管理系统)</code>中必须是唯一的</strong></p><h3 id="2-2-Drop-Database-语句"><a href="#2-2-Drop-Database-语句" class="headerlink" title="2.2 Drop Database 语句"></a>2.2 Drop Database 语句</h3><p>SQL中<code>DROP DATABASE</code>语句用于删除SQL模式中已存在的数据库。</p><div class="hljs"><pre><code class="hljs SQL">--语法格式DROP DATABASE database_name;/*示例*/DROP DATABASE testdb;mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              |+--------------------+2 rows in set</code></pre></div><h3 id="2-3-Rename-Database-语句"><a href="#2-3-Rename-Database-语句" class="headerlink" title="2.3 Rename Database 语句"></a>2.3 Rename Database 语句</h3><p>当需要更改数据库的名称时，将使用SQL <code>RENAME DATABASE</code></p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">DATABASE</span> old_db_name <span class="hljs-keyword">TO</span> new_db_name;<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">DATABASE</span> old_name <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">NAME</span> = new_name;</code></pre></div><h3 id="2-4-Use-语句"><a href="#2-4-Use-语句" class="headerlink" title="2.4 Use 语句"></a>2.4 Use 语句</h3><p>如果SQL模式中有多个数据库，那么在开始操作之前，需要选择一个将执行操作的数据库。</p><p>SQL中的<code>USE</code>语句用于选择SQL模式中的任何现有数据库。</p><div class="hljs"><pre><code class="hljs SQL">--语法格式USE database_name;/*示例*/mysql&gt; SHOW DATABASES;+--------------------+| Database           |+--------------------+| information_schema || mysql              || test               |+--------------------+3 rows in setUSE test;</code></pre></div><h2 id="三、表操作"><a href="#三、表操作" class="headerlink" title="三、表操作"></a>三、表操作</h2><h3 id="3-1-创建表-Create-Table"><a href="#3-1-创建表-Create-Table" class="headerlink" title="3.1 创建表 Create Table"></a>3.1 创建表 Create Table</h3><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">TEMPORARY</span>] <span class="hljs-keyword">TABLE</span> table_name(     column_name_1 data_type <span class="hljs-keyword">default</span> <span class="hljs-keyword">value</span> column_constraint,     column_name_2 data_type <span class="hljs-keyword">default</span> <span class="hljs-keyword">value</span> column_constraint,     ...,     table_constraint);</code></pre></div><ul><li>由table_name指定的表名在数据库中必须是唯一的</li><li>每个列定义由列名，列的<a href="https://www.yiibai.com/sql/sql-data-types.html" target="_blank" rel="noopener">数据类型</a>，默认值和一个或多个列约束组成</li><li>列的数据类型指定列可以存储的数据类型。 列的数据类型可以是数字，字符，日期等</li><li>列约束控制可以存储在列中的值的类型。 例如，<code>NOT NULL</code>约束确保列不包含<code>NULL</code>值。列可能有多个列约束。 例如，<code>users</code>表的<code>username</code>列可以同时具有<code>NOT NULL</code>和<a href="https://www.yiibai.com/sql/sql-unique-constraint.html" target="_blank" rel="noopener"><code>UNIQUE</code>约束</a>。</li><li>如果约束包含多个列，则使用表约束。 例如，如果表的主键包含两列，则在这种情况下，必须使用<code>PRIMARY KEY</code><a href="https://www.yiibai.com/sql/sql-primary-key.html" target="_blank" rel="noopener">主键约束</a>。</li><li><code>TEMPORARY</code>关键字用于创建临时表，当断开与数据库连接时，mysql会自动删除它们。</li></ul><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> courses (    course_id <span class="hljs-built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,    course_name <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>);<span class="hljs-comment">/*courses课程表有两列：course_id和course_name;course_id是课程表的主键列。 每个表都有一个且只有一个主键，用于唯一标识表中的每一行course_id的数据类型是整数，由INT关键字表示。 此外，course_id列的值为AUTO_INCREMENT(自动递增)。表示表中数据类为整型的列设置自增属性，自动设置为“此前表中该列的最大值加1”，同时每个表智能有一个AUTO_INCREMENT列，并且它必须被索引。course_name存储课程名称。 其数据类型是最大长度为50的可变长度的字符串(VARCHAR)。NOT NULL约束确保course_name列中不存储NULL值。*/</span></code></pre></div><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--示例</span><span class="hljs-comment">/*有了课程表。 要存储训练数据，请按如下方式创建名为training的新表。*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> trainings (    employee_id <span class="hljs-built_in">INT</span>,    course_id <span class="hljs-built_in">INT</span>,    taken_date <span class="hljs-built_in">DATE</span>,    PRIMARY <span class="hljs-keyword">KEY</span> (employee_id , course_id));<span class="hljs-comment">/*trainings表包含三列：employee_id列存储参加课程的员工的ID。course_id列存储员工所采用的课程。taken_date列存储员工参加课程的日期。因为trainings表的主键由两列组成：employee_id和course_id，所以必须使用PRIMARY KEY表约束。*/</span></code></pre></div><h3 id="3-2-更新表-Alter-Table"><a href="#3-2-更新表-Alter-Table" class="headerlink" title="3.2 更新表 Alter Table"></a>3.2 更新表 Alter Table</h3><p>使用SQL <code>ALTER TABLE</code>更改数据库中现有表的结构</p><p><code>ALTER TABLE</code>语句用于对现有表执行以下操作：</p><ul><li>使用<code>ADD</code>子句添加新列。</li><li>使用<code>CHANGE</code>子句用于修改表中的列名称和数据类型。</li><li>使用<code>ALTER SET DEFAULT</code>子句修改或删除表中指定列的默认值。</li><li>使用<code>MODIFY</code>子句修改列的属性，例如：约束，默认值等。</li><li>使用<code>DROP</code>子句删除列。</li></ul><h4 id="3-2-1-ALTER-TABLE-ADD列"><a href="#3-2-1-ALTER-TABLE-ADD列" class="headerlink" title="3.2.1 ALTER TABLE ADD列"></a>3.2.1 ALTER TABLE ADD列</h4><p>该子句的作用是向表中添加一个或多个新列</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<span class="hljs-keyword">ADD</span> [<span class="hljs-keyword">COLUMN</span>] column_name data_type column_constraint [<span class="hljs-keyword">AFTER</span> existing_column];<span class="hljs-comment">/*要向表中添加一个或多个列，需要执行以下步骤：首先，在ALTER TABLE子句之后指定要添加table_name，表示列所在的表。其次，将新列定义放在ADD子句之后。 如果要在表中指定新列的顺序，可以使用可选子句AFTER existing_column。*/</span><span class="hljs-comment">/* 以下语句将一个名称为credit_hours的新列添加到courses表中。*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> courses <span class="hljs-keyword">ADD</span> credit_hours <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> courses<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> fee <span class="hljs-built_in">NUMERIC</span> (<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">AFTER</span> course_name,<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> max_limit <span class="hljs-built_in">INT</span> <span class="hljs-keyword">AFTER</span> course_name;</code></pre></div><h4 id="3-2-2-ALTER-TABLE-CHANGE列名称和属性"><a href="#3-2-2-ALTER-TABLE-CHANGE列名称和属性" class="headerlink" title="3.2.2 ALTER TABLE CHANGE列名称和属性"></a>3.2.2 ALTER TABLE CHANGE列名称和属性</h4><p><code>CHANGE</code>子句用于修改表中的列名称和数据类型。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<span class="hljs-keyword">CHANGE</span> [<span class="hljs-keyword">COLUMN</span>] column_name new_column_name column_properties;<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students<span class="hljs-keyword">CHANGE</span> students_name <span class="hljs-keyword">names</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;</code></pre></div><h4 id="3-2-3-ALTER-TABLE-ALTER-SET-DEFAULT列"><a href="#3-2-3-ALTER-TABLE-ALTER-SET-DEFAULT列" class="headerlink" title="3.2.3 ALTER TABLE ALTER SET DEFAULT列"></a>3.2.3 ALTER TABLE ALTER SET DEFAULT列</h4><p><code>ALTER [COLUMN] SET</code>子句修改或删除表中指定列的默认值。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<span class="hljs-keyword">ALTER</span> [<span class="hljs-keyword">COLUMN</span>] column_name <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'xxx'</span>;<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> customers<span class="hljs-keyword">ALTER</span> city <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'beijing'</span>;</code></pre></div><h4 id="3-2-4-ALTERE-TABLE-MODIFY列"><a href="#3-2-4-ALTERE-TABLE-MODIFY列" class="headerlink" title="3.2.4 ALTERE TABLE MODIFY列"></a>3.2.4 ALTERE TABLE MODIFY列</h4><p>MODIFY子句用于更改现有列的数据类型。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<span class="hljs-keyword">MODIFY</span> [<span class="hljs-keyword">COLUMN</span>] column_name column_properties;<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">name</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;</code></pre></div><h4 id="3-2-5-ALTER-TABLE-DROP列"><a href="#3-2-5-ALTER-TABLE-DROP列" class="headerlink" title="3.2.5 ALTER TABLE DROP列"></a>3.2.5 ALTER TABLE DROP列</h4><p>当表的列已过时且未被任何其他数据库对象(如触发器，视图，存储过程和存储过程)使用时，将其从表中删除，请使用以下语法：</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<span class="hljs-keyword">DROP</span> [<span class="hljs-keyword">COLUMN</span>] column_name,<span class="hljs-keyword">DROP</span> [<span class="hljs-keyword">COLUMN</span>] column_name,...<span class="hljs-comment">/*示例1-删除一列*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> courses <span class="hljs-keyword">DROP</span> fee;<span class="hljs-comment">/*示例2-删除多列*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> courses<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> max_limit,<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> credit_hours;</code></pre></div><h4 id="3-2-6-ALTER-TABLE-RENAME-TO"><a href="#3-2-6-ALTER-TABLE-RENAME-TO" class="headerlink" title="3.2.6 ALTER TABLE RENAME TO"></a>3.2.6 ALTER TABLE RENAME TO</h4><p><code>RENAME TO</code>子句为表重新赋予一个表名。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<span class="hljs-keyword">RENAME</span> [<span class="hljs-keyword">TO</span>] new_table_name;<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> classes<span class="hljs-keyword">RENAME</span> new_classes;</code></pre></div><h3 id="3-3-删除表-DROP-TABLE"><a href="#3-3-删除表-DROP-TABLE" class="headerlink" title="3.3 删除表 DROP TABLE"></a>3.3 删除表 DROP TABLE</h3><p>使用SQL <code>DROP TABLE</code>语句删除数据库中的一个或多个表</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">DROP</span> [<span class="hljs-keyword">TEMPORARY</span>] <span class="hljs-keyword">TABLE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>] table_name [ RESTRICT | <span class="hljs-keyword">CASCADE</span> ];<span class="hljs-comment">--为了防止删除不存在的表的错误，使用可选子句IF EXISTS。</span><span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> students;<span class="hljs-comment">/*删除多个表*/</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> table_name1,table_name2,...;</code></pre></div><ul><li><p>DROP TABLE语句永久删除表的数据和结构，某些数据库系统要求表中的记录必须为空时才能从数据库中删除。这有助于防止意外删除仍在使用的表。</p></li><li><p>要删除表中的所有数据，可以使用<a href="https://www.yiibai.com/sql/sql-delete.html" target="_blank" rel="noopener">DELETE</a>或<a href="https://www.yiibai.com/sql/sql-truncate-table.html" target="_blank" rel="noopener">TRUNCATE TABLE</a>语句。</p></li><li><p>要删除由另一个表的外键约束引用的表，必须在删除表之前禁用或删除外部约束。</p></li></ul><h3 id="3-4-快速删除表-TURNCATE-TABLE"><a href="#3-4-快速删除表-TURNCATE-TABLE" class="headerlink" title="3.4 快速删除表 TURNCATE TABLE"></a>3.4 快速删除表 TURNCATE TABLE</h3><p>使用SQL <code>TRUNCATE TABLE</code>语句高效，快速地删除表中的所有数据</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> table_name;     <span class="hljs-comment">/*快速删除大表中的所有行*/</span><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> table_name1, table_name2, ...;<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> students, teachers;</code></pre></div><h3 id="3-5-重命名表-RENAME-TABLE"><a href="#3-5-重命名表-RENAME-TABLE" class="headerlink" title="3.5 重命名表 RENAME TABLE"></a>3.5 重命名表 RENAME TABLE</h3><p>SQL RENAME TABLE用于更改表的名称。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式1</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<span class="hljs-keyword">RENAME</span> [<span class="hljs-keyword">TO</span>] new_table_name;<span class="hljs-comment">--语法格式2</span><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TABLE</span> old_table_name <span class="hljs-keyword">To</span> new_table_name;<span class="hljs-comment">/*示例1*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Students<span class="hljs-keyword">RENAME</span> Student_bank;<span class="hljs-comment">/*示例2*/</span><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TABLE</span> Student_bank <span class="hljs-keyword">TO</span> Students;</code></pre></div><h3 id="3-6-复制表-amp-临时表"><a href="#3-6-复制表-amp-临时表" class="headerlink" title="3.6 复制表&amp;临时表"></a>3.6 复制表&amp;临时表</h3><h4 id="1）-复制表"><a href="#1）-复制表" class="headerlink" title="1） 复制表"></a>1） 复制表</h4><p>如果要将SQL表复制到同一数据库中的另一个表中，可以使用<code>select</code>语句。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式1</span><span class="hljs-comment">--从一个表复制到另一个表的语法如下：</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">INTO</span> &lt;destination_table&gt; <span class="hljs-keyword">FROM</span> &lt;source_table&gt;<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">INTO</span> my_table_2 <span class="hljs-keyword">FROM</span> my_table_1;</code></pre></div><blockquote><p>注意：<code>SELECT INTO</code>与<code>INSERT INTO</code>语句完全不同。</p></blockquote><h4 id="2）-临时表"><a href="#2）-临时表" class="headerlink" title="2） 临时表"></a>2） 临时表</h4><p>临时表可以在运行时创建，并且可以像普通表一样执行各种操作，这些临时表是在<code>tempdb</code>数据库中创建的。</p><p>根据行为和范围，有如下两种类型的临时表。1. 局部临时变量。 2. 全局临时变量。</p><p>① 局部临时变量</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例*/</span><span class="hljs-comment">/*局部临时变量表仅在当前连接时可用。 当用户与实例断开连接时，它会自动删除。 它以哈希(#)符号开头*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-comment">#local temp table (  </span>    User_id <span class="hljs-built_in">int</span>,      User_name <span class="hljs-built_in">varchar</span> (<span class="hljs-number">50</span>),      User_address <span class="hljs-built_in">varchar</span> (<span class="hljs-number">150</span>)  )</code></pre></div><p>② 全局临时变量</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*全局临时表名称以双哈希(##)开头。 创建此表后，它就像一个永久表。 它始终为所有用户准备好，并且在撤消总连接之前不会被删除。*/</span><span class="hljs-keyword">cREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-comment">##new global temp table (  </span>    User_id <span class="hljs-built_in">int</span>,      User_name <span class="hljs-built_in">varchar</span> (<span class="hljs-number">50</span>),      User_address <span class="hljs-built_in">varchar</span> (<span class="hljs-number">150</span>)</code></pre></div><h3 id="3-7-查看表"><a href="#3-7-查看表" class="headerlink" title="3.7 查看表"></a>3.7 查看表</h3><h4 id="3-7-1-查看表的名称"><a href="#3-7-1-查看表的名称" class="headerlink" title="3.7.1 查看表的名称"></a>3.7.1 查看表的名称</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SHOW</span> [<span class="hljs-keyword">FULL</span>] <span class="hljs-keyword">TABLES</span> [&#123; <span class="hljs-keyword">FROM</span> | <span class="hljs-keyword">IN</span> &#125; table_name][ <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'pattern'</span> | <span class="hljs-keyword">WHERE</span> expr];<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLES</span>;</code></pre></div><h4 id="3-7-2-显示表的结构"><a href="#3-7-2-显示表的结构" class="headerlink" title="3.7.2 显示表的结构"></a>3.7.2 显示表的结构</h4><div class="hljs"><pre><code class="hljs SQL">--语法格式SHOW [FULL] COLUMNS &#123;FROM|IN&#125; table_name [&#123; FROM | IN &#125; table_name][ LIKE 'pattern' | WHERE expr];--或者使用DESCRIBE语句&#123;DESCRIBE | DESC&#125; table_name [ col_name | wild ];/*示例*/DESC test.classes;</code></pre></div><h2 id="四、数据操作语句"><a href="#四、数据操作语句" class="headerlink" title="四、数据操作语句"></a>四、数据操作语句</h2><h3 id="4-1-INSERT语句"><a href="#4-1-INSERT语句" class="headerlink" title="4.1 INSERT语句"></a>4.1 INSERT语句</h3><p>SQL提供了<code>INSERT</code>语句，用于将一行或多行插入表中。 <code>INSERT</code>语句用于：</p><ul><li>向表中插入一行</li><li>向表中插入多行</li><li>将行从一个表复制到另一个表中。</li></ul><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式1</span><span class="hljs-comment">--插入一行,不建议省略column_name。</span><span class="hljs-keyword">INSERT</span> [<span class="hljs-keyword">INTO</span>] table_name [(col_name,...)]&#123;<span class="hljs-keyword">VALUES</span> | <span class="hljs-keyword">VALUE</span>&#125;    (&#123;expr | <span class="hljs-keyword">DEFAULT</span>&#125;,...),(...),...;<span class="hljs-comment">--语法格式2</span><span class="hljs-keyword">INSERT</span> [<span class="hljs-keyword">INTO</span>] table_name    <span class="hljs-keyword">SET</span> col_name=&#123;expr | <span class="hljs-keyword">DEFAULT</span>&#125;,...<span class="hljs-comment">/*"expr"，表示一个常量、变量或一个表达式，也可以是空值NULL“DEFAULT”关键字，用于指定此列值为该列的默认值，前提是该列已经有默认值。*/</span><span class="hljs-comment">--从其他表复制行记录</span><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table1 (column1, column2,...)<span class="hljs-keyword">SELECT</span>    column1,    column2<span class="hljs-keyword">FROM</span>    table2<span class="hljs-keyword">WHERE</span>    condition1;<span class="hljs-comment">/*示例1*/</span><span class="hljs-keyword">INSERT</span> students(class_id,<span class="hljs-keyword">name</span>,gender,score)<span class="hljs-keyword">VALUE</span>    (<span class="hljs-string">'3'</span>,<span class="hljs-string">'小绿'</span>,<span class="hljs-string">'M'</span>,<span class="hljs-string">'95'</span>);<span class="hljs-comment">/*示例2*/</span><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> temp(<span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span>)<span class="hljs-keyword">VALUES</span>    (<span class="hljs-number">2</span>,<span class="hljs-string">'xiaoli'</span>),    (<span class="hljs-number">3</span>,<span class="hljs-string">'xiaowang'</span>),    (<span class="hljs-number">4</span>,<span class="hljs-string">'xiaojun'</span>);<span class="hljs-comment">/*示例3*/</span><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers    <span class="hljs-keyword">SET</span> cust_name=<span class="hljs-string">'李四'</span>,cust_address=<span class="hljs-string">'武汉市'</span>,cust_sex=<span class="hljs-keyword">DEFAULT</span>;</code></pre></div><h3 id="4-2-Insert-Into-Select"><a href="#4-2-Insert-Into-Select" class="headerlink" title="4.2 Insert Into Select"></a>4.2 Insert Into Select</h3><p>在表中插入多行，可以将<code>Insert</code>与<code>select</code>语句结合使用。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">"table 1"</span> (<span class="hljs-string">"column1"</span>, <span class="hljs-string">"column2"</span>,....)  <span class="hljs-keyword">SELECT</span> <span class="hljs-string">"column3"</span>, <span class="hljs-string">"column4"</span>,....  <span class="hljs-keyword">FROM</span> <span class="hljs-string">"table2"</span>;</code></pre></div><p><code>INSERT INTO</code>语句还可以包含许多子句，如：<code>SELECT</code>，<code>GROUP BY</code>，<code>HAVING</code>以及<code>JOIN</code>和<code>ALIAS</code>。 因此，<code>insert into select</code>语句可能会有些复杂。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">store</span> (store_name, sales, transaction_date)  <span class="hljs-keyword">SELECT</span> store_name, <span class="hljs-keyword">sum</span> (sales), transaction_date  <span class="hljs-keyword">FROM</span> sales_information  <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> store_name, transaction_date;</code></pre></div><h3 id="4-3-Update语句"><a href="#4-3-Update语句" class="headerlink" title="4.3 Update语句"></a>4.3 Update语句</h3><p>使用SQL <code>UPDATE</code>语句来修改表中现有行的数据</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">UPDATE</span> table_name    <span class="hljs-keyword">SET</span> col_name1=&#123;expr1 | <span class="hljs-keyword">DEFAULT</span>&#125;        [,col_name2 = &#123;expr2 | <span class="hljs-keyword">DEFAULT</span>&#125;] ...    [<span class="hljs-keyword">WHERE</span> condition]    [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ...]    [<span class="hljs-keyword">LIMIT</span> <span class="hljs-keyword">row_count</span>];<span class="hljs-comment">/*在上面的语法中首先，在SET子句中指定要修改的列。 SET子句中未列出的列的值不会被修改。其次，指定WHERE子句中要更新的行。第三，WHERE子句是可选的，如果省略它，表中的所有行都将受到影响。*/</span><span class="hljs-comment">/*示例1--小于3000的工资改为3000*/</span><span class="hljs-keyword">UPDATE</span>    workers<span class="hljs-keyword">SET</span>    salary=<span class="hljs-number">3000</span><span class="hljs-keyword">WHERE</span>    salary&lt;<span class="hljs-number">3000</span>;<span class="hljs-comment">/*示例2--确保子项dependents的last_name始终与employees表中的last_name匹配*/</span><span class="hljs-keyword">UPDATE</span> dependents<span class="hljs-keyword">SET</span> last_name = (    <span class="hljs-keyword">SELECT</span>        last_name    <span class="hljs-keyword">FROM</span>        employees    <span class="hljs-keyword">WHERE</span>        employee_id = dependents.employee_id);<span class="hljs-comment">/*示例3--给工资超过100000美元的教师涨3%的工资，其余教师涨5%*/</span><span class="hljs-keyword">UPDATE</span> instructor<span class="hljs-keyword">SET</span> salary=<span class="hljs-keyword">case</span>        <span class="hljs-keyword">when</span> salary&lt;=<span class="hljs-number">100000</span> <span class="hljs-keyword">then</span> salary * <span class="hljs-number">1.05</span>        <span class="hljs-keyword">else</span> salary * <span class="hljs-number">1.03</span><span class="hljs-keyword">end</span></code></pre></div><h3 id="4-4-UPDATE-amp-JOIN语句"><a href="#4-4-UPDATE-amp-JOIN语句" class="headerlink" title="4.4 UPDATE &amp; JOIN语句"></a>4.4 UPDATE &amp; JOIN语句</h3><p><code>UPDATE JOIN</code>可使用一个表和连接条件来更新另一个表。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*假设有一个客户表，要用最新数据来更新客户表。可使用客户ID来连接在目标表和源表之间执行连接*/</span><span class="hljs-comment">/*语法格式*/</span><span class="hljs-keyword">UPDATE</span> customer_table  <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>  Customer_table  <span class="hljs-keyword">ON</span> customer_table.rel_cust_name = customer_table.cust_id  <span class="hljs-keyword">SET</span> customer_table.rel_cust_name = customer_table.cust_name<span class="hljs-comment">--示例</span><span class="hljs-comment">/*在table2中共有3行，假设想要将table1中的值更新为table2中column1为21和31行的值。仅更新column2和column3的值。最简单和最常用的方法是在update语句中使用join子句并在update语句中使用多个表。*/</span><span class="hljs-keyword">UPDATE</span> table1 t1<span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span>  table2 t2<span class="hljs-keyword">ON</span> t1.column1 = t2.column1<span class="hljs-keyword">SET</span> t1.column2 = t2.column2,  t1.column3 = t2.column3<span class="hljs-keyword">where</span> t1.column1 <span class="hljs-keyword">in</span>(<span class="hljs-number">21</span>,<span class="hljs-number">31</span>);</code></pre></div><h3 id="4-5-更新日期数据"><a href="#4-5-更新日期数据" class="headerlink" title="4.5 更新日期数据"></a>4.5 更新日期数据</h3><p>要在SQL中更新日期和时间字段，则应使用以下查询。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">table</span><span class="hljs-keyword">SET</span> Column_Name = <span class="hljs-string">'YYYY-MM-DD HH:MM:SS'</span>  <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Id</span> = <span class="hljs-keyword">value</span><span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">UPDATE</span> table1<span class="hljs-keyword">SET</span> EndDate = <span class="hljs-string">'2019-03-16 00:00:00.000'</span><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">in</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);</code></pre></div><h3 id="4-6-DELETE语句"><a href="#4-6-DELETE语句" class="headerlink" title="4.6 DELETE语句"></a>4.6 DELETE语句</h3><p>使用SQL <code>DELETE</code>语句删除表中的一行或多行。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">DELETE</span><span class="hljs-keyword">FROM</span>    table_name<span class="hljs-keyword">WHERE</span>    condition;<span class="hljs-comment">/*1. 提供要删除行的表名称(table_name)。2. 在WHERE子句中指定条件以标识需要删除的行记录。 如果省略WHERE子句，则将删除表中的所有行记录。 因此，应始终谨慎使用DELETE语句。*/</span><span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> dependents<span class="hljs-keyword">WHERE</span>    employee_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">100</span> , <span class="hljs-number">101</span>, <span class="hljs-number">102</span>);</code></pre></div><h2 id="五、SQL查询语句"><a href="#五、SQL查询语句" class="headerlink" title="五、SQL查询语句"></a>五、SQL查询语句</h2><p>SQL查询语句的通用形式：</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> &lt;[<span class="hljs-keyword">distinct</span>] c1，c2…&gt;<span class="hljs-keyword">from</span> &lt;r1,……&gt;[<span class="hljs-keyword">where</span> &lt;condition&gt;][<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> &lt;c1，c2.…&gt; [<span class="hljs-keyword">having</span> &lt;cond2&gt;]][<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>&lt;c1[<span class="hljs-keyword">desc</span>] ,[c2[<span class="hljs-keyword">desc</span>|<span class="hljs-keyword">asc</span>],…]&gt;</code></pre></div><p>SQL查询语句执行顺序：<br><code>from→where→group（aggregate）→having→select→order by</code></p><h3 id="5-1-SELECT语句"><a href="#5-1-SELECT语句" class="headerlink" title="5.1 SELECT语句"></a>5.1 SELECT语句</h3><p>除了<code>SELECT</code>和<code>FROM</code>子句之外，<code>SELECT</code>语句还可以包含许多其他子句，例如 -</p><ul><li><a href="https://www.yiibai.com/sql/sql-where.html" target="_blank" rel="noopener">WHERE</a> - 用于根据指定条件过滤数据</li><li><a href="https://www.yiibai.com/sql/sql-inner-join.html" target="_blank" rel="noopener">JOIN</a> - 用于查询来自多个相关表的数据</li><li><a href="https://www.yiibai.com/sql/sql-group-by.html" target="_blank" rel="noopener">GROUP BY</a> - 用于根据一列或多列对数据进行分组</li><li><a href="https://www.yiibai.com/sql/sql-having.html" target="_blank" rel="noopener">HAVING</a> - 用于过滤分组</li><li><a href="https://www.yiibai.com/sql/sql-order-by.html" target="_blank" rel="noopener">ORDER BY</a> - 用于对结果集进行排序</li><li><a href="https://www.yiibai.com/sql/sql-limit.html" target="_blank" rel="noopener">LIMIT</a> - 用于限制返回的行</li></ul><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span>    [<span class="hljs-keyword">ALL</span> | <span class="hljs-keyword">DISTINCT</span> | <span class="hljs-keyword">DISTINCTROW</span> ]    select_expr [, select_expr ...]    [<span class="hljs-keyword">FROM</span> table_references    [<span class="hljs-keyword">WHERE</span> where_condition]    [<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> &#123;col_name | expr | <span class="hljs-keyword">position</span>&#125;      [<span class="hljs-keyword">ASC</span> | <span class="hljs-keyword">DESC</span>], ... [<span class="hljs-keyword">WITH</span> <span class="hljs-keyword">ROLLUP</span>]]    [<span class="hljs-keyword">HAVING</span> where_condition]    [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> &#123;col_name | expr | <span class="hljs-keyword">position</span>&#125;      [<span class="hljs-keyword">ASC</span> | <span class="hljs-keyword">DESC</span>], ...]    [<span class="hljs-keyword">LIMIT</span> &#123;[<span class="hljs-keyword">offset</span>,] <span class="hljs-keyword">row_count</span> | <span class="hljs-keyword">row_count</span> <span class="hljs-keyword">OFFSET</span> <span class="hljs-keyword">offset</span>&#125;]<span class="hljs-comment">/*select子句的使用顺序需要按照上述语法格式依次输入执行。[ALL | DISTINCT | DISTINCTROW ]指定是否返回结果集中的重复行，默认ALL。SELECT * FROM table_name查询tbl_name中所有行列。*/</span><span class="hljs-comment">--语法格式附加</span><span class="hljs-comment">--替换查询结果集中的数据</span><span class="hljs-keyword">CASE</span><span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 表达式<span class="hljs-number">1</span>    <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 表达式<span class="hljs-number">2</span>    ...    <span class="hljs-keyword">WHEN</span> 条件n <span class="hljs-keyword">THEN</span> 表达式n<span class="hljs-keyword">ELSE</span> 表达式n<span class="hljs-keyword">END</span><span class="hljs-comment">/*示例*/</span><span class="hljs-comment">/*查询特定的列*/</span><span class="hljs-keyword">SELECT</span>    employee_id,    first_name,    last_name,    hire_date<span class="hljs-keyword">FROM</span>    employees;<span class="hljs-comment">/*示例2*/</span><span class="hljs-comment">/*以下查询使用FLOOR()，DATEDIFF()和CURRENT_DATE函数计算员工的服务年份。要计算服务年份，将DATEDIFF()函数的结果除以365。FLOOR()函数返回小于或等于数值表达式结果的最大整数。YoS是下面表达式的列别名。*/</span><span class="hljs-keyword">SELECT</span>    employee_id,    first_name,    last_name,    <span class="hljs-keyword">FLOOR</span>(<span class="hljs-keyword">DATEDIFF</span>(<span class="hljs-keyword">NOW</span>(), hire_date) / <span class="hljs-number">365</span>) <span class="hljs-keyword">AS</span> YoS<span class="hljs-keyword">FROM</span>    employees;<span class="hljs-comment">/*示例3--判断结果集中的值，如果值为M，输出男，否则为女，同时列名为性别*/</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">name</span>,    <span class="hljs-keyword">CASE</span>    <span class="hljs-keyword">WHEN</span> gender=<span class="hljs-string">'M'</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">'男'</span>    <span class="hljs-keyword">ELSE</span> <span class="hljs-string">'女'</span>    <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> 性别<span class="hljs-keyword">FROM</span> students;</code></pre></div><h3 id="5-2-ORDER-BY排序"><a href="#5-2-ORDER-BY排序" class="headerlink" title="5.2 ORDER BY排序"></a>5.2 ORDER BY排序</h3><p>SQL <code>ORDER BY</code>子句根据指定的标准按升序或降序对结果集进行排序。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span>    column1, column2<span class="hljs-keyword">FROM</span>    table_name<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column1 <span class="hljs-keyword">ASC</span> ,  <span class="hljs-comment">--默认升序</span>         column2 <span class="hljs-keyword">DESC</span>;  <span class="hljs-comment">--降序</span><span class="hljs-comment">/*在此语法中，ORDER BY子句放在FROM子句之后。 如果SELECT语句包含WHERE子句，则ORDER BY子句必须放在WHERE子句之后。要指定要排序的列以及排序顺序的类型：1. 升序(使用：ASC表示，默认是升序)2. 降序(使用：DESC表示)*/</span><span class="hljs-comment">/*示例--班级id按人数多少升序排列*/</span><span class="hljs-keyword">select</span> class_id,<span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">AS</span> <span class="hljs-string">"人数"</span>    <span class="hljs-keyword">FROM</span> students    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> class_id    <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">count</span>(*)&gt;=<span class="hljs-number">1</span>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">count</span>(*);</code></pre></div><h3 id="5-3-DISTINCT运算符"><a href="#5-3-DISTINCT运算符" class="headerlink" title="5.3 DISTINCT运算符"></a>5.3 DISTINCT运算符</h3><p>使用SQL <code>DISTINCT</code>运算符从结果集中删除重复数据项。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span>    column1,column2......<span class="hljs-keyword">FROM</span>    table1;<span class="hljs-comment">/*DISTINCT运算符将所有NULL值视为相同的值。因此在结果集中，DISTINCT运算符只保留一个NULL值，并从结果集中删除其它的NULL值。*/</span><span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span>    job_id,    salary<span class="hljs-keyword">FROM</span>    employees<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>    job_id,    salary <span class="hljs-keyword">DESC</span>;</code></pre></div><h3 id="5-4-LIMIT子句"><a href="#5-4-LIMIT子句" class="headerlink" title="5.4 LIMIT子句"></a>5.4 LIMIT子句</h3><p>使用SQL <code>LIMIT</code>子句来限制<code>SELECT</code>语句返回的行数。</p><div class="hljs"><pre><code class="hljs SQL">--语法格式--使用LIMIT和OFFSET子句。LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;/*1. row_count用于返回数据的行数。2. OFFSET可选项，默认为0。用于指定返回数据的第一行在SELECT语句结果集中的偏移量，其必须是非负的整数常量。3.row_count OFFSET offset:从第offset+1行开始，取row_count行。*//*示例--跳过三行并获取接下来的五行,即显示4-8行*/SELECT    employee_id, first_name, last_nameFROM    employeesORDER BY first_nameLIMIT 5 OFFSET 3;/*LIMIT 5 OFFSET 3等同于LIMIT 3,5*//*示例2-获取薪水最高的前5名*/SELECT    employee_id, first_name, last_name, salaryFROM    employeesORDER BY salary DESCLIMIT 5;/*示例3-获取薪水排名第三高的人名*//*通过嵌套子查询，先查出第三高的是多少salary，然后查name*/SELECT    employee_id, first_name, last_name, salaryFROM    employeesWHERE    salary = (SELECT DISTINCT            salary        FROM            employees        ORDER BY salary DESC        LIMIT 2 , 1);</code></pre></div><h3 id="5-5-ALL-ANY-SOME语句"><a href="#5-5-ALL-ANY-SOME语句" class="headerlink" title="5.5 ALL,ANY,SOME语句"></a>5.5 ALL,ANY,SOME语句</h3><p>SQL <code>ALL</code>与集合中所有元素比较；<code>ANY</code>和<code>SOME</code>与集合中的某些元素比较。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--找出所有 工资至少比生物系一个教师的工资要高 的教师*/</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">name</span><span class="hljs-keyword">FROM</span> instructor<span class="hljs-keyword">WHERE</span> salary &gt; <span class="hljs-keyword">SOME</span>(<span class="hljs-keyword">SELECT</span> salary                    <span class="hljs-keyword">FROM</span> instructor                    <span class="hljs-keyword">WHERE</span> dept_name=<span class="hljs-string">'Biology'</span>);<span class="hljs-comment">/*示例2--找出平均工资最高的系*/</span><span class="hljs-keyword">SELECT</span> dept_name<span class="hljs-keyword">FROM</span> instructor<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_name<span class="hljs-keyword">having</span> <span class="hljs-keyword">avg</span>(salary) &gt;= <span class="hljs-keyword">ALL</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">avg</span>(salary)                          <span class="hljs-keyword">FROM</span> instructor                          <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_name);</code></pre></div><h3 id="5-6-BETWEEN-IN-LIKE-NULL"><a href="#5-6-BETWEEN-IN-LIKE-NULL" class="headerlink" title="5.6 BETWEEN | IN | LIKE | NULL"></a>5.6 BETWEEN | IN | LIKE | NULL</h3><h4 id="5-6-1-BETWEEN"><a href="#5-6-1-BETWEEN" class="headerlink" title="5.6.1 BETWEEN"></a>5.6.1 BETWEEN</h4><p>SQL <code>BETWEEN</code>运算符选择指定范围内的值。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>expression BETWEEN low AND high;expression NOT BETWEEN low AND high;<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">SELECT</span>    employee_id, first_name, last_name, hire_date<span class="hljs-keyword">FROM</span>    employees<span class="hljs-keyword">WHERE</span>    hire_date <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">'1999-01-01'</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">'2000-12-31'</span><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> hire_date;<span class="hljs-comment">/*1. BETWEEN运算符需要低值和高值。如果低值大于高值，将得到一个空的结果集。2. 2000-12-31默认为2000-12-31  00:00:00.000000*/</span></code></pre></div><h4 id="5-6-2-IN"><a href="#5-6-2-IN" class="headerlink" title="5.6.2 IN"></a>5.6.2 IN</h4><p>SQL <code>IN</code>运算符将列中的值与括号内的一组值进行比较。<br>要比较连续的值可用<code>LIMIT</code>，比如5-100。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>expression IN (value1,value2,...)expression NOT IN (value1, value2,...)<span class="hljs-comment">/*示例--查找工作ID不是8,9或10的所有员工*/</span><span class="hljs-keyword">SELECT</span>    employee_id, first_name, last_name, job_id<span class="hljs-keyword">FROM</span>    employees<span class="hljs-keyword">WHERE</span>    job_id <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>)<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>    job_id;</code></pre></div><h4 id="5-6-3-LIKE"><a href="#5-6-3-LIKE" class="headerlink" title="5.6.3 LIKE"></a>5.6.3 LIKE</h4><p>SQL <code>LIKE</code>运算符来测试表达式是否与模式匹配。</p><p>要构造模式，请使用两个SQL通配符：</p><ul><li><code>%</code> 百分号匹配零个，一个或多个字符。</li><li><code>_</code> 下划线符号匹配单个字符</li></ul><p>下表说明了一些模式及其含义：</p><table><thead><tr><th>模式</th><th>含义</th></tr></thead><tbody><tr><td>LIKE ‘Yii%’</td><td>匹配以Yii开始的字符串</td></tr><tr><td>LIKE ‘%su’</td><td>匹配以su结尾的字符串</td></tr><tr><td>LIKE ‘%ch%</td><td>匹配包含ch的字符串</td></tr><tr><td>LIKE ‘Luc_’</td><td>以Luc开始，后面只有一个字符，例如：Lucy，LucC等</td></tr><tr><td>LIKE ‘_cy’</td><td>以cy结尾，前面只有一个字符，例如：Lcy，ucy等</td></tr><tr><td>LIKE ‘%yiiBai_’</td><td>包含yiiBai，以任意数量的字符开头，最多以一个字符结尾。</td></tr><tr><td>LIKE ‘_yiiBai%’</td><td>包含yiiBai，最多以一个字符开头，以任意数量的字符结尾。</td></tr></tbody></table><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>expression LIKE pattern<span class="hljs-comment">/*如果要匹配通配符%或_，则必须使用反斜杠字符\来对其进行转义。 如果要使用其它的转义字符而不是反斜杠，可以在LIKE表达式中使用ESCAPE子句，如下所示：*/</span>expression LIKE pattern ESCAPE escape_character<span class="hljs-comment">/*示例--要查找名字以M开头但不以Ma开头的所有员工，请使用以下语句：*/</span><span class="hljs-keyword">SELECT</span>    employee_id, first_name, last_name<span class="hljs-keyword">FROM</span>    employees<span class="hljs-keyword">WHERE</span>    first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'M%'</span><span class="hljs-keyword">AND</span> first_name <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'Ma%'</span><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>    first_name;</code></pre></div><h4 id="5-6-4-NULL"><a href="#5-6-4-NULL" class="headerlink" title="5.6.4 NULL"></a>5.6.4 NULL</h4><p>使用SQL <code>IS NULL</code>和<code>IS NOT NULL</code>运算符来测试表达式是否为<code>NULL</code>。</p><p><code>NULL</code>表示数据未知的值，在数据库中缺少数据。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>expression IS NULL;<span class="hljs-comment">/*示例--查找具有电话号码的所有员工，请使用IS NOT NULL，如以下语句所示：*/</span><span class="hljs-keyword">SELECT</span>    employee_id,    first_name,    last_name,    phone_number<span class="hljs-keyword">FROM</span>    employees<span class="hljs-keyword">WHERE</span>    phone_number <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;</code></pre></div><p>注意：</p><ol><li>不能使用比较运算符的等于(=)将值与<code>NULL</code>值进行比较</li><li><code>NULL</code>值是特殊的，任何与<code>NULL</code>值的比较都不会返回<code>true</code>或<code>false</code>，而是返回未知</li></ol><h3 id="5-7-SQL别名"><a href="#5-7-SQL别名" class="headerlink" title="5.7 SQL别名"></a>5.7 SQL别名</h3><p>SQL别名，包括表和列别名，使查询更短，更易理解。</p><p>使用关键词<code>AS</code>，可省略。</p><h4 id="5-7-1-列别名"><a href="#5-7-1-列别名" class="headerlink" title="5.7.1 列别名"></a>5.7.1 列别名</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">SELECT</span>    inv_no <span class="hljs-keyword">AS</span> invoice_no,    amount,    due_date <span class="hljs-keyword">AS</span> <span class="hljs-string">'截止日期'</span>,    cust_no <span class="hljs-string">'客户编号'</span><span class="hljs-keyword">FROM</span>    invoices;<span class="hljs-comment">/*别名包含空格，必须使用单引号(')或双引号(")来包围别名。*/</span></code></pre></div><h4 id="5-7-2-表别名"><a href="#5-7-2-表别名" class="headerlink" title="5.7.2 表别名"></a>5.7.2 表别名</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span>    d.department_name<span class="hljs-keyword">FROM</span>    departments <span class="hljs-keyword">AS</span> d<span class="hljs-comment">/*示例一--以下查询使用inner join子句从employees和departments表中选择数据。*/</span><span class="hljs-keyword">SELECT</span>    employee_id,    first_name,    last_name,    e.department_id,    department_name<span class="hljs-keyword">FROM</span>    employees e<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>    first_name;<span class="hljs-comment">/*示例二--以下查询使用self-join将employee表自联接。*/</span><span class="hljs-keyword">SELECT</span>    e.first_name <span class="hljs-keyword">AS</span> employee,    m.first_name <span class="hljs-keyword">AS</span> manager<span class="hljs-keyword">FROM</span>    employees e<span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> employees m <span class="hljs-keyword">ON</span> m.employee_id = e.manager_id<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>    manager;</code></pre></div><h3 id="5-8-JOIN操作"><a href="#5-8-JOIN操作" class="headerlink" title="5.8 JOIN操作"></a>5.8 JOIN操作</h3><p><code>SELECT</code>语句不仅能从单个表中查询数据，而且可以将多个表链接在一起。连接表的过程称为<code>Join</code>。</p><p>SQL提供了多种连接，如内连接，左连接，右连接，全外连接等。</p><h4 id="5-8-1-INNER-JOIN"><a href="#5-8-1-INNER-JOIN" class="headerlink" title="5.8.1 INNER JOIN"></a>5.8.1 INNER JOIN</h4><p>SQL <code>INNER JOIN</code>内连接子句来查询来自两个或多个表的数据。</p><p>内连接子句消除了与另一个表的行不匹配的行，相当于交集。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span>  A.n<span class="hljs-keyword">FROM</span> A<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> B.n = A.n<span class="hljs-comment">/*示例--employees表中的department_id列是将员工链接到departments表的外键列。*/</span><span class="hljs-keyword">SELECT</span>    first_name,    last_name,    employees.department_id,    departments.department_id,    department_name<span class="hljs-keyword">FROM</span>    employees        <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>    departments <span class="hljs-keyword">ON</span> departments.department_id = employees.department_id<span class="hljs-keyword">WHERE</span>    employees.department_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">--语法格式</span><span class="hljs-comment">/*INNER JOIN子句可以连接三个或更多表，只要它们具有关系，通常是外键关系。*/</span><span class="hljs-keyword">SELECT</span>  A.n<span class="hljs-keyword">FROM</span> A<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> B.n = A.n<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> C <span class="hljs-keyword">ON</span> C.n = A.n;<span class="hljs-comment">/*示例--使用内部联接子句连接3个表：员工，部门和工作岗位，以获取在部门ID为：1,2和3中工作的员工的信息。*/</span><span class="hljs-keyword">SELECT</span>    first_name, last_name, job_title, department_name<span class="hljs-keyword">FROM</span>    employees e<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> jobs j <span class="hljs-keyword">ON</span> j.job_id = e.job_id<span class="hljs-keyword">WHERE</span>    e.department_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);</code></pre></div><h4 id="5-8-2-LEFT-JOIN"><a href="#5-8-2-LEFT-JOIN" class="headerlink" title="5.8.2 LEFT JOIN"></a>5.8.2 LEFT JOIN</h4><p>左连接将返回左表中的所有行，而不管右表中是否存在匹配的行，相当于AB交集后显示A。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span>    A.n<span class="hljs-keyword">FROM</span>    A<span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> B.n = A.n;<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">SELECT</span>    c.country_name, c.country_id, l.country_id, l.street_address, l.city<span class="hljs-keyword">FROM</span>    countries c<span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> locations l <span class="hljs-keyword">ON</span> l.country_id = c.country_id<span class="hljs-keyword">WHERE</span>    c.country_id <span class="hljs-keyword">IN</span> (<span class="hljs-string">'US'</span>, <span class="hljs-string">'UK'</span>, <span class="hljs-string">'CN'</span>)<span class="hljs-comment">/*右表中的非匹配行使用NULL值填充*/</span></code></pre></div><h4 id="5-8-3-FULL-OUTER-JOIN"><a href="#5-8-3-FULL-OUTER-JOIN" class="headerlink" title="5.8.3 FULL OUTER JOIN"></a>5.8.3 FULL OUTER JOIN</h4><p>完全外连接是左连接和右连接的组合。完整外连接包括连接表中的所有行，相当于并集。</p><p>如果连接表中的行不匹配，则使用NULL值填充。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span> column_list<span class="hljs-keyword">FROM</span> A<span class="hljs-keyword">FULL</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> B.n = A.n;<span class="hljs-comment">/*示例--查找不存储任何水果的空篮子*/</span><span class="hljs-keyword">SELECT</span>    basket_name,    fruit_name<span class="hljs-keyword">FROM</span>    fruits<span class="hljs-keyword">FULL</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> baskets <span class="hljs-keyword">ON</span> baskets.basket_id = fruits.basket_id<span class="hljs-keyword">WHERE</span>    fruit_name <span class="hljs-keyword">IS</span> <span class="hljs-literal">NULL</span>;</code></pre></div><h4 id="5-8-4-Cross-Join"><a href="#5-8-4-Cross-Join" class="headerlink" title="5.8.4 Cross Join"></a>5.8.4 Cross Join</h4><p>SQL <code>Cross Join</code>交叉连接是一种连接操作，它生成两个或多个表的笛卡尔积。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span> column_list<span class="hljs-keyword">FROM</span> table_A<span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> table_B;<span class="hljs-comment">/*在SQL中，假设A表有n行，而B表有m行，那么A和B表的交叉连接结果有n x m行*/</span><span class="hljs-comment">/*以下语句等同于使用上面的CROSS JOIN子句的语句*/</span><span class="hljs-keyword">SELECT</span>    column_list<span class="hljs-keyword">FROM</span>    table_A,table_B;</code></pre></div><h4 id="5-8-5-自连接"><a href="#5-8-5-自连接" class="headerlink" title="5.8.5 自连接"></a>5.8.5 自连接</h4><p>SQL自连接技术将表连接到自身。</p><p>我们将一张表连接到自身来评估同一个表中其他行的行。 要执行自联接，我们使用内连接或左连接子句。</p><p>因为同一张表在单个查询中出现两次，所以必须使用表别名。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span>    column1,    column2,    column3,        ...<span class="hljs-keyword">FROM</span>    table1 A<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> table1 B <span class="hljs-keyword">ON</span> B.column1 = A.column2;<span class="hljs-comment">/*在此语句中，使用INNER JOIN子句将table1连接到自身。 A和B是table1的表别名。 B.column1 = A.column2是连接条件。*/</span><span class="hljs-comment">/*示例一--查询每位员工的上级经理信息。*/</span><span class="hljs-keyword">SELECT</span>    <span class="hljs-keyword">CONCAT</span>(e.first_name, <span class="hljs-string">' '</span>, e.last_name) <span class="hljs-keyword">as</span> employee,    <span class="hljs-keyword">CONCAT</span>(m.first_name, <span class="hljs-string">' '</span>, m.last_name) <span class="hljs-keyword">as</span> manager<span class="hljs-keyword">FROM</span>    employees e        <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>    employees m <span class="hljs-keyword">ON</span> m.employee_id = e.manager_id<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> manager;<span class="hljs-comment">/*示例二--查询每位员工的上级经理信息。包含最高领导。*/</span><span class="hljs-keyword">SELECT</span>    <span class="hljs-keyword">CONCAT</span>(e.first_name, <span class="hljs-string">' '</span>, e.last_name) <span class="hljs-keyword">as</span> employee,    <span class="hljs-keyword">CONCAT</span>(m.first_name, <span class="hljs-string">' '</span>, m.last_name) <span class="hljs-keyword">as</span> manager<span class="hljs-keyword">FROM</span>    employees e        <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span>    employees m <span class="hljs-keyword">ON</span> m.employee_id = e.manager_id<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> manager;</code></pre></div><h2 id="六、聚合函数"><a href="#六、聚合函数" class="headerlink" title="六、聚合函数"></a>六、聚合函数</h2><p>SQL聚合函数计算一组值并返回单个值。</p><p>因为聚合函数对一组值进行操作，所以它通常与<code>SELECT</code>语句的<code>GROUP BY</code>子句一起使用。<code>GROUP BY</code>子句将结果集划分为值分组，聚合函数为每个分组返回单个值。</p><p>以下是常用的SQL聚合函数：</p><ul><li>AVG() - 返回集合的平均值。</li><li>COUNT() - 返回集合中的项目数。</li><li>MAX() - 返回集合中的最大值。</li><li>MIN() - 返回集合中的最小值</li><li>SUM() - 返回集合中所有或不同值的总和。</li></ul><h3 id="6-1-AVG-（平均）"><a href="#6-1-AVG-（平均）" class="headerlink" title="6.1  AVG （平均）"></a>6.1 AVG （平均）</h3><p><code>AVG()</code>函数返回集合中的平均值</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>AVG([ALL|DISTINCT] expression)<span class="hljs-comment">/*ALL关键字计算所有值的平均值，而DISTINCT关键字强制函数仅对不同的值进行操作。默认情况下，使用ALL选项*/</span><span class="hljs-comment">/*示例1*/</span><span class="hljs-keyword">SELECT</span>    <span class="hljs-keyword">AVG</span>(salary)<span class="hljs-keyword">FROM</span>    employees;<span class="hljs-keyword">SELECT</span>    <span class="hljs-keyword">ROUND</span>(<span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">DISTINCT</span> salary), <span class="hljs-number">2</span>)<span class="hljs-keyword">FROM</span>    employees;<span class="hljs-comment">--使用ROUND函数，结果舍入为2位小数</span><span class="hljs-comment">/*示例2 ： 与分组一起使用*/</span><span class="hljs-keyword">SELECT</span>    department_id,    <span class="hljs-keyword">AVG</span>(salary)<span class="hljs-keyword">FROM</span>    employees<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>    department_id;<span class="hljs-comment">/*示例3：与JOIN一起使用*/</span><span class="hljs-keyword">SELECT</span>    e.department_id,    department_name,    <span class="hljs-keyword">AVG</span>(salary)<span class="hljs-keyword">FROM</span>    employees e<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>    e.department_id;<span class="hljs-comment">/*示例4 ： 与HAVING一起使用*/</span><span class="hljs-keyword">SELECT</span>    e.department_id,    department_name,    <span class="hljs-keyword">AVG</span>(salary) <span class="hljs-keyword">AS</span> avgsalary<span class="hljs-keyword">FROM</span>    employees e<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>    e.department_id<span class="hljs-keyword">HAVING</span> avgsalary&lt;<span class="hljs-number">5000</span><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>    <span class="hljs-keyword">AVG</span>(salary) <span class="hljs-keyword">DESC</span>;<span class="hljs-comment">/*示例5： 子查询*/</span><span class="hljs-keyword">SELECT</span>    <span class="hljs-keyword">AVG</span>(employee_sal_avg)<span class="hljs-keyword">FROM</span>    (        <span class="hljs-keyword">SELECT</span>            <span class="hljs-keyword">AVG</span>(salary) employee_sal_avg        <span class="hljs-keyword">FROM</span>            employees        <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>            department_id    ) t;</code></pre></div><h3 id="6-2-COUNT（统计）"><a href="#6-2-COUNT（统计）" class="headerlink" title="6.2 COUNT（统计）"></a>6.2 COUNT（统计）</h3><p>SQL <code>COUNT</code>函数来获取组中的项目数。它返回符合条件行数。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>COUNT ([ALL | DISTINCT] expression);<span class="hljs-comment">/*COUNT(*)函数返回表中的行数，包括包含NULL值的行。*/</span><span class="hljs-comment">/*示例1 ： 与GROUP BY一起使用*/</span><span class="hljs-keyword">SELECT</span>    e.department_id,    department_name,    <span class="hljs-keyword">COUNT</span>(*)<span class="hljs-keyword">FROM</span>    employees e<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>    e.department_id;<span class="hljs-comment">/*示例2 ：与HAVING一起使用 */</span><span class="hljs-comment">/*要按COUNT(*)函数的结果过滤分组，需要在COUNT(*)函数使用HAVING子句*/</span><span class="hljs-keyword">SELECT</span>    e.department_id,    department_name,    <span class="hljs-keyword">COUNT</span>(*)<span class="hljs-keyword">FROM</span>    employees e<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>    e.department_id<span class="hljs-keyword">HAVING</span>    <span class="hljs-keyword">COUNT</span>(*) &gt; <span class="hljs-number">5</span><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>    <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">DESC</span>;</code></pre></div><h3 id="6-3-SUM（求和）"><a href="#6-3-SUM（求和）" class="headerlink" title="6.3 SUM（求和）"></a>6.3 SUM（求和）</h3><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>SUM([ALL|DISTINCT] expression)<span class="hljs-comment">/*只能将SUM函数应用于数字列，SUM函数忽略NULL值。*/</span><span class="hljs-comment">/*示例1 ：与HAVING 以及 GROUP BY一起使用*/</span><span class="hljs-keyword">SELECT</span>    e.department_id,    department_name,    <span class="hljs-keyword">SUM</span>(salary)<span class="hljs-keyword">FROM</span>    employees e<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>    e.department_id<span class="hljs-keyword">HAVING</span>    <span class="hljs-keyword">SUM</span>(salary) &gt; <span class="hljs-number">30000</span><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>    <span class="hljs-keyword">SUM</span>(salary) <span class="hljs-keyword">DESC</span>;</code></pre></div><h3 id="6-4-MAX-amp-MIN"><a href="#6-4-MAX-amp-MIN" class="headerlink" title="6.4 MAX &amp; MIN"></a>6.4 MAX &amp; MIN</h3><p>SQL <code>Max</code>函数查找组中的最大值，<code>Min</code>函数查找组中的最小值。。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>MAX(expression)MIN(expression)<span class="hljs-comment">/*示例1 ： 用于子查询中*/</span><span class="hljs-keyword">SELECT</span>    employee_id,    first_name,    last_name,    salary<span class="hljs-keyword">FROM</span>    employees<span class="hljs-keyword">WHERE</span>    salary = (        <span class="hljs-keyword">SELECT</span>            <span class="hljs-keyword">MAX</span>(salary)        <span class="hljs-keyword">FROM</span>            employees    );<span class="hljs-comment">/*示例2 ： 返回每个部门中员工的最高工资，并根据最高工资对结果集进行排序。*/</span><span class="hljs-keyword">SELECT</span>    d.department_id,    department_name,    <span class="hljs-keyword">MAX</span>(salary)<span class="hljs-keyword">FROM</span>    employees e<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>    e.department_id<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>    <span class="hljs-keyword">MAX</span>(salary) <span class="hljs-keyword">DESC</span>;<span class="hljs-comment">/*示例3 ： 获得具有最高薪水大于12000的员工的部门*/</span><span class="hljs-keyword">SELECT</span>    d.department_id,    department_name,    <span class="hljs-keyword">MAX</span>(salary)<span class="hljs-keyword">FROM</span>    employees e<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> d.department_id = e.department_id<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>    e.department_id<span class="hljs-keyword">HAVING</span>    <span class="hljs-keyword">MAX</span>(salary) &gt; <span class="hljs-number">12000</span>;</code></pre></div><h3 id="6-6-Group-By子句"><a href="#6-6-Group-By子句" class="headerlink" title="6.6 Group By子句"></a>6.6 Group By子句</h3><p><code>GROUP BY</code>子句是<code>SELECT</code>语句的可选子句，它根据指定列中的匹配值将行组合成组，每组返回一行。</p><div class="hljs"><pre><code class="hljs SQL">--语法格式[GROUP BY &#123;col_name | expr | position&#125;      [ASC | DESC], ... [WITH ROLLUP]]/*1. col_name:指定用于分组的选择列，可指定多列，彼此间用逗号分隔。2.expr:指定用于分组的表达式3.position:指定用于分组的选择列在SELECT语句结果集中的位置，通常是一个正整数。4.ASC | DESC:升降序排列，默认ASC升序。5.WITH ROLLUP:用于指定在结果集中不仅包含由GROUP BY子句分组后的数据行，还包括各分组的汇总行，以及所有分组的整体汇总行。*//*示例--结果集包含相同地址的男性客户人数、女性客户人数、总人数以及客户的总人数*/SELECT cust_address,cust_sex,COUNT(*) AS "人数"    FROM customers    GROUP BY cust_address,cust_sex    WITH ROLLUP;</code></pre></div><h3 id="6-6-HAVING"><a href="#6-6-HAVING" class="headerlink" title="6.6 HAVING"></a>6.6 HAVING</h3><p>SQL <code>HAVING</code>子句，该子句用于为<code>GROUP BY</code>子句汇总的组指定条件，一般搭配<code>GROUP BY</code>子句使用。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span>    column1,    column2,    AGGREGATE_FUNCTION (column3)<span class="hljs-keyword">FROM</span>    table1<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>    column1,    column2<span class="hljs-keyword">HAVING</span>    group_condition;<span class="hljs-comment">/*注：需要注意的是，在GROUP BY子句之前应用WHERE子句之后应用HAVING子句之前*/</span><span class="hljs-comment">/*示例--统计人数大于1的班级*/</span><span class="hljs-keyword">SELECT</span> class_id,<span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">AS</span> <span class="hljs-string">"人数"</span>    <span class="hljs-keyword">FROM</span> students    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> class_id    <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">count</span>(*)&gt;<span class="hljs-number">1</span>;</code></pre></div><h2 id="七、高级查询"><a href="#七、高级查询" class="headerlink" title="七、高级查询"></a>七、高级查询</h2><h3 id="7-1-GROUPING-SETS运算符"><a href="#7-1-GROUPING-SETS运算符" class="headerlink" title="7.1 GROUPING SETS运算符"></a>7.1 GROUPING SETS运算符</h3><p>使用SQL <code>GROUPING SETS</code>运算符生成多个分组集</p><p>分组集是一组使用<code>GROUP BY</code>子句进行分组的列。 通常，单个聚合查询定义单个分组集</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span>    c1,    c2,    <span class="hljs-keyword">aggregate</span> (c3)<span class="hljs-keyword">FROM</span>    <span class="hljs-keyword">table</span><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>    <span class="hljs-keyword">GROUPING</span> <span class="hljs-keyword">SETS</span> (        (c1, c2),        (c1),        (c2),        ());</code></pre></div><h3 id="7-2-ROLLUP运算符"><a href="#7-2-ROLLUP运算符" class="headerlink" title="7.2 ROLLUP运算符"></a>7.2 ROLLUP运算符</h3><p><code>ROLLUP</code>是<code>GROUP BY</code>子句的扩展。<code>ROLLUP</code>选项允许包含表示小计的额外行，通常称为超级聚合行，以及总计行。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span>    c1, c2, aggregate_function(c3)<span class="hljs-keyword">FROM</span>    <span class="hljs-keyword">table</span><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">ROLLUP</span> (c1, c2);<span class="hljs-comment">/*ROLLUP假定输入列之间存在层次结构。 例如，如果输入列是(c1，c2)，则层次结构c1&gt; c2。ROLLUP生成考虑此层次结构有意义的所有分组集。 这就是为什么我们经常使用ROLLUP来生成小计和总计以用于报告目的*/</span><span class="hljs-comment">/*示例1*/</span><span class="hljs-keyword">SELECT</span>    <span class="hljs-keyword">COALESCE</span>(warehouse, <span class="hljs-string">'All warehouses'</span>) <span class="hljs-keyword">AS</span> warehouse,    <span class="hljs-keyword">SUM</span>(quantity)<span class="hljs-keyword">FROM</span>    inventory<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">ROLLUP</span> (warehouse);<span class="hljs-comment">/*示例2*/</span><span class="hljs-keyword">SELECT</span>    warehouse, product, <span class="hljs-keyword">SUM</span>(quantity)<span class="hljs-keyword">FROM</span>    inventory<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> warehouse, <span class="hljs-keyword">ROLLUP</span> (product);</code></pre></div><h3 id="7-3-UNION运算符-并集"><a href="#7-3-UNION运算符-并集" class="headerlink" title="7.3 UNION运算符 (并集)"></a>7.3 UNION运算符 (并集)</h3><p>使用SQL <code>UNION</code>组合来自多个查询的两个或多个结果集，<code>UNION</code>运算符将两个或多个<code>SELECT</code>语句的结果集合并到一个结果集中,相当于并集。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span>    column1, column2<span class="hljs-keyword">FROM</span>    table1<span class="hljs-keyword">UNION</span> [<span class="hljs-keyword">ALL</span>]<span class="hljs-keyword">SELECT</span>    column3, column4<span class="hljs-keyword">FROM</span>    table2;<span class="hljs-comment">/*带ALL参数不去重，不带ALL则去重*/</span></code></pre></div><h3 id="7-4-INTERSECT-交"><a href="#7-4-INTERSECT-交" class="headerlink" title="7.4 INTERSECT(交)"></a>7.4 INTERSECT(交)</h3><p>SQL <code>INTERSECT</code>运算符，来获取两个或多个查询的交集。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span>    <span class="hljs-keyword">id</span><span class="hljs-keyword">FROM</span>    a<span class="hljs-keyword">INTERSECT</span><span class="hljs-keyword">SELECT</span>    <span class="hljs-keyword">id</span><span class="hljs-keyword">FROM</span>    b;</code></pre></div><p>要使用<code>INTERSECT</code>运算符，<code>SELECT</code>语句的列需要遵循以下规则：</p><ul><li>列的数据类型必须兼容。</li><li><code>SELECT</code>语句中的列数及其顺序必须相同</li></ul><h3 id="7-5-MINUS（差）"><a href="#7-5-MINUS（差）" class="headerlink" title="7.5 MINUS（差）"></a>7.5 MINUS（差）</h3><p>SQL <code>MINUS</code>运算符从另一个结果集中减去一个结果集。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span>    <span class="hljs-keyword">id</span><span class="hljs-keyword">FROM</span>    A<span class="hljs-keyword">MINUS</span><span class="hljs-keyword">SELECT</span>    <span class="hljs-keyword">id</span><span class="hljs-keyword">FROM</span>    B;<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">SELECT</span>    employee_id<span class="hljs-keyword">FROM</span>    employees<span class="hljs-keyword">MINUS</span><span class="hljs-keyword">SELECT</span>    employee_id<span class="hljs-keyword">FROM</span>    dependents<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> employee_id;</code></pre></div><h3 id="7-6-子查询"><a href="#7-6-子查询" class="headerlink" title="7.6 子查询"></a>7.6 子查询</h3><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1*/</span><span class="hljs-keyword">SELECT</span>    employee_id, first_name, last_name<span class="hljs-keyword">FROM</span>    employees<span class="hljs-keyword">WHERE</span>    department_id <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span>            department_id        <span class="hljs-keyword">FROM</span>            departments        <span class="hljs-keyword">WHERE</span>            location_id = <span class="hljs-number">1700</span>)<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> first_name , last_name;<span class="hljs-comment">/*示例2*/</span><span class="hljs-keyword">SELECT</span>    employee_id, first_name, last_name, salary<span class="hljs-keyword">FROM</span>    employees<span class="hljs-keyword">WHERE</span>    salary &gt; (<span class="hljs-keyword">SELECT</span>            <span class="hljs-keyword">AVG</span>(salary)        <span class="hljs-keyword">FROM</span>            employees);</code></pre></div><h3 id="7-7-EXISTS运算符"><a href="#7-7-EXISTS运算符" class="headerlink" title="7.7 EXISTS运算符"></a>7.7 EXISTS运算符</h3><p><code>EXISTS</code>运算符用于指定子查询以测试行的存在。如果子查询包含任何行，则返回<code>true</code>。否则，它返回<code>false</code>。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span>EXISTS (subquery)NOT EXISTS (subquery)<span class="hljs-comment">/*示例--查找没有任何家属的员工*/</span><span class="hljs-keyword">SELECT</span>    department_name<span class="hljs-keyword">FROM</span>    departments d<span class="hljs-keyword">WHERE</span>    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>( <span class="hljs-keyword">SELECT</span>            <span class="hljs-number">1</span>        <span class="hljs-keyword">FROM</span>            employees e        <span class="hljs-keyword">WHERE</span>            salary &gt; <span class="hljs-number">10000</span>                <span class="hljs-keyword">AND</span> e.department_id = d.department_id)<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> department_name;</code></pre></div><h2 id="八、约束"><a href="#八、约束" class="headerlink" title="八、约束"></a>八、约束</h2><p>完整性约束保证授权用户对数据库所做的修改不会破坏数据的一致性。</p><h3 id="8-1-实体完整性-主键约束"><a href="#8-1-实体完整性-主键约束" class="headerlink" title="8.1 实体完整性-主键约束"></a>8.1 实体完整性-主键约束</h3><ul><li>每个表都有一个且只有一个主键。 主键不接受<code>NULL</code>或重复值。</li><li>如果主键由两列或更多列组成，则值可能在一列中重复，但主键中所有列的值组合必须是唯一的。</li><li>复合主键不能包含不必要的多余列。</li></ul><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1 ： 主键由多列组成，用PRIMARY KEY定义主键*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> project_assignments (    project_id <span class="hljs-built_in">INT</span>,    employee_id <span class="hljs-built_in">INT</span>,    join_date DATETIME <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    <span class="hljs-keyword">CONSTRAINT</span> pk_assgn PRIMARY <span class="hljs-keyword">KEY</span> (project_id , employee_id));<span class="hljs-comment">/*示例2-- 使用ALTER TABLE语句添加主键，将milestone_id列设置为主键。*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> project_milestones<span class="hljs-keyword">ADD</span> PRIMARY <span class="hljs-keyword">KEY</span> (milestone_id);<span class="hljs-comment">/*示例3-- 删除project_milestones表的主键约束*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> project_milestones<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> pk_milestone_id;</code></pre></div><h3 id="8-2-实体完整性-唯一约束"><a href="#8-2-实体完整性-唯一约束" class="headerlink" title="8.2 实体完整性-唯一约束"></a>8.2 实体完整性-唯一约束</h3><p>使用SQL <code>UNIQUE</code>约束强制列或一组列中值的唯一性</p><p><code>UNIQUE</code>约束定义了一个规则，该规则可防止存储在不参与主键的特定列中有重复值</p><p><code>UNIQUE</code>约束和<code>PRIMARY KEY</code>约束之间的区别：<br>比较项|<code>PRIMARY KEY</code>约束|<code>UNIQUE</code>约束<br>-|-|-<br>约束的数量|一个|多个<br>NULL值|不允许|允许</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--创建了UNIQUE约束作为列约束。*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">users</span> (    user_id <span class="hljs-built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,    username <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">UNIQUE</span>,    <span class="hljs-keyword">password</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>);<span class="hljs-comment">/*示例2--表约束语法创建的UNIQUE约束*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">users</span> (    user_id <span class="hljs-built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,    username <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    <span class="hljs-keyword">password</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    <span class="hljs-keyword">CONSTRAINT</span> uc_username <span class="hljs-keyword">UNIQUE</span> (username));<span class="hljs-comment">/*示例3： 将UNIQUE约束添加到现有表*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">users</span><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> uc_username <span class="hljs-keyword">UNIQUE</span>(username);<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">users</span><span class="hljs-keyword">ADD</span> new_column data_type <span class="hljs-keyword">UNIQUE</span>;<span class="hljs-comment">/*示例4： 删除UNIQUE约束*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> unique_constraint_name;</code></pre></div><h3 id="8-3-参照完整性-外键约束"><a href="#8-3-参照完整性-外键约束" class="headerlink" title="8.3 参照完整性-外键约束"></a>8.3 参照完整性-外键约束</h3><p>SQL外键<code>FOREIGN KEY</code>约束以强制表之间的关系。</p><p>定义外码的主要目的是：让系统做参照完整性约束的检查。</p><p><strong>参照关系中外码的值必须在被参照关系中实际存在或为null</strong>。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-comment">--默认地，外码参照被参照关系中的主码，即下面FOREIGN KEY后面是外键，REFERENCES后面列是主键</span>[CONSTRAINT [symbol]] FOREIGN KEY    [index_name] (index_col_name, ...)    REFERENCES tbl_name (index_col_name,...)    [ON <span class="hljs-keyword">DELETE</span> reference_option]    [<span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> reference_option]<span class="hljs-comment">--其中reference_option的语法格式如下:</span>RESTRICT | <span class="hljs-keyword">CASCADE</span> | <span class="hljs-keyword">SET</span> <span class="hljs-literal">NULL</span> | <span class="hljs-keyword">NO</span> <span class="hljs-keyword">ACTION</span><span class="hljs-comment">/*相关语法说明如下：1. CONSTRAINT [symbol]：可以为外键约束指定名称。2. tbl_name：指定外键所参照的表名，这个表称为被参照表，而外键所在表称为参照表。3. index_col_name：指定被参照的列名。4. ON DELETE/UPDATE：指定参照动作所对应的DELETE/UPDATE语句5. reference_option：指定参照完整性约束的实现策略。RESTRICT是限制策略，同时也是默认策略，CASCADE是级联策略，SET NULL是置空策略，NO ACTION表示不采取实施策略。6. RESTRICT限制策略：当要删除或更新被参照表中被参照列上在外键中出现的值时，拒绝对被参照表的删除或更新操作。默认策略。7. CASCADE级联策略：即从被参照表中删除或更新记录行时，自动删除或更新参照表中匹配的记录行。8. SET NULL置空策略：即在被参照表中操作时，设置参照表中与之对应的外键列值为NULL。9. NO ACTION不采取实施策略：语义动作同RESTRICT限制策略。*/</span></code></pre></div><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--创建表时创建FOREIGN KEY约束*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> project_milestones (    milestone_id <span class="hljs-built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,    project_id <span class="hljs-built_in">INT</span>,    milestone_name <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">100</span>),    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (project_id)        <span class="hljs-keyword">REFERENCES</span> projects (project_id));<span class="hljs-comment">--FOREIGN KEY子句将project_milestones表的project_id设置为引用project表的project_id列的外键。</span><span class="hljs-comment">/*示例2--可以为FOREIGN KEY约束指定名称*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> project_milestones (    milestone_id <span class="hljs-built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="hljs-keyword">KEY</span>,    project_id <span class="hljs-built_in">INT</span>,    milestone_name <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">100</span>),    <span class="hljs-keyword">CONSTRAINT</span> fk_project <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (project_id)        <span class="hljs-keyword">REFERENCES</span> projects (project_id));<span class="hljs-comment">--fk_project是FOREIGN KEY约束的名称。</span><span class="hljs-comment">/*示例3*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> orders(    order_id <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,    order_product <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    order_product_type <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    cust_id <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    order_date DATETIME <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    order_price <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    order_amount <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    PRIMARY <span class="hljs-keyword">KEY</span>(order_id),    <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span>(cust_id)        <span class="hljs-keyword">REFERENCES</span> customers(cust_id)            <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> RESTRICT            <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> RESTRICT);<span class="hljs-comment">/*该外键参照完整性约束确保：插入表orders中的每一个订购客户id号都执行一次检测，查看这个订购客户id号是否已经出现在表customers的客户id号（主键）中，若没有，数据无法正常插入。*/</span><span class="hljs-comment">/*示例4--使用ALTER来向现有表中添加FOREIGN KEY约束*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_1<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> fk_name <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (fk_key_column)   <span class="hljs-keyword">REFERENCES</span> table_2(pk_key_column)<span class="hljs-comment">/*示例5--删除外键约束*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> fk_name;</code></pre></div><h3 id="8-4-用户定义完整性-NOT-NULL"><a href="#8-4-用户定义完整性-NOT-NULL" class="headerlink" title="8.4 用户定义完整性-NOT NULL"></a>8.4 用户定义完整性-NOT NULL</h3><p><code>NOT NULL</code>约束是一个列约束，它定义将列限制为仅具有非<code>NULL</code>值的规则。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name(   ...   column_name data_type <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,   ...);<span class="hljs-comment">/*示例1*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> training (    employee_id <span class="hljs-built_in">INT</span>,    course_id <span class="hljs-built_in">INT</span>,    taken_date <span class="hljs-built_in">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    PRIMARY <span class="hljs-keyword">KEY</span> (employee_id , course_id));<span class="hljs-comment">/*示例2--ALTER TABLE NOT NULL语句*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> training<span class="hljs-keyword">MODIFY</span> taken_date <span class="hljs-built_in">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;</code></pre></div><h3 id="8-5-用户定义完整性-CHECK约束"><a href="#8-5-用户定义完整性-CHECK约束" class="headerlink" title="8.5 用户定义完整性-CHECK约束"></a>8.5 用户定义完整性-CHECK约束</h3><p><code>CHECK</code>约束是SQL中的完整性约束，它允许指定列或列集中的值必须满足布尔表达式</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-comment">--CHECK约束由关键字CHECK后跟括号中的布尔表达式组成：</span><span class="hljs-keyword">CHECK</span>(Boolean_expression)<span class="hljs-comment">--如果要为CHECK约束指定名称，请使用以下语法：</span><span class="hljs-keyword">CONSTRAINT</span> constraint_name <span class="hljs-keyword">CHECK</span>(Boolean_expression)<span class="hljs-comment">/*示例1--其products_price列中的值必须为正数*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products (    product_id <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span>,    product_name <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    selling_price <span class="hljs-built_in">NUMERIC</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">CHECK</span> (selling_price &gt; <span class="hljs-number">0</span>));<span class="hljs-comment">/*示例2--分配CHECK约束名称*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products (    product_id <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span>,    product_name <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    selling_price <span class="hljs-built_in">NUMERIC</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">CONSTRAINT</span> positive_selling_price <span class="hljs-keyword">CHECK</span> (selling_price &gt; <span class="hljs-number">0</span>));<span class="hljs-comment">/*示例3： 涉及多个列 （表约束）*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products (    product_id <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span>,    product_name <span class="hljs-built_in">VARCHAR</span> (<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,    selling_price <span class="hljs-built_in">NUMERIC</span> (<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">CHECK</span> (selling_price &gt; <span class="hljs-number">0</span>),    <span class="hljs-keyword">cost</span> <span class="hljs-built_in">NUMERIC</span> (<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">CHECK</span> (<span class="hljs-keyword">cost</span> &gt; <span class="hljs-number">0</span>),    <span class="hljs-keyword">CONSTRAINT</span> valid_selling_price  <span class="hljs-keyword">CHECK</span> (selling_price &gt; <span class="hljs-keyword">cost</span>));</code></pre></div><h3 id="8-6-域约束"><a href="#8-6-域约束" class="headerlink" title="8.6 域约束"></a>8.6 域约束</h3><p><code>create domain</code>域约束是完整性约束的最基本形式，可用于检测插入到数据库中的数据的合法性</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--从现有数据类型可以创建新的域</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">domain</span> Dollars <span class="hljs-keyword">as</span> <span class="hljs-built_in">numeric</span>(<span class="hljs-number">12</span>，<span class="hljs-number">2</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">domain</span> Pounds <span class="hljs-keyword">as</span> <span class="hljs-built_in">numeric</span>(<span class="hljs-number">12</span>，<span class="hljs-number">2</span>);<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> instructor    (<span class="hljs-keyword">ID</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">5</span>) primary <span class="hljs-keyword">key</span>,    <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>),    dept <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>),    salary Dollars,    comm Pounds    );</code></pre></div><h2 id="九、视图与索引"><a href="#九、视图与索引" class="headerlink" title="九、视图与索引"></a>九、视图与索引</h2><h3 id="9-1-视图"><a href="#9-1-视图" class="headerlink" title="9.1 视图"></a>9.1 视图</h3><p>在某些情况下，让所有用户看到整个逻辑模型是不合适的，视图就提供了这种机制：向用户隐藏特定的数据。</p><p>SQL允许通过查询来定义“虚关系”，它在概念上包含查询的结果，但并不预先计算并存储。像这种作为虚关系对用户可见的关系称为视图（view）。</p><h4 id="9-1-1-创建视图"><a href="#9-1-1-创建视图" class="headerlink" title="9.1.1 创建视图"></a>9.1.1 创建视图</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">OR</span> <span class="hljs-keyword">REPLACE</span>] <span class="hljs-keyword">VIEW</span> view_name [(column_list)]    <span class="hljs-keyword">AS</span> select_statement    [<span class="hljs-keyword">WITH</span> [<span class="hljs-keyword">CASCADED</span> | <span class="hljs-keyword">LOCAL</span>] <span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">OPTION</span>]<span class="hljs-comment">/*1. view_name:指定视图的名称，且必须唯一。不能重名。2. column_list:可选项，用于为视图中每个列指定明确的名称，必须与select的列数相同，逗号分隔。3.select_statement:指定创建视图的SELECT语句。4.WITH CHECK OPTION:可选项，用于指定在可更新视图上所进行的修改都需要符合select_statement中所指定的限制条件，这样可以确保数据修改后，仍可以通过视图看到修改后的数据。5.CASCADED | LOCAL:决定检查测试的范围。默认CASCADED，它会对所有视图进行检查。而LOCAL只对定义的视图进行检查。*/</span><span class="hljs-comment">/*示例--视图physics_fall_2009_Watson，列出于2009年秋季学期在Watson大楼开设的所有Physics课程的标识和教室号*/</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> physics_fall_2009_watson <span class="hljs-keyword">as</span><span class="hljs-keyword">select</span> course_id, room_number<span class="hljs-keyword">from</span> physics_fall_2009<span class="hljs-keyword">where</span> building=<span class="hljs-string">'Watson'</span>;<span class="hljs-comment">/*示例2--创建视图customers_view,要求包含客户信息表中所有男性客户，并要求保证今后对该视图数据的修改都必须符和客户性别为男性这个条件。*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">REPLACE</span> <span class="hljs-keyword">VIEW</span> mysql_test.customers_view    <span class="hljs-keyword">AS</span>    <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mysql_test.customers        <span class="hljs-keyword">WHERE</span> cust_sex=<span class="hljs-string">'M'</span>    <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">OPTION</span>;</code></pre></div><h4 id="9-1-2-删除视图"><a href="#9-1-2-删除视图" class="headerlink" title="9.1.2 删除视图"></a>9.1.2 删除视图</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>]    view_name [, view_name] ...    [RESTRICT | <span class="hljs-keyword">CASCADE</span>]</code></pre></div><h4 id="9-1-3-更新视图"><a href="#9-1-3-更新视图" class="headerlink" title="9.1.3 更新视图"></a>9.1.3 更新视图</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">VIEW</span> view_name [(column_list)]    <span class="hljs-keyword">AS</span> select_statement    [<span class="hljs-keyword">WITH</span> [<span class="hljs-keyword">CASCADED</span> | <span class="hljs-keyword">LOCAL</span>] <span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">OPTION</span>]<span class="hljs-comment">/*语法与创建视图语法相似，也可以通过先删除再创建来实现修改视图*/</span></code></pre></div><h4 id="9-1-4-查看视图定义"><a href="#9-1-4-查看视图定义" class="headerlink" title="9.1.4 查看视图定义"></a>9.1.4 查看视图定义</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_name</code></pre></div><h4 id="9-1-5-更新视图数据"><a href="#9-1-5-更新视图数据" class="headerlink" title="9.1.5 更新视图数据"></a>9.1.5 更新视图数据</h4><p>一般地，如果定义视图的查询能满足下列条件，我们称SQL视图是可更新的（updatable），即视图上可以执行插入、更新或删除</p><ul><li><code>from</code>子句中只有一个数据库关系</li><li><code>select</code>子句中只包含关系的属性名，不包含任何表达式、聚集或<code>distinct</code>声明</li><li>任何没有出现在<code>select</code>子句中的属性可以取空值；即这些属性上没有<code>not null</code>约束，也不构成主码的一部分</li><li>查询中不含有<code>group by</code>或<code>having</code>子句</li></ul><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--通过INSERT语句通过视图向基本表插入数据*/</span><span class="hljs-comment">--假设我们向视图faculty插入一条新元组，可写为：</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> faculty <span class="hljs-keyword">values</span>(‘<span class="hljs-number">30765</span><span class="hljs-string">'，‘Green'</span>，‘Music<span class="hljs-string">');/*该语句能够成功执行，是因为创建视图时添加了WITH CHECK OPTION*//*示例2--使用UPDATE语句通过视图修改基本表的数据*/UPDATE mysql_test.customers_view    SET cust_address='</span>上海市<span class="hljs-string">';/*示例3--使用DELETE语句通过视图删除基本表的数据*/DELETE FROM mysql_test.customers_view    WHERE cust_name='</span>周明<span class="hljs-string">';</span></code></pre></div><h3 id="9-2-索引"><a href="#9-2-索引" class="headerlink" title="9.2 索引"></a>9.2 索引</h3><h4 id="9-2-1-索引的创建"><a href="#9-2-1-索引的创建" class="headerlink" title="9.2.1 索引的创建"></a>9.2.1 索引的创建</h4><p>我们用<code>create index</code>命令，为关系中的某些属性创建索引。索引，就是DBMS根据表中的一列或若干列按照一定顺序建立的列值与记录行之间的对应关系表，因而索引实质上是一张描述索引列的列值与原表中的记录行之间一对应关系的有序表。</p><p>更新表的时候索引会被自动更新，因此索引提高查询速度，降低更新速度。</p><h5 id="9-2-1-1-使用CREATE-INDEX语句"><a href="#9-2-1-1-使用CREATE-INDEX语句" class="headerlink" title="9.2.1.1 使用CREATE INDEX语句"></a>9.2.1.1 使用CREATE INDEX语句</h5><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式全面</span><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">ONLINE</span>|<span class="hljs-keyword">OFFLINE</span>] [<span class="hljs-keyword">UNIQUE</span>|FULLTEXT|SPATIAL] <span class="hljs-keyword">INDEX</span> index_name    [index_type]    <span class="hljs-keyword">ON</span> tbl_name (index_col_name,...)    [index_option] ...<span class="hljs-comment">--语法格式常用</span><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">UNIQUE</span>] <span class="hljs-keyword">INDEX</span> index_name <span class="hljs-keyword">ON</span> table_name (index_col_name,...);<span class="hljs-comment">/*其中index_col_name的格式为:    col_name [(length)] [ASC | DESC]可选项length指定前length个字符创建索引，可减少索引文件大小。关键字[ASC | DESC]指定索引升序还是降序排列，默认ASC*/</span><span class="hljs-comment">/*示例--在students表上用学生name前三个字符创建名为index_students的索引*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> index_students <span class="hljs-keyword">ON</span> students(<span class="hljs-keyword">name</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">ASC</span>);<span class="hljs-comment">--我们用`create unique index`命令，为关系中的某些属性创建唯一索引</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">INDEX</span> uni_stu_index <span class="hljs-keyword">ON</span> student(<span class="hljs-keyword">ID</span>,<span class="hljs-keyword">name</span>);</code></pre></div><h5 id="9-2-1-2-使用CREATE-TABLE语句"><a href="#9-2-1-2-使用CREATE-TABLE语句" class="headerlink" title="9.2.1.2 使用CREATE TABLE语句"></a>9.2.1.2 使用CREATE TABLE语句</h5><div class="hljs"><pre><code class="hljs SQL">--语法格式--在create table后面添加以下语法成分&#123;INDEX | KEY&#125; [index_name] (index_col_name,...)/*关键字KEY是关键字INDEX的同义词*//*示例*/CREATE TABLE seller    (    seller_id INT NOT NULL AUTO_INCREMENT,    seller_name char(50) NOT NULL,    product_type int(5) NULL,    sales INT NULL,    PRIMARY KEY(seller_id,product_type),    KEY index_seller(sales)    );</code></pre></div><h5 id="9-2-1-3-使用ALTER-TABLE语句"><a href="#9-2-1-3-使用ALTER-TABLE语句" class="headerlink" title="9.2.1.3 使用ALTER TABLE语句"></a>9.2.1.3 使用ALTER TABLE语句</h5><div class="hljs"><pre><code class="hljs SQL">--语法格式--在alter table后面添加以下语法成分ADD &#123;INDEX | KEY&#125; [index_name] (index_col_name,...)/*示例*/ALTER TABLE seller    ADD INDEX index_seller_name (seller_name);</code></pre></div><h4 id="9-2-2-索引的查看"><a href="#9-2-2-索引的查看" class="headerlink" title="9.2.2 索引的查看"></a>9.2.2 索引的查看</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SHOW</span> &#123;<span class="hljs-keyword">INDEX</span> | <span class="hljs-keyword">INDEXES</span> | <span class="hljs-keyword">KEYS</span>&#125;    &#123;<span class="hljs-keyword">FROM</span> | <span class="hljs-keyword">IN</span>&#125; tbl_name    [&#123;<span class="hljs-keyword">FROM</span> | <span class="hljs-keyword">IN</span>&#125; db_name]    [<span class="hljs-keyword">WHERE</span> expr]<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">KEYS</span> <span class="hljs-keyword">IN</span> seller;</code></pre></div><h4 id="9-2-3-索引的删除"><a href="#9-2-3-索引的删除" class="headerlink" title="9.2.3 索引的删除"></a>9.2.3 索引的删除</h4><h5 id="9-2-3-1-使用DROP-INDEX语句"><a href="#9-2-3-1-使用DROP-INDEX语句" class="headerlink" title="9.2.3.1 使用DROP INDEX语句"></a>9.2.3.1 使用DROP INDEX语句</h5><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">DROP</span> [<span class="hljs-keyword">ONLINE</span>|<span class="hljs-keyword">OFFLINE</span>] <span class="hljs-keyword">INDEX</span> index_name <span class="hljs-keyword">ON</span> tbl_name<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> index_seller_name <span class="hljs-keyword">ON</span> seller;</code></pre></div><h5 id="9-2-3-2-使用ALTER-TABLE语句"><a href="#9-2-3-2-使用ALTER-TABLE语句" class="headerlink" title="9.2.3.2 使用ALTER TABLE语句"></a>9.2.3.2 使用ALTER TABLE语句</h5><p>在ALTER TABLE语句下面添加以下一项。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">DROP</span> PRIMARY <span class="hljs-keyword">KEY</span>;<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> index_name;<span class="hljs-comment">/*删除主键也就是删除索引，主键也是一个索引*/</span><span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> seller    <span class="hljs-keyword">DROP</span> PRIMARY <span class="hljs-keyword">KEY</span>,    <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> index_seller;</code></pre></div><h2 id="十、断言及触发器"><a href="#十、断言及触发器" class="headerlink" title="十、断言及触发器"></a>十、断言及触发器</h2><h3 id="10-1-断言"><a href="#10-1-断言" class="headerlink" title="10.1 断言"></a>10.1 断言</h3><p>断言（assertion）是表达要求数据库永远满足的条件的谓词（复杂check条件）</p><p>SQL中的断言形式如下：</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">assertion</span> &lt;assertion_name&gt; <span class="hljs-keyword">check</span> &lt;predicate&gt;</code></pre></div><p>创建了某断言之后，系统将检查它的合法性，并对每一个可能破坏该断言的数据库更新进行检测<br><strong>这种检测会产生大量的开销，因此断言的使用应非常谨慎</strong></p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--例2，每位教师不能在同一个学期的同一个时间段在两个不同的教室授</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">assertion</span> ins_teaches_constraint <span class="hljs-keyword">check</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">ID</span>，<span class="hljs-keyword">name</span>,section_id,semester,<span class="hljs-keyword">year</span>,time_slot_id,    <span class="hljs-keyword">count</span>(<span class="hljs-keyword">distinct</span> building,room,<span class="hljs-built_in">number</span>)<span class="hljs-keyword">from</span> instructor <span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> teaches <span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> (<span class="hljs-keyword">ID</span>,<span class="hljs-keyword">name</span>,section_id,semester,<span class="hljs-keyword">year</span>,time_slot_id)<span class="hljs-keyword">having</span> <span class="hljs-keyword">count</span>(building,room_number)&gt;<span class="hljs-number">1</span>)</code></pre></div><h3 id="10-2-触发器trigger"><a href="#10-2-触发器trigger" class="headerlink" title="10.2 触发器trigger"></a>10.2 触发器trigger</h3><p>触发器（trigger）是由数据库更新操作引起的被系统自动执行的语句。</p><p>设计触发器必须：</p><ul><li>指明触发器被执行的条件</li><li>指明触发器执行时所做的具体操作</li></ul><p>1） 创建触发器</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> trigger_name trigger_time trigger_event    <span class="hljs-keyword">ON</span> tbl_name <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-keyword">ROW</span> trigger_body<span class="hljs-comment">/*1. trigger_name：指定触发器名称，名称唯一。2. trigger_time：指定触发器被触发的时刻。有2个选项，BEFORE和AFTER。3. trigger_event：指定触发事件。可以是关键字INSERT,UPDATE,DELETE。4. FOR EACH ROW：指定对于受触发事件影响的每一行都要激活触发器的动作。5. trigger_body：指定触发器动作主体，即MYSQL语句块。6. 每个表每个事件只允许一个触发器，即INSERT,UPDATE,DELETE的“之前”、“之后”，共最多支持6个触发器。7. INSERT触发器代码内，可引用一个名为NEW的虚拟表，来访问被插入的行。8. DELETE触发器代码内，可引用一个名为OLD的虚拟表，来访问被删除的行。9. UPDATE触发器代码内，可引用名为NEW的虚拟表，来访问新更新的值，OLD访问以前的值。*/</span><span class="hljs-comment">/*例1--INSERT触发器--每次插入数据时，设置用户变量str的值为新插入客户的id*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> mysql_test.customers_insert_trigger <span class="hljs-keyword">AFTER</span> <span class="hljs-keyword">INSERT</span>    <span class="hljs-keyword">ON</span> mysql_test.customers <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-keyword">ROW</span> <span class="hljs-keyword">SET</span> @<span class="hljs-keyword">str</span>=NEW.cust_id;<span class="hljs-comment">/*例2--UPDATE触发器--每次更新表时，将表中cust_address列的值设置为cust_contact列的值*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> mysql_test.customers_update_trigger <span class="hljs-keyword">BEFORE</span> <span class="hljs-keyword">UPDATE</span>    <span class="hljs-keyword">ON</span> mysql_test.customers <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-keyword">ROW</span>    <span class="hljs-keyword">SET</span> NEW.cust_address=OLD.cust_contact;<span class="hljs-comment">/*例3--使用触发器来确保关系section中属性time_slot_id的参照完整性*/</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> timeslot_check1 <span class="hljs-keyword">after</span> <span class="hljs-keyword">insert</span>        <span class="hljs-keyword">ON</span> <span class="hljs-keyword">section</span>        <span class="hljs-keyword">referencing</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">as</span> nrow        <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span>        <span class="hljs-keyword">when</span> (nrow.time_slot_id <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>            (<span class="hljs-keyword">select</span> time_slot_id <span class="hljs-keyword">from</span>                time_slot))<span class="hljs-comment">/*time_slot中不存在该time_slot_id*/</span><span class="hljs-keyword">begin</span> <span class="hljs-keyword">rollback</span> <span class="hljs-keyword">end</span>;<span class="hljs-comment">/*例4--某种物品库存量小到一定程度就发订货单或打开报警灯*/</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> reorder_trigger <span class="hljs-keyword">after</span> <span class="hljs-keyword">update</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">level</span> <span class="hljs-keyword">on</span> inventory    <span class="hljs-keyword">referencing</span> <span class="hljs-keyword">old</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">as</span> orow, <span class="hljs-keyword">new</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">as</span> nrow    <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span>    <span class="hljs-keyword">when</span> nrow.level&lt;=<span class="hljs-comment">/*保证修改后库存量低于最小库存量,更新前库存大于最小库存*/</span>            (<span class="hljs-keyword">select</span> <span class="hljs-keyword">level</span><span class="hljs-comment">/*目的是只更新一次*/</span>            <span class="hljs-keyword">from</span> minlevel            <span class="hljs-keyword">where</span> minlevel.item=nrow.item) <span class="hljs-keyword">and</span> orow.level&gt;                    (<span class="hljs-keyword">select</span> <span class="hljs-keyword">level</span>                    <span class="hljs-keyword">from</span> minlevel                    <span class="hljs-keyword">where</span> minlevel.item= orow.item)<span class="hljs-keyword">begin</span>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> ordersbegin    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> orders            (<span class="hljs-keyword">select</span> item, amount             <span class="hljs-keyword">from</span> reorder             <span class="hljs-keyword">where</span> reorder.item= orow.item)<span class="hljs-keyword">end</span></code></pre></div><p>2） 删除触发器</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TRIGGER</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>] [schema_name.]trigger_name<span class="hljs-comment">/*1. schema_name.：用于指定触发器所在数据库名称2. 当删除一个表时，自动删除该表上的触发器。且触发器无法修改，只能删除再创建的方式来修改。*/</span><span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TRIGGER</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> mysql_test.customers_insert_trigger;</code></pre></div><h2 id="十一、-安全性"><a href="#十一、-安全性" class="headerlink" title="十一、 安全性"></a>十一、 安全性</h2><h3 id="11-1-用户账号管理"><a href="#11-1-用户账号管理" class="headerlink" title="11.1 用户账号管理"></a>11.1 用户账号管理</h3><h4 id="11-1-1-创建账户"><a href="#11-1-1-创建账户" class="headerlink" title="11.1.1 创建账户"></a>11.1.1 创建账户</h4><div class="hljs"><pre><code class="hljs SQL">--语法格式CREATE USER user [IDENTIFIED BY [PASSWORD] 'password']/*1. user：指定创建用户账号，格式为'user_name'@'host_name'。其中host_name表示主机名,主机名默认为'%'。1. IDENTIFIED BY:可选项，指定用户账号对应口令。2. PASSWORD:可选项，用于指定散列口令，若需要使用明文设置口令，需忽略PASSWORD关键字。3. 'password'：指定用户账号的口令。4. 创建的账户权限很少，只允许进行不需要权限的操作。*//*示例--添加2个新用户，用户名为zhangsan和lisi，主机名localhost，张三明文口令123，李四口令为456对应PASSWORD()函数返回的散列值*/SELECT PASSWORD(456);&gt;&gt;*531E182E2F72080AB0740FE2F2D689DBE0146E04CREATE USER 'zhangsan'@'localhost' IDENTIFIED BY '123',            'lisi'@'localhost' IDENTIFIED BY PASSWORD '*531E182E2F72080AB0740FE2F2D689DBE0146E04';</code></pre></div><h4 id="11-1-2-删除账户"><a href="#11-1-2-删除账户" class="headerlink" title="11.1.2 删除账户"></a>11.1.2 删除账户</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>] <span class="hljs-keyword">user</span> [, <span class="hljs-keyword">user</span>] ...<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> lisi@localhost;<span class="hljs-comment">/*用户删除不会影响他们创建的数据库对象，MYSQL并不记录是谁创建的。*/</span></code></pre></div><h4 id="11-1-3-修改用户账号"><a href="#11-1-3-修改用户账号" class="headerlink" title="11.1.3 修改用户账号"></a>11.1.3 修改用户账号</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">USER</span> old_user <span class="hljs-keyword">TO</span> new_user    [, old_user <span class="hljs-keyword">TO</span> new_user] ...<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">'zhangsan'</span>@<span class="hljs-string">'localhost'</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">'wangwu'</span>@<span class="hljs-string">'127.0.0.1'</span>;</code></pre></div><h4 id="11-1-4-修改用户口令"><a href="#11-1-4-修改用户口令" class="headerlink" title="11.1.4 修改用户口令"></a>11.1.4 修改用户口令</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span> [<span class="hljs-keyword">FOR</span> <span class="hljs-keyword">user</span>] =    &#123;        <span class="hljs-keyword">PASSWORD</span>(<span class="hljs-string">'cleartext password'</span>)      | <span class="hljs-string">'encrypted password'</span>    &#125;<span class="hljs-comment">/*1. FOR user：格式为'user_name'@'host_name'，不加上的话默认当前账户。2. 只能用PASSWORD('cleartext password')或'encrypted password'中一项，且必须一项。3. cleartext password是明文，encrypted password是加密密码*/</span><span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-keyword">FOR</span> <span class="hljs-string">'bob'</span>@<span class="hljs-string">'%.example.org'</span> = <span class="hljs-keyword">PASSWORD</span>(<span class="hljs-string">'cleartext password'</span>);</code></pre></div><h3 id="11-2-用户权限管理"><a href="#11-2-用户权限管理" class="headerlink" title="11.2 用户权限管理"></a>11.2 用户权限管理</h3><p>新创建的账户没有访问权限，不能执行任何数据库操作。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--查看用户权限</span><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GRANTS</span> <span class="hljs-keyword">FOR</span> <span class="hljs-string">'user_name'</span>@<span class="hljs-string">'host_name'</span>;</code></pre></div><h4 id="11-2-1-权限的授予"><a href="#11-2-1-权限的授予" class="headerlink" title="11.2.1 权限的授予"></a>11.2.1 权限的授予</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">GRANT</span>    priv_type [(column_list)]      [, priv_type [(column_list)]] ...    <span class="hljs-keyword">ON</span> [object_type] priv_level    <span class="hljs-keyword">TO</span> user_specification [, user_specification] ...    [<span class="hljs-keyword">WITH</span> with_option ...]<span class="hljs-comment">/*1. priv_type：用于指定权限的名称；2. column_list：用于指定权限要授予给表中哪些具体的列；3. ON: 用于指定权限授予的对象和级别；4. object_type：可选项，指定权限授予的对象类型；5. priv_level：指定权限的级别，可以授予的权限有：列权限、表权限、数据库权限和用户权限；'*'表示当前数据库中所有表，'*.*'表示所有数据库中所有表，'db_name.routine_name'表示某个数据库中某个存储程序或函数；6. TO：用来设定用户口令，以及指定被授予权限的用户user。GRANT 语句也可以用来创建用户账户；7. user_specification：语法格式为`user [IDENTIFIED BY [PASSWORD] 'password']`;8. WITH with_option:用于权限转移；*/</span></code></pre></div><p>其中<code>priv_type</code>可有以下选择:</p><ol><li><code>select</code>、<code>insert</code>、<code>update</code>、<code>delete</code>：允许读关系，或查询视图、插入元组、修改元组、删除元组</li><li><code>references</code>：创建关系时允许声明外键</li><li><code>CREATE</code>、<code>ALTER</code>、<code>DROP</code>: 允许创建表、修改表、删除表权限</li><li><code>INDEX</code>：允许定义索引权限</li><li><code>CREATE ROUTINE</code>、<code>ALTER ROUTINE</code>、<code>EXECUTE ROUTINE</code>：允许创建、更新/删除、调用特定数据库的存储过程和存储函数的权限</li><li><code>CREATE USER</code>、<code>SHOW DATABASES</code>:允许创建或删除新用户、查看已有数据库的定义的权限</li><li><code>all privileges</code>：所有权限</li><li><code>with grant option</code>：允许用户把被授予的权限再转授给其他用户</li></ol><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">/*示例1--授予张三再customers上拥有列cust_id和name的select权限*/</span><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> (cust_id,cust_name)    <span class="hljs-keyword">ON</span> mysql_test.customers    <span class="hljs-keyword">TO</span> <span class="hljs-string">'zhangsan'</span>@<span class="hljs-string">'localhost'</span>;<span class="hljs-comment">/*示例2--创建李明和黄两个用户，并赋予表customers上SELECT和UPDATE权限*/</span><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>,<span class="hljs-keyword">UPDATE</span>    <span class="hljs-keyword">ON</span> mysql_test.customers    <span class="hljs-keyword">TO</span> <span class="hljs-string">'liming'</span>@<span class="hljs-string">'127.0.0.1'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'123'</span>        <span class="hljs-string">'huang'</span>@<span class="hljs-string">'127.0.0.1'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'789'</span>;<span class="hljs-comment">/*示例3--授予王五mysql_test的所有表所有操作权限*/</span><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span>    <span class="hljs-keyword">ON</span> mysql_test.*    <span class="hljs-keyword">TO</span> <span class="hljs-string">'wangwu'</span>@<span class="hljs-string">'localhost'</span>;<span class="hljs-comment">/*示例4--授予王五拥有创建用户权限*/</span><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span>    <span class="hljs-keyword">ON</span> *.*    <span class="hljs-keyword">TO</span> <span class="hljs-string">'wangwu'</span>@<span class="hljs-string">'localhost'</span>;<span class="hljs-comment">/*示例5--授予用户可以SSH远程登录权限*/</span><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'登录密码'</span>;<span class="hljs-comment">--刷新权限</span><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;</code></pre></div><h4 id="11-2-2-权限的转移"><a href="#11-2-2-权限的转移" class="headerlink" title="11.2.2 权限的转移"></a>11.2.2 权限的转移</h4><p><code>with grant option</code>使用这条语句，可把自身拥有的权限赋予其他人</p><h4 id="11-2-3-权限的撤销"><a href="#11-2-3-权限的撤销" class="headerlink" title="11.2.3 权限的撤销"></a>11.2.3 权限的撤销</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">REVOKE</span>    priv_type [(column_list)]      [, priv_type [(column_list)]] ...    <span class="hljs-keyword">ON</span> [object_type] priv_level    <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> [, <span class="hljs-keyword">user</span>] ...<span class="hljs-comment">/*语法格式--收回所有权限*/</span><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span>, <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> [,<span class="hljs-keyword">user</span>] ...<span class="hljs-comment">/*示例1*/</span><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span>    <span class="hljs-keyword">on</span> mysql_test.customers <span class="hljs-keyword">from</span> <span class="hljs-string">'tom'</span>@<span class="hljs-string">'localhost'</span>;<span class="hljs-comment">/*从一用户收回权限可能导致其他用户也失去该权限，称为级联回收*/</span><span class="hljs-comment">/*示例2--指定restrict可以阻止级联回收*/</span><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span>    <span class="hljs-keyword">on</span> instructor <span class="hljs-keyword">from</span> U1,U2,U3 restrict;<span class="hljs-comment">/*如果要求级联回收，则带有restrict的revoke命令将会失败*/</span></code></pre></div><h3 id="11-3-审计跟踪"><a href="#11-3-审计跟踪" class="headerlink" title="11.3 审计跟踪"></a>11.3 审计跟踪</h3><p>分为语句审计和对象审计</p><div class="hljs"><pre><code class="hljs SQL">--语法格式-语句审计AUDIT &lt;st-opt&gt; [BY &lt;users&gt;][BY SESSION | ACCESS][WHENEVER SUCCESSFUL | WHENEVER NOT SUCCESSFUL]--当BY &lt;users&gt;缺省，对所有用户审计--BY SESSION每次会话期间，相同类型的需审计的SQL语句仅记录一次--常用的&lt;st-opt&gt;:table，view，role，index，……--取消审计：NOAUDIT…（其余同audit语句）/*示例--审计用户scott每次成功执行有关table的语句。*/audit table by scott by access whenever successful;</code></pre></div><div class="hljs"><pre><code class="hljs SQL">--语法格式-对象审计AUDIT &lt;obj-opt&gt; ON &lt;obj&gt;|DEFAULT[BY SESSION | BY ACCESS][WHENEVER SUCCESSFUL | WHENEVER NOT SUCCESSFUL]--obj-opt:insert，delete，update，select，grant，…--实体审计对所有的用户起作用--ON&lt;obj&gt;指出审计对象表、视图名--ONDEFAULT 对其后创建的所有对象起作用--取消审计：NOAUDIT…/*示例--审计所有用户对student表的delete和update操作*/audit delete,update on student;</code></pre></div><h3 id="11-4-事务"><a href="#11-4-事务" class="headerlink" title="11.4 事务"></a>11.4 事务</h3><h4 id="11-4-1-事务的概念"><a href="#11-4-1-事务的概念" class="headerlink" title="11.4.1 事务的概念"></a>11.4.1 事务的概念</h4><p>当多个用户同时更新时，为了保证数据库的正确性，避免数据库的不一致性，控制这种并发操作的机制称为“并发控制”。而事务就是为保证数据的一致性而产生的一个概念和基本手段。</p><p><strong>事务（transaction）用户定义的一个数据操作序列，是一个完整的工作单元，要么全部执行，要么全部不执行。</strong></p><p>事务以<code>BEGIN TRANSACTION</code>语句开始。</p><p>下列SQL语句之一会结束一个事务：</p><ul><li><code>Commit</code>：提交当前事务，也就是将该事务所做的更新在数据库中持久保存。在事务被提交后，一个新的事务自动开始</li><li><code>Rollback</code>：回滚当前事务，即撤销该事务中所有SQL语句对数据库的更新。这样，数据库就恢复到执行该事务第一条语句之前的状态</li></ul><h4 id="11-4-2-事务的特征"><a href="#11-4-2-事务的特征" class="headerlink" title="11.4.2 事务的特征"></a>11.4.2 事务的特征</h4><p>为保证数据一致性和正确性，数据库确保事务具有如下4个特征，简称事务的ACID特征：</p><ol><li>原子性(Atomicity)：一组更新操作是原子不可分。</li><li>一致性(Consistency)：满足数据库完整性约束。</li><li>隔离性(Isolation)：事务彼此独立，隔离，不被其他事务干扰。一个执行完，另一个才能存取。</li><li>持续性(Durability)：一旦提交，对数据的改变是永久的。</li></ol><h4 id="11-4-3-并发操作问题"><a href="#11-4-3-并发操作问题" class="headerlink" title="11.4.3 并发操作问题"></a>11.4.3 并发操作问题</h4><p>事务的ACID特征可能遭到破坏的原因之一是多个事务对数据库的并发操作造成的。</p><p>典型的并发操作问题有如下三个：</p><ol><li>丢失更新：读入同一数据并修改，导致之前修改丢失。</li><li>不可重复读：读第一次和读第二次的结果不一样，因为别人在中间修改插入删除了某些数据<ol><li>事务T1读取某一数据后，T2对其修改，T1再次读到与之前不一样的值。</li><li>T1读取某一数据后，T2删除部分记录，T1再次读发现某些记录丢失了。</li><li>T1读取某一数据后，T2插入一些记录，T1再次读发现多了一些记录。</li></ol></li><li>读‘脏’数据：T1修改某一数据并写回，T2读取，T1撤销操作，T2的数据便是脏数据</li></ol><h4 id="11-4-4-封锁"><a href="#11-4-4-封锁" class="headerlink" title="11.4.4 封锁"></a>11.4.4 封锁</h4><p>封锁是最常用的并发控制技术。原理是：需要时，事务通过向系统请求对它所希望的数据对象加锁，确保它不被非预期改变。</p><h5 id="11-4-4-1-封锁类型"><a href="#11-4-4-1-封锁类型" class="headerlink" title="11.4.4.1 封锁类型"></a>11.4.4.1 封锁类型</h5><p>基本的封锁类型有两种：排他锁（X锁）、共享锁（S锁）。</p><ul><li><p><strong>排他锁：写锁</strong>。若事务T对数据对象A加上X锁，则只允许T读取和修改A，其他任何事务都不能再对A加任何类型的锁，直到T释放A上的锁为止。这就保证了其他事务在T释放A上的锁之前不能再读取和修改A。</p></li><li><p><strong>共享锁：读锁</strong>，若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁为止，这就保证了其他事务可以读A，但在T上释放A的S锁之前不能对A做任何修改。</p></li></ul><h5 id="11-4-4-2-封锁协议"><a href="#11-4-4-2-封锁协议" class="headerlink" title="11.4.4.2 封锁协议"></a>11.4.4.2 封锁协议</h5><ol><li><p>一级封锁协议：事务T在修改数据R前必须先对其加X锁，直到事务结束才释放。只能保证不发生丢失修改。</p></li><li><p>二级封锁协议：在一级封锁协议基础上，增加事务T在读取数据R前必须先对其加S锁，读完后即可释放S锁。增加保证了不发生读“脏”数据</p></li><li><p>三级封锁协议：在一级封锁协议的基础上，增加事务T在读取数据R前必须先对其加S锁，直到事务结束才释放进一步防止了不可重复读</p></li></ol><p>封锁协议级别越高，一致性程度越高</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/%E4%B8%8D%E5%90%8C%E7%BA%A7%E5%88%AB%E7%9A%84%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7%E4%BF%9D%E8%AF%81.png" srcset="/img/loading.gif" alt="不同级别的封锁协议和一致性保证"></p><h5 id="11-4-4-3-活锁与死锁"><a href="#11-4-4-3-活锁与死锁" class="headerlink" title="11.4.4.3 活锁与死锁"></a>11.4.4.3 活锁与死锁</h5><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/%E6%B4%BB%E9%94%81.png" srcset="/img/loading.gif" alt="活锁"></p><p>避免活锁最简单的方法是“先来先服务”。</p><p><strong>两个以上事务循环等待被同组中另一事务锁住的数据单元的情形，称为“死锁”。</strong></p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/%E6%AD%BB%E9%94%81.png" srcset="/img/loading.gif" alt="死锁"></p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/%E6%AD%BB%E9%94%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.png" srcset="/img/loading.gif" alt="死锁解决办法"></p><p>预防死锁的办法：</p><ol><li>一次封锁法：每个事务必须一次将所有要使用的数据全部加锁。<br>缺点：降低了系统的并发度。而且数据是不断变化的，很难事先精确确定每个事务所要封锁的数据对象。</li><li>顺序封锁法：预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实现封锁。<br>缺点：封锁的数据对象极多且在不断变化。事务的封锁请求随着事务的执行而动态地决定，很难事先确定。</li><li>序列化处理：通过应用设计为每一数据单元建立“主人程序”，所有请求发给“主人”，而“主人”以单道运行。<br>缺点：系统性能、数据完整性可能受到影响。</li><li>资源剥夺：每当事务因锁请求不能满足而受阻，强行令冲突中的一方回滚，释放所有锁，然后重新运行。<br>缺点：需要预防活锁发生。</li></ol><p>死锁的诊断与解除</p><ol><li>超时法：实现简单，用得最多<br>缺点：可能误判。若时限太长不能及时发现</li><li>等待图法：精确判断死锁</li></ol><h5 id="11-4-4-4-可串行性"><a href="#11-4-4-4-可串行性" class="headerlink" title="11.4.4.4 可串行性"></a>11.4.4.4 可串行性</h5><p>定义：若一个调度等价于某一串行高度，即它所产生的结果与某一串行调度的结果一样，称这种调度是可串行化的。</p><p>两段封锁法是一种简单有效的保障封锁其调度是可串行性的方法。</p><p>两段封锁法：所有事务必须分两个阶段对数据项进行加锁和解锁</p><ul><li>在对任何数据进行读写操作之前，首先要申请并获得对该数据的封锁</li><li>在释放一个封锁之后，事务不再申请和获得任何其他封锁</li></ul><p>事务分为两个阶段：</p><ol><li>获得封锁，也称为扩展阶段，可以申请获得任何数据项上的任何类型的锁，不能释放任何锁</li><li>释放封锁，也称为收缩阶段，可以释放任何锁，但是不能申请任何锁</li></ol><p>可以证明，若并发执行的所有事务均遵守两段锁协议，则对这些事务的任何并发调度策略都是可串行化的（充分不必要条件），但是可能导致死锁。</p><h3 id="11-5-备份与恢复表"><a href="#11-5-备份与恢复表" class="headerlink" title="11.5 备份与恢复表"></a>11.5 备份与恢复表</h3><ol><li>用SELECT INTO … OUTFILE备份数据</li><li>用LOAD DATA…INFILE恢复数据</li></ol><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--备份语法格式</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">OUTFILE</span> <span class="hljs-string">'file_name'</span> export_options      | <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">DUMPFILE</span> <span class="hljs-string">'file_name'</span><span class="hljs-comment">/*其中export_options格式为*/</span>[&#123;<span class="hljs-keyword">FIELDS</span> | <span class="hljs-keyword">COLUMNS</span>&#125;    [<span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'string'</span>]    [[<span class="hljs-keyword">OPTIONALLY</span>] <span class="hljs-keyword">ENCLOSED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'char'</span>]    [<span class="hljs-keyword">ESCAPED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'char'</span>]][<span class="hljs-keyword">LINES</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'string'</span>]<span class="hljs-comment">/*1. FIELDS和LINES子句指定数据行在备份文件中存储的格式。2. TERMINATED BY：指定字段值之间的符号；3. ENCLOSED BY：指定包裹文件中字符值的符号；[OPTIONALLY]可选项，所有值都放在符号中。4. ESCAPED BY：指定转义字符。5. TERMINATED BY：指定数据行结束标志。6. DUMPFILE：导出的所有数据行彼此紧挨，值与行之间没有标记。*/</span><span class="hljs-comment">--恢复语法格式</span><span class="hljs-keyword">LOAD</span> <span class="hljs-keyword">DATA</span> <span class="hljs-keyword">INFILE</span> <span class="hljs-string">'file_name'</span>    <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> tbl_name    [&#123;<span class="hljs-keyword">FIELDS</span> | <span class="hljs-keyword">COLUMNS</span>&#125;        [<span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'string'</span>]        [[<span class="hljs-keyword">OPTIONALLY</span>] <span class="hljs-keyword">ENCLOSED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'char'</span>]        [<span class="hljs-keyword">ESCAPED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'char'</span>]    ]    [<span class="hljs-keyword">LINES</span>        [<span class="hljs-keyword">STARTING</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'string'</span>]        [<span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'string'</span>]    ]<span class="hljs-comment">/*STARTING BY：指定一个前缀，导入数据行时，忽略数据行中该前缀和前缀之间的内容。若某行不包括该前缀，则整个数据行被跳过。*/</span><span class="hljs-comment">/*示例--备份*/</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mysql_test.customers    <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">OUTFILE</span> <span class="hljs-string">'C:/BACKUP/backupfile.txt'</span>    <span class="hljs-keyword">FIELDS</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">','</span>    <span class="hljs-keyword">OPTIONALLY</span> <span class="hljs-keyword">ENCLOSED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">""</span>    <span class="hljs-keyword">LINES</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'?'</span>;<span class="hljs-comment">/*示例--恢复*/</span><span class="hljs-keyword">LOAD</span> <span class="hljs-keyword">DATA</span> <span class="hljs-keyword">INFILE</span> <span class="hljs-string">'C:/BACKUP/backupfile.txt'</span>    <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> mysql_test.customers_copy    <span class="hljs-keyword">FIELDS</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">','</span>    <span class="hljs-keyword">OPTIONALLY</span> <span class="hljs-keyword">ENCLOSED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">""</span>    <span class="hljs-keyword">LINES</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'?'</span>;</code></pre></div><p><strong>注意：多个用户使用MYSQL时，备份时在指定表上使用<code>LOCK TABLES table_name READ</code>语句做个读锁定，防止备份中被其他用户更新；恢复时使用<code>LOCK TABLES table_name WRITE</code>语句做个写锁定，防止数据冲突。备份恢复完成后，用<code>UNLOCK TABLES</code>语句对该表进行解锁。</strong></p><h2 id="十二、-数据库编程"><a href="#十二、-数据库编程" class="headerlink" title="十二、 数据库编程"></a>十二、 数据库编程</h2><h3 id="12-1-存储过程"><a href="#12-1-存储过程" class="headerlink" title="12.1 存储过程"></a>12.1 存储过程</h3><h4 id="12-1-1-存储过程的基本概念"><a href="#12-1-1-存储过程的基本概念" class="headerlink" title="12.1.1 存储过程的基本概念"></a>12.1.1 存储过程的基本概念</h4><p>存储过程是一组SQL语句编译成一个SQL。类似于批量处理的SQL脚本。</p><p>存储过程的好处：</p><ul><li>可增强SQL语言的功能和灵活性</li><li>良好的封装性</li><li>高性能</li><li>可减少网络流量</li><li>存储过程可作为一种安全机制来确保数据库的安全性和数据的完整性</li></ul><h4 id="12-1-2-创建存储过程"><a href="#12-1-2-创建存储过程" class="headerlink" title="12.1.2 创建存储过程"></a>12.1.2 创建存储过程</h4><p><code>delimiter</code>是<code>MySQL</code>中的命令，这个命令与存储过程没什么关系。</p><p>其实就是告诉<code>mysql</code>解释器，该段命令是否已经结束了，mysql是否可以执行了。即改变输入结束符。</p><p>默认情况下，<code>delimiter</code>是分号“;”。</p><p>但有时候，不希望<code>MySQL</code>这么做。因为可能输入较多的语句，且语句中包含有分号。</p><p>默认情况下，<code>mysql</code>一遇到分号，它就要自动执行。</p><p>这种情况下，就可以使用<code>delimiter</code>，把<code>delimiter</code>后面换成其它符号，如<code>//</code>或<code>$$</code>。</p><p>此时，<code>delimiter</code>作用就是对整个小段语句做一个简单的封装。</p><div class="hljs"><pre><code class="hljs SQL">delimiter //delimiter ;</code></pre></div><p>每次使用完要记得换回原来的分号<code>;</code></p><p>使用<code>CREATE PROCEDURE</code>来创建存储过程：</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> sp_name ([proc_parameter[,...]])    routine_body<span class="hljs-comment">/*其中“proc_parameter”语法格式是[IN | OUT |INOUT]param_name type,1.在此语法格式中，“sp_name”用于指定存储过程的名称，且默认在当前数据库中创建。2.“proc_parameter”用于指定存储过程中的参数列表，“type”为SQL的数据类型。3.IN | OUT |INOUT：表示输入、输出和输入/输出参数。输入参数传递参数给存储过程；输出参数用于存储过程返回一个操作结果；而输出/输出参数则两者皆可。4.参数的取名不能和表中列名相同，会引发不可预知结果。5.routine_body：表示存储过程的主体部分。以BEGIN开始，END结束。*/</span><span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">use</span> <span class="hljs-keyword">test</span>;delimiter $$<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> sp_update_sex (<span class="hljs-keyword">IN</span> cid <span class="hljs-built_in">INT</span>,<span class="hljs-keyword">IN</span> csex <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">1</span>))<span class="hljs-keyword">BEGIN</span>    <span class="hljs-keyword">UPDATE</span> customers <span class="hljs-keyword">SET</span> cust_sex=csex <span class="hljs-keyword">WHERE</span> cust_id=cid;<span class="hljs-keyword">END</span>$$delimiter ;</code></pre></div><h4 id="12-1-3-存储过程体"><a href="#12-1-3-存储过程体" class="headerlink" title="12.1.3 存储过程体"></a>12.1.3 存储过程体</h4><h5 id="12-1-3-1-局部变量"><a href="#12-1-3-1-局部变量" class="headerlink" title="12.1.3.1 局部变量"></a>12.1.3.1 局部变量</h5><p>使用<code>DECLARE</code>语句来声明局部变量。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">DECLARE</span> var_name [, var_name] ... <span class="hljs-keyword">type</span> [<span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">value</span>]<span class="hljs-comment">/*var_name:用于指定局部变量的名称。type:用于声明局部变量的数据类型。DEFAULT:用于为局部变量指定一个默认值，若没有指定，默认为NULL。*/</span><span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">DECLARE</span> cid <span class="hljs-built_in">INT</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">--局部变量智能在存储过程体的BEGIN...END语句块中声明使用。</span></code></pre></div><h5 id="12-1-3-2-SET语句"><a href="#12-1-3-2-SET语句" class="headerlink" title="12.1.3.2 SET语句"></a>12.1.3.2 SET语句</h5><p><code>SET</code>为局部变量赋值。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SET</span> var_name=expr [, var_name=expr] ...<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">SET</span> cid=<span class="hljs-number">910</span>;</code></pre></div><h5 id="12-1-3-3-SELECT…INTO语句"><a href="#12-1-3-3-SELECT…INTO语句" class="headerlink" title="12.1.3.3 SELECT…INTO语句"></a>12.1.3.3 SELECT…INTO语句</h5><p><code>SELECT...INTO</code>语句把选定列的值直接存储到局部变量中。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span> col_name [,...] <span class="hljs-keyword">INTO</span> var_name [,...] table_expr<span class="hljs-comment">/*col_name用于指定列名。var_name用于指定要赋值的变量名。table_expr表示SELECT语句中FROM子句及其后面的语法部分。SELECT...INTO语句返回的结果集只能有一行数据。*/</span></code></pre></div><h5 id="12-1-3-4-游标"><a href="#12-1-3-4-游标" class="headerlink" title="12.1.3.4 游标"></a>12.1.3.4 游标</h5><p>游标是一个被<code>SELECT</code>语句检索出来的结果集。在存储了游标后，应用程序或用户就可以根据需要滚动或浏览其中的数据。使用游标的步骤如下：</p><p>1） 声明游标</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">DECLARE</span> cursor_name <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> select_statement<span class="hljs-comment">/*1. cursor_name：用于指定要创建的游标的名称2. select_statement:用于指定一个SELECT语句，返回一到多行数据。*/</span></code></pre></div><p>2） 打开游标</p><p>必须打开游标才能使用。</p><div class="hljs"><pre><code class="hljs SQL">OPEN cursor_name;<span class="hljs-comment">/*游标可被打开多次，若其他用户或程序更新数据表，每次打开游标结果集可能不同*/</span></code></pre></div><p>3） 读取数据</p><div class="hljs"><pre><code class="hljs SQL">FETCH cursor_name INTO var_name [,var_name] ...<span class="hljs-comment">/*cursor_name:用于指定已经打开的游标var_name:指定存放数据的变量名*/</span></code></pre></div><p>4） 关闭游标</p><div class="hljs"><pre><code class="hljs SQL">CLOSE cursor_name;</code></pre></div><p>5） 示例</p><p>创建一个存储过程，用于计算表customers中数据行的行数。</p><div class="hljs"><pre><code class="hljs SQL">delimiter $$<span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> sp_sumofrow(<span class="hljs-keyword">out</span> <span class="hljs-keyword">rows</span> <span class="hljs-built_in">int</span>)<span class="hljs-keyword">begin</span>    <span class="hljs-keyword">declare</span> cid <span class="hljs-built_in">int</span>;    <span class="hljs-keyword">declare</span> <span class="hljs-keyword">found</span> <span class="hljs-built_in">boolean</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">declare</span> cur_cid <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span>        <span class="hljs-keyword">select</span> cust_id <span class="hljs-keyword">from</span> customers;    <span class="hljs-keyword">declare</span> continue <span class="hljs-keyword">handler</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">found</span>        <span class="hljs-keyword">set</span> <span class="hljs-keyword">found</span>=<span class="hljs-literal">false</span>;    <span class="hljs-keyword">set</span> <span class="hljs-keyword">rows</span>=<span class="hljs-number">0</span>;    open cur_cid;    fetch cur_cid into cid;    while found <span class="hljs-keyword">do</span>        <span class="hljs-keyword">set</span> <span class="hljs-keyword">rows</span>=<span class="hljs-keyword">rows</span>+<span class="hljs-number">1</span>;        fetch cur_cid into cid;    <span class="hljs-keyword">end</span> <span class="hljs-keyword">while</span>;    close cur_cid;<span class="hljs-keyword">end</span>$$delimiter ;<span class="hljs-comment">/*定义一个CONTINUE HANDLER句柄，它是在条件出现时被执行的代码，用于控制循环语句，实现游标的下移。定义局部变量必须在定义任意游标和句柄之前。*/</span><span class="hljs-comment">/*游标只能用于存储过程或存储函数中，不能单独在查询操作中使用。*/</span></code></pre></div><h4 id="12-1-4-调用存储过程"><a href="#12-1-4-调用存储过程" class="headerlink" title="12.1.4 调用存储过程"></a>12.1.4 调用存储过程</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">CALL</span> sp_name([parameter[,...]]);<span class="hljs-keyword">CALL</span> sp_name[()];<span class="hljs-comment">/*sp_name:指定被调用的存储过程的名称。parameter：指定调用存储过程所使用的参数*/</span><span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">CALL</span> sp_update_sex(<span class="hljs-number">909</span>,<span class="hljs-string">'M'</span>);</code></pre></div><h4 id="12-1-5-删除存储过程"><a href="#12-1-5-删除存储过程" class="headerlink" title="12.1.5 删除存储过程"></a>12.1.5 删除存储过程</h4><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>] sp_name;<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> sp_update_sex;</code></pre></div><h3 id="12-2-存储函数"><a href="#12-2-存储函数" class="headerlink" title="12.2 存储函数"></a>12.2 存储函数</h3><p>存储过程和存储函数的区别：</p><ul><li>存储函数不能拥有输出参数，自身即是输出参数；存储过程可以拥有输出参数</li><li>存储函数可以被直接调用，而存储过程必须通过CALL语句调用</li><li>存储函数中必须包含一条RETURN语句，而这条特殊的SQL语句不允许包含于存储过程中</li></ul><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">--1.创建函数</span><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> sp_name ([func_parameter[,...]])    <span class="hljs-keyword">RETURNS</span> <span class="hljs-keyword">type</span>    routine_body<span class="hljs-comment">/*示例--根据给定学生id号返回学生性别，如果没有给定id，则返回"没有该学生"*/</span><span class="hljs-keyword">USE</span> <span class="hljs-keyword">test</span>;DELIMITER $$<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> fn_search(cid <span class="hljs-built_in">INT</span>)    <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">2</span>)<span class="hljs-keyword">BEGIN</span>    <span class="hljs-keyword">DECLARE</span> SEX <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">2</span>);    <span class="hljs-keyword">SELECT</span> gender <span class="hljs-keyword">INTO</span> SEX <span class="hljs-keyword">FROM</span> students        <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=cid;    IF SEX IS NULL THEN        RETURN(<span class="hljs-keyword">SELECT</span> <span class="hljs-string">"没有该学生"</span>);    ELSE        IF SEX='F' THEN            RETURN(<span class="hljs-keyword">SELECT</span> <span class="hljs-string">'女'</span>);        ELSE            RETURN(<span class="hljs-keyword">SELECT</span> <span class="hljs-string">'男'</span>);        <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;    <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<span class="hljs-keyword">END</span>$$DELIMITER ;<span class="hljs-comment">--2.调用函数</span><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">SELECT</span> sp_name([func_parameter[,...]])<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">SELECT</span> fn_search(<span class="hljs-number">10</span>);<span class="hljs-comment">--3.删除函数</span><span class="hljs-comment">--语法格式</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>] sp_name<span class="hljs-comment">/*示例*/</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> fn_search;</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、SQL简介&quot;&gt;&lt;a href=&quot;#一、SQL简介&quot; class=&quot;headerlink&quot; title=&quot;一、SQL简介&quot;&gt;&lt;/a&gt;一、SQL简介&lt;/h2&gt;&lt;h3 id=&quot;1-1-SQL是什么&quot;&gt;&lt;a href=&quot;#1-1-SQL是什么&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://closer_laps.gitee.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SQL" scheme="https://closer_laps.gitee.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/"/>
    
    
      <category term="读书笔记" scheme="https://closer_laps.gitee.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SQL" scheme="https://closer_laps.gitee.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>使用python控制鼠标和键盘</title>
    <link href="https://closer_laps.gitee.io/2020/03/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E4%BD%BF%E7%94%A8python%E6%8E%A7%E5%88%B6%E9%BC%A0%E6%A0%87%E5%92%8C%E9%94%AE%E7%9B%98/"/>
    <id>https://closer_laps.gitee.io/2020/03/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E4%BD%BF%E7%94%A8python%E6%8E%A7%E5%88%B6%E9%BC%A0%E6%A0%87%E5%92%8C%E9%94%AE%E7%9B%98/</id>
    <published>2020-03-27T13:05:48.000Z</published>
    <updated>2020-03-29T11:51:48.690Z</updated>
    
    <content type="html"><![CDATA[<p>使用pyautogui这个库，来达到和按键精灵差不多的效果。可以运行在多平台。</p><p>PyAutoGUI的五个特点:</p><ul><li>移动鼠标点击或输入其他应用程序的窗口。</li><li>按键发送给应用程序(例如,填写表格)。</li><li>截图,给定一个图像(例如,一个按钮或复选框),在屏幕上找到它。</li><li>定位应用程序的窗口,和移动,调整,最大化、最小化、关闭(仅适用于windows,目前)</li><li>显示消息框进行用户交互,而您的GUI自动化脚本运行。</li></ul><h2 id="一：-安装pyautogui库"><a href="#一：-安装pyautogui库" class="headerlink" title="一： 安装pyautogui库"></a>一： 安装pyautogui库</h2><p><code>pip3 install pyautogui</code></p><p><strong>ubuntu系统，可能需要<code>sudo apt-get install python3-tk python3-dev</code>，如果安装不上，请参考<a href="https://pyautogui.readthedocs.io/en/latest/install.html" target="_blank" rel="noopener">官方文档如何安装</a></strong></p><h2 id="二：-使用方法"><a href="#二：-使用方法" class="headerlink" title="二： 使用方法"></a>二： 使用方法</h2><p><a href="https://pyautogui.readthedocs.io/en/latest/" target="_blank" rel="noopener">官方文档</a></p><h3 id="2-1-常规功能"><a href="#2-1-常规功能" class="headerlink" title="2.1 常规功能"></a>2.1 常规功能</h3><div class="hljs"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pyautogui<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.position()  <span class="hljs-comment"># 当前鼠标 x， y坐标</span>(<span class="hljs-number">968</span>, <span class="hljs-number">56</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.size()  <span class="hljs-comment"># 当前屏幕分辨率宽和高</span>(<span class="hljs-number">1920</span>, <span class="hljs-number">1080</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.onScreen(x, y)  <span class="hljs-comment"># 鼠标坐标x且y，在屏幕内</span><span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.PAUSE = <span class="hljs-number">2.5</span> <span class="hljs-comment"># 在每次PyAutoGUI调用之后设置2.5秒的暂停：</span></code></pre></div><h3 id="2-2-鼠标功能"><a href="#2-2-鼠标功能" class="headerlink" title="2.2 鼠标功能"></a>2.2 鼠标功能</h3><div class="hljs"><pre><code class="hljs py"><span class="hljs-comment"># XY坐标在屏幕的左上角具有0、0的原点。X向右增加，Y向向下增加。</span><span class="hljs-comment"># 移动鼠标</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.moveTo(x, y, duration=num_seconds)  <span class="hljs-comment"># num秒内移动鼠标到XY坐标</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.move(xOffset, yOffset, duration=num_seconds)  <span class="hljs-comment"># 相对于当前位置，鼠标移动XY</span><span class="hljs-comment"># 如果duration为0或未指定，则立即移动，duration以秒为单位。</span><span class="hljs-comment"># 例： pyautogui.move(300, 200, 2)</span><span class="hljs-comment"># 拖拽鼠标</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.dragTo(x, y, duration=num_seconds)  <span class="hljs-comment"># 拖拽鼠标到XY</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.drag(xOffset, yOffset, duration=num_seconds)  <span class="hljs-comment"># 相对于当前位置，鼠标拖拽XY</span><span class="hljs-comment"># 例： pyautogui.drag(300, 200, 2)</span><span class="hljs-comment"># 点击鼠标</span><span class="hljs-comment"># 调用click()即在鼠标的当前位置左键单击一次，但是关键字参数可以改变它：</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.click(x=moveToX, y=moveToY, clicks=num_of_clicks, interval=secs_between_clicks, button=<span class="hljs-string">'left'</span>)<span class="hljs-comment"># clicks关键字控制点击次数;interval关键字控制点击时间间隔。</span><span class="hljs-comment"># 该button关键字参数可以是'left'，'middle'或'right'。即左击，中击，右击。</span><span class="hljs-comment"># 例：pyautogui.click(300, 200,clicks=2,interval=3,button='right')</span><span class="hljs-comment"># 右击，中击及双、三击</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.rightClick(x=moveToX, y=moveToY)<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.middleClick(x=moveToX, y=moveToY)<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.doubleClick(x=moveToX, y=moveToY) <span class="hljs-comment"># 双击</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.tripleClick(x=moveToX, y=moveToY) <span class="hljs-comment"># 三击</span><span class="hljs-comment"># 鼠标中键滚动</span><span class="hljs-comment"># 正向滚动将向上滚动，负向滚动将向下滚动：</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.scroll(amount_to_scroll, x=moveToX, y=moveToY)<span class="hljs-comment"># 例： pyautogui.scroll(-10) </span><span class="hljs-comment"># 鼠标按下或者弹起：</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.mouseDown(x=moveToX, y=moveToY, button=<span class="hljs-string">'left'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.mouseUp(x=moveToX, y=moveToY, button=<span class="hljs-string">'left'</span>)</code></pre></div><h3 id="2-3-键盘功能"><a href="#2-3-键盘功能" class="headerlink" title="2.3 键盘功能"></a>2.3 键盘功能</h3><div class="hljs"><pre><code class="hljs py"><span class="hljs-comment"># 在键盘光标所在的位置按键。</span><span class="hljs-comment"># 输入字符串</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.write(<span class="hljs-string">'Hello world!\n'</span>, interval=secs_between_keys)  <span class="hljs-comment"># 用于输入文本，回车换行</span><span class="hljs-comment"># interval是字母输入间隔时间</span><span class="hljs-comment"># 依次按下键盘</span><span class="hljs-comment"># 也可以传递键名列表：</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.write([<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'left'</span>, <span class="hljs-string">'backspace'</span>, <span class="hljs-string">'enter'</span>, <span class="hljs-string">'f1'</span>], interval=secs_between_keys)<span class="hljs-comment"># 键名的完整列表在pyautogui.KEYBOARD_KEYS中。</span><span class="hljs-comment"># 例： pyautogwrite(['a', 'b', 'c'], interval=0.25)</span><span class="hljs-comment"># 多次按键</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.press([<span class="hljs-string">'left'</span>, <span class="hljs-string">'left'</span>, <span class="hljs-string">'left'</span>])<span class="hljs-comment"># 或者你可以设置按多少次左键 :</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.press(<span class="hljs-string">'1'</span>, presses=<span class="hljs-number">3</span>)<span class="hljs-comment"># 键盘快捷键（如Ctrl-S或Ctrl-Shift-1）可以通过将键名列表传递给来完成hotkey()：</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.hotkey(<span class="hljs-string">'ctrl'</span>, <span class="hljs-string">'c'</span>)  <span class="hljs-comment"># ctrl-c to copy</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.hotkey(<span class="hljs-string">'ctrl'</span>, <span class="hljs-string">'v'</span>)  <span class="hljs-comment"># ctrl-v to paste</span><span class="hljs-comment"># 键盘按下和弹起可以分别调用：</span><span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.keyDown(key_name)<span class="hljs-meta">&gt;&gt;&gt; </span>pyautogui.keyUp(key_name)</code></pre></div><h3 id="2-4-消息框的功能"><a href="#2-4-消息框的功能" class="headerlink" title="2.4 消息框的功能"></a>2.4 消息框的功能</h3><div class="hljs"><pre><code class="hljs py"><span class="hljs-comment"># PyAutoGUI利用PyMsgBox消息框功能提供跨平台的,纯Python方法显示javascript式消息框。 有四个消息框功能。</span><span class="hljs-comment"># alert显示()函数 </span><span class="hljs-meta">&gt;&gt;&gt; </span>alert(text=<span class="hljs-string">''</span>, title=<span class="hljs-string">''</span>, button=<span class="hljs-string">'OK'</span>)<span class="hljs-comment"># 显示一个简单的消息框,文本和一个OK按钮。 返回文本的按钮点击。</span><span class="hljs-comment"># 例：pyautogui.alert('这将显示一些文本和OK按钮.')</span><span class="hljs-comment"># confirm确认()函数 </span><span class="hljs-meta">&gt;&gt;&gt; </span>confirm(text=<span class="hljs-string">''</span>, title=<span class="hljs-string">''</span>, buttons=[<span class="hljs-string">'OK'</span>, <span class="hljs-string">'Cancel'</span>])<span class="hljs-comment"># 显示一个消息框好和取消按钮。 数量和文本的按钮可以定制。 返回文本的按钮点击。</span><span class="hljs-comment"># 例： pyautogui.confirm('显示文本和OK及取消键。')</span><span class="hljs-comment"># prompt提示()函数 </span><span class="hljs-meta">&gt;&gt;&gt; </span>prompt(text=<span class="hljs-string">''</span>, title=<span class="hljs-string">''</span> , default=<span class="hljs-string">''</span>)<span class="hljs-comment"># 显示一个消息框,文本输入,OK和Cancel按钮。 返回输入的文本,或没有,如果点击取消。</span><span class="hljs-comment"># 例： pyautogui.prompt(text='显示文本输入框，OK及取消键', title='标题' , default='')</span><span class="hljs-comment"># password密码()函数 </span><span class="hljs-meta">&gt;&gt;&gt; </span>password(text=<span class="hljs-string">''</span>, title=<span class="hljs-string">''</span>, default=<span class="hljs-string">''</span>, mask=<span class="hljs-string">'*'</span>)<span class="hljs-comment"># 显示一个消息框,文本输入,OK和Cancel按钮。 输入字符显示为 * 。 返回输入的文本,或没有,如果点击取消。</span><span class="hljs-comment"># 例： pyautogui.password(text='显示文本输入框，OK及取消键', title='标题' , default='默认密码' , mask='*')</span></code></pre></div><h3 id="2-5-屏幕截图功能"><a href="#2-5-屏幕截图功能" class="headerlink" title="2.5 屏幕截图功能"></a>2.5 屏幕截图功能</h3><p>在ubuntu系统中支持的不是很好，比较复杂。<br><a href="https://pyautogui.readthedocs.io/en/latest/screenshot.html" target="_blank" rel="noopener">具体参照官方文档</a></p><p>还可以根据色块或图片返回对应的坐标。这个就比较强大啦。比如可以制作自动游戏脚本等等。</p><h2 id="三：-实战演练"><a href="#三：-实战演练" class="headerlink" title="三： 实战演练"></a>三： 实战演练</h2><h3 id="3-1-实时显示鼠标位置"><a href="#3-1-实时显示鼠标位置" class="headerlink" title="3.1 实时显示鼠标位置"></a>3.1 实时显示鼠标位置</h3><div class="hljs"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> pyautogui, sysprint(<span class="hljs-string">'Press Ctrl-C to quit.'</span>)<span class="hljs-keyword">try</span>:    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        x, y = pyautogui.position()        positionStr = <span class="hljs-string">'X: '</span> + str(x).rjust(<span class="hljs-number">4</span>) + <span class="hljs-string">' Y: '</span> + str(y).rjust(<span class="hljs-number">4</span>)        print(positionStr, end=<span class="hljs-string">''</span>)        print(<span class="hljs-string">'\b'</span> * len(positionStr), end=<span class="hljs-string">''</span>, flush=<span class="hljs-literal">True</span>)<span class="hljs-keyword">except</span> KeyboardInterrupt:    print(<span class="hljs-string">'\n'</span>)</code></pre></div><h3 id="3-2-画图软件中画出方形螺旋图"><a href="#3-2-画图软件中画出方形螺旋图" class="headerlink" title="3.2 画图软件中画出方形螺旋图"></a>3.2 画图软件中画出方形螺旋图</h3><div class="hljs"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> pyautoguidistance = <span class="hljs-number">200</span><span class="hljs-keyword">while</span> distance &gt; <span class="hljs-number">0</span>:        pyautogui.drag(distance, <span class="hljs-number">0</span>, duration=<span class="hljs-number">0.5</span>)   <span class="hljs-comment"># move right</span>        distance -= <span class="hljs-number">5</span>        pyautogui.drag(<span class="hljs-number">0</span>, distance, duration=<span class="hljs-number">0.5</span>)   <span class="hljs-comment"># move down</span>        pyautogui.drag(-distance, <span class="hljs-number">0</span>, duration=<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># move left</span>        distance -= <span class="hljs-number">5</span>        pyautogui.drag(<span class="hljs-number">0</span>, -distance, duration=<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># move up</span></code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用pyautogui这个库，来达到和按键精灵差不多的效果。可以运行在多平台。&lt;/p&gt;&lt;p&gt;PyAutoGUI的五个特点:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;移动鼠标点击或输入其他应用程序的窗口。&lt;/li&gt;&lt;li&gt;按键发送给应用程序(例如,填写表格)。&lt;/li&gt;&lt;li&gt;截图,给定一个图
      
    
    </summary>
    
    
      <category term="python" scheme="https://closer_laps.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://closer_laps.gitee.io/tags/python/"/>
    
      <category term="按键精灵" scheme="https://closer_laps.gitee.io/tags/%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5/"/>
    
  </entry>
  
  <entry>
    <title>【转】 利用爬虫和树莓派打造萝莉音天气闹钟</title>
    <link href="https://closer_laps.gitee.io/2020/03/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E3%80%90%E8%BD%AC%E3%80%91%C2%96%E5%88%A9%E7%94%A8%E7%88%AC%E8%99%AB%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%AD%E9%9F%B3%E5%A4%A9%E6%B0%94%E9%97%B9%E9%92%9F/"/>
    <id>https://closer_laps.gitee.io/2020/03/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E3%80%90%E8%BD%AC%E3%80%91%C2%96%E5%88%A9%E7%94%A8%E7%88%AC%E8%99%AB%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%AD%E9%9F%B3%E5%A4%A9%E6%B0%94%E9%97%B9%E9%92%9F/</id>
    <published>2020-03-21T11:35:24.000Z</published>
    <updated>2020-03-21T12:23:59.754Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://zhuanlan.zhihu.com/p/24983204?refer=woodenrobot" target="_blank" rel="noopener">原帖地址</a></p></blockquote><h2 id="一、-前期准备"><a href="#一、-前期准备" class="headerlink" title="一、 前期准备"></a>一、 前期准备</h2><ol><li>树莓派一个</li><li>小音箱一对</li></ol><p><strong>获取所在位置天气</strong></p><p>这里选择墨迹天气获取实时天气信息，地址：</p><p><a href="http://tianqi.moji.com/" target="_blank" rel="noopener">http://tianqi.moji.com/</a></p><p>进入墨迹天气的页面，墨迹天气会根据你的ip加载相应地区的天气。</p><p>这次我们主要抓取温度、天气、湿度、风力、空气质量和天气提示这几个数据。</p><p>这种小爬虫我们就使用requests和BeautifulSoup这两个超级好用的库可以快速实现。</p><h2 id="二、-环境"><a href="#二、-环境" class="headerlink" title="二、 环境"></a>二、 环境</h2><p>首先树莓派安装python3，python3-pip和requests、beautifulsoup4两个库及mplayer软件。</p><div class="hljs"><pre><code class="hljs sh">sudo apt install python3 -ysudo apt install python3-pip -ypip3 install requestspip3 install beautifulsoup4sudo apt-get install mplayer -y</code></pre></div><p>至于Requests和Beautiful Soup的用法这里就先不多说了，大家可以去看他们的中文文档。</p><ol><li><a href="https://zh_cn/en/master/zh_CN/latest/index/" target="_blank" rel="noopener">Requests中文wendnag</a></li><li><a href="https://beautifulsoup.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">Beautiful Soup中文文档</a></li></ol><p><strong>使用mplayer实现语音播放,通过以下命令安装mplayer:</strong></p><p>用法很简单输入以下命令即可播放本地音乐：</p><p><code>mplayer \xxx\xxx\xxx.mp3(绝对地址)</code></p><p>如果是在线音乐也可以用mplayer直接通过URL播放：</p><p><code>mplayer &quot;URl&quot;(URL外面一定要用双引号圈起来)</code></p><h2 id="三、-文字转语音"><a href="#三、-文字转语音" class="headerlink" title="三、 文字转语音"></a>三、 文字转语音</h2><p>刚开始想通过python的库实现本地文字转语音，在windows系统下没有问题，但树莓派3上中文无法转换。后来就找到了百度的文字转换语音API，地址：<a href="http://yuyin.baidu.com/#try" target="_blank" rel="noopener">http://yuyin.baidu.com/#try</a></p><p>还可以选各种声音，调节语速。虽然它没有给出直接的api接口，但是我们利用Chrome浏览器的开发者模式可以找到api。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E5%88%A9%E7%94%A8%E7%88%AC%E8%99%AB%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE%E6%89%93%E9%80%A0%E8%90%9D%E8%8E%89%E9%9F%B3%E5%A4%A9%E6%B0%94%E9%97%B9%E9%92%9F.png" srcset="/img/loading.gif" alt="百度语音识别"></p><p>打开开发者模式，点击播放的按钮，在network里就可以找到刚刚发出的请求。</p><p><a href="http://tts.baidu.com/text2audio?idx=1&amp;tex=1&amp;cuid=baidu_speech_demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=5&amp;per=4&amp;vol=5&amp;pit=5" target="_blank" rel="noopener">http://tts.baidu.com/text2audio?idx=1&amp;tex=1&amp;cuid=baidu_speech_demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=5&amp;per=4&amp;vol=5&amp;pit=5</a></p><p>就我们要找的百度文字转语音API,其中per是参数是语音的类型，spd是语速，vol是音量，而tex则是需要转换的文字。通过以下代码就可以实现将特定的文字转换为语音。</p><div class="hljs"><pre><code class="hljs PY"><span class="hljs-keyword">import</span> os  url = <span class="hljs-string">u'http://tts.baidu.com/text2audio?idx=1&amp;tex=&#123;0&#125;&amp;cuid=baidu_speech_'</span> \      <span class="hljs-string">u'demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=4&amp;per=4&amp;vol=5&amp;pit=5'</span>.format(text)os.system(<span class="hljs-string">'mplayer "%s"'</span> % url)</code></pre></div><h2 id="四、-代码"><a href="#四、-代码" class="headerlink" title="四、 代码"></a>四、 代码</h2><p>numtozh()函数专门转换数字为中文。最后所有的代码整合起来就是这样啦。</p><div class="hljs"><pre><code class="hljs sh"><span class="hljs-comment"># 新建weather_voice.py文件</span>touch weather_voice.py<span class="hljs-comment"># 黏贴如下代码</span>nano weather_voice.py</code></pre></div><div class="hljs"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment"># !/usr/bin/python3</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime, timedelta<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoupheaders = &#123;    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit'</span>                  <span class="hljs-string">'/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safar'</span>                  <span class="hljs-string">'i/537.36'</span>,&#125;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">numtozh</span><span class="hljs-params">(num)</span>:</span>    num_dict = &#123;<span class="hljs-number">1</span>: <span class="hljs-string">'一'</span>, <span class="hljs-number">2</span>: <span class="hljs-string">'二'</span>, <span class="hljs-number">3</span>: <span class="hljs-string">'三'</span>, <span class="hljs-number">4</span>: <span class="hljs-string">'四'</span>, <span class="hljs-number">5</span>: <span class="hljs-string">'五'</span>, <span class="hljs-number">6</span>: <span class="hljs-string">'六'</span>, <span class="hljs-number">7</span>: <span class="hljs-string">'七'</span>,                <span class="hljs-number">8</span>: <span class="hljs-string">'八'</span>, <span class="hljs-number">9</span>: <span class="hljs-string">'九'</span>, <span class="hljs-number">0</span>: <span class="hljs-string">'零'</span>&#125;    num = int(num)    <span class="hljs-keyword">if</span> <span class="hljs-number">100</span> &lt;= num &lt; <span class="hljs-number">1000</span>:        b_num = num // <span class="hljs-number">100</span>        s_num = (num - b_num * <span class="hljs-number">100</span>) // <span class="hljs-number">10</span>        g_num = (num - b_num * <span class="hljs-number">100</span>) % <span class="hljs-number">10</span>        <span class="hljs-keyword">if</span> g_num == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> s_num == <span class="hljs-number">0</span>:            num = <span class="hljs-string">'%s百'</span> % (num_dict[b_num])        <span class="hljs-keyword">elif</span> s_num == <span class="hljs-number">0</span>:            num = <span class="hljs-string">'%s百%s%s'</span> % (num_dict[b_num], num_dict.get(s_num, <span class="hljs-string">''</span>), num_dict.get(g_num, <span class="hljs-string">''</span>))        <span class="hljs-keyword">elif</span> g_num == <span class="hljs-number">0</span>:            num = <span class="hljs-string">'%s百%s十'</span> % (num_dict[b_num], num_dict.get(s_num, <span class="hljs-string">''</span>))        <span class="hljs-keyword">else</span>:            num = <span class="hljs-string">'%s百%s十%s'</span> % (num_dict[b_num], num_dict.get(s_num, <span class="hljs-string">''</span>), num_dict.get(g_num, <span class="hljs-string">''</span>))    <span class="hljs-keyword">elif</span> <span class="hljs-number">10</span> &lt;= num &lt; <span class="hljs-number">100</span>:        s_num = num // <span class="hljs-number">10</span>        g_num = (num - s_num * <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>        <span class="hljs-keyword">if</span> g_num == <span class="hljs-number">0</span>:            g_num = <span class="hljs-string">''</span>        num = <span class="hljs-string">'%s十%s'</span> % (num_dict[s_num], num_dict.get(g_num, <span class="hljs-string">''</span>))    <span class="hljs-keyword">elif</span> <span class="hljs-number">0</span> &lt;= num &lt; <span class="hljs-number">10</span>:        g_num = num        num = <span class="hljs-string">'%s'</span> % (num_dict[g_num])    <span class="hljs-keyword">elif</span> <span class="hljs-number">-10</span> &lt; num &lt; <span class="hljs-number">0</span>:        g_num = -num        num = <span class="hljs-string">'零下%s'</span> % (num_dict[g_num])    <span class="hljs-keyword">elif</span> <span class="hljs-number">-100</span> &lt; num &lt;= <span class="hljs-number">-10</span>:        num = -num        s_num = num // <span class="hljs-number">10</span>        g_num = (num - s_num * <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>        <span class="hljs-keyword">if</span> g_num == <span class="hljs-number">0</span>:            g_num = <span class="hljs-string">''</span>        num = <span class="hljs-string">'零下%s十%s'</span> % (num_dict[s_num], num_dict.get(g_num, <span class="hljs-string">''</span>))    <span class="hljs-keyword">return</span> num<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_weather</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># 下载墨迹天气主页源码</span>    res = requests.get(<span class="hljs-string">'http://tianqi.moji.com/'</span>, headers=headers)    <span class="hljs-comment"># 用BeautifulSoup获取所需信息</span>    soup = BeautifulSoup(res.text, <span class="hljs-string">"html.parser"</span>)    temp = soup.find(<span class="hljs-string">'div'</span>, attrs=&#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'wea_weather clearfix'</span>&#125;).em.getText()    temp = numtozh(int(temp))    weather = soup.find(<span class="hljs-string">'div'</span>, attrs=&#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'wea_weather clearfix'</span>&#125;).b.getText()    sd = soup.find(<span class="hljs-string">'div'</span>, attrs=&#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'wea_about clearfix'</span>&#125;).span.getText()    sd_num = re.search(<span class="hljs-string">r'\d+'</span>, sd).group()    sd_num_zh = numtozh(int(sd_num))    sd = sd.replace(sd_num, sd_num_zh)    wind = soup.find(<span class="hljs-string">'div'</span>, attrs=&#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'wea_about clearfix'</span>&#125;).em.getText()    aqi = soup.find(<span class="hljs-string">'div'</span>, attrs=&#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'wea_alert clearfix'</span>&#125;).em.getText()    aqi_num = re.search(<span class="hljs-string">r'\d+'</span>, aqi).group()    aqi_num_zh = numtozh(int(aqi_num))    aqi = aqi.replace(aqi_num, aqi_num_zh).replace(<span class="hljs-string">' '</span>, <span class="hljs-string">',空气质量'</span>)    info = soup.find(<span class="hljs-string">'div'</span>, attrs=&#123;<span class="hljs-string">'class'</span>: <span class="hljs-string">'wea_tips clearfix'</span>&#125;).em.getText()    sd = sd.replace(<span class="hljs-string">' '</span>, <span class="hljs-string">'百分之'</span>).replace(<span class="hljs-string">'%'</span>, <span class="hljs-string">''</span>)    aqi = <span class="hljs-string">'aqi'</span> + aqi    info = info.replace(<span class="hljs-string">'，'</span>, <span class="hljs-string">','</span>)    <span class="hljs-comment"># 获取今天的日期</span>    today = datetime.now().date().strftime(<span class="hljs-string">'%Y年%m月%d日'</span>)    <span class="hljs-comment"># 将获取的信息拼接成一句话</span>    text = <span class="hljs-string">'早上好！今天是%s,天气%s,温度%s摄氏度,%s,%s,%s,%s'</span> % \           (today, weather, temp, sd, wind, aqi, info)    <span class="hljs-keyword">return</span> text<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">text2voice</span><span class="hljs-params">(text)</span>:</span>    url = <span class="hljs-string">'http://tts.baidu.com/text2audio?idx=1&amp;tex=&#123;0&#125;&amp;cuid=baidu_speech_'</span> \          <span class="hljs-string">'demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=4&amp;per=4&amp;vol=5&amp;pit=5'</span>.format(text)    <span class="hljs-comment"># 直接播放语音</span>    os.system(<span class="hljs-string">'mplayer "%s"'</span> % url)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># 获取需要转换语音的文字</span>    text = get_weather()    print(text)    <span class="hljs-comment"># 获取音乐文件绝对地址</span>    mp3path2 = os.path.join(os.path.dirname(__file__), <span class="hljs-string">'2.mp3'</span>)    <span class="hljs-comment"># 先播放渔舟唱晚cut版做为闹钟</span>    os.system(<span class="hljs-string">'mplayer %s'</span> % <span class="hljs-string">"http://m7.music.126.net/20200321204545/92ef85b98df3233ebcf66b41529b1e0c/ymusic/714d/2975/d488/bcfd91fa30f23266c7151fbf43052634.mp3"</span>)    <span class="hljs-comment"># 播报语音天气</span>    text2voice(text)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div><h2 id="五、-定时任务"><a href="#五、-定时任务" class="headerlink" title="五、 定时任务"></a>五、 定时任务</h2><p>输入如下命令添加定时任务。</p><p><code>crontab -e</code></p><p>每天8点语音天气。假设你的<code>weather_voice.py</code>绝对路径为<code>/home/pi/Documents/weather_voice.py</code>，则文末添加一句：</p><p><code>0 8 * * * /usr/bin/python3 /home/pi/Documents/weather_voice.py</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24983204?refer=woodenrobot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原帖地址&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2
      
    
    </summary>
    
    
      <category term="python" scheme="https://closer_laps.gitee.io/categories/python/"/>
    
      <category term="树莓派" scheme="https://closer_laps.gitee.io/categories/python/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="https://closer_laps.gitee.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="python" scheme="https://closer_laps.gitee.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Linux VPS一键更换软件源脚本</title>
    <link href="https://closer_laps.gitee.io/2020/03/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/Linux-VPS%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E8%84%9A%E6%9C%AC/"/>
    <id>https://closer_laps.gitee.io/2020/03/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/Linux-VPS%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E8%84%9A%E6%9C%AC/</id>
    <published>2020-03-14T17:44:23.000Z</published>
    <updated>2020-03-14T17:50:20.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时候会遇到Linux的源更新速度非常的缓慢，特别是在国内使用默认的源，因为国内的网络环境，经常会出现无法更新，更新缓慢的情况。在这种情况下，更换一个更适合或者说更近，更快的软件源，会为你的Linux安装更新操作更加的流畅和顺利。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>系统要求</strong>：<code>CentOS 5+</code>、<code>Ubuntu 14.04+</code>、<code>Debian 7+</code></p><p>使用命令：</p><div class="hljs"><pre><code class="hljs sh"><span class="hljs-comment">#下载脚本</span>wget git.io/superupdate.sh<span class="hljs-comment">#运行脚本</span>bash superupdate.sh</code></pre></div><p>如果第一步你出现错误或执行后无任何输出，请检查是否安装<code>wget</code>和<code>ca-certificates</code>，使用命令：</p><div class="hljs"><pre><code class="hljs sh"><span class="hljs-comment">#Debian、Ubuntu</span>apt-get install -y wget &amp;&amp; apt-get install -y ca-certificates<span class="hljs-comment">#CentOS</span>yum install -y wget &amp;&amp; yum install -y ca-certificates</code></pre></div><p>对于Debian默认换源为<code>Fastly CDN</code>的<code>mirror</code>这个源有<code>Fastly</code>的加持对境外主机都有不错的速度。对于<code>Ubuntu</code>和 <code>CentOS</code>系统都默认换为阿里云的<code>mirror</code>，这个源有阿里云全球CDN的加持，全球都有不错的速度。</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>对于<code>Debian</code>系统还设置了四套其他的源，<code>阿里云</code>，<code>CloudFront CDN</code>，<code>网易163</code>，<code>中科大的源</code>，请根据需要使用参数一键设置如：</p><div class="hljs"><pre><code class="hljs sh">bash superupdate.sh cnbash superupdate.sh 163bash superupdate.sh aliyunbash superupdate.sh aws</code></pre></div><h2 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h2><p>如果配置的文件不满意，一键还原</p><div class="hljs"><pre><code class="hljs sh">bash superupdate.sh restore</code></pre></div><p><strong><a href="https://www.moerats.com/archives/784/" target="_blank" rel="noopener">文章出处</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有时候会遇到Linux的源更新速度非常的缓慢，特别是在国内使用默认的源，因为国内的网络环境，经常会出现无法更新，更新缓慢的情况。在这种情况下
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://closer_laps.gitee.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://closer_laps.gitee.io/tags/Linux/"/>
    
      <category term="换软件源" scheme="https://closer_laps.gitee.io/tags/%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>局域网内的主机实现外网访问(通过反向代理)</title>
    <link href="https://closer_laps.gitee.io/2020/03/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%BB%E6%9C%BA%E5%AE%9E%E7%8E%B0%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE-%E9%80%9A%E8%BF%87%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>https://closer_laps.gitee.io/2020/03/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%BB%E6%9C%BA%E5%AE%9E%E7%8E%B0%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE-%E9%80%9A%E8%BF%87%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2020-03-13T14:25:59.000Z</published>
    <updated>2020-04-14T11:24:22.968Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>比较简单的方法：<a href="https://zhuanlan.zhihu.com/p/36156129" target="_blank" rel="noopener">下载脚本，使用frp实现内网穿透</a></p></blockquote><p>本文记录如何在树莓派上如何实现反向代理，穿透内网进行远程登录和操作树莓派。本方法也适用于其他 Linux 系统和 mac osx<br>系统，但目录上有所区别。</p><h2 id="一：-必备条件"><a href="#一：-必备条件" class="headerlink" title="一： 必备条件"></a>一： 必备条件</h2><ol><li>具有公网 IP 的 vps 或者云主机。</li><li>局域网主机（如树莓派、nas）。</li></ol><h2 id="二：-准备工作（局域网主机上操作）"><a href="#二：-准备工作（局域网主机上操作）" class="headerlink" title="二： 准备工作（局域网主机上操作）"></a>二： 准备工作（局域网主机上操作）</h2><ol><li>局域网主机生成密匙(如果已经生成，请跳过)<br>打开终端，输入。<br><code>ssh-keygen</code> # 然后连续按三次Enter</li><li>输入如下命令：<br><code>ssh-copy-id -i ~/.ssh/id_rsa.pub 中文改为你的云主机用户名@中文改为你的云主机外网IP</code></li><li>使pi默认可以root登录<br><code>sudo passwd root</code> # 修改pi的root密码<br><code>sudo nano /etc/ssh/sshd_config</code><br>找到PermitRootLogin这一行，将前面的‘#’去掉，这一行改为<code>PermitRootLogin yes</code>。</li></ol><h2 id="三：-反向代理的操作"><a href="#三：-反向代理的操作" class="headerlink" title="三： 反向代理的操作"></a>三： 反向代理的操作</h2><p>原理图：</p><table><thead><tr><th>编号</th><th>IP</th><th>用户名</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>192.168.1.A</td><td>U_a</td><td>目标 计算机，（即树莓派），在局域网中，可以访问 A</td></tr><tr><td>B</td><td>B.B.B.B</td><td>U_b</td><td>代理服务器（我们的 vps 或云主机），在外网中，无法访问 A</td></tr><tr><td>C</td><td>-</td><td>U_c</td><td>外部的计算机，比如公司的电脑，可以访问B，无法直接访问 A</td></tr></tbody></table><h3 id="3-1-设计方案"><a href="#3-1-设计方案" class="headerlink" title="3.1 设计方案"></a>3.1 设计方案</h3><p>在 A 机器上做到 B 机器的反向代理；在 B 机器上做正向代理本地端口转发</p><h3 id="3-2环境需求"><a href="#3-2环境需求" class="headerlink" title="3.2环境需求"></a>3.2环境需求</h3><ul><li>每台机器上都需要 SSH 客户端</li><li>A、B 两台机器上需要 SSH 服务器端。通常是 openssh-server。</li></ul><p>ubuntu和debian上安装ssh代码如下：<br><code>sudo apt install openssl-server</code></p><h3 id="3-3-SSH-参数解释"><a href="#3-3-SSH-参数解释" class="headerlink" title="3.3 SSH 参数解释"></a>3.3 SSH 参数解释</h3><div class="hljs"><pre><code class="hljs C">-f 后台运行-C 允许压缩数据-N 不执行任何命令-R 将端口绑定到远程服务器，反向代理-L 将端口绑定到本地客户端，正向代理*******************区分大小写啊各位亲******************</code></pre></div><h3 id="3-4-具体步骤"><a href="#3-4-具体步骤" class="headerlink" title="3.4 具体步骤"></a>3.4 具体步骤</h3><h3 id="3-4-1-登录云主机上开启自动端口转发【云主机上操作】"><a href="#3-4-1-登录云主机上开启自动端口转发【云主机上操作】" class="headerlink" title="3.4.1 登录云主机上开启自动端口转发【云主机上操作】"></a>3.4.1 登录云主机上开启自动端口转发【云主机上操作】</h3><p><code>sudo vi /etc/ssh/sshd_config</code></p><p>找到GatewayPorts把前面的#去掉,后面改成yes，开启自动端口转发</p><h3 id="3-4-2-为-B-机器上端口，用来与-A-机器上的22端口绑定-【云主机上操作】"><a href="#3-4-2-为-B-机器上端口，用来与-A-机器上的22端口绑定-【云主机上操作】" class="headerlink" title="3.4.2 为 B 机器上端口，用来与 A 机器上的22端口绑定 【云主机上操作】"></a>3.4.2 为 B 机器上端口，用来与 A 机器上的22端口绑定 【云主机上操作】</h3><div class="hljs"><pre><code class="hljs sh">`ssh -fCNL <span class="hljs-string">'*:&lt;port_b2&gt;:localhost:&lt;port_b1&gt;'</span> localhost`<span class="hljs-comment"># 其中&lt;port_b1&gt;跟上面的端口相同</span><span class="hljs-comment"># &lt;port_b2&gt;改为和&lt;port_b1&gt;不同的大于1000端口号，如12345</span><span class="hljs-comment"># 代码示例：</span>ssh -fCNL <span class="hljs-string">'*:12345:localhost:7280'</span> localhost<span class="hljs-comment"># 查看ssh进程</span>ps aux | grep ssh<span class="hljs-comment"># 将云主机设为开机就正向代理</span><span class="hljs-built_in">which</span> rc.local<span class="hljs-comment"># cd进入上面的路径,我这边的路径是/etc/</span>sudo vi /etc/rc.local<span class="hljs-comment">#按i编辑，最后一行添加如下代码，:qw保存退出</span>sshpass -p <span class="hljs-string">'云主机密码'</span> ssh -fCNL <span class="hljs-string">'*:12345:localhost:7280'</span> localhost</code></pre></div><h2 id="四：-autossh-反向代理"><a href="#四：-autossh-反向代理" class="headerlink" title="四： autossh 反向代理"></a>四： autossh 反向代理</h2><h3 id="4-1-局域网主机（树莓派）开启autossh反向代理"><a href="#4-1-局域网主机（树莓派）开启autossh反向代理" class="headerlink" title="4.1 局域网主机（树莓派）开启autossh反向代理"></a>4.1 局域网主机（树莓派）开启autossh反向代理</h3><p><strong>在上文中，我们已经能够在C 计算机通过 B 计算机访问 A 计算机，但这个代理是暂时的，会出现代理随时断开或者下次重启树莓派又要重新开启，步骤麻烦。因此，我们把方案优化，升级 ssh 的代理工具，使用 autossh 这个工具。</strong></p><p>我们先要安装 autossh,在局域网主机（树莓派）上。<br><code>sudo apt install autossh -y</code><br><code>sudo apt install sshpass -y</code></p><p>然后输入命令绑定<br><code>autossh -M 5678 -NR &lt;port_b1&gt;:localhost:22 云主机用户名@云主机外网IP</code><br>代码示例：<br><code>sudo sshpass -p &#39;云主机密码&#39; autossh -M 5678 -CNR 7280:localhost:22 root@123.123.123.123</code></p><div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment">#ssh密码登录</span>sudo nano /etc/rc.localsudo sshpass -p <span class="hljs-string">'云主机密码'</span> autossh -M 5678 -CNR 7280:localhost:22 root@123.123.123.123</code></pre></div><p>就这样开启了反向代理，作用跟前面的一致。但，这里当代理连接断开后，会自动重连，不需要担心，突然连不上自己的 树莓派 了。</p><p>但我们的 pi 重启后，也是要输入上述 autossh 的命令，为了更加自动化，把autossh 加入开机启动里(需要ssh免密码登录)</p><div class="hljs"><pre><code class="hljs SH"><span class="hljs-comment"># ssh免密码登录</span>sudo nano /etc/rc.local<span class="hljs-comment"># 光标移动到exit 0 的上一行，输入命令。比如花生壳是用phddns.start启动，再这里加入后花生壳就会自动启动了。</span>/bin/su -c /usr/bin/autossh -M 5678 -CNR 7280:localhost:22 root@123.123.123.123</code></pre></div><p>-M 5678参数，负责通过5678端口监视连接状态，连接有问题时就会自动重连.</p><h3 id="4-2-通过其他电脑手机访问局域网主机（树莓派）"><a href="#4-2-通过其他电脑手机访问局域网主机（树莓派）" class="headerlink" title="4.2 通过其他电脑手机访问局域网主机（树莓派）"></a>4.2 通过其他电脑手机访问局域网主机（树莓派）</h3><p><code>ssh -p &lt;port_b2&gt; 你的云主机用户名@你的云主机外网IP</code><br><code>&lt;port_b2&gt;</code>改成上面的端口号，如1234</p><p>代码示例：<br><code>ssh -p12345 root@123.123.123.123</code></p><h2 id="五：-参考文档"><a href="#五：-参考文档" class="headerlink" title="五： 参考文档"></a>五： 参考文档</h2><blockquote><p><a href="https://qimajiang.com/2017/02/25/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BA%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">参考文档</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;比较简单的方法：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36156129&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载脚本，使用frp实现内网穿透&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://closer_laps.gitee.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://closer_laps.gitee.io/tags/Linux/"/>
    
      <category term="反向代理" scheme="https://closer_laps.gitee.io/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="外网访问" scheme="https://closer_laps.gitee.io/tags/%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>python学习之路 二：cookie</title>
    <link href="https://closer_laps.gitee.io/2020/03/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%20%E4%BA%8C%EF%BC%9Acookie/"/>
    <id>https://closer_laps.gitee.io/2020/03/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%20%E4%BA%8C%EF%BC%9Acookie/</id>
    <published>2020-03-07T06:04:52.000Z</published>
    <updated>2020-05-23T11:44:22.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一：-查看cookie"><a href="#一：-查看cookie" class="headerlink" title="一： 查看cookie"></a>一： 查看cookie</h2><ol><li>查看cookie的方法：按下F12打开开发者工具。<br>在<code>network</code>中可以看到请求发送的信息，在返回头中，会带有服务器提供的设置cookie的信息。<br>在<code>application</code>当中，可以看到相应网站的所有cookie，并不是只有登录信息，也不是所有的网站都有cookie。</li><li>http协议是一个无状态的协议，用到cookie和session来保存访问中的一些状态。<br>cookie和session都是由服务器生成的，cookie将保存在浏览器的本地，session记录在服务端。</li><li>cookie的几大属性<ul><li>name：名字（键），cookie的必须字段。</li><li>value：值。</li><li>domain：域。cookie的作用域名。</li><li>path：表示路径。/表示当前域名下所有的网页都能使用该cookie。<br>domain和path结合在一起，限定了cookie的适用范围。</li><li>expires：生命周期。限定cookie的使用时间。如果生命周期为Session的，表示只在当前这次会话中cookie有效，关闭浏览器之后立即失效。</li><li>sessionID：本次访问的会话留下的ID号。</li></ul></li></ol><h2 id="二：-用request操作"><a href="#二：-用request操作" class="headerlink" title="二： 用request操作"></a>二： 用request操作</h2><h3 id="2-1-直接在headers中使用cookie"><a href="#2-1-直接在headers中使用cookie" class="headerlink" title="2.1 直接在headers中使用cookie"></a>2.1 直接在headers中使用cookie</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> requestheaders = &#123;    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,    <span class="hljs-string">'Cookie'</span>: <span class="hljs-string">'按F12，在network中查看Cookie信息，复制进来即可'</span>&#125;url = <span class="hljs-string">'http://www.renren.com/880151247/profile'</span>req = request.Request(url, headers=headers)resp = request.urlopen(req)<span class="hljs-keyword">with</span> open(<span class="hljs-string">'renren.html'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> fp:    fp.write(resp.read().decode(<span class="hljs-string">'utf-8'</span>))</code></pre></div><h3 id="2-2-cookie的文件存储与读取"><a href="#2-2-cookie的文件存储与读取" class="headerlink" title="2.2 cookie的文件存储与读取"></a>2.2 cookie的文件存储与读取</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 保存cookie到本地：</span><span class="hljs-comment"># 保存cookie到本地，可以使用cookiejar的save方法，并且需要指定一个文件名：</span><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request<span class="hljs-keyword">from</span> http.cookiejar <span class="hljs-keyword">import</span> MozillaCookieJarcookiejar = MozillaCookieJar(<span class="hljs-string">"cookie.txt"</span>)handler = request.HTTPCookieProcessor(cookiejar)opener = request.build_opener(handler)headers = &#123;    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>&#125;req = request.Request(<span class="hljs-string">'http://httpbin.org/cookies'</span>,headers=headers)resp = opener.open(req)print(resp.read())cookiejar.save(ignore_discard=<span class="hljs-literal">True</span>,ignore_expires=<span class="hljs-literal">True</span>)<span class="hljs-comment"># 从本地加载cookie：</span><span class="hljs-comment"># 从本地加载cookie，需要使用cookiejar的load方法，并且也需要指定方法：</span><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> request<span class="hljs-keyword">from</span> http.cookiejar <span class="hljs-keyword">import</span> MozillaCookieJarcookiejar = MozillaCookieJar(<span class="hljs-string">"cookie.txt"</span>)cookiejar.load(ignore_expires=<span class="hljs-literal">True</span>,ignore_discard=<span class="hljs-literal">True</span>)handler = request.HTTPCookieProcessor(cookiejar)opener = request.build_opener(handler)headers = &#123;    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>&#125;req = request.Request(<span class="hljs-string">'http://httpbin.org/cookies'</span>,headers=headers)resp = opener.open(req)print(resp.read())</code></pre></div><h2 id="三：-用selenium操作"><a href="#三：-用selenium操作" class="headerlink" title="三： 用selenium操作"></a>三： 用selenium操作</h2><p>1 获取所有的cookie：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">for</span> cookie <span class="hljs-keyword">in</span> driver.get_cookies():    print(cookie)</code></pre></div><p>2 获取</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 获取cookie</span>driver.getcookie()<span class="hljs-comment"># 根据cookie的key获取value：</span>value = driver.get_cookie(key)</code></pre></div><p>3 删除所有的cookie：</p><div class="hljs"><pre><code class="hljs python">driver.delete_all_cookies()</code></pre></div><p>4 删除某个cookie：</p><div class="hljs"><pre><code class="hljs python">driver.delete_cookie(key)</code></pre></div><p>5 通过<code>driver.add_cookie(my_cookie)</code>的方法，加载cookie，在浏览器向服务端发起请求时带上cookie进行访问。</p><h2 id="四：-设置代理ip"><a href="#四：-设置代理ip" class="headerlink" title="四： 设置代理ip"></a>四： 设置代理ip</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriveroptions = webdriver.ChromeOptions()options.add_argument(<span class="hljs-string">"--proxy-server=http://110.73.2.248:8123"</span>)driver_path = <span class="hljs-string">r"D:\chromedriver.exe"</span>driver = webdriver.Chrome(executable_path=driver_path,chrome_options=options)driver.get(<span class="hljs-string">'http://httpbin.org/ip'</span>)</code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一：-查看cookie&quot;&gt;&lt;a href=&quot;#一：-查看cookie&quot; class=&quot;headerlink&quot; title=&quot;一： 查看cookie&quot;&gt;&lt;/a&gt;一： 查看cookie&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;查看cookie的方法：按下F12打开开发者工具。&lt;br&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="https://closer_laps.gitee.io/categories/python/"/>
    
      <category term="cookie" scheme="https://closer_laps.gitee.io/categories/python/cookie/"/>
    
    
      <category term="python" scheme="https://closer_laps.gitee.io/tags/python/"/>
    
      <category term="cookie" scheme="https://closer_laps.gitee.io/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>树莓派配置</title>
    <link href="https://closer_laps.gitee.io/2020/03/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE/"/>
    <id>https://closer_laps.gitee.io/2020/03/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE/</id>
    <published>2020-03-06T06:29:38.000Z</published>
    <updated>2020-04-24T15:28:26.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-修改密码及时间"><a href="#一-修改密码及时间" class="headerlink" title="一: 修改密码及时间"></a>一: 修改密码及时间</h2><h3 id="1-1-设置su及pi密码"><a href="#1-1-设置su及pi密码" class="headerlink" title="1.1 设置su及pi密码"></a>1.1 设置su及pi密码</h3><div class="hljs"><pre><code class="hljs shell">sudo passwd pi                   # 修改 Pi 密码  sudo passwd root                 # 设置 root 密码su root                          # 切换到 root 用户  su pi                            # 切换到 pi 用户</code></pre></div><h3 id="1-2-修改时间"><a href="#1-2-修改时间" class="headerlink" title="1.2 修改时间"></a>1.2 修改时间</h3><p>使用date 语句查看时间，如不正确，则：首先在终端中用下面的命令安装ntpdate工具</p><p><code>sudo apt install ntpdate</code></p><p>启用NTP</p><p><code>sudo timedatectl set-ntp true</code></p><p>继续使用date语句查看时间，如不正确，则：</p><p><code>sudo dpkg-reconfigure tzdata</code></p><p>修改时区为Asia Shanghai，继续使用date语句查看时间并确认正确</p><h2 id="二-中文环境"><a href="#二-中文环境" class="headerlink" title="二: 中文环境"></a>二: 中文环境</h2><h2 id="2-1-安装中文输入法"><a href="#2-1-安装中文输入法" class="headerlink" title="2.1 安装中文输入法"></a>2.1 安装中文输入法</h2><p><code>sudo apt install scim-pinyin</code></p><h2 id="2-2-配置中文环境"><a href="#2-2-配置中文环境" class="headerlink" title="2.2 配置中文环境"></a>2.2 配置中文环境</h2><p><code>sudo raspi-config</code></p><p>按4 -&gt; 1<br>在Configuring locales窗口中，找到zh_CN.UTF-8 UTF-8</p><p>空格选中，并在确认后再次选择zh_CN.UTF-8</p><h3 id="2-3-安装中文字库"><a href="#2-3-安装中文字库" class="headerlink" title="2.3 安装中文字库"></a>2.3 安装中文字库</h3><p><code>sudo apt install ttf-wqy-zenhei</code></p><p><code>reboot</code></p><h2 id="三-基本设置及软件"><a href="#三-基本设置及软件" class="headerlink" title="三: 基本设置及软件"></a>三: 基本设置及软件</h2><h3 id="3-1-开启SSH访问"><a href="#3-1-开启SSH访问" class="headerlink" title="3.1 开启SSH访问"></a>3.1 开启SSH访问</h3><p><code>sudo raspi-config</code></p><p>5 -&gt; P2 SSH -&gt; enable.</p><h3 id="3-2-设置为固定ip访问"><a href="#3-2-设置为固定ip访问" class="headerlink" title="3.2 设置为固定ip访问"></a>3.2 设置为固定ip访问</h3><p>先进入配置文件<br><code>sudo nano /etc/dhcpcd.conf</code></p><div class="hljs"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 有线设置</span>interface eth0<span class="hljs-meta">#</span><span class="bash"> 路由器ip</span>static routers=192.168.2.1<span class="hljs-meta">#</span><span class="bash"> DNS</span>static domain_name_servers=192.168.2.1 8.8.8.8static ip_address=192.168.2.4/24<span class="hljs-meta">#</span><span class="bash"> 无线设置</span>interface wlan0static routers=192.168.2.1static domain_name_servers=192.168.2.1 8.8.8.8static ip_address=192.168.2.4/24</code></pre></div><h3 id="3-3-添加树莓派开机启动命令，如花生壳"><a href="#3-3-添加树莓派开机启动命令，如花生壳" class="headerlink" title="3.3 添加树莓派开机启动命令，如花生壳"></a>3.3 添加树莓派开机启动命令，如花生壳</h3><div class="hljs"><pre><code class="hljs SH">sudo nano /etc/rc.local<span class="hljs-comment"># 在exit 0 的上一行输入命令。比如花生壳是用phddns.start启动，再这里加入后花生壳就会自动启动了。</span>sudo phddns.start</code></pre></div><h3 id="3-4-安装mysql-server"><a href="#3-4-安装mysql-server" class="headerlink" title="3.4 安装mysql-server"></a>3.4 安装mysql-server</h3><p>因mysql-server被收购，故安装mariadb-server，MariaDB是MySQL源代码的一个分支，一样用。</p><div class="hljs"><pre><code class="hljs sh">sudo apt install mariadb-server -y<span class="hljs-comment"># 通过命令连接到MariaDB</span>sudo mysql</code></pre></div><p>接下来配置mysql密码访问。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">use</span> mysql;<span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">password</span>=<span class="hljs-keyword">password</span>(<span class="hljs-string">'改为你的密码,比如root'</span>) <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span>=<span class="hljs-string">'root'</span>;<span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">plugin</span>=<span class="hljs-string">'mysql_native_password'</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span> = <span class="hljs-string">'root'</span>;<span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;exit</code></pre></div><div class="hljs"><pre><code class="hljs sh"><span class="hljs-comment"># 重启服务</span>sudo systemctl restart mariadb<span class="hljs-comment"># 密码登录mysql</span>mysql -u root -p</code></pre></div><p>下面配置MariaDB可远程连接</p><div class="hljs"><pre><code class="hljs sh"><span class="hljs-comment"># MariaDB默认只监听了127.0.0.1这个IP地址，是无法从外部连接到树莓派上MariaDB。故修改配置</span>nano /etc/mysql/mariadb.conf.d/50-server.cnf<span class="hljs-comment"># 注释其中的127.0.0.1所在一行，示例如下：</span><span class="hljs-comment"># bind-address            = 127.0.0.1</span><span class="hljs-comment"># 这样MariaDB就监听了所有的IP。</span></code></pre></div><div class="hljs"><pre><code class="hljs sql"><span class="hljs-comment">--授权用户能够连接MariaDB Server</span><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'改为你的密码，如root'</span>;<span class="hljs-comment">--更新权限</span><span class="hljs-keyword">FLUSH</span> <span class="hljs-keyword">PRIVILEGES</span>;</code></pre></div><h3 id="3-5-安装、配置和加速docker"><a href="#3-5-安装、配置和加速docker" class="headerlink" title="3.5 安装、配置和加速docker"></a>3.5 安装、配置和加速docker</h3><p><a href="https://shumeipai.nxez.com/2019/05/20/how-to-install-docker-on-your-raspberry-pi.html" target="_blank" rel="noopener">安装教程</a></p><div class="hljs"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 脚本安装</span>curl -fsSL https://get.docker.com -o get-docker.sh | sh<span class="hljs-meta">#</span><span class="bash"> 查看版本</span>docker -v<span class="hljs-meta">#</span><span class="bash"> 配置docker镜像加速</span><span class="hljs-meta">#</span><span class="bash"> 阿里云镜像获取地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，登陆后，左侧菜单选中镜像加速器就可以看到你的专属地址了</span><span class="hljs-meta">#</span><span class="bash"> 按照页面的操作文档配置加速</span>sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'&#123;  "registry-mirrors": ["https://改为你的加速器地址.mirror.aliyuncs.com"]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span class="hljs-meta">#</span><span class="bash"> 下载 Docker 图形化界面 portainer</span>sudo docker pull portainer/portainer<span class="hljs-meta">#</span><span class="bash"> 创建 portainer 容器</span>sudo docker volume create portainer_data<span class="hljs-meta">#</span><span class="bash"> 运行 portainer</span>sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer<span class="hljs-meta">#</span><span class="bash"> 输入树莓派ip:9000登录管理界面</span></code></pre></div><h2 id="四-安装Pi-hole搭建DNS缓存服务器，过滤网页广告"><a href="#四-安装Pi-hole搭建DNS缓存服务器，过滤网页广告" class="headerlink" title="四: 安装Pi-hole搭建DNS缓存服务器，过滤网页广告"></a>四: 安装Pi-hole搭建DNS缓存服务器，过滤网页广告</h2><p><strong>pi-hole使用后发现并不好用，故不推荐安装。</strong></p><h3 id="4-1-安装Pi-hole"><a href="#4-1-安装Pi-hole" class="headerlink" title="4.1 安装Pi-hole"></a>4.1 安装Pi-hole</h3><p>使用脚本自定义安装，在安装过程中可以自定义Pi-hole，命令如下：</p><div class="hljs"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> --depth 1 https://github.com/pi-hole/pi-hole.git Pi-hole<span class="hljs-built_in">cd</span> Pi-hole/automated\ install/bash basic-install.sh</code></pre></div><p>安装过程中，将会下载安装软件包，然后弹出一个红蓝界面，可以选择Pi-hole的配置，选择默认方式即可。安装后会生成后台的登陆密码，请记住，如果没看到这个密码也没关系，安装成功后可以自己设置。等待脚本的安装完成，约1-2个小时。</p><h3 id="4-2-使用"><a href="#4-2-使用" class="headerlink" title="4.2 使用"></a>4.2 使用</h3><p>Pi-hole安装成功后就会开始运行，如果你要使用它，请将你电脑的DNS改为树莓派的IP地址，同时，也应该将家庭路由器的DNS地址更改为树莓派当前的IP地址，这样才能使用树莓派的DNS服务和广告拦截服务。</p><h3 id="4-3-登陆Pi-hole"><a href="#4-3-登陆Pi-hole" class="headerlink" title="4.3 登陆Pi-hole"></a>4.3 登陆Pi-hole</h3><p>Pi-hole有一个美观的界面，可以直观的看到今日DNS查询屏蔽次数、今日DNS查询次数、屏蔽比例、屏蔽库中的域名数量等信息。Pi-hole界面的查看地址为：</p><p><code>http://&lt;your pi’s IP address&gt;/admin</code></p><p>其中<code>&lt;your pi’s IP address&gt;</code>用树莓派的IP地址替换即可。</p><h3 id="4-4-重置密码"><a href="#4-4-重置密码" class="headerlink" title="4.4 重置密码"></a>4.4 重置密码</h3><p>如果你忘记了密码，通过以下命令可以重置新的密码。</p><p><code>sudo pihole -a -p newpassword</code></p><h3 id="4-5-实时监控"><a href="#4-5-实时监控" class="headerlink" title="4.5 实时监控"></a>4.5 实时监控</h3><p>通过SSH实时监控，输入命令：</p><p><code>pihole -c</code></p><h3 id="4-6-升级Pihole"><a href="#4-6-升级Pihole" class="headerlink" title="4.6 升级Pihole"></a>4.6 升级Pihole</h3><p><code>pihole -up</code></p><h3 id="4-7-更改-重置GUI管理员密码"><a href="#4-7-更改-重置GUI管理员密码" class="headerlink" title="4.7 更改/重置GUI管理员密码"></a>4.7 更改/重置GUI管理员密码</h3><p><code>pihole -a -p</code></p><h3 id="4-8-检查pi-hole状态"><a href="#4-8-检查pi-hole状态" class="headerlink" title="4.8 检查pi-hole状态"></a>4.8 检查pi-hole状态</h3><p><code>pihole status</code></p><h3 id="4-9-重新配置pi-hole系统"><a href="#4-9-重新配置pi-hole系统" class="headerlink" title="4.9 重新配置pi-hole系统"></a>4.9 重新配置pi-hole系统</h3><p><code>pihole -r</code></p><h3 id="4-10-从系统中卸载Pi-hole"><a href="#4-10-从系统中卸载Pi-hole" class="headerlink" title="4.10 从系统中卸载Pi-hole"></a>4.10 从系统中卸载Pi-hole</h3><p><code>pihole uninstall</code></p><p>第一次选Y，第二次选N</p><h3 id="4-11-重启Pi-holes子系统"><a href="#4-11-重启Pi-holes子系统" class="headerlink" title="4.11 重启Pi-holes子系统"></a>4.11 重启Pi-holes子系统</h3><p><code>pihole restartdns</code></p><h3 id="4-12-帮助"><a href="#4-12-帮助" class="headerlink" title="4.12 帮助"></a>4.12 帮助</h3><p><code>pihole --help</code></p><p><strong>pi-hole使用后发现并不好用，故不推荐安装，已经卸载。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-修改密码及时间&quot;&gt;&lt;a href=&quot;#一-修改密码及时间&quot; class=&quot;headerlink&quot; title=&quot;一: 修改密码及时间&quot;&gt;&lt;/a&gt;一: 修改密码及时间&lt;/h2&gt;&lt;h3 id=&quot;1-1-设置su及pi密码&quot;&gt;&lt;a href=&quot;#1-1-设置su及p
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://closer_laps.gitee.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://closer_laps.gitee.io/tags/Linux/"/>
    
      <category term="树莓派" scheme="https://closer_laps.gitee.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>关系数据库MySQL入门</title>
    <link href="https://closer_laps.gitee.io/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93MySQL/"/>
    <id>https://closer_laps.gitee.io/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/SQL/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93MySQL/</id>
    <published>2020-02-23T07:18:37.000Z</published>
    <updated>2020-02-23T08:20:53.888Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本文转载于GitHub项目<a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">Python - 100天从新手到大师</a></strong></p></blockquote><h3 id="一：-关系数据库概述"><a href="#一：-关系数据库概述" class="headerlink" title="一： 关系数据库概述"></a>一： 关系数据库概述</h3><ol><li><p>数据持久化 - 将数据保存到能够长久保存数据的存储介质中，在掉电的情况下数据也不会丢失。</p></li><li><p>数据库发展史 - 网状数据库、层次数据库、关系数据库、NoSQL数据库。</p><blockquote><p>1970年，IBM的研究员E.F.Codd在<em>Communication of the ACM</em>上发表了名为<em>A Relational Model of Data for Large Shared Data Banks</em>的论文，提出了关系模型的概念，奠定了关系模型的理论基础。后来Codd又陆续发表多篇文章，论述了范式理论和衡量关系系统的12条标准，用数学理论奠定了关系数据库的基础。</p></blockquote></li><li><p>关系数据库特点。</p><ul><li><p>理论基础：集合论和关系代数。</p></li><li><p>具体表象：用二维表（有行和列）组织数据。</p></li><li><p>编程语言：结构化查询语言（SQL）。</p></li></ul></li><li><p>ER模型（实体关系模型）和概念模型图。</p><p><strong>ER模型</strong>，全称为<strong>实体关系模型</strong>（Entity-Relationship Model），由美籍华裔计算机科学家陈品山先生提出，是概念数据模型的高层描述方式，如下图所示。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/er_diagram.png" srcset="/img/loading.gif" alt="er_diagram.png"></p><ul><li>实体 - 矩形框</li><li>属性 - 椭圆框</li><li>关系 - 菱形框</li><li>重数 - 1:1（一对一） / 1:N（一对多） / M:N（多对多）</li></ul><p>实际项目开发中，我们可以利用数据库建模工具（如：PowerDesigner）来绘制概念数据模型（其本质就是ER模型），然后再设置好目标数据库系统，将概念模型转换成物理模型，最终生成创建二维表的SQL（很多工具都可以根据我们设计的物理模型图以及设定的目标数据库来导出SQL或直接生成数据表）。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/conceptual_model.png" srcset="/img/loading.gif" alt="conceptual_model.png"></p></li><li><p>关系数据库产品。</p><ul><li><a href="https://www.oracle.com/index.html" target="_blank" rel="noopener">Oracle</a> - 目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系数据库，它是一个完备关系的产品；作为分布式数据库，它实现了分布式处理的功能。在Oracle最新的12c版本中，还引入了多承租方架构，使用该架构可轻松部署和管理数据库云。</li><li><a href="https://www.ibm.com/analytics/us/en/db2/" target="_blank" rel="noopener">DB2</a> - IBM公司开发的、主要运行于Unix（包括IBM自家的<a href="https://zh.wikipedia.org/wiki/AIX" target="_blank" rel="noopener">AIX</a>）、Linux、以及Windows服务器版等系统的关系数据库产品。DB2历史悠久且被认为是最早使用SQL的数据库产品，它拥有较为强大的商业智能功能。</li><li><a href="https://www.microsoft.com/en-us/sql-server/" target="_blank" rel="noopener">SQL Server</a> - 由Microsoft开发和推广的关系型数据库产品，最初适用于中小企业的数据管理，但是近年来它的应用范围有所扩展，部分大企业甚至是跨国公司也开始基于它来构建自己的数据管理系统。</li><li><a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL</a> - MySQL是开放源代码的，任何人都可以在GPL（General Public License）的许可下下载并根据个性化的需要对其进行修改。MySQL因为其速度、可靠性和适应性而备受关注。</li><li><a href="">PostgreSQL</a> - 在BSD许可证下发行的开放源代码的关系数据库产品。</li></ul></li></ol><h3 id="二：-MySQL简介"><a href="#二：-MySQL简介" class="headerlink" title="二： MySQL简介"></a>二： MySQL简介</h3><p>MySQL最早是由瑞典的MySQL AB公司开发的一个开放源码的关系数据库管理系统，该公司于2008年被昇阳微系统公司（Sun Microsystems）收购。在2009年，甲骨文公司（Oracle）收购昇阳微系统公司，因此在这之后MySQL成为了Oracle旗下产品。</p><p>MySQL在过去由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用于中小型网站开发。随着MySQL的不断成熟，它也逐渐被应用于更多大规模网站和应用，比如维基百科、谷歌（Google）、脸书（Facebook）、淘宝网等网站都使用了MySQL来提供数据持久化服务。</p><p>甲骨文公司收购后昇阳微系统公司，大幅调涨MySQL商业版的售价，且甲骨文公司不再支持另一个自由软件项目<a href="https://zh.wikipedia.org/wiki/OpenSolaris" target="_blank" rel="noopener">OpenSolaris</a>的发展，因此导致自由软件社区对于Oracle是否还会持续支持MySQL社区版（MySQL的各个发行版本中唯一免费的版本）有所担忧，MySQL的创始人麦克尔·维德纽斯以MySQL为基础，成立分支计划<a href="https://zh.wikipedia.org/wiki/MariaDB" target="_blank" rel="noopener">MariaDB</a>（以他女儿的名字命名的数据库）。有许多原来使用MySQL数据库的公司（例如：维基百科）已经陆续完成了从MySQL数据库到MariaDB数据库的迁移。</p><ol><li><p>安装和配置</p><blockquote><p><strong>说明</strong>：下面的安装和配置都是以CentOS Linux环境为例，如果需要在其他系统下安装MySQL，读者可以自行在网络上查找对应的安装教程）。</p></blockquote><ul><li><p>刚才说过，MySQL有一个分支版本名叫MariaDB，该数据库旨在继续保持MySQL数据库在<a href="https://zh.wikipedia.org/wiki/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%AE%B8%E5%8F%AF%E8%AF%81" target="_blank" rel="noopener">GNU GPL</a>下开源。如果要使用MariaDB作为MySQL的替代品，可以使用下面的命令进行安装。</p><div class="hljs"><pre><code class="hljs Shell">yum install mariadb mariadb-server</code></pre></div></li><li><p>如果要安装官方版本的MySQL，可以在<a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL官方网站</a>下载安装文件。首先在下载页面中选择平台和版本，然后找到对应的下载链接。下面以MySQL 5.7.26版本和Red Hat Enterprise Linux为例，直接下载包含所有安装文件的归档文件，解归档之后通过包管理工具进行安装。</p><div class="hljs"><pre><code class="hljs Shell">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tartar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</code></pre></div><p>如果系统上有MariaDB相关的文件，需要先移除MariaDB相关的文件。</p><div class="hljs"><pre><code class="hljs Shell">yum list installed | grep mariadb | awk '&#123;print $1&#125;' | xargs yum erase -y</code></pre></div><p>接下来可以按照如下所示的顺序用RPM（Redhat Package Manager）工具安装MySQL。</p><div class="hljs"><pre><code class="hljs Shell">rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpmrpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpmrpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</code></pre></div><p>可以使用下面的命令查看已经安装的MySQL相关的包。</p><div class="hljs"><pre><code class="hljs Shell">rpm -qa | grep mysql</code></pre></div></li><li><p>配置MySQL。</p><p>MySQL的配置文件在<code>/etc</code>目录下，名为<code>my.cnf</code>，默认的配置文件内容如下所示。如果对这个文件不理解并没有关系，什么时候用到这个配置文件什么时候再了解它就行了。</p><div class="hljs"><pre><code class="hljs Shell">cat /etc/my.cnf</code></pre></div><div class="hljs"><pre><code class="hljs INI"><span class="hljs-comment"># For advice on how to change settings please see</span><span class="hljs-comment"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span><span class="hljs-section">[mysqld]</span><span class="hljs-comment">#</span><span class="hljs-comment"># Remove leading # and set to the amount of RAM for the most important data</span><span class="hljs-comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><span class="hljs-comment"># innodb_buffer_pool_size = 128M</span><span class="hljs-comment">#</span><span class="hljs-comment"># Remove leading # to turn on a very important data integrity option: logging</span><span class="hljs-comment"># changes to the binary log between backups.</span><span class="hljs-comment"># log_bin</span><span class="hljs-comment">#</span><span class="hljs-comment"># Remove leading # to set options mainly useful for reporting servers.</span><span class="hljs-comment"># The server defaults are faster for transactions and fast SELECTs.</span><span class="hljs-comment"># Adjust sizes as needed, experiment to find the optimal values.</span><span class="hljs-comment"># join_buffer_size = 128M</span><span class="hljs-comment"># sort_buffer_size = 2M</span><span class="hljs-comment"># read_rnd_buffer_size = 2M</span><span class="hljs-attr">datadir</span>=/var/lib/mysql<span class="hljs-attr">socket</span>=/var/lib/mysql/mysql.sock<span class="hljs-comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span><span class="hljs-attr">symbolic-links</span>=<span class="hljs-number">0</span><span class="hljs-attr">log-error</span>=/var/log/mysqld.log<span class="hljs-attr">pid-file</span>=/var/run/mysqld/mysqld.pid</code></pre></div></li><li><p>启动MySQL服务。</p><p>可以使用下面的命令来启动MySQL。</p><div class="hljs"><pre><code class="hljs Shell">service mysqld start</code></pre></div><p>在CentOS 7中，更推荐使用下面的命令来启动MySQL。</p><div class="hljs"><pre><code class="hljs Shell">systemctl start mysqld</code></pre></div><p>启动MySQL成功后，可以通过下面的命令来检查网络端口使用情况，MySQL默认使用3306端口。</p><div class="hljs"><pre><code class="hljs Shell">netstat -ntlp | grep mysql</code></pre></div><p>也可以使用下面的命令查找是否有名为mysqld的进程。</p><div class="hljs"><pre><code class="hljs Shell">pgrep mysqld</code></pre></div></li><li><p>使用MySQL客户端工具连接服务器。</p><p>命令行工具：</p><div class="hljs"><pre><code class="hljs Shell">mysql -u root -p</code></pre></div><blockquote><p>说明：启动客户端时，<code>-u</code>参数用来指定用户名，MySQL默认的超级管理账号为<code>root</code>；<code>-p</code>表示要输入密码（用户口令）；如果连接的是其他主机而非本机，可以用<code>-h</code>来指定连接主机的主机名或IP地址。</p></blockquote><p>如果是首次安装MySQL，可以使用下面的命令来找到默认的初始密码。</p><div class="hljs"><pre><code class="hljs Shell">cat /var/log/mysqld.log | grep password</code></pre></div><p>上面的命令会查看MySQL的日志带有password的行，在显示的结果中<code>root@localhost:</code>后面的部分就是默认设置的初始密码。</p><p>修改超级管理员（root）的访问口令为<code>123456</code>。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password_policy=<span class="hljs-number">0</span>;<span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password_length=<span class="hljs-number">6</span>;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'localhost'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'123456'</span>;</code></pre></div><blockquote><p><strong>说明</strong>：MySQL较新的版本默认不允许使用弱口令作为用户口令，所以我们通过上面的前两条命令修改了验证用户口令的策略和口令的长度。事实上我们不应该使用弱口令，因为存在用户口令被暴力破解的风险。近年来，攻击数据库窃取数据和劫持数据库勒索比特币的事件屡见不鲜，要避免这些潜在的风险，最为重要的一点是不要让数据库服务器暴露在公网上（最好的做法是将数据库置于内网，至少要做到不向公网开放数据库服务器的访问端口），另外要保管好<code>root</code>账号的口令，应用系统需要访问数据库时，通常不使用<code>root</code>账号进行访问，而是创建其他拥有适当权限的账号来访问。</p></blockquote><p>再次使用客户端工具连接MySQL服务器时，就可以使用新设置的口令了。在实际开发中，为了方便用户操作，可以选择图形化的客户端工具来连接MySQL服务器，包括：</p><ul><li>MySQL Workbench（官方提供的工具）</li><li>Navicat for MySQL（界面简单优雅，功能直观强大）</li><li>SQLyog for MySQL（强大的MySQL数据库管理员工具）</li></ul></li></ul></li><li><p>常用命令。</p><ul><li><p>查看服务器版本。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-keyword">version</span>();</code></pre></div></li><li><p>查看所有数据库。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">show</span> <span class="hljs-keyword">databases</span>;</code></pre></div></li><li><p>切换到指定数据库。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">use</span> mysql;</code></pre></div></li><li><p>查看数据库下所有表。</p><div class="hljs"><pre><code class="hljs Shell">show tables;</code></pre></div></li><li><p>获取帮助。</p><div class="hljs"><pre><code class="hljs SQL">? contents;? functions;? numeric functions;? round;? data types;? longblob;</code></pre></div></li></ul></li></ol><h3 id="三：-SQL详解"><a href="#三：-SQL详解" class="headerlink" title="三： SQL详解"></a>三： SQL详解</h3><h4 id="3-1-基本操作"><a href="#3-1-基本操作" class="headerlink" title="3.1 基本操作"></a>3.1 基本操作</h4><p>我们通常可以将SQL分为三类：DDL（数据定义语言）、DML（数据操作语言）和DCL（数据控制语言）。DDL主要用于创建（create）、删除（drop）、修改（alter）数据库中的对象，比如创建、删除和修改二维表；DML主要负责插入数据（insert）、删除数据（delete）、更新数据（update）和查询（select）；DCL通常用于授予权限（grant）和召回权限（revoke）。</p><blockquote><p>说明：SQL是不区分大小写的语言，为了书写方便，下面的SQL都使用了小写字母来书写。</p></blockquote><ol><li><p>DDL（数据定义语言）</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">-- 如果存在名为school的数据库就删除它</span><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> school;<span class="hljs-comment">-- 创建名为school的数据库并设置默认的字符集和排序方式</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> school <span class="hljs-keyword">default</span> <span class="hljs-keyword">charset</span> utf8;<span class="hljs-comment">-- 切换到school数据库上下文环境</span><span class="hljs-keyword">use</span> school;<span class="hljs-comment">-- 创建学院表</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_college(collid <span class="hljs-built_in">int</span> auto_increment <span class="hljs-keyword">comment</span> <span class="hljs-string">'编号'</span>,collname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'名称'</span>,collintro <span class="hljs-built_in">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">''</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'介绍'</span>,primary <span class="hljs-keyword">key</span> (collid));<span class="hljs-comment">-- 创建学生表</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_student(stuid <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'学号'</span>,stuname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'姓名'</span>,stusex <span class="hljs-built_in">boolean</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'性别'</span>,stubirth <span class="hljs-built_in">date</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'出生日期'</span>,stuaddr <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">''</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'籍贯'</span>,collid <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'所属学院'</span>,primary <span class="hljs-keyword">key</span> (stuid),<span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (collid) <span class="hljs-keyword">references</span> tb_college (collid));<span class="hljs-comment">-- 创建教师表</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_teacher(teaid <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'工号'</span>,teaname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'姓名'</span>,teatitle <span class="hljs-built_in">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">'助教'</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'职称'</span>,collid <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'所属学院'</span>,primary <span class="hljs-keyword">key</span> (teaid),<span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (collid) <span class="hljs-keyword">references</span> tb_college (collid));<span class="hljs-comment">-- 创建课程表</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_course(couid <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'编号'</span>,couname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'名称'</span>,coucredit <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'学分'</span>,teaid <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'授课老师'</span>,primary <span class="hljs-keyword">key</span> (couid),<span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (teaid) <span class="hljs-keyword">references</span> tb_teacher (teaid));<span class="hljs-comment">-- 创建选课记录表</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_record(recid <span class="hljs-built_in">int</span> auto_increment <span class="hljs-keyword">comment</span> <span class="hljs-string">'选课记录编号'</span>,<span class="hljs-keyword">sid</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'选课学生'</span>,cid <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'所选课程'</span>,seldate datetime <span class="hljs-keyword">default</span> <span class="hljs-keyword">now</span>() <span class="hljs-keyword">comment</span> <span class="hljs-string">'选课时间日期'</span>,score <span class="hljs-built_in">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">comment</span> <span class="hljs-string">'考试成绩'</span>,primary <span class="hljs-keyword">key</span> (recid),<span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (<span class="hljs-keyword">sid</span>) <span class="hljs-keyword">references</span> tb_student (stuid),<span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (cid) <span class="hljs-keyword">references</span> tb_course (couid),<span class="hljs-keyword">unique</span> (<span class="hljs-keyword">sid</span>, cid));</code></pre></div><p>上面的DDL有几个地方需要强调一下：</p><ul><li><p>创建数据库时，我们通过<code>default charset utf8</code>指定了数据库默认使用的字符集，我们推荐使用该字符集，因为utf8能够支持国际化编码。如果将来数据库中用到的字符可能包括类似于Emoji这样的图片字符，也可以将默认字符集设定为utf8mb4（最大4字节的utf-8编码）。查看MySQL支持的字符集可以执行下面的语句。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">show</span> <span class="hljs-built_in">character</span> <span class="hljs-keyword">set</span>;</code></pre></div><div class="hljs"><pre><code class="hljs plain">+----------+---------------------------------+---------------------+--------+| Charset  | Description                     | Default collation   | Maxlen |+----------+---------------------------------+---------------------+--------+| big5     | Big5 Traditional Chinese        | big5_chinese_ci     |      2 || dec8     | DEC West European               | dec8_swedish_ci     |      1 || cp850    | DOS West European               | cp850_general_ci    |      1 || hp8      | HP West European                | hp8_english_ci      |      1 || koi8r    | KOI8-R Relcom Russian           | koi8r_general_ci    |      1 || latin1   | cp1252 West European            | latin1_swedish_ci   |      1 || latin2   | ISO 8859-2 Central European     | latin2_general_ci   |      1 || swe7     | 7bit Swedish                    | swe7_swedish_ci     |      1 || ascii    | US ASCII                        | ascii_general_ci    |      1 || ujis     | EUC-JP Japanese                 | ujis_japanese_ci    |      3 || sjis     | Shift-JIS Japanese              | sjis_japanese_ci    |      2 || hebrew   | ISO 8859-8 Hebrew               | hebrew_general_ci   |      1 || tis620   | TIS620 Thai                     | tis620_thai_ci      |      1 || euckr    | EUC-KR Korean                   | euckr_korean_ci     |      2 || koi8u    | KOI8-U Ukrainian                | koi8u_general_ci    |      1 || gb2312   | GB2312 Simplified Chinese       | gb2312_chinese_ci   |      2 || greek    | ISO 8859-7 Greek                | greek_general_ci    |      1 || cp1250   | Windows Central European        | cp1250_general_ci   |      1 || gbk      | GBK Simplified Chinese          | gbk_chinese_ci      |      2 || latin5   | ISO 8859-9 Turkish              | latin5_turkish_ci   |      1 || armscii8 | ARMSCII-8 Armenian              | armscii8_general_ci |      1 || utf8     | UTF-8 Unicode                   | utf8_general_ci     |      3 || ucs2     | UCS-2 Unicode                   | ucs2_general_ci     |      2 || cp866    | DOS Russian                     | cp866_general_ci    |      1 || keybcs2  | DOS Kamenicky Czech-Slovak      | keybcs2_general_ci  |      1 || macce    | Mac Central European            | macce_general_ci    |      1 || macroman | Mac West European               | macroman_general_ci |      1 || cp852    | DOS Central European            | cp852_general_ci    |      1 || latin7   | ISO 8859-13 Baltic              | latin7_general_ci   |      1 || utf8mb4  | UTF-8 Unicode                   | utf8mb4_general_ci  |      4 || cp1251   | Windows Cyrillic                | cp1251_general_ci   |      1 || utf16    | UTF-16 Unicode                  | utf16_general_ci    |      4 || utf16le  | UTF-16LE Unicode                | utf16le_general_ci  |      4 || cp1256   | Windows Arabic                  | cp1256_general_ci   |      1 || cp1257   | Windows Baltic                  | cp1257_general_ci   |      1 || utf32    | UTF-32 Unicode                  | utf32_general_ci    |      4 || binary   | Binary pseudo charset           | binary              |      1 || geostd8  | GEOSTD8 Georgian                | geostd8_general_ci  |      1 || cp932    | SJIS for Windows Japanese       | cp932_japanese_ci   |      2 || eucjpms  | UJIS for Windows Japanese       | eucjpms_japanese_ci |      3 || gb18030  | China National Standard GB18030 | gb18030_chinese_ci  |      4 |+----------+---------------------------------+---------------------+--------+41 rows in set (0.00 sec)</code></pre></div><p>如果要设置MySQL服务启动时默认使用的字符集，可以修改MySQL的配置并添加以下内容</p><div class="hljs"><pre><code class="hljs INI"><span class="hljs-section">[mysqld]</span><span class="hljs-attr">character-set-server</span>=utf8</code></pre></div></li><li><p>在创建表的时候，我们可以在右圆括号的后面通过<code>engine=XXX</code>来指定表的存储引擎，MySQL支持多种存储引擎，可以通过<code>show engines</code>命令进行查看。MySQL 5.5以后的版本默认使用的存储引擎是InnoDB，它正好也就是我们推荐大家使用的存储引擎（因为InnoDB更适合互联网应用对高并发、性能以及事务支持等方面的需求）。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">show</span> <span class="hljs-keyword">engines</span>\G</code></pre></div><div class="hljs"><pre><code class="hljs plain">*************************** 1. row ***************************      Engine: InnoDB     Support: DEFAULT     Comment: Supports transactions, row-level locking, and foreign keysTransactions: YES          XA: YES  Savepoints: YES*************************** 2. row ***************************      Engine: MRG_MYISAM     Support: YES     Comment: Collection of identical MyISAM tablesTransactions: NO          XA: NO  Savepoints: NO*************************** 3. row ***************************      Engine: MEMORY     Support: YES     Comment: Hash based, stored in memory, useful for temporary tablesTransactions: NO          XA: NO  Savepoints: NO*************************** 4. row ***************************      Engine: BLACKHOLE     Support: YES     Comment: &#x2F;dev&#x2F;null storage engine (anything you write to it disappears)Transactions: NO          XA: NO  Savepoints: NO*************************** 5. row ***************************      Engine: MyISAM     Support: YES     Comment: MyISAM storage engineTransactions: NO          XA: NO  Savepoints: NO*************************** 6. row ***************************      Engine: CSV     Support: YES     Comment: CSV storage engineTransactions: NO          XA: NO  Savepoints: NO*************************** 7. row ***************************      Engine: ARCHIVE     Support: YES     Comment: Archive storage engineTransactions: NO          XA: NO  Savepoints: NO*************************** 8. row ***************************      Engine: PERFORMANCE_SCHEMA     Support: YES     Comment: Performance SchemaTransactions: NO          XA: NO  Savepoints: NO*************************** 9. row ***************************      Engine: FEDERATED     Support: NO     Comment: Federated MySQL storage engineTransactions: NULL          XA: NULL  Savepoints: NULL9 rows in set (0.00 sec)</code></pre></div><p>下面的表格对MySQL几种常用的数据引擎进行了简单的对比。</p><table><thead><tr><th>特性</th><th>InnoDB</th><th>MRG_MYISAM</th><th>MEMORY</th><th>MyISAM</th></tr></thead><tbody><tr><td>存储限制</td><td>有</td><td>没有</td><td>有</td><td>有</td></tr><tr><td>事务</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td></td><td></td><td>支持</td><td></td></tr><tr><td>全文检索</td><td>支持（5.6+）</td><td></td><td></td><td>支持</td></tr><tr><td>集群索引</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>数据缓存</td><td>支持</td><td></td><td>支持</td><td></td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据可压缩</td><td></td><td></td><td></td><td>支持</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中</td><td>低</td></tr><tr><td>存储空间使用</td><td>高</td><td>低</td><td></td><td>低</td></tr><tr><td>批量插入性能</td><td>低</td><td>高</td><td>高</td><td>高</td></tr><tr><td>是否支持外键</td><td>支持</td><td></td><td></td><td></td></tr></tbody></table><p>通过上面的比较我们可以了解到，InnoDB是唯一能够支持外键、事务以及行锁的存储引擎，所以我们之前说它更适合互联网应用，而且它也是较新的MySQL版本中默认使用的存储引擎。</p></li><li><p>在定义表结构为每个字段选择数据类型时，如果不清楚哪个数据类型更合适，可以通过MySQL的帮助系统来了解每种数据类型的特性、数据的长度和精度等相关信息。</p><div class="hljs"><pre><code class="hljs SQL">? data types</code></pre></div><div class="hljs"><pre><code class="hljs plain">You asked for help about help category: &quot;Data Types&quot;For more information, type &#39;help &lt;item&gt;&#39;, where &lt;item&gt; is one of the followingtopics:   AUTO_INCREMENT   BIGINT   BINARY   BIT   BLOB   BLOB DATA TYPE   BOOLEAN   CHAR   CHAR BYTE   DATE   DATETIME   DEC   DECIMAL   DOUBLE   DOUBLE PRECISION   ENUM   FLOAT   INT   INTEGER   LONGBLOB   LONGTEXT   MEDIUMBLOB   MEDIUMINT   MEDIUMTEXT   SET DATA TYPE   SMALLINT   TEXT   TIME   TIMESTAMP   TINYBLOB   TINYINT   TINYTEXT   VARBINARY   VARCHAR   YEAR DATA TYPE</code></pre></div><div class="hljs"><pre><code class="hljs SQL">? varchar</code></pre></div><div class="hljs"><pre><code class="hljs plain">Name: &#39;VARCHAR&#39;Description:[NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATEcollation_name]A variable-length string. M represents the maximum column length incharacters. The range of M is 0 to 65,535. The effective maximum lengthof a VARCHAR is subject to the maximum row size (65,535 bytes, which isshared among all columns) and the character set used. For example, utf8characters can require up to three bytes per character, so a VARCHARcolumn that uses the utf8 character set can be declared to be a maximumof 21,844 characters. Seehttp:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;column-count-limit.html.MySQL stores VARCHAR values as a 1-byte or 2-byte length prefix plusdata. The length prefix indicates the number of bytes in the value. AVARCHAR column uses one length byte if values require no more than 255bytes, two length bytes if values may require more than 255 bytes.*Note*:MySQL follows the standard SQL specification, and does not removetrailing spaces from VARCHAR values.VARCHAR is shorthand for CHARACTER VARYING. NATIONAL VARCHAR is thestandard SQL way to define that a VARCHAR column should use somepredefined character set. MySQL uses utf8 as this predefined characterset. http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;charset-national.html.NVARCHAR is shorthand for NATIONAL VARCHAR.URL: http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;string-type-overview.html</code></pre></div><p>在数据类型的选择上，保存字符串数据通常都使用VARCHAR和CHAR两种类型，前者通常称为变长字符串，而后者通常称为定长字符串；对于InnoDB存储引擎，行存储格式没有区分固定长度和可变长度列，因此VARCHAR类型好CHAR类型没有本质区别，后者不一定比前者性能更好。如果要保存的很大字符串，可以使用TEXT类型；如果要保存很大的字节串，可以使用BLOB（二进制大对象）类型。在MySQL中，TEXT和BLOB又分别包括TEXT、MEDIUMTEXT、LONGTEXT和BLOB、MEDIUMBLOB、LONGBLOB三种不同的类型，它们主要的区别在于存储数据的最大大小不同。保存浮点数可以用FLOAT或DOUBLE类型，而保存定点数应该使用DECIMAL类型。如果要保存时间日期，DATETIME类型优于TIMESTAMP类型，因为前者能表示的时间日期范围更大。</p></li></ul></li><li><p>DML</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">-- 插入学院数据</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_college (collname, collintro) <span class="hljs-keyword">values</span> (<span class="hljs-string">'计算机学院'</span>, <span class="hljs-string">'创建于1956年是我国首批建立计算机专业。学院现有计算机科学与技术一级学科和网络空间安全一级学科博士学位授予权，其中计算机科学与技术一级学科具有博士后流动站。计算机科学与技术一级学科在2017年全国第四轮学科评估中评为A；2019 U.S.News全球计算机学科排名26名；ESI学科排名0.945‰，进入全球前1‰，位列第43位。'</span>),(<span class="hljs-string">'外国语学院'</span>, <span class="hljs-string">'1998年浙江大学、杭州大学、浙江农业大学、浙江医科大学四校合并，成立新的浙江大学。1999年原浙江大学外语系、原杭州大学外国语学院、原杭州大学大外部、原浙江农业大学公外部、原浙江医科大学外语教学部合并，成立浙江大学外国语学院。2003年学院更名为浙江大学外国语言文化与国际交流学院。'</span>),(<span class="hljs-string">'经济管理学院'</span>, <span class="hljs-string">'四川大学经济学院历史悠久、传承厚重，其前身是创办于1905年的四川大学经济科,距今已有100多年的历史。已故著名经济学家彭迪先、张与九、蒋学模、胡寄窗、陶大镛、胡代光，以及当代著名学者刘诗白等曾先后在此任教或学习。在长期的办学过程中，学院坚持以马克思主义的立场、观点、方法为指导，围绕建设世界一流经济学院的奋斗目标，做实“两个伟大”深度融合，不断提高党的建设质量与科学推进一流事业深度融合。'</span>);<span class="hljs-comment">-- 插入学生数据</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_student (stuid, stuname, stusex, stubirth, stuaddr, collid) <span class="hljs-keyword">values</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">'杨逍'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1990-3-4'</span>, <span class="hljs-string">'四川成都'</span>, <span class="hljs-number">1</span>),(<span class="hljs-number">1002</span>, <span class="hljs-string">'任我行'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1992-2-2'</span>, <span class="hljs-string">'湖南长沙'</span>, <span class="hljs-number">1</span>),(<span class="hljs-number">1033</span>, <span class="hljs-string">'王语嫣'</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'1989-12-3'</span>, <span class="hljs-string">'四川成都'</span>, <span class="hljs-number">1</span>),(<span class="hljs-number">1572</span>, <span class="hljs-string">'岳不群'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1993-7-19'</span>, <span class="hljs-string">'陕西咸阳'</span>, <span class="hljs-number">1</span>),(<span class="hljs-number">1378</span>, <span class="hljs-string">'纪嫣然'</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'1995-8-12'</span>, <span class="hljs-string">'四川绵阳'</span>, <span class="hljs-number">1</span>),(<span class="hljs-number">1954</span>, <span class="hljs-string">'林平之'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1994-9-20'</span>, <span class="hljs-string">'福建莆田'</span>, <span class="hljs-number">1</span>),(<span class="hljs-number">2035</span>, <span class="hljs-string">'东方不败'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1988-6-30'</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>),(<span class="hljs-number">3011</span>, <span class="hljs-string">'林震南'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1985-12-12'</span>, <span class="hljs-string">'福建莆田'</span>, <span class="hljs-number">3</span>),(<span class="hljs-number">3755</span>, <span class="hljs-string">'项少龙'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1993-1-25'</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span>),(<span class="hljs-number">3923</span>, <span class="hljs-string">'杨不悔'</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'1985-4-17'</span>, <span class="hljs-string">'四川成都'</span>, <span class="hljs-number">3</span>),(<span class="hljs-number">4040</span>, <span class="hljs-string">'隔壁老王'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1989-1-1'</span>, <span class="hljs-string">'四川成都'</span>, <span class="hljs-number">2</span>);<span class="hljs-comment">-- 删除学生数据</span><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuid=<span class="hljs-number">4040</span>;<span class="hljs-comment">-- 更新学生数据</span><span class="hljs-keyword">update</span> tb_student <span class="hljs-keyword">set</span> stuname=<span class="hljs-string">'杨过'</span>, stuaddr=<span class="hljs-string">'湖南长沙'</span> <span class="hljs-keyword">where</span> stuid=<span class="hljs-number">1001</span>;<span class="hljs-comment">-- 插入老师数据</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_teacher (teaid, teaname, teatitle, collid) <span class="hljs-keyword">values</span> (<span class="hljs-number">1122</span>, <span class="hljs-string">'张三丰'</span>, <span class="hljs-string">'教授'</span>, <span class="hljs-number">1</span>),(<span class="hljs-number">1133</span>, <span class="hljs-string">'宋远桥'</span>, <span class="hljs-string">'副教授'</span>, <span class="hljs-number">1</span>),(<span class="hljs-number">1144</span>, <span class="hljs-string">'杨逍'</span>, <span class="hljs-string">'副教授'</span>, <span class="hljs-number">1</span>),(<span class="hljs-number">2255</span>, <span class="hljs-string">'范遥'</span>, <span class="hljs-string">'副教授'</span>, <span class="hljs-number">2</span>),(<span class="hljs-number">3366</span>, <span class="hljs-string">'韦一笑'</span>, <span class="hljs-string">'讲师'</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">-- 插入课程数据</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_course (couid, couname, coucredit, teaid) <span class="hljs-keyword">values</span> (<span class="hljs-number">1111</span>, <span class="hljs-string">'Python程序设计'</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1122</span>),(<span class="hljs-number">2222</span>, <span class="hljs-string">'Web前端开发'</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1122</span>),(<span class="hljs-number">3333</span>, <span class="hljs-string">'操作系统'</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1122</span>),(<span class="hljs-number">4444</span>, <span class="hljs-string">'计算机网络'</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1133</span>),(<span class="hljs-number">5555</span>, <span class="hljs-string">'编译原理'</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1144</span>),(<span class="hljs-number">6666</span>, <span class="hljs-string">'算法和数据结构'</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1144</span>),(<span class="hljs-number">7777</span>, <span class="hljs-string">'经贸法语'</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2255</span>),(<span class="hljs-number">8888</span>, <span class="hljs-string">'成本会计'</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3366</span>),(<span class="hljs-number">9999</span>, <span class="hljs-string">'审计学'</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3366</span>);<span class="hljs-comment">-- 插入选课数据</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_record (<span class="hljs-keyword">sid</span>, cid, seldate, score) <span class="hljs-keyword">values</span> (<span class="hljs-number">1001</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">95</span>),(<span class="hljs-number">1001</span>, <span class="hljs-number">2222</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">87.5</span>),(<span class="hljs-number">1001</span>, <span class="hljs-number">3333</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">100</span>),(<span class="hljs-number">1001</span>, <span class="hljs-number">4444</span>, <span class="hljs-string">'2018-09-03'</span>, <span class="hljs-literal">null</span>),(<span class="hljs-number">1001</span>, <span class="hljs-number">6666</span>, <span class="hljs-string">'2017-09-02'</span>, <span class="hljs-number">100</span>),(<span class="hljs-number">1002</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">'2017-09-03'</span>, <span class="hljs-number">65</span>),(<span class="hljs-number">1002</span>, <span class="hljs-number">5555</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">42</span>),(<span class="hljs-number">1033</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">'2017-09-03'</span>, <span class="hljs-number">92.5</span>),(<span class="hljs-number">1033</span>, <span class="hljs-number">4444</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">78</span>),(<span class="hljs-number">1033</span>, <span class="hljs-number">5555</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">82.5</span>),(<span class="hljs-number">1572</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">'2017-09-02'</span>, <span class="hljs-number">78</span>),(<span class="hljs-number">1378</span>, <span class="hljs-number">1111</span>, <span class="hljs-string">'2017-09-05'</span>, <span class="hljs-number">82</span>),(<span class="hljs-number">1378</span>, <span class="hljs-number">7777</span>, <span class="hljs-string">'2017-09-02'</span>, <span class="hljs-number">65.5</span>),(<span class="hljs-number">2035</span>, <span class="hljs-number">7777</span>, <span class="hljs-string">'2018-09-03'</span>, <span class="hljs-number">88</span>),(<span class="hljs-number">2035</span>, <span class="hljs-number">9999</span>, <span class="hljs-keyword">default</span>, <span class="hljs-literal">null</span>),(<span class="hljs-number">3755</span>, <span class="hljs-number">1111</span>, <span class="hljs-keyword">default</span>, <span class="hljs-literal">null</span>),(<span class="hljs-number">3755</span>, <span class="hljs-number">8888</span>, <span class="hljs-keyword">default</span>, <span class="hljs-literal">null</span>),(<span class="hljs-number">3755</span>, <span class="hljs-number">9999</span>, <span class="hljs-string">'2017-09-01'</span>, <span class="hljs-number">92</span>);</code></pre></div><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">-- 查询所有学生信息</span><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_student;<span class="hljs-comment">-- 查询所有课程名称及学分(投影和别名)</span><span class="hljs-keyword">select</span> couname, coucredit <span class="hljs-keyword">from</span> tb_course;<span class="hljs-keyword">select</span> couname <span class="hljs-keyword">as</span> 课程名称, coucredit <span class="hljs-keyword">as</span> 学分 <span class="hljs-keyword">from</span> tb_course;<span class="hljs-comment">-- 查询所有学生的姓名和性别(条件运算)</span><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">as</span> 姓名, <span class="hljs-keyword">case</span> stusex <span class="hljs-keyword">when</span> <span class="hljs-number">1</span> <span class="hljs-keyword">then</span> <span class="hljs-string">'男'</span> <span class="hljs-keyword">else</span> <span class="hljs-string">'女'</span> <span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> 性别 <span class="hljs-keyword">from</span> tb_student;<span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">as</span> 姓名, <span class="hljs-keyword">if</span>(stusex, <span class="hljs-string">'男'</span>, <span class="hljs-string">'女'</span>) <span class="hljs-keyword">as</span> 性别 <span class="hljs-keyword">from</span> tb_student;<span class="hljs-comment">-- 查询所有女学生的姓名和出生日期(筛选)</span><span class="hljs-keyword">select</span> stuname, stubirth <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stusex=<span class="hljs-number">0</span>;<span class="hljs-comment">-- 查询所有80后学生的姓名、性别和出生日期(筛选)</span><span class="hljs-keyword">select</span> stuname, stusex, stubirth <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stubirth&gt;=<span class="hljs-string">'1980-1-1'</span> <span class="hljs-keyword">and</span> stubirth&lt;=<span class="hljs-string">'1989-12-31'</span>;<span class="hljs-keyword">select</span> stuname, stusex, stubirth <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stubirth <span class="hljs-keyword">between</span> <span class="hljs-string">'1980-1-1'</span> <span class="hljs-keyword">and</span> <span class="hljs-string">'1989-12-31'</span>;<span class="hljs-comment">-- 查询姓"杨"的学生姓名和性别(模糊)</span><span class="hljs-keyword">select</span> stuname, stusex <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">'杨%'</span>;<span class="hljs-comment">-- 查询姓"杨"名字两个字的学生姓名和性别(模糊)</span><span class="hljs-keyword">select</span> stuname, stusex <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">'杨_'</span>;<span class="hljs-comment">-- 查询姓"杨"名字三个字的学生姓名和性别(模糊)</span><span class="hljs-keyword">select</span> stuname, stusex <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">'杨__'</span>;<span class="hljs-comment">-- 查询名字中有"不"字或"嫣"字的学生的姓名(模糊)</span><span class="hljs-keyword">select</span> stuname, stusex <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">'%不%'</span> <span class="hljs-keyword">or</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">'%嫣%'</span>;<span class="hljs-comment">-- 查询没有录入家庭住址的学生姓名(空值)</span><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuaddr <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">-- 查询录入了家庭住址的学生姓名(空值)</span><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuaddr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">-- 查询学生选课的所有日期(去重)</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> seldate <span class="hljs-keyword">from</span> tb_record;<span class="hljs-comment">-- 查询学生的家庭住址(去重)</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> stuaddr <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuaddr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">-- 查询男学生的姓名和生日按年龄从大到小排列(排序)</span><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">as</span> 姓名, <span class="hljs-keyword">datediff</span>(<span class="hljs-keyword">curdate</span>(), stubirth) <span class="hljs-keyword">div</span> <span class="hljs-number">365</span> <span class="hljs-keyword">as</span> 年龄 <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stusex=<span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 年龄 <span class="hljs-keyword">desc</span>;<span class="hljs-comment">-- 查询年龄最大的学生的出生日期(聚合函数)</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">min</span>(stubirth) <span class="hljs-keyword">from</span> tb_student;<span class="hljs-comment">-- 查询年龄最小的学生的出生日期(聚合函数)</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(stubirth) <span class="hljs-keyword">from</span> tb_student;<span class="hljs-comment">-- 查询男女学生的人数(分组和聚合函数)</span><span class="hljs-keyword">select</span> stusex, <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> stusex;<span class="hljs-comment">-- 查询课程编号为1111的课程的平均成绩(筛选和聚合函数)</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">where</span> cid=<span class="hljs-number">1111</span>;<span class="hljs-comment">-- 查询学号为1001的学生所有课程的平均分(筛选和聚合函数)</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">where</span> <span class="hljs-keyword">sid</span>=<span class="hljs-number">1001</span>;<span class="hljs-comment">-- 查询每个学生的学号和平均成绩(分组和聚合函数)</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">sid</span> <span class="hljs-keyword">as</span> 学号, <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">as</span> 平均分 <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">sid</span>;<span class="hljs-comment">-- 查询平均成绩大于等于90分的学生的学号和平均成绩</span><span class="hljs-comment">-- 分组以前的筛选使用where子句 / 分组以后的筛选使用having子句</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">sid</span> <span class="hljs-keyword">as</span> 学号, <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">as</span> 平均分 <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">sid</span> <span class="hljs-keyword">having</span> 平均分&gt;=<span class="hljs-number">90</span>;<span class="hljs-comment">-- 查询年龄最大的学生的姓名(子查询/嵌套的查询)</span><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stubirth=( <span class="hljs-keyword">select</span> <span class="hljs-keyword">min</span>(stubirth) <span class="hljs-keyword">from</span> tb_student );<span class="hljs-comment">-- 查询年龄最大的学生姓名和年龄(子查询+运算)</span><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">as</span> 姓名, <span class="hljs-keyword">datediff</span>(<span class="hljs-keyword">curdate</span>(), stubirth) <span class="hljs-keyword">div</span> <span class="hljs-number">365</span> <span class="hljs-keyword">as</span> 年龄 <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stubirth=( <span class="hljs-keyword">select</span> <span class="hljs-keyword">min</span>(stubirth) <span class="hljs-keyword">from</span> tb_student );<span class="hljs-comment">-- 查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)</span><span class="hljs-keyword">select</span> stuname <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuid <span class="hljs-keyword">in</span> ( <span class="hljs-keyword">select</span> stuid <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> stuid <span class="hljs-keyword">having</span> <span class="hljs-keyword">count</span>(stuid)&gt;<span class="hljs-number">2</span> );<span class="hljs-comment">-- 查询学生姓名、课程名称以及成绩(连接查询)</span><span class="hljs-keyword">select</span> stuname, couname, score <span class="hljs-keyword">from</span> tb_student t1, tb_course t2, tb_record t3 <span class="hljs-keyword">where</span> stuid=<span class="hljs-keyword">sid</span> <span class="hljs-keyword">and</span> couid=cid <span class="hljs-keyword">and</span> score <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">-- 查询学生姓名、课程名称以及成绩按成绩从高到低查询第11-15条记录(内连接+分页)</span><span class="hljs-keyword">select</span> stuname, couname, score <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_record <span class="hljs-keyword">on</span> stuid=<span class="hljs-keyword">sid</span> <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_course <span class="hljs-keyword">on</span> couid=cid <span class="hljs-keyword">where</span> score <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">10</span>;<span class="hljs-keyword">select</span> stuname, couname, score <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_record <span class="hljs-keyword">on</span> stuid=<span class="hljs-keyword">sid</span> <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_course <span class="hljs-keyword">on</span> couid=cid <span class="hljs-keyword">where</span> score <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>, <span class="hljs-number">5</span>;<span class="hljs-comment">-- 查询选课学生的姓名和平均成绩(子查询和连接查询)</span><span class="hljs-keyword">select</span> stuname, avgmark <span class="hljs-keyword">from</span> tb_student, ( <span class="hljs-keyword">select</span> <span class="hljs-keyword">sid</span>, <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">as</span> avgmark <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">sid</span> ) temp <span class="hljs-keyword">where</span> stuid=<span class="hljs-keyword">sid</span>;<span class="hljs-keyword">select</span> stuname, avgmark <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> ( <span class="hljs-keyword">select</span> <span class="hljs-keyword">sid</span>, <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">as</span> avgmark <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">sid</span> ) temp <span class="hljs-keyword">on</span> stuid=<span class="hljs-keyword">sid</span>;<span class="hljs-comment">-- 查询每个学生的姓名和选课数量(左外连接和子查询)</span><span class="hljs-keyword">select</span> stuname, <span class="hljs-keyword">ifnull</span>(total, <span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> ( <span class="hljs-keyword">select</span> <span class="hljs-keyword">sid</span>, <span class="hljs-keyword">count</span>(<span class="hljs-keyword">sid</span>) <span class="hljs-keyword">as</span> total <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">sid</span> ) temp <span class="hljs-keyword">on</span> stuid=<span class="hljs-keyword">sid</span>;</code></pre></div><p>上面的DML有几个地方需要加以说明：</p><ol><li><p>MySQL中支持多种类型的运算符，包括：算术运算符（+、-、*、/、%）、比较运算符（=、&lt;&gt;、&lt;=&gt;、&lt;、&lt;=、&gt;、&gt;=、BETWEEN…AND…、IN、IS NULL、IS NOT NULL、LIKE、RLIKE、REGEXP）、逻辑运算符（NOT、AND、OR、XOR）和位运算符（&amp;、|、^、~、&gt;&gt;、&lt;&lt;），我们可以在DML中使用这些运算符处理数据。</p></li><li><p>在查询数据时，可以在SELECT语句及其子句（如WHERE子句、ORDER BY子句、HAVING子句等）中使用函数，这些函数包括字符串函数、数值函数、时间日期函数、流程函数等，如下面的表格所示。</p><p>常用字符串函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT</td><td>将多个字符串连接成一个字符串</td></tr><tr><td>FORMAT</td><td>将数值格式化成字符串并指定保留几位小数</td></tr><tr><td>FROM_BASE64 / TO_BASE64</td><td>BASE64解码/编码</td></tr><tr><td>BIN / OCT / HEX</td><td>将数值转换成二进制/八进制/十六进制字符串</td></tr><tr><td>LOCATE</td><td>在字符串中查找一个子串的位置</td></tr><tr><td>LEFT / RIGHT</td><td>返回一个字符串左边/右边指定长度的字符</td></tr><tr><td>LENGTH / CHAR_LENGTH</td><td>返回字符串的长度以字节/字符为单位</td></tr><tr><td>LOWER / UPPER</td><td>返回字符串的小写/大写形式</td></tr><tr><td>LPAD / RPAD</td><td>如果字符串的长度不足，在字符串左边/右边填充指定的字符</td></tr><tr><td>LTRIM / RTRIM</td><td>去掉字符串前面/后面的空格</td></tr><tr><td>ORD / CHAR</td><td>返回字符对应的编码/返回编码对应的字符</td></tr><tr><td>STRCMP</td><td>比较字符串，返回-1、0、1分别表示小于、等于、大于</td></tr><tr><td>SUBSTRING</td><td>返回字符串指定范围的子串</td></tr></tbody></table><p>常用数值函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>ABS</td><td>返回一个数的绝度值</td></tr><tr><td>CEILING / FLOOR</td><td>返回一个数上取整/下取整的结果</td></tr><tr><td>CONV</td><td>将一个数从一种进制转换成另一种进制</td></tr><tr><td>CRC32</td><td>计算循环冗余校验码</td></tr><tr><td>EXP / LOG / LOG2 / LOG10</td><td>计算指数/对数</td></tr><tr><td>POW</td><td>求幂</td></tr><tr><td>RAND</td><td>返回[0,1)范围的随机数</td></tr><tr><td>ROUND</td><td>返回一个数四舍五入后的结果</td></tr><tr><td>SQRT</td><td>返回一个数的平方根</td></tr><tr><td>TRUNCATE</td><td>截断一个数到指定的精度</td></tr><tr><td>SIN / COS / TAN / COT / ASIN / ACOS / ATAN</td><td>三角函数</td></tr></tbody></table><p>常用时间日期函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE / CURTIME / NOW</td><td>获取当前日期/时间/日期和时间</td></tr><tr><td>ADDDATE / SUBDATE</td><td>将两个日期表达式相加/相减并返回结果</td></tr><tr><td>DATE / TIME</td><td>从字符串中获取日期/时间</td></tr><tr><td>YEAR / MONTH / DAY</td><td>从日期中获取年/月/日</td></tr><tr><td>HOUR / MINUTE / SECOND</td><td>从时间中获取时/分/秒</td></tr><tr><td>DATEDIFF / TIMEDIFF</td><td>返回两个时间日期表达式相差多少天/小时</td></tr><tr><td>MAKEDATE / MAKETIME</td><td>制造一个日期/时间</td></tr></tbody></table><p>常用流程函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF</td><td>根据条件是否成立返回不同的值</td></tr><tr><td>IFNULL</td><td>如果为NULL则返回指定的值否则就返回本身</td></tr><tr><td>NULLIF</td><td>两个表达式相等就返回NULL否则返回第一个表达式的值</td></tr></tbody></table><p>其他常用函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>MD5 / SHA1 / SHA2</td><td>返回字符串对应的哈希摘要</td></tr><tr><td>CHARSET / COLLATION</td><td>返回字符集/校对规则</td></tr><tr><td>USER / CURRENT_USER</td><td>返回当前用户</td></tr><tr><td>DATABASE</td><td>返回当前数据库名</td></tr><tr><td>VERSION</td><td>返回当前数据库版本</td></tr><tr><td>FOUND_ROWS / ROW_COUNT</td><td>返回查询到的行数/受影响的行数</td></tr><tr><td>LAST_INSERT_ID</td><td>返回最后一个自增主键的值</td></tr><tr><td>UUID / UUID_SHORT</td><td>返回全局唯一标识符</td></tr></tbody></table></li></ol></li><li><p>DCL</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-comment">-- 创建可以远程登录的root账号并为其指定口令</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'123456'</span>;<span class="hljs-comment">-- 为远程登录的root账号授权操作所有数据库所有对象的所有权限并允许其将权限再次赋予其他用户</span><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">option</span>;<span class="hljs-comment">-- 创建名为hellokitty的用户并为其指定口令</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">'hellokitty'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'123123'</span>;<span class="hljs-comment">-- 将对school数据库所有对象的所有操作权限授予hellokitty</span><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> school.* <span class="hljs-keyword">to</span> <span class="hljs-string">'hellokitty'</span>@<span class="hljs-string">'%'</span>;<span class="hljs-comment">-- 召回hellokitty对school数据库所有对象的insert/delete/update权限</span><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">insert</span>, <span class="hljs-keyword">delete</span>, <span class="hljs-keyword">update</span> <span class="hljs-keyword">on</span> school.* <span class="hljs-keyword">from</span> <span class="hljs-string">'hellokitty'</span>@<span class="hljs-string">'%'</span>;</code></pre></div><blockquote><p>说明：创建一个可以允许任意主机登录并且具有超级管理员权限的用户在现实中并不是一个明智的决定，因为一旦该账号的口令泄露或者被破解，数据库将会面临灾难级的风险。</p></blockquote></li></ol><h4 id="3-2-索引"><a href="#3-2-索引" class="headerlink" title="3.2 索引"></a>3.2 索引</h4><p>索引是关系型数据库中用来提升查询性能最为重要的手段。关系型数据库中的索引就像一本书的目录，我们可以想象一下，如果要从一本书中找出某个知识点，但是这本书没有目录，这将是意见多么可怕的事情（我们估计得一篇一篇的翻下去，才能确定这个知识点到底在什么位置）。创建索引虽然会带来存储空间上的开销，就像一本书的目录会占用一部分的篇幅一样，但是在牺牲空间后换来的查询时间的减少也是非常显著的。</p><p>MySQL中，所有数据类型的列都可以被索引，常用的存储引擎InnoDB和MyISAM能支持每个表创建16个索引。InnoDB和MyISAM使用的索引其底层算法是B-tree（B树），B-tree是一种自平衡的树，类似于平衡二叉排序树，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的操作都在对数时间内完成。</p><p>接下来我们通过一个简单的例子来说明索引的意义，比如我们要根据学生的姓名来查找学生，这个场景在实际开发中应该经常遇到，就跟通过商品名称查找商品道理是一样的。我们可以使用MySQL的<code>explain</code>关键字来查看SQL的执行计划。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname=<span class="hljs-string">'林震南'</span>\G</code></pre></div><div class="hljs"><pre><code class="hljs plain">*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: tb_student   partitions: NULL         type: ALLpossible_keys: NULL          key: NULL      key_len: NULL          ref: NULL         rows: 11     filtered: 10.00        Extra: Using where1 row in set, 1 warning (0.00 sec)</code></pre></div><p>在上面的SQL执行计划中，有几项值得我们关注：</p><ol><li>type：MySQL在表中找到满足条件的行的方式，也称为访问类型，包括：ALL（全表扫描）、index（索引全扫描）、range（索引范围扫描）、ref（非唯一索引扫描）、eq_ref（唯一索引扫描）、const/system、NULL。在所有的访问类型中，很显然ALL是性能最差的，它代表了全表扫描是指要扫描表中的每一行才能找到匹配的行。</li><li>possible_keys：MySQL可以选择的索引，但是<strong>有可能不会使用</strong>。</li><li>key：MySQL真正使用的索引。</li><li>rows：执行查询需要扫描的行数，这是一个<strong>预估值</strong>。</li></ol><p>从上面的执行计划可以看出，当我们通过学生名字查询学生时实际上是进行了全表扫描，不言而喻这个查询性能肯定是非常糟糕的，尤其是在表中的行很多的时候。如果我们需要经常通过学生姓名来查询学生，那么就应该在学生姓名对应的列上创建索引，通过索引来加速查询。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> idx_student_name <span class="hljs-keyword">on</span> tb_student(stuname);</code></pre></div><p>再次查看刚才的SQL对应的执行计划。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname=<span class="hljs-string">'林震南'</span>\G</code></pre></div><div class="hljs"><pre><code class="hljs plain">*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: tb_student   partitions: NULL         type: refpossible_keys: idx_student_name          key: idx_student_name      key_len: 62          ref: const         rows: 1     filtered: 100.00        Extra: NULL1 row in set, 1 warning (0.00 sec)</code></pre></div><p>可以注意到，在对学生姓名创建索引后，刚才的查询已经不是全表扫描而是基于索引的查询，而且扫描的行只有唯一的一行，这显然大大的提升了查询的性能。MySQL中还允许创建前缀索引，即对索引字段的前N个字符创建索引，这样的话可以减少索引占用的空间（但节省了空间很有可能会浪费时间，<strong>时间和空间是不可调和的矛盾</strong>），如下所示。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> idx_student_name_1 <span class="hljs-keyword">on</span> tb_student(stuname(<span class="hljs-number">1</span>));</code></pre></div><p>上面的索引相当于是根据学生姓名的第一个字来创建的索引，我们再看看SQL执行计划。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_student <span class="hljs-keyword">where</span> stuname=<span class="hljs-string">'林震南'</span>\G</code></pre></div><div class="hljs"><pre><code class="hljs plain">*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: tb_student   partitions: NULL         type: refpossible_keys: idx_student_name          key: idx_student_name      key_len: 5          ref: const         rows: 2     filtered: 100.00        Extra: Using where1 row in set, 1 warning (0.00 sec)</code></pre></div><p>不知道大家是否注意到，这一次扫描的行变成了2行，因为学生表中有两个姓“林”的学生，我们只用姓名的第一个字作为索引的话，在查询时通过索引就会找到这两行。</p><p>如果要删除索引，可以使用下面的SQL。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_student <span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> idx_student_name;</code></pre></div><p>或者</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> idx_student_name <span class="hljs-keyword">on</span> tb_student;</code></pre></div><p>我们简单的为大家总结一下索引的设计原则：</p><ol><li><strong>最适合</strong>索引的列是出现在<strong>WHERE子句</strong>和连接子句中的列。</li><li>索引列的基数越大（取值多重复值少），索引的效果就越好。</li><li>使用<strong>前缀索引</strong>可以减少索引占用的空间，内存中可以缓存更多的索引。</li><li><strong>索引不是越多越好</strong>，虽然索引加速了读操作（查询），但是写操作（增、删、改）都会变得更慢，因为数据的变化会导致索引的更新，就如同书籍章节的增删需要更新目录一样。</li><li>使用InnoDB存储引擎时，表的普通索引都会保存主键的值，所以<strong>主键要尽可能选择较短的数据类型</strong>，这样可以有效的减少索引占用的空间，利用提升索引的缓存效果。</li></ol><p>最后，还有一点需要说明，InnoDB使用的B-tree索引，数值类型的列除了等值判断时索引会生效之外，使用&gt;、&lt;、&gt;=、&lt;=、BETWEEN…AND… 、&lt;&gt;时，索引仍然生效；对于字符串类型的列，如果使用不以通配符开头的模糊查询，索引也是起作用的，但是其他的情况会导致索引失效，这就意味着很有可能会做全表查询。</p><h4 id="3-3-视图"><a href="#3-3-视图" class="headerlink" title="3.3 视图"></a>3.3 视图</h4><p>视图是关系型数据库中将一组查询指令构成的结果集组合成可查询的数据表的对象。简单的说，视图就是虚拟的表，但与数据表不同的是，数据表是一种实体结构，而视图是一种虚拟结构，你也可以将视图理解为保存在数据库中被赋予名字的SQL语句。</p><p>使用视图可以获得以下好处：</p><ol><li>可以将实体数据表隐藏起来，让外部程序无法得知实际的数据结构，让访问者可以使用表的组成部分而不是整个表，降低数据库被攻击的风险。</li><li>在大多数的情况下视图是只读的（更新视图的操作通常都有诸多的限制），外部程序无法直接透过视图修改数据。</li><li>重用SQL语句，将高度复杂的查询包装在视图表中，直接访问该视图即可取出需要的数据；也可以将视图视为数据表进行连接查询。</li><li>视图可以返回与实体数据表不同格式的数据，</li></ol><p>创建视图。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> vw_score <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">sid</span>, <span class="hljs-keyword">round</span>(<span class="hljs-keyword">avg</span>(score), <span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> avgscore <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">sid</span>;<span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> vw_student_score <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> stuname, avgscore <span class="hljs-keyword">from</span> tb_student, vw_score  <span class="hljs-keyword">where</span> stuid=<span class="hljs-keyword">sid</span>;</code></pre></div><blockquote><p><strong>提示</strong>：因为视图不包含数据，所以每次使用视图时，都必须执行查询以获得数据，如果你使用了连接查询、嵌套查询创建了较为复杂的视图，你可能会发现查询性能下降得很厉害。因此，在使用复杂的视图前，应该进行测试以确保其性能能够满足应用的需求。</p></blockquote><p>使用视图。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> stuname, avgscore <span class="hljs-keyword">from</span> vw_student_score <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> avgscore <span class="hljs-keyword">desc</span>;</code></pre></div><div class="hljs"><pre><code class="hljs plain">+--------------+----------+| stuname      | avgscore |+--------------+----------+| 杨过         |     95.6 || 任我行       |     53.5 || 王语嫣       |     84.3 || 纪嫣然       |     73.8 || 岳不群       |     78.0 || 东方不败     |     88.0 || 项少龙       |     92.0 |+--------------+----------+</code></pre></div><p>既然视图是一张虚拟的表，那么视图的中的数据可以更新吗？视图的可更新性要视具体情况而定，以下类型的视图是不能更新的：</p><ol><li>使用了聚合函数（SUM、MIN、MAX、AVG、COUNT等）、DISTINCT、GROUP BY、HAVING、UNION或者UNION ALL的视图。</li><li>SELECT中包含了子查询的视图。</li><li>FROM子句中包含了一个不能更新的视图的视图。</li><li>WHERE子句的子查询引用了FROM子句中的表的视图。</li></ol><p>删除视图。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> vw_student_score;</code></pre></div><blockquote><p><strong>说明</strong>：如果希望更新视图，可以先用上面的命令删除视图，也可以通过<code>create or replace view</code>来更新视图。</p></blockquote><p>视图的规则和限制。</p><ol><li>视图可以嵌套，可以利用从其他视图中检索的数据来构造一个新的视图。视图也可以和表一起使用。</li><li>创建视图时可以使用<code>order by</code>子句，但如果从视图中检索数据时也使用了<code>order by</code>，那么该视图中原先的<code>order by</code>会被覆盖。</li><li>视图无法使用索引，也不会激发触发器（实际开发中因为性能等各方面的考虑，通常不建议使用触发器，所以我们也不对这个概念进行介绍）的执行。</li></ol><h4 id="3-4-存储过程"><a href="#3-4-存储过程" class="headerlink" title="3.4 存储过程"></a>3.4 存储过程</h4><p>存储过程是事先编译好存储在数据库中的一组SQL的集合，调用存储过程可以简化应用程序开发人员的工作，减少与数据库服务器之间的通信，对于提升数据操作的性能也是有帮助的。其实迄今为止，我们使用的SQL语句都是针对一个或多个表的单条语句，但在实际开发中经常会遇到某个操作需要多条SQL语句才能完成的情况。例如，电商网站在受理用户订单时，需要做以下一系列的处理。</p><ol><li>通过查询来核对库存中是否有对应的物品以及库存是否充足。</li><li>如果库存有物品，需要锁定库存以确保这些物品不再卖给别人， 并且要减少可用的物品数量以反映正确的库存量。</li><li>如果库存不足，可能需要进一步与供应商进行交互或者至少产生一条系统提示消息。</li><li>不管受理订单是否成功，都需要产生流水记录，而且需要给对应的用户产生一条通知信息。</li></ol><p>我们可以通过存储过程将复杂的操作封装起来，这样不仅有助于保证数据的一致性，而且将来如果业务发生了变动，只需要调整和修改存储过程即可。对于调用存储过程的用户来说，存储过程并没有暴露数据表的细节，而且执行存储过程比一条条的执行一组SQL要快得多。</p><p>下面的存储过程实现了查询某门课程的最高分、最低分和平均分。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> sp_score_by_cid;delimiter $$<span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> sp_score_by_cid(courseId <span class="hljs-built_in">int</span>, <span class="hljs-keyword">out</span> maxScore <span class="hljs-built_in">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>), <span class="hljs-keyword">out</span> minScore <span class="hljs-built_in">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>),<span class="hljs-keyword">out</span> avgScore <span class="hljs-built_in">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>))<span class="hljs-keyword">begin</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(score) <span class="hljs-keyword">into</span> maxScore <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">where</span> cid=courseId;<span class="hljs-keyword">select</span> <span class="hljs-keyword">min</span>(score) <span class="hljs-keyword">into</span> minScore <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">where</span> cid=courseId;<span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(score) <span class="hljs-keyword">into</span> avgScore <span class="hljs-keyword">from</span> tb_record <span class="hljs-keyword">where</span> cid=courseId;<span class="hljs-keyword">end</span> $$delimiter ;<span class="hljs-keyword">call</span> sp_score_by_cid(<span class="hljs-number">1111</span>, @a, @b, @c);<span class="hljs-keyword">select</span> @a, @b, @c;</code></pre></div><blockquote><p>说明：在定义存储过程时，因为可能需要书写多条SQL，而分隔这些SQL需要使用分号作为分隔符，如果这个时候，仍然用分号表示整段代码结束，那么定义存储过程的SQL就会出现错误，所以上面我们用<code>delimiter $$</code>将整段代码结束的标记定义为<code>$$</code>，那么代码中的分号将不再表示整段代码的结束，需要马上执行，整段代码在遇到<code>end $$</code>时才输入完成并执行。在定义完存储过程后，通过<code>delimiter ;</code>将结束符重新改回成分号。</p></blockquote><p>上面定义的存储过程有四个参数，其中第一个参数是输入参数，代表课程的编号，后面的参数都是输出参数，因为存储过程不能定义返回值，只能通过输出参数将执行结果带出，定义输出参数的关键字是<code>out</code>，默认情况下参数都是输入参数。</p><p>调用存储过程。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">call</span> sp_score_by_cid(<span class="hljs-number">1111</span>, @a, @b, @c);</code></pre></div><p>获取输出参数的值。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> @a <span class="hljs-keyword">as</span> 最高分, @b <span class="hljs-keyword">as</span> 最低分, @c <span class="hljs-keyword">as</span> 平均分;</code></pre></div><p>删除存储过程。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> sp_score_by_cid;</code></pre></div><p>在存储过程中，我们可以定义变量、条件，可以使用分支和循环语句，可以通过游标操作查询结果，还可以使用事件调度器，这些内容我们暂时不在此处进行介绍。虽然我们说了很多存储过程的好处，但是在实际开发中，如果过度的使用存储过程，将大量复杂的运算放到存储过程中，也会导致占用数据库服务器的CPU资源，造成数据库服务器承受巨大的压力。为此，我们一般会将复杂的运算和处理交给应用服务器，因为很容易部署多台应用服务器来分摊这些压力。</p><h3 id="四：-几个重要的概念"><a href="#四：-几个重要的概念" class="headerlink" title="四： 几个重要的概念"></a>四： 几个重要的概念</h3><h4 id="4-1-范式理论-设计二维表的指导思想"><a href="#4-1-范式理论-设计二维表的指导思想" class="headerlink" title="4.1 范式理论 - 设计二维表的指导思想"></a>4.1 范式理论 - 设计二维表的指导思想</h4><ol><li>第一范式：数据表的每个列的值域都是由原子值组成的，不能够再分割。</li><li>第二范式：数据表里的所有数据都要和该数据表的键（主键与候选键）有完全依赖关系。</li><li>第三范式：所有非键属性都只和候选键有相关性，也就是说非键属性之间应该是独立无关的。</li></ol><h4 id="4-2-数据完整性"><a href="#4-2-数据完整性" class="headerlink" title="4.2 数据完整性"></a>4.2 数据完整性</h4><ol><li><p>实体完整性 - 每个实体都是独一无二的</p><ul><li>主键（primary key） / 唯一约束 / 唯一索引（unique）</li></ul></li><li><p>引用完整性（参照完整性）- 关系中不允许引用不存在的实体</p><ul><li>外键（foreign key）</li></ul></li><li><p>域完整性 - 数据是有效的</p><ul><li><p>数据类型及长度</p></li><li><p>非空约束（not null）</p></li><li><p>默认值约束（default）</p></li><li><p>检查约束（check）</p><blockquote><p>说明：在MySQL数据库中，检查约束并不起作用。</p></blockquote></li></ul></li></ol><h4 id="4-3-数据一致性"><a href="#4-3-数据一致性" class="headerlink" title="4.3 数据一致性"></a>4.3 数据一致性</h4><ol><li><p>事务：一系列对数据库进行读/写的操作，这些操作要么全都成功，要么全都失败。</p></li><li><p>事务的ACID特性</p><ul><li>原子性：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行</li><li>一致性：事务应确保数据库的状态从一个一致状态转变为另一个一致状态</li><li>隔离性：多个事务并发执行时，一个事务的执行不应影响其他事务的执行</li><li>持久性：已被提交的事务对数据库的修改应该永久保存在数据库中</li></ul></li><li><p>MySQL中的事务操作</p><ul><li><p>开启事务环境</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span></code></pre></div><p>或</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">begin</span></code></pre></div></li><li><p>提交事务</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">commit</span></code></pre></div></li><li><p>回滚事务</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">rollback</span></code></pre></div></li></ul></li></ol><h3 id="五：-其他内容"><a href="#五：-其他内容" class="headerlink" title="五： 其他内容"></a>五： 其他内容</h3><p>大家应该能够想到，关于MySQL的知识肯定远远不止上面列出的这些，比如MySQL的性能优化、管理和维护MySQL的相关工具、MySQL数据的备份和恢复、监控MySQL、部署高可用架构等问题我们在这里都没有进行讨论。当然，这些内容也都是跟项目开发密切相关的，我们就留到后续的章节中再续点进行讲解。</p><h3 id="六：-Python数据库编程"><a href="#六：-Python数据库编程" class="headerlink" title="六： Python数据库编程"></a>六： Python数据库编程</h3><p>我们用如下所示的数据库来演示在Python中如何访问MySQL数据库。</p><div class="hljs"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> hrs;<span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> hrs <span class="hljs-keyword">default</span> <span class="hljs-keyword">charset</span> utf8;<span class="hljs-keyword">use</span> hrs;<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> tb_emp;<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> tb_dept;<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_dept(dno   <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'编号'</span>,dname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'名称'</span>,dloc  <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'所在地'</span>,primary <span class="hljs-keyword">key</span> (dno));<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_dept <span class="hljs-keyword">values</span> (<span class="hljs-number">10</span>, <span class="hljs-string">'会计部'</span>, <span class="hljs-string">'北京'</span>),(<span class="hljs-number">20</span>, <span class="hljs-string">'研发部'</span>, <span class="hljs-string">'成都'</span>),(<span class="hljs-number">30</span>, <span class="hljs-string">'销售部'</span>, <span class="hljs-string">'重庆'</span>),(<span class="hljs-number">40</span>, <span class="hljs-string">'运维部'</span>, <span class="hljs-string">'深圳'</span>);<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_emp(eno   <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'员工编号'</span>,ename <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'员工姓名'</span>,job   <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'员工职位'</span>,mgr   <span class="hljs-built_in">int</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'主管编号'</span>,sal   <span class="hljs-built_in">int</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'员工月薪'</span>,comm  <span class="hljs-built_in">int</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'每月补贴'</span>,dno   <span class="hljs-built_in">int</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">'所在部门编号'</span>,primary <span class="hljs-keyword">key</span> (eno));<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_emp_dno <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (dno) <span class="hljs-keyword">references</span> tb_dept (dno);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_emp <span class="hljs-keyword">values</span> (<span class="hljs-number">7800</span>, <span class="hljs-string">'张三丰'</span>, <span class="hljs-string">'总裁'</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">9000</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">20</span>),(<span class="hljs-number">2056</span>, <span class="hljs-string">'乔峰'</span>, <span class="hljs-string">'分析师'</span>, <span class="hljs-number">7800</span>, <span class="hljs-number">5000</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">20</span>),(<span class="hljs-number">3088</span>, <span class="hljs-string">'李莫愁'</span>, <span class="hljs-string">'设计师'</span>, <span class="hljs-number">2056</span>, <span class="hljs-number">3500</span>, <span class="hljs-number">800</span>, <span class="hljs-number">20</span>),(<span class="hljs-number">3211</span>, <span class="hljs-string">'张无忌'</span>, <span class="hljs-string">'程序员'</span>, <span class="hljs-number">2056</span>, <span class="hljs-number">3200</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">20</span>),(<span class="hljs-number">3233</span>, <span class="hljs-string">'丘处机'</span>, <span class="hljs-string">'程序员'</span>, <span class="hljs-number">2056</span>, <span class="hljs-number">3400</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">20</span>),(<span class="hljs-number">3251</span>, <span class="hljs-string">'张翠山'</span>, <span class="hljs-string">'程序员'</span>, <span class="hljs-number">2056</span>, <span class="hljs-number">4000</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">20</span>),(<span class="hljs-number">5566</span>, <span class="hljs-string">'宋远桥'</span>, <span class="hljs-string">'会计师'</span>, <span class="hljs-number">7800</span>, <span class="hljs-number">4000</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">10</span>),(<span class="hljs-number">5234</span>, <span class="hljs-string">'郭靖'</span>, <span class="hljs-string">'出纳'</span>, <span class="hljs-number">5566</span>, <span class="hljs-number">2000</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">10</span>),(<span class="hljs-number">3344</span>, <span class="hljs-string">'黄蓉'</span>, <span class="hljs-string">'销售主管'</span>, <span class="hljs-number">7800</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">800</span>, <span class="hljs-number">30</span>),(<span class="hljs-number">1359</span>, <span class="hljs-string">'胡一刀'</span>, <span class="hljs-string">'销售员'</span>, <span class="hljs-number">3344</span>, <span class="hljs-number">1800</span>, <span class="hljs-number">200</span>, <span class="hljs-number">30</span>),(<span class="hljs-number">4466</span>, <span class="hljs-string">'苗人凤'</span>, <span class="hljs-string">'销售员'</span>, <span class="hljs-number">3344</span>, <span class="hljs-number">2500</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">30</span>),(<span class="hljs-number">3244</span>, <span class="hljs-string">'欧阳锋'</span>, <span class="hljs-string">'程序员'</span>, <span class="hljs-number">3088</span>, <span class="hljs-number">3200</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">20</span>),(<span class="hljs-number">3577</span>, <span class="hljs-string">'杨过'</span>, <span class="hljs-string">'会计'</span>, <span class="hljs-number">5566</span>, <span class="hljs-number">2200</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">10</span>),(<span class="hljs-number">3588</span>, <span class="hljs-string">'朱九真'</span>, <span class="hljs-string">'会计'</span>, <span class="hljs-number">5566</span>, <span class="hljs-number">2500</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">10</span>);</code></pre></div><p>在Python 3中，我们通常使用纯Python的三方库PyMySQL来访问MySQL数据库，它应该是目前Python操作MySQL数据库最好的选择。</p><ol><li><p>安装PyMySQL。</p><div class="hljs"><pre><code class="hljs Shell">pip install pymysql</code></pre></div></li><li><p>添加一个部门。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    no = int(input(<span class="hljs-string">'编号: '</span>))    name = input(<span class="hljs-string">'名字: '</span>)    loc = input(<span class="hljs-string">'所在地: '</span>)    <span class="hljs-comment"># 1. 创建数据库连接对象</span>    con = pymysql.connect(host=<span class="hljs-string">'localhost'</span>, port=<span class="hljs-number">3306</span>,                          database=<span class="hljs-string">'hrs'</span>, charset=<span class="hljs-string">'utf8'</span>,                          user=<span class="hljs-string">'yourname'</span>, password=<span class="hljs-string">'yourpass'</span>)    <span class="hljs-keyword">try</span>:        <span class="hljs-comment"># 2. 通过连接对象获取游标</span>        <span class="hljs-keyword">with</span> con.cursor() <span class="hljs-keyword">as</span> cursor:            <span class="hljs-comment"># 3. 通过游标执行SQL并获得执行结果</span>            result = cursor.execute(                <span class="hljs-string">'insert into tb_dept values (%s, %s, %s)'</span>,                (no, name, loc)            )        <span class="hljs-keyword">if</span> result == <span class="hljs-number">1</span>:            print(<span class="hljs-string">'添加成功!'</span>)        <span class="hljs-comment"># 4. 操作成功提交事务</span>        con.commit()    <span class="hljs-keyword">finally</span>:        <span class="hljs-comment"># 5. 关闭连接释放资源</span>        con.close()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div></li><li><p>删除一个部门。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    no = int(input(<span class="hljs-string">'编号: '</span>))    con = pymysql.connect(host=<span class="hljs-string">'localhost'</span>, port=<span class="hljs-number">3306</span>,                          database=<span class="hljs-string">'hrs'</span>, charset=<span class="hljs-string">'utf8'</span>,                          user=<span class="hljs-string">'yourname'</span>, password=<span class="hljs-string">'yourpass'</span>,                          autocommit=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> con.cursor() <span class="hljs-keyword">as</span> cursor:            result = cursor.execute(                <span class="hljs-string">'delete from tb_dept where dno=%s'</span>,                (no, )            )        <span class="hljs-keyword">if</span> result == <span class="hljs-number">1</span>:            print(<span class="hljs-string">'删除成功!'</span>)    <span class="hljs-keyword">finally</span>:        con.close()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div><blockquote><p>说明：如果不希望每次SQL操作之后手动提交或回滚事务，可以像上面的代码那样，在创建连接的时候多加一个名为<code>autocommit</code>的参数并将它的值设置为<code>True</code>，表示每次执行SQL之后自动提交。如果程序中不需要使用事务环境也不希望手动的提交或回滚就可以这么做。</p></blockquote></li><li><p>更新一个部门。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    no = int(input(<span class="hljs-string">'编号: '</span>))    name = input(<span class="hljs-string">'名字: '</span>)    loc = input(<span class="hljs-string">'所在地: '</span>)    con = pymysql.connect(host=<span class="hljs-string">'localhost'</span>, port=<span class="hljs-number">3306</span>,                          database=<span class="hljs-string">'hrs'</span>, charset=<span class="hljs-string">'utf8'</span>,                          user=<span class="hljs-string">'yourname'</span>, password=<span class="hljs-string">'yourpass'</span>,                          autocommit=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> con.cursor() <span class="hljs-keyword">as</span> cursor:            result = cursor.execute(                <span class="hljs-string">'update tb_dept set dname=%s, dloc=%s where dno=%s'</span>,                (name, loc, no)            )        <span class="hljs-keyword">if</span> result == <span class="hljs-number">1</span>:            print(<span class="hljs-string">'更新成功!'</span>)    <span class="hljs-keyword">finally</span>:        con.close()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div></li><li><p>查询所有部门。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql<span class="hljs-keyword">from</span> pymysql.cursors <span class="hljs-keyword">import</span> DictCursor<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    con = pymysql.connect(host=<span class="hljs-string">'localhost'</span>, port=<span class="hljs-number">3306</span>,                          database=<span class="hljs-string">'hrs'</span>, charset=<span class="hljs-string">'utf8'</span>,                          user=<span class="hljs-string">'yourname'</span>, password=<span class="hljs-string">'yourpass'</span>)    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> con.cursor(cursor=DictCursor) <span class="hljs-keyword">as</span> cursor:            cursor.execute(<span class="hljs-string">'select dno as no, dname as name, dloc as loc from tb_dept'</span>)            results = cursor.fetchall()            print(results)            print(<span class="hljs-string">'编号\t名称\t\t所在地'</span>)            <span class="hljs-keyword">for</span> dept <span class="hljs-keyword">in</span> results:                print(dept[<span class="hljs-string">'no'</span>], end=<span class="hljs-string">'\t'</span>)                print(dept[<span class="hljs-string">'name'</span>], end=<span class="hljs-string">'\t'</span>)                print(dept[<span class="hljs-string">'loc'</span>])    <span class="hljs-keyword">finally</span>:        con.close()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div></li><li><p>分页查询员工信息。</p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymysql<span class="hljs-keyword">from</span> pymysql.cursors <span class="hljs-keyword">import</span> DictCursor<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Emp</span><span class="hljs-params">(object)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, no, name, job, sal)</span>:</span>        self.no = no        self.name = name        self.job = job        self.sal = sal    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">f'\n编号：<span class="hljs-subst">&#123;self.no&#125;</span>\n姓名：<span class="hljs-subst">&#123;self.name&#125;</span>\n职位：<span class="hljs-subst">&#123;self.job&#125;</span>\n月薪：<span class="hljs-subst">&#123;self.sal&#125;</span>\n'</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    page = int(input(<span class="hljs-string">'页码: '</span>))    size = int(input(<span class="hljs-string">'大小: '</span>))    con = pymysql.connect(host=<span class="hljs-string">'localhost'</span>, port=<span class="hljs-number">3306</span>,                          database=<span class="hljs-string">'hrs'</span>, charset=<span class="hljs-string">'utf8'</span>,                          user=<span class="hljs-string">'yourname'</span>, password=<span class="hljs-string">'yourpass'</span>)    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> con.cursor() <span class="hljs-keyword">as</span> cursor:            cursor.execute(                <span class="hljs-string">'select eno as no, ename as name, job, sal from tb_emp limit %s,%s'</span>,                ((page - <span class="hljs-number">1</span>) * size, size)            )            <span class="hljs-keyword">for</span> emp_tuple <span class="hljs-keyword">in</span> cursor.fetchall():                emp = Emp(*emp_tuple)                print(emp)    <span class="hljs-keyword">finally</span>:        con.close()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;本文转载于GitHub项目&lt;a href=&quot;https://github.com/jackfrued/Python-100-Days&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python - 100天从新手到大
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://closer_laps.gitee.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="MYSQL" scheme="https://closer_laps.gitee.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MYSQL/"/>
    
    
      <category term="读书笔记" scheme="https://closer_laps.gitee.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="MySQL" scheme="https://closer_laps.gitee.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>玩转Linux操作系统</title>
    <link href="https://closer_laps.gitee.io/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E7%8E%A9%E8%BD%ACLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://closer_laps.gitee.io/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/%E7%8E%A9%E8%BD%ACLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-02-23T07:05:45.000Z</published>
    <updated>2020-03-12T10:55:01.085Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本文转载于GitHub项目<a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">Python - 100天从新手到大师</a></strong></p></blockquote><blockquote><p>说明：本文中对Linux命令的讲解都是基于名为CentOS的Linux发行版本，我自己使用的是阿里云服务器，系统版本为CentOS Linux release 7.6.1810。不同的Linux发行版本在Shell命令和工具程序上会有一些差别，但是这些差别是很小的。</p></blockquote><h3 id="一：-操作系统发展史"><a href="#一：-操作系统发展史" class="headerlink" title="一： 操作系统发展史"></a>一： 操作系统发展史</h3><p>只有硬件没有软件的计算机系统被称之为“裸机”，我们很难用“裸机”来完成计算机日常的工作（如存储和运算），所以必须用特定的软件来控制硬件的工作。最靠近计算机硬件的软件是系统软件，其中最为重要的就是“操作系统”。“操作系统”是控制和管理整个计算机硬件和软件资源、实现资源分配和任务调配、为系统用户以及其他软件提供接口和环境的程序的集合。</p><h4 id="1-1-没有操作系统（手工操作）"><a href="#1-1-没有操作系统（手工操作）" class="headerlink" title="1.1 没有操作系统（手工操作）"></a>1.1 没有操作系统（手工操作）</h4><p>在计算机诞生之初没有操作系统的年代，人们先把程序纸带（或卡片）装上计算机，然后启动输入机把程序送入计算机，接着通过控制台开关启动程序运行。当程序执行完毕，打印机输出计算的结果，用户卸下并取走纸带（或卡片）。第二个用户上机，重复同样的步骤。在整个过程中用户独占机器，CPU等待手工操作，资源利用率极低。</p><h4 id="1-2-批处理系统"><a href="#1-2-批处理系统" class="headerlink" title="1.2 批处理系统"></a>1.2 批处理系统</h4><p>首先启动计算机上的一个监督程序，在监督程序的控制下，计算机能够自动的、成批的处理一个或多个用户的作业。完成一批作业后，监督程度又从输入机读取作业存入磁带机。按照上面的步骤重复处理任务。监督程序不停的处理各个作业，实现了作业的自动转接，减少了作业的建立时间和手工操作时间，提高了计算机资源的利用率。 批处理系统又可以分为单道批处理系统、多道批处理系统、联机批处理系统、脱机批处理系统。</p><h4 id="1-3-分时系统和实时系统"><a href="#1-3-分时系统和实时系统" class="headerlink" title="1.3 分时系统和实时系统"></a>1.3 分时系统和实时系统</h4><p>分时系统是把处理器的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。 若某个作业在分配给它的时间片内不能完成其计算，则该作业暂时中断，把处理机让给另一作业使用，等待下一轮调度时再继续其运行。由于计算机速度很快，作业运行轮转得很快，给每个用户的感觉是他独占了一台计算机。而每个用户可以通过自己的终端向系统发出各种操作控制命令，在充分的人机交互情况下，完成作业的运行。为了解决分时系统不能及时响应用户指令的情况，又出现了能够在在严格的时间范围内完成事件处理，及时响应随机外部事件的实时系统。</p><h4 id="1-4-通用操作系统"><a href="#1-4-通用操作系统" class="headerlink" title="1.4 通用操作系统"></a>1.4 通用操作系统</h4><ol><li><p>1960s：IBM的System/360系列的机器有了统一的操作系统OS/360。</p></li><li><p>1965年：AT&amp;T的贝尔实验室加入GE和MIT的合作计划开始开发MULTICS。</p></li><li><p>1969年：MULTICS项目失败，Ken Tompson赋闲在家，为了玩“Space Travel”游戏用汇编语言在当时已经被淘汰的PDP-7上开发了Unics。</p><blockquote><p>注：很难想象，Unix这么伟大的系统，居然是一个赋闲在家的程序员（关键是老婆回娘家还带上了孩子）在一台被淘汰的设备上为了玩游戏开发出来的。</p></blockquote></li><li><p>1970年~1971年：Ken Tompson和Dennis Ritchie用B语言在PDP-11上重写了Unics，并在Brian Kernighan的建议下将其更名为Unix。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/ken-and-dennis-pdp-11.png" srcset="/img/loading.gif" alt=""></p></li><li><p>1972年~1973年：Dennis Ritchie发明了C语言来取代可移植性较差的B语言，并开启了用C语言重写Unix的工作。</p></li><li><p>1974年：Unix推出了里程碑意义的第5版，几乎完全用C语言来实现。</p></li><li><p>1979年：从Unix第7版开始，AT&amp;T发布新的使用条款，将Unix私有化。</p></li><li><p>1987年：Andrew S. Tanenbaum教授为了能在课堂上为学生讲解操作系统运作的细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统以避免版权上的争议，该系统被命名为Minix。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/andrew.jpg" srcset="/img/loading.gif" alt=""></p></li><li><p>1991年：Linus Torvalds就读于芬兰赫尔辛基大学期间，尝试在Minix上做一些开发工作，但因为Minix只是作为教学用途的操作系统，功能并不强大，为了方便在学校的新闻组和邮件系统中读写和下载文件，Linus编写了磁盘驱动程序和文件系统，这些东西形成了Linux系统内核的雏形。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/linus.png" srcset="/img/loading.gif" alt=""></p></li></ol><p>下图是Unix操作系统家族的图谱。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/history-of-unix.png" srcset="/img/loading.gif" alt=""></p><h3 id="二：-Linux概述"><a href="#二：-Linux概述" class="headerlink" title="二： Linux概述"></a>二： Linux概述</h3><p>Linux是一个通用操作系统。一个操作系统要负责任务调度、内存分配、处理外围设备I/O等操作。操作系统通常由内核（运行其他程序，管理像磁盘、打印机等硬件设备的核心程序）和系统程序（设备驱动、底层库、shell、服务程序等）两部分组成。</p><p>Linux内核是芬兰人Linus Torvalds开发的，于1991年9月发布。而Linux操作系统作为Internet时代的产物，它是由全世界许多开发者共同合作开发的，是一个自由的操作系统（注意自由和免费并不是同一个概念，想了解二者的差别可以<a href="https://www.debian.org/intro/free" target="_blank" rel="noopener">点击这里</a>）。</p><h3 id="三：-Linux系统优点"><a href="#三：-Linux系统优点" class="headerlink" title="三： Linux系统优点"></a>三： Linux系统优点</h3><ol><li>通用操作系统，不跟特定的硬件绑定。</li><li>用C语言编写，可移植性强，有内核编程接口。</li><li>支持多用户和多任务，支持安全的分层文件系统。</li><li>大量的实用程序，完善的网络功能以及强大的支持文档。</li><li>可靠的安全性和良好的稳定性，对开发者更友好。</li></ol><h3 id="四：-Linux系统发行版本"><a href="#四：-Linux系统发行版本" class="headerlink" title="四： Linux系统发行版本"></a>四： Linux系统发行版本</h3><ol><li><a href="https://www.redhat.com/en" target="_blank" rel="noopener">Redhat</a></li><li><a href="https://www.ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a></li><li><a href="https://www.centos.org/" target="_blank" rel="noopener">CentOS</a></li><li><a href="https://getfedora.org/" target="_blank" rel="noopener">Fedora</a></li><li><a href="https://www.debian.org/" target="_blank" rel="noopener">Debian</a></li><li><a href="https://www.opensuse.org/" target="_blank" rel="noopener">openSUSE</a></li></ol><h3 id="五：-基础命令"><a href="#五：-基础命令" class="headerlink" title="五： 基础命令"></a>五： 基础命令</h3><p>Linux系统的命令通常都是如下所示的格式：</p><div class="hljs"><pre><code class="hljs Shell">命令名称 [命名参数] [命令对象]</code></pre></div><ol><li><p>获取登录信息 - <strong>w</strong> / <strong>who</strong> / <strong>last</strong>/ <strong>lastb</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# w 23:31:16 up 12:16,  2 users,  load average: 0.00, 0.01, 0.05USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATroot     pts/0    182.139.66.250   23:03    4.00s  0.02s  0.00s wjackfrue pts/1    182.139.66.250   23:26    3:56   0.00s  0.00s -bash[root ~]# whoroot     pts/0        2018-04-12 23:03 (182.139.66.250)jackfrued pts/1        2018-04-12 23:26 (182.139.66.250)[root ~]# who am iroot     pts/0        2018-04-12 23:03 (182.139.66.250)[root ~]# who mom likesroot     pts/0        2018-04-12 23:03 (182.139.66.250)[root ~]# lastroot     pts/0        117.136.63.184   Sun May 26 18:57   still logged in   reboot   system boot  3.10.0-957.10.1. Mon May 27 02:52 - 19:10  (-7:-42)   root     pts/4        117.136.63.184   Sun May 26 18:51 - crash  (08:01)    root     pts/4        117.136.63.184   Sun May 26 18:49 - 18:49  (00:00)    root     pts/3        117.136.63.183   Sun May 26 18:35 - crash  (08:17)    root     pts/2        117.136.63.183   Sun May 26 18:34 - crash  (08:17)    root     pts/0        117.136.63.183   Sun May 26 18:10 - crash  (08:42)</code></pre></div></li><li><p>查看自己使用的Shell - <strong>ps</strong>。</p><p>Shell也被称为“壳”或“壳程序”，它是用户与操作系统内核交流的翻译官，简单的说就是人与计算机交互的界面和接口。目前很多Linux系统默认的Shell都是bash（<u>B</u>ourne <u>A</u>gain <u>SH</u>ell），因为它可以使用tab键进行命令和路径补全、可以保存历史命令、可以方便的配置环境变量以及执行批处理操作。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# ps  PID TTY          TIME CMD 3531 pts/0    00:00:00 bash 3553 pts/0    00:00:00 ps</code></pre></div></li><li><p>查看命令的说明和位置 - <strong>whatis</strong> / <strong>which</strong> / <strong>whereis</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# whatis psps (1)        - report a snapshot of the current processes.[root ~]# whatis pythonpython (1)    - an interpreted, interactive, object-oriented programming language[root ~]# whereis psps: /usr/bin/ps /usr/share/man/man1/ps.1.gz[root ~]# whereis pythonpython: /usr/bin/python /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /etc/python /usr/include/python2.7 /usr/share/man/man1/python.1.gz[root ~]# which ps/usr/bin/ps[root ~]# which python/usr/bin/python</code></pre></div></li><li><p>清除屏幕上显示的内容 - <strong>clear</strong>。</p></li><li><p>查看帮助文档 - <strong>man</strong> / <strong>info</strong> / <strong>help</strong> / <strong>apropos</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# ps --helpUsage: ps [options] Try 'ps --help &lt;simple|list|output|threads|misc|all&gt;'  or 'ps --help &lt;s|l|o|t|m|a&gt;' for additional help text.For more details see ps(1).[root@izwz97tbgo9lkabnat2lo8z ~]# man psPS(1)                                User Commands                                PS(1)NAME       ps - report a snapshot of the current processes.SYNOPSIS       ps [options]DESCRIPTION...</code></pre></div></li><li><p>查看系统和主机名 - <strong>uname</strong> / <strong>hostname</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# unameLinux[root@izwz97tbgo9lkabnat2lo8z ~]# hostnameizwz97tbgo9lkabnat2lo8z[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-releaseCentOS Linux release 7.6.1810 (Core)</code></pre></div><blockquote><p>说明：<code>cat</code>是连接文件内容并打印到标准输出的命令，后面会讲到该命令；<code>/etc</code>是Linux系统上的一个非常重要的目录，它保存了很多的配置文件；<code>centos-release</code>是该目录下的一个文件，因为我自己使用的Linux发行版本是CentOS 7.6，因此这里会有一个这样的文件。</p></blockquote></li><li><p>时间和日期 - <strong>date</strong> / <strong>cal</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# dateWed Jun 20 12:53:19 CST 2018[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal      June 2018Su Mo Tu We Th Fr Sa                1  2 3  4  5  6  7  8  910 11 12 13 14 15 1617 18 19 20 21 22 2324 25 26 27 28 29 30[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal 5 2017      May 2017Su Mo Tu We Th Fr Sa    1  2  3  4  5  6 7  8  9 10 11 12 1314 15 16 17 18 19 2021 22 23 24 25 26 2728 29 30 31</code></pre></div></li><li><p>重启和关机 - <strong>reboot</strong> / <strong>shutdown</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# shutdown -h +5Shutdown scheduled for Sun 2019-05-26 19:34:27 CST, use 'shutdown -c' to cancel.[root ~]# Broadcast message from root (Sun 2019-05-26 19:29:27 CST):The system is going down for power-off at Sun 2019-05-26 19:34:27 CST![root ~]# shutdown -cBroadcast message from root (Sun 2019-05-26 19:30:22 CST):The system shutdown has been cancelled at Sun 2019-05-26 19:31:22 CST![root ~]# shutdown -r 23:58Shutdown scheduled for Sun 2019-05-26 23:58:00 CST, use 'shutdown -c' to cancel.[root ~]# shutdown -cBroadcast message from root (Sun 2019-05-26 19:31:06 CST):The system shutdown has been cancelled at Sun 2019-05-26 19:32:06 CST!</code></pre></div><blockquote><p>说明：在执行<code>shutdown</code>命令时会向登录系统的用户发出警告，可以在命令后面跟上警告消息来替换默认的警告消息，也可以在<code>-h</code>参数后通过<code>now</code>来表示立刻关机。</p></blockquote></li><li><p>退出登录 - <strong>exit</strong> / <strong>logout</strong>。</p></li><li><p>查看历史命令 - <strong>history</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# history...452  ls453  cd Python-3.6.5/454  clear455  history[root@iZwz97tbgo9lkabnat2lo8Z ~]# !454</code></pre></div><blockquote><p>说明：查看到历史命令之后，可以用<code>!历史命令编号</code>来重新执行该命令；通过<code>history -c</code>可以清除历史命令。</p></blockquote></li></ol><h3 id="六：-实用程序"><a href="#六：-实用程序" class="headerlink" title="六： 实用程序"></a>六： 实用程序</h3><h4 id="6-1-文件和文件夹操作"><a href="#6-1-文件和文件夹操作" class="headerlink" title="6.1 文件和文件夹操作"></a>6.1 文件和文件夹操作</h4><ol><li><p>创建/删除空目录 - <strong>mkdir</strong> / <strong>rmdir</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# mkdir abc[root ~]# mkdir -p xyz/abc[root ~]# rmdir abc</code></pre></div></li><li><p>创建/删除文件 - <strong>touch</strong> / <strong>rm</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# touch readme.txt[root ~]# touch error.txt[root ~]# rm error.txtrm: remove regular empty file ‘error.txt’? y[root ~]# rm -rf xyz</code></pre></div><ul><li><code>touch</code>命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间：<ul><li>更改内容的时间 - mtime。</li><li>更改权限的时间 - ctime。</li><li>最后访问时间 - atime。</li></ul></li><li><code>rm</code>的几个重要参数：<ul><li><code>-i</code>：交互式删除，每个删除项都会进行询问。</li><li><code>-r</code>：删除目录并递归的删除目录中的文件和目录。</li><li><code>-f</code>：强制删除，忽略不存在的文件，没有任何提示。</li></ul></li></ul></li><li><p>切换和查看当前工作目录 - <strong>cd</strong> / <strong>pwd</strong>。</p><blockquote><p>说明：<code>cd</code>命令后面可以跟相对路径（以当前路径作为参照）或绝对路径（以<code>/</code>开头）来切换到指定的目录，也可以用<code>cd ..</code>来返回上一级目录。请大家想一想，如果要返回到上上一级目录应该给<code>cd</code>命令加上什么样的参数呢？</p></blockquote></li><li><p>查看目录内容 - <strong>ls</strong>。</p><ul><li><code>-l</code>：以长格式查看文件和目录。</li><li><code>-a</code>：显示以点开头的文件和目录（隐藏文件）。</li><li><code>-R</code>：遇到目录要进行递归展开（继续列出目录下面的文件和目录）。</li><li><code>-d</code>：只列出目录，不列出其他内容。</li><li><code>-S</code> / <code>-t</code>：按大小/时间排序。</li></ul></li><li><p>查看文件内容 - <strong>cat</strong> / <strong>tac</strong> / <strong>head</strong> / <strong>tail</strong> / <strong>more</strong> / <strong>less</strong> / <strong>rev</strong> / <strong>od</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# wget http://www.sohu.com/ -O sohu.html--2018-06-20 18:42:34--  http://www.sohu.com/Resolving www.sohu.com (www.sohu.com)... 14.18.240.6Connecting to www.sohu.com (www.sohu.com)|14.18.240.6|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 212527 (208K) [text/html]Saving to: ‘sohu.html’<span class="hljs-meta">100%</span><span class="bash">[==================================================&gt;] 212,527     --.-K/s   <span class="hljs-keyword">in</span> 0.03s</span>2018-06-20 18:42:34 (7.48 MB/s) - ‘sohu.html’ saved [212527/212527][root ~]# cat sohu.html...[root ~]# head -10 sohu.html&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;搜狐&lt;/title&gt;&lt;meta name="Keywords" content="搜狐,门户网站,新媒体,网络媒体,新闻,财经,体育,娱乐,时尚,汽车,房产,科技,图片,论坛,微博,博客,视频,电影,电视剧"/&gt;&lt;meta name="Description" content="搜狐网为用户提供24小时不间断的最新资讯，及搜索、邮件等网络服务。内容包括全球热点事件、突发新闻、时事评论、热播影视剧、体育赛事、行业动态、生活服务信息，以及论坛、博客、微博、我的搜狐等互动空间。" /&gt;&lt;meta name="shenma-site-verification" content="1237e4d02a3d8d73e96cbd97b699e9c3_1504254750"&gt;&lt;meta charset="utf-8"/&gt;&lt;meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"/&gt;[root ~]# tail -2 sohu.html&lt;/body&gt;&lt;/html&gt;[root ~]# less sohu.html...[root ~]# cat -n sohu.html | more...</code></pre></div><blockquote><p>说明：上面用到了一个名为<code>wget</code>的命令，它是一个网络下载器程序，可以从指定的URL下载资源。</p></blockquote></li><li><p>拷贝/移动文件 - <strong>cp</strong> / <strong>mv</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# mkdir backup[root ~]# cp sohu.html backup/[root ~]# cd backup[root backup]# lssohu.html[root backup]# mv sohu.html sohu_index.html[root backup]# lssohu_index.html</code></pre></div></li><li><p>文件重命名 - <strong>rename</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# rename .htm .html *.htm</code></pre></div></li><li><p>查找文件和查找内容 - <strong>find</strong> / <strong>grep</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find / -name "*.html"/root/sohu.html/root/backup/sohu_index.html[root@izwz97tbgo9lkabnat2lo8z ~]# find . -atime 7 -type f -print[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -size +2k[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -name "*.swp" -delete[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep "&lt;script&gt;" sohu.html -n20:&lt;script&gt;[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep -E \&lt;\/?script.*\&gt; sohu.html -n20:&lt;script&gt;22:&lt;/script&gt;24:&lt;script src="//statics.itc.cn/web/v3/static/js/es5-shim-08e41cfc3e.min.js"&gt;&lt;/script&gt;25:&lt;script src="//statics.itc.cn/web/v3/static/js/es5-sham-1d5fa1124b.min.js"&gt;&lt;/script&gt;26:&lt;script src="//statics.itc.cn/web/v3/static/js/html5shiv-21fc8c2ba6.js"&gt;&lt;/script&gt;29:&lt;script type="text/javascript"&gt;52:&lt;/script&gt;...</code></pre></div><blockquote><p>说明：<code>grep</code>在搜索字符串时可以使用正则表达式，如果需要使用正则表达式可以用<code>grep -E</code>或者直接使用<code>egrep</code>。</p></blockquote></li><li><p>创建链接和查看链接 - <strong>ln</strong> / <strong>readlink</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 1 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 2 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup2[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 3 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /etc/centos-release sysinfo[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sysinfolrwxrwxrwx 1 root root 19 Jun 20 19:21 sysinfo -&gt; /etc/centos-release[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sysinfoCentOS Linux release 7.4.1708 (Core)[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-releaseCentOS Linux release 7.4.1708 (Core)</code></pre></div><blockquote><p>说明：链接可以分为硬链接和软链接（符号链接）。硬链接可以认为是一个指向文件数据的指针，就像Python中对象的引用计数，每添加一个硬链接，文件的对应链接数就增加1，只有当文件的链接数为0时，文件所对应的存储空间才有可能被其他文件覆盖。我们平常删除文件时其实并没有删除硬盘上的数据，我们删除的只是一个指针，或者说是数据的一条使用记录，所以类似于“文件粉碎机”之类的软件在“粉碎”文件时除了删除文件指针，还会在文件对应的存储区域填入数据来保证文件无法再恢复。软链接类似于Windows系统下的快捷方式，当软链接链接的文件被删除时，软链接也就失效了。</p></blockquote></li><li><p>压缩/解压缩和归档/解归档 - <strong>gzip</strong> / <strong>gunzip</strong> / <strong>xz</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://download.redis.io/releases/redis-4.0.10.tar.gz--2018-06-20 19:29:59--  http://download.redis.io/releases/redis-4.0.10.tar.gzResolving download.redis.io (download.redis.io)... 109.74.203.151Connecting to download.redis.io (download.redis.io)|109.74.203.151|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 1738465 (1.7M) [application/x-gzip]Saving to: ‘redis-4.0.10.tar.gz’<span class="hljs-meta">100%</span><span class="bash">[==================================================&gt;] 1,738,465   70.1KB/s   <span class="hljs-keyword">in</span> 74s</span>2018-06-20 19:31:14 (22.9 KB/s) - ‘redis-4.0.10.tar.gz’ saved [1738465/1738465][root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*redis-4.0.10.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-4.0.10.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*redis-4.0.10.tar</code></pre></div></li><li><p>归档和解归档 - <strong>tar</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-4.0.10.tarredis-4.0.10/redis-4.0.10/.gitignoreredis-4.0.10/00-RELEASENOTESredis-4.0.10/BUGSredis-4.0.10/CONTRIBUTINGredis-4.0.10/COPYINGredis-4.0.10/INSTALLredis-4.0.10/MANIFESTOredis-4.0.10/Makefileredis-4.0.10/README.mdredis-4.0.10/deps/redis-4.0.10/deps/Makefileredis-4.0.10/deps/README.md...</code></pre></div><blockquote><p>说明：归档（也称为创建归档）和解归档都使用<code>tar</code>命令，通常创建归档需要<code>-cvf</code>三个参数，其中<code>c</code>表示创建（create），<code>v</code>表示显示创建归档详情（verbose），<code>f</code>表示指定归档的文件（file）；解归档需要加上<code>-xvf</code>参数，其中<code>x</code>表示抽取（extract），其他两个参数跟创建归档相同。</p></blockquote></li><li><p>将标准输入转成命令行参数 - <strong>xargs</strong>。</p><p>下面的命令会将查找当前路径下的html文件，然后通过<code>xargs</code>将这些文件作为参数传给<code>rm</code>命令，实现查找并删除文件的操作。</p><div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find . -type f -name "*.html" | xargs rm -f</code></pre></div><p>下面的命令将a.txt文件中的多行内容变成一行输出到b.txt文件中，其中<code>&lt;</code>表示从a.txt中读取输入，<code>&gt;</code>表示将命令的执行结果输出到b.txt中。</p><div class="hljs"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# xargs &lt; a.txt &gt; b.txt</code></pre></div><blockquote><p>说明：这个命令就像上面演示的那样常在管道（实现进程间通信的一种方式）和重定向（重新指定输入输出的位置）操作中用到，后面的内容中会讲到管道操作和输入输出重定向操作。</p></blockquote></li><li><p>显示文件或目录 - <strong>basename</strong> / <strong>dirname</strong>。</p></li><li><p>其他相关工具。</p><ul><li><strong>sort</strong> - 对内容排序</li><li><strong>uniq</strong> - 去掉相邻重复内容</li><li><strong>tr</strong> - 替换指定内容为新内容</li><li><strong>cut</strong> / <strong>paste</strong> - 剪切/黏贴内容</li><li><strong>split</strong> - 拆分文件</li><li><strong>file</strong> - 判断文件类型</li><li><strong>wc</strong> - 统计文件行数、单词数、字节数</li><li><strong>iconv</strong> - 编码转换</li></ul><div class="hljs"><pre><code class="hljs Shell">[root ~]# cat foo.txtgrapeapplepitaya[root ~]# cat bar.txt100200300400[root ~]# paste foo.txt bar.txtgrape   100apple   200pitaya  300        400[root ~]# paste foo.txt bar.txt &gt; hello.txt[root ~]# cut -b 4-8 hello.txtpe      10le      20aya     30[root ~]# cat hello.txt | tr '\t' ','grape,100apple,200pitaya,300,400[root ~]# split -l 100 sohu.html hello[root ~]# wget https://www.baidu.com/img/bd_logo1.png[root ~]# file bd_logo1.pngbd_logo1.png: PNG image data, 540 x 258, 8-bit colormap, non-interlaced[root ~]# wc sohu.html  2979   6355 212527 sohu.html[root ~]# wc -l sohu.html2979 sohu.html[root ~]# wget http://www.qq.com -O qq.html[root ~]# iconv -f gb2312 -t utf-8 qq.html</code></pre></div></li></ol><h4 id="6-2-管道和重定向"><a href="#6-2-管道和重定向" class="headerlink" title="6.2 管道和重定向"></a>6.2 管道和重定向</h4><ol><li><p>管道的使用 - <strong>|</strong>。</p><p>例子：查找当前目录下文件个数。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# find ./ | wc -l6152</code></pre></div><p>例子：列出当前路径下的文件和文件夹，给每一项加一个编号。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# ls | cat -n     1  dump.rdb     2  mongodb-3.6.5     3  Python-3.6.5     4  redis-3.2.11     5  redis.conf</code></pre></div><p>例子：查找record.log中包含AAA，但不包含BBB的记录的总数</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# cat record.log | grep AAA | grep -v BBB | wc -l</code></pre></div></li><li><p>输出重定向和错误重定向 - <strong>&gt;</strong> / <strong>&gt;&gt;</strong> / <strong>2&gt;</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# cat readme.txtbananaapplegrapeapplegrapewatermelonpearpitaya[root ~]# cat readme.txt | sort | uniq &gt; result.txt[root ~]# cat result.txtapplebananagrapepearpitayawatermelon</code></pre></div></li><li><p>输入重定向 - <strong>&lt;</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# echo 'hello, world!' &gt; hello.txt[root ~]# wall &lt; hello.txt[root ~]#Broadcast message from root (Wed Jun 20 19:43:05 2018):hello, world![root ~]# echo 'I will show you some code.' &gt;&gt; hello.txt[root ~]# wall &lt; hello.txt[root ~]#Broadcast message from root (Wed Jun 20 19:43:55 2018):hello, world!I will show you some code.</code></pre></div></li><li><p>多重定向 - <strong>tee</strong>。</p><p>下面的命令除了在终端显示命令<code>ls</code>的结果之外，还会追加输出到<code>ls.txt</code>文件中。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# ls | tee -a ls.txt</code></pre></div></li></ol><h4 id="6-3-别名"><a href="#6-3-别名" class="headerlink" title="6.3 别名"></a>6.3 别名</h4><ol><li><p><strong>alias</strong></p><div class="hljs"><pre><code class="hljs Shell">[root ~]# alias ll='ls -l'[root ~]# alias frm='rm -rf'[root ~]# ll...drwxr-xr-x  2 root       root   4096 Jun 20 12:52 abc...[root ~]# frm abc</code></pre></div></li><li><p><strong>unalias</strong></p><div class="hljs"><pre><code class="hljs Shell">[root ~]# unalias frm[root ~]# frm sohu.html-bash: frm: command not found</code></pre></div></li></ol><h4 id="6-4-文本处理"><a href="#6-4-文本处理" class="headerlink" title="6.4 文本处理"></a>6.4 文本处理</h4><ol><li><p>字符流编辑器 - <strong>sed</strong>。</p><p>sed是操作、过滤和转换文本内容的工具。假设有一个名为fruit.txt的文件，内容如下所示。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# cat -n fruit.txt      1  banana     2  grape     3  apple     4  watermelon     5  orange</code></pre></div><p>接下来，我们在第2行后面添加一个pitaya。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# sed '2a pitaya' fruit.txt bananagrapepitayaapplewatermelonorange</code></pre></div><blockquote><p>注意：刚才的命令和之前我们讲过的很多命令一样并没有改变fruit.txt文件，而是将添加了新行的内容输出到终端中，如果想保存到fruit.txt中，可以使用输出重定向操作。</p></blockquote><p>在第2行前面插入一个waxberry。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# sed '2i waxberry' fruit.txtbananawaxberrygrapeapplewatermelonorange</code></pre></div><p>删除第3行。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# sed '3d' fruit.txtbananagrapewatermelonorange</code></pre></div><p>删除第2行到第4行。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# sed '2,4d' fruit.txtbananaorange</code></pre></div><p>将文本中的字符a替换为@。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# sed 's#a#@#' fruit.txt b@nanagr@pe@pplew@termelonor@nge</code></pre></div><p>将文本中的字符a替换为@，使用全局模式。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# sed 's#a#@#g' fruit.txt b@n@n@gr@pe@pplew@termelonor@nge</code></pre></div><p>先cd目录，将后缀为.cfg的文件里面所有老内容替换为新内容。</p><div class="hljs"><pre><code class="hljs Shell">sed -i "s/老内容/新内容/g" `find . -type f -name "*.cfg"`</code></pre></div></li><li><p>模式匹配和处理语言 - <strong>awk</strong>。</p><p>awk是一种编程语言，也是Linux系统中处理文本最为强大的工具，它的作者之一和现在的维护者就是之前提到过的Brian Kernighan（ken和dmr最亲密的伙伴）。通过该命令可以从文本中提取出指定的列、用正则表达式从文本中取出我们想要的内容、显示指定的行以及进行统计和运算，总之它非常强大。</p><p>假设有一个名为fruit2.txt的文件，内容如下所示。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# cat fruit2.txt 1       banana      1202       grape       5003       apple       12304       watermelon  805       orange      400</code></pre></div><p>显示文件的第3行。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# awk 'NR==3' fruit2.txt 3       apple       1230</code></pre></div><p>显示文件的第2列。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# awk '&#123;print $2&#125;' fruit2.txt bananagrapeapplewatermelonorange</code></pre></div><p>显示文件的最后一列。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# awk '&#123;print $NF&#125;' fruit2.txt 120500123080400</code></pre></div><p>输出末尾数字大于等于300的行。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# awk '&#123;if($3 &gt;= 300) &#123;print $0&#125;&#125;' fruit2.txt 2       grape       5003       apple       12305       orange      400</code></pre></div><p>上面展示的只是awk命令的冰山一角，更多的内容留给读者自己在实践中去探索。</p></li></ol><h3 id="七：-用户管理"><a href="#七：-用户管理" class="headerlink" title="七： 用户管理"></a>七： 用户管理</h3><ol><li><p>创建和删除用户 - <strong>useradd</strong> / <strong>userdel</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root home]# useradd hellokitty[root home]# userdel hellokitty</code></pre></div><ul><li><code>-d</code> - 创建用户时为用户指定用户主目录</li><li><code>-g</code> - 创建用户时指定用户所属的用户组</li></ul></li><li><p>创建和删除用户组 - <strong>groupadd</strong> / <strong>groupdel</strong>。</p><blockquote><p>说明：用户组主要是为了方便对一个组里面所有用户的管理。</p></blockquote></li><li><p>修改密码 - <strong>passwd</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# passwd hellokittyNew password: Retype new password: passwd: all authentication tokens updated successfully.</code></pre></div><blockquote><p>说明：输入密码和确认密码没有回显且必须一气呵成的输入完成（不能使用退格键），密码和确认密码需要一致。如果使用<code>passwd</code>命令时没有指定命令作用的对象，则表示要修改当前用户的密码。如果想批量修改用户密码，可以使用<code>chpasswd</code>命令。</p></blockquote><ul><li><code>-l</code> / <code>-u</code> - 锁定/解锁用户。</li><li><code>-d</code> - 清除用户密码。</li><li><code>-e</code> - 设置密码立即过期，用户登录时会强制要求修改密码。</li><li><code>-i</code> - 设置密码过期多少天以后禁用该用户。</li></ul></li><li><p>查看和修改密码有效期 - <strong>chage</strong>。</p><p>设置hellokitty用户100天后必须修改密码，过期前15天通知该用户，过期后15天禁用该用户。</p><div class="hljs"><pre><code class="hljs Shell">chage -M 100 -W 15 -I 15 hellokitty</code></pre></div></li><li><p>切换用户 - <strong>su</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# su hellokitty[hellokitty root]$</code></pre></div></li><li><p>以管理员身份执行命令 - <strong>sudo</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[hellokitty ~]$ ls /rootls: cannot open directory /root: Permission denied[hellokitty ~]$ sudo ls /root[sudo] password for hellokitty:</code></pre></div><blockquote><p><strong>说明</strong>：如果希望用户能够以管理员身份执行命令，用户必须要出现在sudoers名单中，sudoers文件在 <code>/etc</code>目录下，如果希望直接编辑该文件也可以使用下面的命令。</p></blockquote></li><li><p>编辑sudoers文件 - <strong>visudo</strong>。</p><p>这里使用的编辑器是vi，关于vi的知识在后面有讲解。该文件的部分内容如下所示：</p><div class="hljs"><pre><code class="hljs plain">## Allow root to run any commands anywhere root    ALL&#x3D;(ALL)   ALL## Allows members of the &#39;sys&#39; group to run networking, software, ## service management apps and more.# %sys ALL &#x3D; NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS## Allows people in group wheel to run all commands%wheel  ALL&#x3D;(ALL)   ALL## Same thing without a password# %wheel    ALL&#x3D;(ALL)   NOPASSWD: ALL## Allows members of the users group to mount and unmount the## cdrom as root# %users  ALL&#x3D;&#x2F;sbin&#x2F;mount &#x2F;mnt&#x2F;cdrom, &#x2F;sbin&#x2F;umount &#x2F;mnt&#x2F;cdrom## Allows members of the users group to shutdown this system# %users  localhost&#x3D;&#x2F;sbin&#x2F;shutdown -h now</code></pre></div></li><li><p>显示用户与用户组的信息 - <strong>id</strong>。</p></li><li><p>给其他用户发消息 -<strong>write</strong> / <strong>wall</strong>。</p><p>发送方：</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# write hellokittyDinner is on me.Call me at 6pm.</code></pre></div><p>接收方：</p><div class="hljs"><pre><code class="hljs Shell">[hellokitty ~]$ Message from root on pts/0 at 17:41 ...Dinner is on me.Call me at 6pm.EOF</code></pre></div></li><li><p>查看/设置是否接收其他用户发送的消息 - <strong>mesg</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[hellokitty ~]$ mesgis y[hellokitty ~]$ mesg n[hellokitty ~]$ mesgis n</code></pre></div></li></ol><h3 id="八：-文件系统"><a href="#八：-文件系统" class="headerlink" title="八： 文件系统"></a>八： 文件系统</h3><h4 id="8-1-文件和路径"><a href="#8-1-文件和路径" class="headerlink" title="8.1 文件和路径"></a>8.1 文件和路径</h4><ol><li>命名规则：文件名的最大长度与文件系统类型有关，一般情况下，文件名不应该超过255个字符，虽然绝大多数的字符都可以用于文件名，但是最好使用英文大小写字母、数字、下划线、点这样的符号。文件名中虽然可以使用空格，但应该尽可能避免使用空格，否则在输入文件名时需要用将文件名放在双引号中或者通过<code>\</code>对空格进行转义。</li><li>扩展名：在Linux系统下文件的扩展名是可选的，但是使用扩展名有助于对文件内容的理解。有些应用程序要通过扩展名来识别文件，但是更多的应用程序并不依赖文件的扩展名，就像<code>file</code>命令在识别文件时并不是依据扩展名来判定文件的类型。</li><li>隐藏文件：以点开头的文件在Linux系统中是隐藏文件（不可见文件）。</li></ol><h4 id="8-2-目录结构"><a href="#8-2-目录结构" class="headerlink" title="8.2 目录结构"></a>8.2 目录结构</h4><ol><li>/bin - 基本命令的二进制文件。</li><li>/boot - 引导加载程序的静态文件。</li><li>/dev - 设备文件。</li><li><strong>/etc</strong> - 配置文件。</li><li>/home - 普通用户主目录的父目录。</li><li>/lib - 共享库文件。</li><li>/lib64 - 共享64位库文件。</li><li>/lost+found - 存放未链接文件。</li><li>/media - 自动识别设备的挂载目录。</li><li>/mnt - 临时挂载文件系统的挂载点。</li><li>/opt - 可选插件软件包安装位置。</li><li>/proc - 内核和进程信息。</li><li><strong>/root</strong> - 超级管理员用户主目录。</li><li>/run - 存放系统运行时需要的东西。</li><li>/sbin - 超级用户的二进制文件。</li><li>/sys - 设备的伪文件系统。</li><li>/tmp - 临时文件夹。</li><li><strong>/usr</strong> - 用户应用目录。</li><li>/var - 变量数据目录。</li></ol><h4 id="8-3-访问权限"><a href="#8-3-访问权限" class="headerlink" title="8.3 访问权限"></a>8.3 访问权限</h4><ol><li><p><strong>chmod</strong> - 改变文件模式比特。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# ls -l...-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html...[root ~]# chmod g+w,o+w sohu.html[root ~]# ls -l...-rw-rw-rw-  1 root       root 211878 Jun 19 16:06 sohu.html...[root ~]# chmod 644 sohu.html[root ~]# ls -l...-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html...</code></pre></div><blockquote><p>说明：通过上面的例子可以看出，用<code>chmod</code>改变文件模式比特有两种方式：一种是字符设定法，另一种是数字设定法。除了<code>chmod</code>之外，可以通过<code>umask</code>来设定哪些权限将在新文件的默认权限中被删除。</p></blockquote><p>长格式查看目录或文件时显示结果及其对应权限的数值如下表所示。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/file-mode.png" srcset="/img/loading.gif" alt=""></p></li><li><p><strong>chown</strong> - 改变文件所有者。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# ls -l...-rw-r--r--  1 root root     54 Jun 20 10:06 readme.txt...[root ~]# chown hellokitty readme.txt[root ~]# ls -l...-rw-r--r--  1 hellokitty root     54 Jun 20 10:06 readme.txt...</code></pre></div></li><li><p><strong>chgrp</strong> - 改变用户组。</p></li></ol><h4 id="8-4-磁盘管理"><a href="#8-4-磁盘管理" class="headerlink" title="8.4 磁盘管理"></a>8.4 磁盘管理</h4><ol><li><p>列出文件系统的磁盘使用状况 - <strong>df</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# df -hFilesystem      Size  Used Avail Use% Mounted on/dev/vda1        40G  5.0G   33G  14% /devtmpfs        486M     0  486M   0% /devtmpfs           497M     0  497M   0% /dev/shmtmpfs           497M  356K  496M   1% /runtmpfs           497M     0  497M   0% /sys/fs/cgrouptmpfs           100M     0  100M   0% /run/user/0</code></pre></div></li><li><p>磁盘分区表操作 - <strong>fdisk</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# fdisk -lDisk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x000a42f4   Device Boot      Start         End      Blocks   Id  System/dev/vda1   *        2048    83884031    41940992   83  LinuxDisk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytes</code></pre></div></li><li><p>磁盘分区工具 - <strong>parted</strong>。</p></li><li><p>格式化文件系统 - <strong>mkfs</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# mkfs -t ext4 -v /dev/sdb</code></pre></div><ul><li><code>-t</code> - 指定文件系统的类型。</li><li><code>-c</code> - 创建文件系统时检查磁盘损坏情况。</li><li><code>-v</code> - 显示详细信息。</li></ul></li><li><p>文件系统检查 - <strong>fsck</strong>。</p></li><li><p>转换或拷贝文件 - <strong>dd</strong>。</p></li><li><p>挂载/卸载 - <strong>mount</strong> / <strong>umount</strong>。</p></li><li><p>创建/激活/关闭交换分区 - <strong>mkswap</strong> / <strong>swapon</strong> / <strong>swapoff</strong>。</p></li></ol><blockquote><p>说明：执行上面这些命令会带有一定的风险，如果不清楚这些命令的用法，最好不用随意使用，在使用的过程中，最好对照参考资料进行操作，并在操作前确认是否要这么做。</p></blockquote><h3 id="九：-编辑器-vim"><a href="#九：-编辑器-vim" class="headerlink" title="九： 编辑器 - vim"></a>九： 编辑器 - vim</h3><ol><li><p>启动vim。可以通过<code>vi</code>或<code>vim</code>命令来启动vim，启动时可以指定文件名来打开一个文件，如果没有指定文件名，也可以在保存的时候指定文件名。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# vim guess.py</code></pre></div></li><li><p>命令模式、编辑模式和末行模式：启动vim进入的是命令模式（也称为Normal模式），在命令模式下输入英文字母<code>i</code>会进入编辑模式（Insert模式），屏幕下方出现<code>-- INSERT --</code>提示；在编辑模式下按下<code>Esc</code>会回到命令模式，此时如果输入英文<code>:</code>会进入末行模式，在末行模式下输入<code>q!</code>可以在不保存当前工作的情况下强行退出vim；在命令模式下输入<code>v</code>会进入可视模式（Visual模式），可以用光标选择一个区域再完成对应的操作。</p></li><li><p>保存和退出vim：在命令模式下输入<code>:</code> 进入末行模式，输入<code>wq</code>可以实现保存退出；如果想放弃编辑的内容输入<code>q!</code>强行退出，这一点刚才已经提到过了；在命令模式下也可以直接输入<code>ZZ</code>实现保存退出。如果只想保存文件不退出，那么可以在末行模式下输入<code>w</code>；可以在<code>w</code>后面输入空格再指定要保存的文件名。</p></li><li><p>光标操作。</p><ul><li>在命令模式下可以通过<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>来控制光标向左、下、上、右的方向移动，可以在字母前输入数字来表示移动的距离，例如：<code>10h</code>表示向左移动10个字符。</li><li>在命令模式下可以通过<code>Ctrl+y</code>和<code>Ctrl+e</code>来实现向上、向下滚动一行文本的操作，可以通过<code>Ctrl+f</code>和<code>Ctrl+b</code>来实现向前和向后翻页的操作。</li><li>在命令模式下可以通过输入英文字母<code>G</code>将光标移到文件的末尾，可以通过<code>gg</code>将光标移到文件的开始，也可以通过在<code>G</code>前输入数字来将光标移动到指定的行。</li></ul></li><li><p>文本操作。</p><ul><li>删除：在命令模式下可以用<code>dd</code>来删除整行；可以在<code>dd</code>前加数字来指定删除的行数；可以用<code>d$</code>来实现删除从光标处删到行尾的操作，也可以通过<code>d0</code>来实现从光标处删到行首的操作；如果想删除一个单词，可以使用<code>dw</code>；如果要删除全文，可以在输入<code>:%d</code>（其中<code>:</code>用来从命令模式进入末行模式）。</li><li>复制和粘贴：在命令模式下可以用<code>yy</code>来复制整行；可以在<code>yy</code>前加数字来指定复制的行数；可以通过<code>p</code>将复制的内容粘贴到光标所在的地方。</li><li>撤销和恢复：在命令模式下输入<code>u</code>可以撤销之前的操作；通过<code>Ctrl+r</code>可以恢复被撤销的操作。</li><li>对内容进行排序：在命令模式下输入<code>%!sort</code>。</li></ul></li><li><p>查找和替换。</p><ul><li>查找操作需要输入<code>/</code>进入末行模式并提供正则表达式来匹配与之对应的内容，例如：<code>/doc.*\.</code>，输入<code>n</code>来向前搜索，也可以输入<code>N</code>来向后搜索。</li><li>替换操作需要输入<code>:</code>进入末行模式并指定搜索的范围、正则表达式以及替换后的内容和匹配选项，例如：<code>:1,$s/doc.*/hello/gice</code>，其中：<ul><li><code>g</code> - global：全局匹配。</li><li><code>i</code> - ignore case：忽略大小写匹配。</li><li><code>c</code> - confirm：替换时需要确认。</li><li><code>e</code> - error：忽略错误。</li></ul></li></ul></li><li><p>参数设定：在输入<code>:</code>进入末行模式后可以对vim进行设定。</p><ul><li><p>设置Tab键的空格数：<code>set ts=4</code></p></li><li><p>设置显示/不显示行号：<code>set nu</code> / <code>set nonu</code></p></li><li><p>设置启用/关闭高亮语法：<code>syntax on</code> / <code>syntax off</code></p></li><li><p>设置显示标尺（光标所在的行和列）： <code>set ruler</code></p></li><li><p>设置启用/关闭搜索结果高亮：<code>set hls</code> / <code>set nohls</code></p><blockquote><p>说明：如果希望上面的这些设定在每次启动vim时都能自动生效，需要将这些设定写到用户主目录下的.vimrc文件中。</p></blockquote></li></ul></li><li><p>高级技巧</p><ul><li><p>比较多个文件。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# vim -d foo.txt bar.txt</code></pre></div><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/vim-diff.png" srcset="/img/loading.gif" alt=""></p></li><li><p>打开多个文件。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# vim foo.txt bar.txt hello.txt</code></pre></div><p>启动vim后只有一个窗口显示的是foo.txt，可以在末行模式中输入<code>ls</code>查看到打开的三个文件，也可以在末行模式中输入<code>b &lt;num&gt;</code>来显示另一个文件，例如可以用<code>:b 2</code>将bar.txt显示出来，可以用<code>:b 3</code>将hello.txt显示出来。</p></li><li><p>拆分和切换窗口。</p><p>可以在末行模式中输入<code>sp</code>或<code>vs</code>来实现对窗口的水平或垂直拆分，这样我们就可以同时打开多个编辑窗口，通过按两次<code>Ctrl+w</code>就可以实现编辑窗口的切换，在一个窗口中执行退出操作只会关闭对应的窗口，其他的窗口继续保留。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/vim-multi-window.png" srcset="/img/loading.gif" alt=""></p></li><li><p>映射快捷键：在vim下可以将一些常用操作映射为快捷键来提升工作效率。</p><ul><li><p>例子1：在命令模式下输入<code>F4</code>执行从第一行开始删除10000行代码的操作。</p><p><code>:map &lt;F4&gt; gg10000dd</code>。</p><p>例子2：在编辑模式下输入<code>__main</code>直接补全为<code>if __name__ == &#39;__main__&#39;:</code>。</p><p><code>:inoremap __main if __name__ == &#39;__main__&#39;:</code></p></li></ul><blockquote><p>说明：上面例子2的<code>inoremap</code>中的<code>i</code>表示映射的键在编辑模式使用， <code>nore</code>表示不要递归，这一点非常重要，否则如果键对应的内容中又出现键本身，就会引发递归（相当于进入了死循环）。如果希望映射的快捷键每次启动vim时都能生效，需要将映射写到用户主目录下的.vimrc文件中。</p></blockquote></li><li><p>录制宏。</p><ul><li><p>在命令模式下输入<code>qa</code>开始录制宏（其中<code>a</code>是寄存器的名字，也可以是其他英文字母或0-9的数字）。</p></li><li><p>执行你的操作（光标操作、编辑操作等），这些操作都会被录制下来。</p></li><li><p>如果录制的操作已经完成了，按<code>q</code>结束录制。</p></li><li><p>通过<code>@a</code>（<code>a</code>是刚才使用的寄存器的名字）播放宏，如果要多次执行宏可以在前面加数字，例如<code>100@a</code>表示将宏播放100次。</p></li><li><p>可以试一试下面的例子来体验录制宏的操作，该例子来源于<a href="https://harttle.land/tags.html#Vim" target="_blank" rel="noopener">Harttle Land网站</a>，该网站上提供了很多关于vim的使用技巧，有兴趣的可以了解一下。<br><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/vim-macro.png" srcset="/img/loading.gif" alt=""></p></li></ul></li></ul></li></ol><h3 id="十：-软件安装和配置"><a href="#十：-软件安装和配置" class="headerlink" title="十： 软件安装和配置"></a>十： 软件安装和配置</h3><h4 id="10-1-使用包管理工具"><a href="#10-1-使用包管理工具" class="headerlink" title="10.1 使用包管理工具"></a>10.1 使用包管理工具</h4><ol><li><strong>yum</strong> - Yellowdog Updater Modified。<ul><li><code>yum search</code>：搜索软件包，例如<code>yum search nginx</code>。</li><li><code>yum list installed</code>：列出已经安装的软件包，例如<code>yum list installed | grep zlib</code>。</li><li><code>yum install</code>：安装软件包，例如<code>yum install nginx</code>。</li><li><code>yum remove</code>：删除软件包，例如<code>yum remove nginx</code>。</li><li><code>yum update</code>：更新软件包，例如<code>yum update</code>可以更新所有软件包，而<code>yum update tar</code>只会更新tar。</li><li><code>yum check-update</code>：检查有哪些可以更新的软件包。</li><li><code>yum info</code>：显示软件包的相关信息，例如<code>yum info nginx</code>。</li></ul></li><li><strong>rpm</strong> - Redhat Package Manager。<ul><li>安装软件包：<code>rpm -ivh &lt;packagename&gt;.rpm</code>。</li><li>移除软件包：<code>rpm -e &lt;packagename&gt;</code>。</li><li>查询软件包：<code>rpm -qa</code>，例如可以用<code>rpm -qa | grep mysql</code>来检查是否安装了MySQL相关的软件包。</li></ul></li></ol><p>下面以Nginx为例，演示如何使用yum安装软件。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# yum -y install nginx...Installed:  nginx.x86_64 1:1.12.2-2.el7Dependency Installed:  nginx-all-modules.noarch 1:1.12.2-2.el7  nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7  nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7  nginx-mod-http-perl.x86_64 1:1.12.2-2.el7  nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7  nginx-mod-mail.x86_64 1:1.12.2-2.el7  nginx-mod-stream.x86_64 1:1.12.2-2.el7Complete![root ~]# yum info nginxLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfileInstalled PackagesName        : nginxArch        : x86_64Epoch       : 1Version     : 1.12.2Release     : 2.el7Size        : 1.5 MRepo        : installedFrom repo   : epelSummary     : A high performance web server and reverse proxy serverURL         : http://nginx.org/License     : BSDDescription : Nginx is a web server and a reverse proxy server for HTTP, SMTP, POP3 and            : IMAP protocols, with a strong focus on high concurrency, performance and low            : memory usage.[root ~]# nginx -vnginx version: nginx/1.12.2</code></pre></div><p>移除Nginx。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# yum -y remove nginx</code></pre></div><p>下面以MySQL为例，演示如何使用rpm安装软件。要安装MySQL需要先到<a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL官方网站</a>下载对应的<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">RPM文件</a>，当然要选择和你使用的Linux系统对应的版本。MySQL现在是Oracle公司旗下的产品，在MySQL被收购后，MySQL的作者重新制作了一个MySQL的分支MariaDB，可以通过yum进行安装。</p><div class="hljs"><pre><code class="hljs Shell">[root mysql]# lsmysql-community-client-5.7.22-1.el7.x86_64.rpmmysql-community-common-5.7.22-1.el7.x86_64.rpmmysql-community-libs-5.7.22-1.el7.x86_64.rpmmysql-community-server-5.7.22-1.el7.x86_64.rpm[root mysql]# yum -y remove mariadb-libs[root mysql]# yum -y install libaio[root mysql]#rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm...[root mysql]#rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm...[root mysql]#rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm...[root mysql]#rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm...</code></pre></div><blockquote><p>说明：由于MySQL和<a href="https://mariadb.org/" target="_blank" rel="noopener">MariaDB</a>的底层依赖库是有冲突的，所以上面我们首先用<code>yum</code>移除了名为mariadb-libs的依赖库并安装了名为libaio支持异步I/O操作的依赖库。关于MySQL和MariaDB之间的关系，可以阅读<a href="https://zh.wikipedia.org/wiki/MariaDB" target="_blank" rel="noopener">维基百科</a>上关于MariaDB的介绍。</p></blockquote><p>移除安装的MySQL。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# rpm -qa | grep mysql | xargs rpm -e</code></pre></div><h4 id="10-2-下载解压配置环境变量"><a href="#10-2-下载解压配置环境变量" class="headerlink" title="10.2 下载解压配置环境变量"></a>10.2 下载解压配置环境变量</h4><p>下面以安装MongoDB为例，演示这类软件应该如何安装。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz--2018-06-21 18:32:53--  https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgzResolving fastdl.mongodb.org (fastdl.mongodb.org)... 52.85.83.16, 52.85.83.228, 52.85.83.186, ...Connecting to fastdl.mongodb.org (fastdl.mongodb.org)|52.85.83.16|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 100564462 (96M) [application/x-gzip]Saving to: ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’<span class="hljs-meta">100%</span><span class="bash">[==================================================&gt;] 100,564,462  630KB/s   <span class="hljs-keyword">in</span> 2m 9s</span>2018-06-21 18:35:04 (760 KB/s) - ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’ saved [100564462/100564462][root ~]# gunzip mongodb-linux-x86_64-rhel70-3.6.5.tgz[root ~]# tar -xvf mongodb-linux-x86_64-rhel70-3.6.5.tarmongodb-linux-x86_64-rhel70-3.6.5/READMEmongodb-linux-x86_64-rhel70-3.6.5/THIRD-PARTY-NOTICESmongodb-linux-x86_64-rhel70-3.6.5/MPL-2mongodb-linux-x86_64-rhel70-3.6.5/GNU-AGPL-3.0mongodb-linux-x86_64-rhel70-3.6.5/bin/mongodumpmongodb-linux-x86_64-rhel70-3.6.5/bin/mongorestoremongodb-linux-x86_64-rhel70-3.6.5/bin/mongoexportmongodb-linux-x86_64-rhel70-3.6.5/bin/mongoimportmongodb-linux-x86_64-rhel70-3.6.5/bin/mongostatmongodb-linux-x86_64-rhel70-3.6.5/bin/mongotopmongodb-linux-x86_64-rhel70-3.6.5/bin/bsondumpmongodb-linux-x86_64-rhel70-3.6.5/bin/mongofilesmongodb-linux-x86_64-rhel70-3.6.5/bin/mongoreplaymongodb-linux-x86_64-rhel70-3.6.5/bin/mongoperfmongodb-linux-x86_64-rhel70-3.6.5/bin/mongodmongodb-linux-x86_64-rhel70-3.6.5/bin/mongosmongodb-linux-x86_64-rhel70-3.6.5/bin/mongomongodb-linux-x86_64-rhel70-3.6.5/bin/install_compass[root ~]# vim .bash_profile...PATH=$PATH:$HOME/bin:$HOME/mongodb-linux-x86_64-rhel70-3.6.5/binexport PATH...[root ~]# source .bash_profile[root ~]# mongod --versiondb version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment:    distmod: rhel70    distarch: x86_64    target_arch: x86_64[root ~]# mongo --versionMongoDB shell version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment:    distmod: rhel70    distarch: x86_64    target_arch: x86_64</code></pre></div><blockquote><p>说明：当然也可以通过yum来安装MongoDB，具体可以参照<a href="https://docs.mongodb.com/master/administration/install-on-linux/" target="_blank" rel="noopener">官方网站</a>上给出的说明。</p></blockquote><h4 id="10-3-源代码构建安装"><a href="#10-3-源代码构建安装" class="headerlink" title="10.3 源代码构建安装"></a>10.3 源代码构建安装</h4><ol><li><p>安装Python 3.6。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# yum install gcc[root ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz[root ~]# gunzip Python-3.6.5.tgz[root ~]# tar -xvf Python-3.6.5.tar[root ~]# cd Python-3.6.5[root ~]# ./configure --prefix=/usr/local/python36 --enable-optimizations[root ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel[root ~]# make &amp;&amp; make install...[root ~]# ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3[root ~]# python3 --versionPython 3.6.5[root ~]# python3 -m pip install -U pip[root ~]# pip3 --version</code></pre></div><blockquote><p>说明：上面在安装好Python之后还需要注册PATH环境变量，将Python安装路径下bin文件夹的绝对路径注册到PATH环境变量中。注册环境变量可以修改用户主目录下的.bash_profile或者/etc目录下的profile文件，二者的区别在于前者相当于是用户环境变量，而后者相当于是系统环境变量。</p></blockquote></li><li><p>安装Redis-3.2.12。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# wget http://download.redis.io/releases/redis-3.2.12.tar.gz[root ~]# gunzip redis-3.2.12.tar.gz[root ~]# tar -xvf redis-3.2.12.tar[root ~]# cd redis-3.2.12[root ~]# make &amp;&amp; make install[root ~]# redis-server --versionRedis server v=3.2.12 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=5bc5cd3c03d6ceb6[root ~]# redis-cli --versionredis-cli 3.2.12</code></pre></div></li></ol><h3 id="十一：-配置服务"><a href="#十一：-配置服务" class="headerlink" title="十一： 配置服务"></a>十一： 配置服务</h3><p>我们可以Linux系统下安装和配置各种服务，也就是说我们可以把Linux系统打造成数据库服务器、Web服务器、缓存服务器、文件服务器、消息队列服务器等等。Linux下的大多数服务都被设置为守护进程（驻留在系统后台运行，但不会因为服务还在运行而导致Linux无法停止运行），所以我们安装的服务通常名字后面都有一个字母<code>d</code>，它是英文单词<code>daemon</code>的缩写，例如：防火墙服务叫firewalld，我们之前安装的MySQL服务叫mysqld，Apache服务器叫httpd等。在安装好服务之后，可以使用<code>systemctl</code>命令或<code>service</code>命令来完成对服务的启动、停止等操作，具体操作如下所示。</p><ol><li><p>启动防火墙服务。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# systemctl start firewalld</code></pre></div></li><li><p>终止防火墙服务。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# systemctl stop firewalld</code></pre></div></li><li><p>重启防火墙服务。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# systemctl restart firewalld</code></pre></div></li><li><p>查看防火墙服务状态。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# systemctl status firewalld</code></pre></div></li><li><p>设置/禁用防火墙服务开机自启。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# systemctl enable firewalldCreated symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.Created symlink from /etc/systemd/system/multi-user.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.[root ~]# systemctl disable firewalldRemoved symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</code></pre></div></li></ol><h3 id="十二：-计划任务"><a href="#十二：-计划任务" class="headerlink" title="十二： 计划任务"></a>十二： 计划任务</h3><ol><li><p>在指定的时间执行命令</p><ul><li><strong>at</strong> - 将任务排队，在指定的时间执行。</li><li><strong>atq</strong> - 查看待执行的任务队列。</li><li><strong>atrm</strong> - 从队列中删除待执行的任务。</li></ul><p>指定3天以后下午5点要执行的任务。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# at 5pm+3days<span class="hljs-meta">at&gt;</span><span class="bash"> rm -f /root/*.html</span><span class="hljs-meta">at&gt;</span><span class="bash"> &lt;EOT&gt;</span>job 9 at Wed Jun  5 17:00:00 2019</code></pre></div><p>查看待执行的任务队列。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# atq9       Wed Jun  5 17:00:00 2019 a root</code></pre></div><p>从队列中删除指定的任务。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]$ atrm 9</code></pre></div></li><li><p>计划任务表 - <strong>crontab</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# crontab -e* * * * * echo "hello, world!" &gt;&gt; /root/hello.txt59 23 * * * rm -f /root/*.log</code></pre></div><blockquote><p>说明：输入<code>crontab -e</code>命令会打开vim来编辑Cron表达式并指定触发的任务，上面我们定制了两个计划任务，一个是每分钟向/root目录下的hello.txt中追加输出<code>hello, world!</code>；另一个是每天23时59分执行删除/root目录下以log为后缀名的文件。如果不知道Cron表达式如何书写，可以参照/etc/crontab文件中的提示（下面会讲到）或者用搜索引擎找一下“Cron表达式在线生成器”来生成Cron表达式。</p></blockquote><p>和crontab相关的文件在<code>/etc</code>目录下，通过修改<code>/etc</code>目录下的crontab文件也能够定制计划任务。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# cd /etc[root etc]# ls -l | grep cron-rw-------.  1 root root      541 Aug  3  2017 anacrontabdrwxr-xr-x.  2 root root     4096 Mar 27 11:56 cron.ddrwxr-xr-x.  2 root root     4096 Mar 27 11:51 cron.daily-rw-------.  1 root root        0 Aug  3  2017 cron.denydrwxr-xr-x.  2 root root     4096 Mar 27 11:50 cron.hourlydrwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.monthly-rw-r--r--   1 root root      493 Jun 23 15:09 crontabdrwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.weekly[root etc]# vim crontab  1 SHELL=/bin/bash  2 PATH=/sbin:/bin:/usr/sbin:/usr/bin  3 MAILTO=root  4  5 # For details see man 4 crontabs  6  7 # Example of job definition:  8 # .---------------- minute (0 - 59)  9 # |  .------------- hour (0 - 23) 10 # |  |  .---------- day of month (1 - 31) 11 # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ... 12 # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat 13 # |  |  |  |  | 14 # *  *  *  *  * user-name  command to be executed</code></pre></div></li></ol><h3 id="十三：-网络访问和管理"><a href="#十三：-网络访问和管理" class="headerlink" title="十三： 网络访问和管理"></a>十三： 网络访问和管理</h3><ol><li><p>安全远程连接 - <strong>ssh</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]$ ssh root@120.77.222.217The authenticity of host '120.77.222.217 (120.77.222.217)' can't be established.ECDSA key fingerprint is SHA256:BhUhykv+FvnIL03I9cLRpWpaCxI91m9n7zBWrcXRa8w.ECDSA key fingerprint is MD5:cc:85:e9:f0:d7:07:1a:26:41:92:77:6b:7f:a0:92:65.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '120.77.222.217' (ECDSA) to the list of known hosts.root@120.77.222.217's password:</code></pre></div></li><li><p>通过网络获取资源 - <strong>wget</strong>。</p><ul><li>-b 后台下载模式</li><li>-O 下载到指定的目录</li><li>-r 递归下载</li></ul></li><li><p>发送和接收邮件 - <strong>mail</strong>。</p></li><li><p>网络配置工具（旧） - <strong>ifconfig</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# ifconfig eth0eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.18.61.250  netmask 255.255.240.0  broadcast 172.18.63.255        ether 00:16:3e:02:b6:46  txqueuelen 1000  (Ethernet)        RX packets 1067841  bytes 1296732947 (1.2 GiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 409912  bytes 43569163 (41.5 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions</code></pre></div></li><li><p>网络配置工具（新） - <strong>ip</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# ip address1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000    link/ether 00:16:3e:02:b6:46 brd ff:ff:ff:ff:ff:ff    inet 172.18.61.250/20 brd 172.18.63.255 scope global eth0       valid_lft forever preferred_lft forever</code></pre></div></li><li><p>网络可达性检查 - <strong>ping</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# ping www.baidu.com -c 3PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data.64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=1 ttl=51 time=36.3 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=2 ttl=51 time=36.4 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=3 ttl=51 time=36.4 ms--- www.a.shifen.com ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 2002msrtt min/avg/max/mdev = 36.392/36.406/36.427/0.156 ms</code></pre></div></li><li><p>显示或管理路由表 - <strong>route</strong>。</p></li><li><p>查看网络服务和端口 - <strong>netstat</strong> / <strong>ss</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# netstat -nap | grep nginx</code></pre></div></li><li><p>网络监听抓包 - <strong>tcpdump</strong>。</p></li><li><p>安全文件拷贝 - <strong>scp</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# scp root@1.2.3.4:/root/guido.jpg hellokitty@4.3.2.1:/home/hellokitty/pic.jpg</code></pre></div><p>scp中使用sshpass带密码传输文件</p><div class="hljs"><pre><code class="hljs Shell">sshpass -p '密码' scp -r 用户名@ip:/home/file1 /home/file1</code></pre></div></li><li><p>文件同步工具 - <strong>rsync</strong>。</p><blockquote><p>说明：使用<code>rsync</code>可以实现文件的自动同步，这个对于文件服务器来说相当重要。关于这个命令的用法，我们在后面讲项目部署的时候为大家详细说明。</p></blockquote></li><li><p>安全文件传输 - <strong>sftp</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# sftp root@1.2.3.4root@1.2.3.4's password:Connected to 1.2.3.4.<span class="hljs-meta">sftp&gt;</span></code></pre></div><ul><li><p><code>help</code>：显示帮助信息。</p></li><li><p><code>ls</code>/<code>lls</code>：显示远端/本地目录列表。</p></li><li><p><code>cd</code>/<code>lcd</code>：切换远端/本地路径。</p></li><li><p><code>mkdir</code>/<code>lmkdir</code>：创建远端/本地目录。</p></li><li><p><code>pwd</code>/<code>lpwd</code>：显示远端/本地当前工作目录。</p></li><li><p><code>get</code>：下载文件。</p></li><li><p><code>put</code>：上传文件。</p></li><li><p><code>rm</code>：删除远端文件。</p></li><li><p><code>bye</code>/<code>exit</code>/<code>quit</code>：退出sftp。</p></li></ul></li></ol><h3 id="十四：-进程管理"><a href="#十四：-进程管理" class="headerlink" title="十四： 进程管理"></a>十四： 进程管理</h3><ol><li><p>查看进程 - <strong>ps</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# ps -efUID        PID  PPID  C STIME TTY          TIME CMDroot         1     0  0 Jun23 ?        00:00:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 21root         2     0  0 Jun23 ?        00:00:00 [kthreadd]...[root ~]# ps -ef | grep mysqldroot      4943  4581  0 22:45 pts/0    00:00:00 grep --color=auto mysqldmysql    25257     1  0 Jun25 ?        00:00:39 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</code></pre></div></li><li><p>显示进程状态树 - <strong>pstree</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# pstreesystemd─┬─AliYunDun───18*[&#123;AliYunDun&#125;]        ├─AliYunDunUpdate───3*[&#123;AliYunDunUpdate&#125;]        ├─2*[agetty]        ├─aliyun-service───2*[&#123;aliyun-service&#125;]        ├─atd        ├─auditd───&#123;auditd&#125;        ├─dbus-daemon        ├─dhclient        ├─irqbalance        ├─lvmetad        ├─mysqld───28*[&#123;mysqld&#125;]        ├─nginx───2*[nginx]        ├─ntpd        ├─polkitd───6*[&#123;polkitd&#125;]        ├─rsyslogd───2*[&#123;rsyslogd&#125;]        ├─sshd───sshd───bash───pstree        ├─systemd-journal        ├─systemd-logind        ├─systemd-udevd        └─tuned───4*[&#123;tuned&#125;]</code></pre></div></li><li><p>查找与指定条件匹配的进程 - <strong>pgrep</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]$ pgrep mysqld3584</code></pre></div></li><li><p>通过进程号终止进程 - <strong>kill</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]$ kill -l 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR111) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+338) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+843) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+1348) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-1253) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-758) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-263) SIGRTMAX-1  64) SIGRTMAX[root ~]# kill 1234[root ~]# kill -9 1234</code></pre></div><p>例子：用一条命令强制终止正在运行的Redis进程。</p><div class="hljs"><pre><code class="hljs Shell">ps -ef | grep redis | grep -v grep | awk '&#123;print $2&#125;' | xargs kill</code></pre></div></li><li><p>通过进程名终止进程 - <strong>killall</strong> / <strong>pkill</strong>。</p><p>结束名为mysqld的进程。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# pkill mysqld</code></pre></div><p>结束hellokitty用户的所有进程。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# pkill -u hellokitty</code></pre></div><blockquote><p>说明：这样的操作会让hellokitty用户和服务器断开连接。</p></blockquote></li><li><p>将进程置于后台运行。</p><ul><li><code>Ctrl+Z</code> - 快捷键，用于停止进程并置于后台。</li><li><code>&amp;</code> - 将进程置于后台运行。</li></ul><div class="hljs"><pre><code class="hljs Shell">[root ~]# mongod &amp;[root ~]# redis-server...^Z[4]+  Stopped                 redis-server</code></pre></div></li><li><p>查询后台进程 - <strong>jobs</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# jobs[2]   Running                 mongod &amp;[3]-  Stopped                 cat[4]+  Stopped                 redis-server</code></pre></div></li><li><p>让进程在后台继续运行 - <strong>bg</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# bg %4[4]+ redis-server &amp;[root ~]# jobs[2]   Running                 mongod &amp;[3]+  Stopped                 cat[4]-  Running                 redis-server &amp;</code></pre></div></li><li><p>将后台进程置于前台 - <strong>fg</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# fg %4redis-server</code></pre></div><blockquote><p>说明：置于前台的进程可以使用<code>Ctrl+C</code>来终止它。</p></blockquote></li><li><p>调整程序/进程运行时优先级 - <strong>nice</strong> / <strong>renice</strong>。</p></li><li><p>用户登出后进程继续工作 - <strong>nohup</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# nohup ping www.baidu.com &gt; result.txt &amp;</code></pre></div></li><li><p>跟踪进程系统调用情况 - <strong>strace</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# pgrep mysqld8803[root ~]# strace -c -p 8803strace: Process 8803 attached^Cstrace: Process 8803 detached<span class="hljs-meta">%</span><span class="bash"> time     seconds  usecs/call     calls    errors syscall</span>------ ----------- ----------- --------- --------- ---------------- 99.18    0.005719        5719         1           restart_syscall  0.49    0.000028          28         1           mprotect  0.24    0.000014          14         1           clone  0.05    0.000003           3         1           mmap  0.03    0.000002           2         1           accept------ ----------- ----------- --------- --------- ----------------100.00    0.005766                     5           total</code></pre></div><blockquote><p>说明：这个命令的用法和参数都比较复杂，建议大家在真正用到这个命令的时候再根据实际需要进行了解。</p></blockquote></li><li><p>查看当前运行级别 - <strong>runlevel</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# runlevelN 3</code></pre></div></li><li><p>实时监控进程占用资源状况 - <strong>top</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# toptop - 23:04:23 up 3 days, 14:10,  1 user,  load average: 0.00, 0.01, 0.05Tasks:  65 total,   1 running,  64 sleeping,   0 stopped,   0 zombie<span class="hljs-meta">%</span><span class="bash">Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span>KiB Mem :  1016168 total,   191060 free,   324700 used,   500408 buff/cacheKiB Swap:        0 total,        0 free,        0 used.   530944 avail Mem...</code></pre></div><ul><li><code>-c</code> - 显示进程的整个路径。</li><li><code>-d</code> - 指定两次刷屏之间的间隔时间（秒为单位）。</li><li><code>-i</code> - 不显示闲置进程或僵尸进程。</li><li><code>-p</code> - 显示指定进程的信息。</li></ul></li></ol><h3 id="十五：-系统诊断"><a href="#十五：-系统诊断" class="headerlink" title="十五： 系统诊断"></a>十五： 系统诊断</h3><ol><li><p>系统启动异常诊断 - <strong>dmesg</strong>。</p></li><li><p>查看系统活动信息 - <strong>sar</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# sar -u -r 5 10Linux 3.10.0-957.10.1.el7.x86_64 (izwz97tbgo9lkabnat2lo8z)      06/02/2019      _x86_64_        (2 CPU)06:48:30 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle06:48:35 PM     all      0.10      0.00      0.10      0.00      0.00     99.8006:48:30 PM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty06:48:35 PM   1772012   2108392     54.33    102816   1634528    784940     20.23    793328   1164704         0</code></pre></div><ul><li><code>-A</code> - 显示所有设备（CPU、内存、磁盘）的运行状况。</li><li><code>-u</code> - 显示所有CPU的负载情况。</li><li><code>-d</code> - 显示所有磁盘的使用情况。</li><li><code>-r</code> - 显示内存的使用情况。</li><li><code>-n</code> - 显示网络运行状态。</li></ul></li><li><p>查看内存使用情况 - <strong>free</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# free              total        used        free      shared  buff/cache   availableMem:        1016168      323924      190452         356      501792      531800Swap:             0           0           0</code></pre></div></li><li><p>虚拟内存统计 - <strong>vmstat</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# vmstatprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st 2  0      0 204020  79036 667532    0    0     5    18  101   58  1  0 99  0  0</code></pre></div></li><li><p>CPU信息统计 - <strong>mpstat</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# mpstatLinux 3.10.0-957.5.1.el7.x86_64 (iZ8vba0s66jjlfmo601w4xZ)       05/30/2019      _x86_64_        (1 CPU)01:51:54 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle01:51:54 AM  all    0.71    0.00    0.17    0.04    0.00    0.00    0.00    0.00    0.00   99.07</code></pre></div></li><li><p>查看进程使用内存状况 - <strong>pmap</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# ps  PID TTY          TIME CMD 4581 pts/0    00:00:00 bash 5664 pts/0    00:00:00 ps[root ~]# pmap 45814581:   -bash0000000000400000    884K r-x-- bash00000000006dc000      4K r---- bash00000000006dd000     36K rw--- bash00000000006e6000     24K rw---   [ anon ]0000000001de0000    400K rw---   [ anon ]00007f82fe805000     48K r-x-- libnss_files-2.17.so00007f82fe811000   2044K ----- libnss_files-2.17.so...</code></pre></div></li><li><p>报告设备CPU和I/O统计信息 - <strong>iostat</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# iostatLinux 3.10.0-693.11.1.el7.x86_64 (iZwz97tbgo9lkabnat2lo8Z)      06/26/2018      _x86_64_       (1 CPU)avg-cpu:  %user   %nice %system %iowait  %steal   %idle           0.79    0.00    0.20    0.04    0.00   98.97Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtnvda               0.85         6.78        21.32    2106565    6623024vdb               0.00         0.01         0.00       2088          0</code></pre></div></li><li><p>显示所有PCI设备 - <strong>lspci</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# lspci00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II]00:01.2 USB controller: Intel Corporation 82371SB PIIX3 USB [Natoma/Triton II] (rev 01)00:01.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 03)00:02.0 VGA compatible controller: Cirrus Logic GD 544600:03.0 Ethernet controller: Red Hat, Inc. Virtio network device00:04.0 Communication controller: Red Hat, Inc. Virtio console00:05.0 SCSI storage controller: Red Hat, Inc. Virtio block device00:06.0 SCSI storage controller: Red Hat, Inc. Virtio block device00:07.0 Unclassified device [00ff]: Red Hat, Inc. Virtio memory balloon</code></pre></div></li><li><p>显示进程间通信设施的状态 - <strong>ipcs</strong>。</p><div class="hljs"><pre><code class="hljs Shell">[root ~]# ipcs------ Message Queues --------key        msqid      owner      perms      used-bytes   messages    ------ Shared Memory Segments --------key        shmid      owner      perms      bytes      nattch     status      ------ Semaphore Arrays --------key        semid      owner      perms      nsems</code></pre></div></li></ol><h3 id="十六：-Shell编程"><a href="#十六：-Shell编程" class="headerlink" title="十六： Shell编程"></a>十六： Shell编程</h3><p>之前我们提到过，Shell是一个连接用户和操作系统的应用程序，它提供了人机交互的界面（接口），用户通过这个界面访问操作系统内核的服务。Shell脚本是一种为Shell编写的脚本程序，我们可以通过Shell脚本来进行系统管理，同时也可以通过它进行文件操作。总之，编写Shell脚本对于使用Linux系统的人来说，应该是一项标配技能。</p><p>互联网上有大量关于Shell脚本的相关知识，我不打算再此对Shell脚本做一个全面系统的讲解，我们通过下面的代码来感性的认识下Shell脚本就行了。</p><p>例子1：输入两个整数m和n，计算从m到n的整数求和的结果。</p><div class="hljs"><pre><code class="hljs Shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/bash</span>printf 'm = 'read mprintf 'n = 'read na=$msum=0while [ $a -le $n ]do    sum=$[ sum + a ]    a=$[ a + 1 ]doneecho '结果: '$sum</code></pre></div><p>例子2：自动创建文件夹和指定数量的文件。</p><div class="hljs"><pre><code class="hljs Shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/bash</span>printf '输入文件名: 'read fileprintf '输入文件数量(&lt;1000): 'read numif [ $num -ge 1000 ]then    echo '文件数量不能超过1000'else    if [ -e $dir -a -d $dir ]    then        rm -rf $dir    else        if [ -e $dir -a -f $dir ]        then            rm -f $dir        fi    fi    mkdir -p $dir    index=1    while [ $index -le $num ]    do        if [ $index -lt 10 ]        then            pre='00'        elif [ $index -lt 100 ]        then            pre='0'        else            pre=''        fi        touch $dir'/'$file'_'$pre$index        index=$[ index + 1 ]    donefi</code></pre></div><p>例子3：自动安装指定版本的Redis。</p><div class="hljs"><pre><code class="hljs Shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/bash</span>install_redis() &#123;    if ! which redis-server &gt; /dev/null    then        cd /root        wget $1$2'.tar.gz' &gt;&gt; install.log        gunzip /root/$2'.tar.gz'        tar -xf /root/$2'.tar'        cd /root/$2        make &gt;&gt; install.log        make install &gt;&gt; install.log        echo '安装完成'    else        echo '已经安装过Redis'    fi&#125;install_redis 'http://download.redis.io/releases/' $1</code></pre></div><h3 id="十七：-相关资源"><a href="#十七：-相关资源" class="headerlink" title="十七： 相关资源"></a>十七： 相关资源</h3><ol><li><p>Linux命令行常用快捷键</p><table><thead><tr><th>快捷键</th><th>功能说明</th></tr></thead><tbody><tr><td>tab</td><td>自动补全命令或路径</td></tr><tr><td>Ctrl+a</td><td>将光标移动到命令行行首</td></tr><tr><td>Ctrl+e</td><td>将光标移动到命令行行尾</td></tr><tr><td>Ctrl+f</td><td>将光标向右移动一个字符</td></tr><tr><td>Ctrl+b</td><td>将光标向左移动一个字符</td></tr><tr><td>Ctrl+k</td><td>剪切从光标到行尾的字符</td></tr><tr><td>Ctrl+u</td><td>剪切从光标到行首的字符</td></tr><tr><td>Ctrl+w</td><td>剪切光标前面的一个单词</td></tr><tr><td>Ctrl+y</td><td>复制剪切命名剪切的内容</td></tr><tr><td>Ctrl+c</td><td>中断正在执行的任务</td></tr><tr><td>Ctrl+h</td><td>删除光标前面的一个字符</td></tr><tr><td>Ctrl+d</td><td>退出当前命令行</td></tr><tr><td>Ctrl+r</td><td>搜索历史命令</td></tr><tr><td>Ctrl+g</td><td>退出历史命令搜索</td></tr><tr><td>Ctrl+l</td><td>清除屏幕上所有内容在屏幕的最上方开启一个新行</td></tr><tr><td>Ctrl+s</td><td>锁定终端使之暂时无法输入内容</td></tr><tr><td>Ctrl+q</td><td>退出终端锁定</td></tr><tr><td>Ctrl+z</td><td>将正在终端执行的任务停下来放到后台</td></tr><tr><td>!!</td><td>执行上一条命令</td></tr><tr><td>!数字</td><td>执行数字对应的历史命令</td></tr><tr><td>!字母</td><td>执行最近的以字母打头的命令</td></tr><tr><td>!$ / Esc+.</td><td>获得上一条命令最后一个参数</td></tr><tr><td>Esc+b</td><td>移动到当前单词的开头</td></tr><tr><td>Esc+f</td><td>移动到当前单词的结尾</td></tr></tbody></table></li><li><p>man查阅命令手册的内容说明</p><table><thead><tr><th>手册中的标题</th><th>功能说明</th></tr></thead><tbody><tr><td>NAME</td><td>命令的说明和介绍</td></tr><tr><td>SYNOPSIS</td><td>使用该命令的基本语法</td></tr><tr><td>DESCRIPTION</td><td>使用该命令的详细描述，各个参数的作用，有时候这些信息会出现在OPTIONS中</td></tr><tr><td>OPTIONS</td><td>命令相关参数选项的说明</td></tr><tr><td>EXAMPLES</td><td>使用该命令的参考例子</td></tr><tr><td>EXIT STATUS</td><td>命令结束的退出状态码，通常0表示成功执行</td></tr><tr><td>SEE ALSO</td><td>和命令相关的其他命令或信息</td></tr><tr><td>BUGS</td><td>和命令相关的缺陷的描述</td></tr><tr><td>AUTHOR</td><td>该命令的作者介绍</td></tr></tbody></table></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;本文转载于GitHub项目&lt;a href=&quot;https://github.com/jackfrued/Python-100-Days&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python - 100天从新手到大
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://closer_laps.gitee.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux" scheme="https://closer_laps.gitee.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/"/>
    
    
      <category term="Linux" scheme="https://closer_laps.gitee.io/tags/Linux/"/>
    
      <category term="读书笔记" scheme="https://closer_laps.gitee.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用正则表达式</title>
    <link href="https://closer_laps.gitee.io/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://closer_laps.gitee.io/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-02-23T06:55:45.000Z</published>
    <updated>2020-04-24T12:30:17.095Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本文转载于GitHub项目<a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">Python - 100天从新手到大师</a></strong></p></blockquote><h3 id="一：-正则表达式相关知识"><a href="#一：-正则表达式相关知识" class="headerlink" title="一： 正则表达式相关知识"></a>一： 正则表达式相关知识</h3><p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要，正则表达式就是用于描述这些规则的工具，换句话说正则表达式是一种工具，它定义了字符串的匹配模式（如何检查一个字符串是否有跟某种模式匹配的部分或者从一个字符串中将与模式匹配的部分提取出来或者替换掉）。如果你在Windows操作系统中使用过文件查找并且在指定文件名时使用过通配符（*和?），那么正则表达式也是与之类似的用来进行文本匹配的工具，只不过比起通配符正则表达式更强大，它能更精确地描述你的需求（当然你付出的代价是书写一个正则表达式比打出一个通配符要复杂得多，要知道任何给你带来好处的东西都是有代价的，就如同学习一门编程语言一样），比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串（像028-12345678或0813-7654321），这不就是国内的座机号码吗。最初计算机是为了做数学运算而诞生的，处理的信息基本上都是数值，而今天我们在日常工作中处理的信息基本上都是文本数据，我们希望计算机能够识别和处理符合某些模式的文本，正则表达式就显得非常重要了。今天几乎所有的编程语言都提供了对正则表达式操作的支持，Python通过标准库中的re模块来支持正则表达式操作。</p><p>我们可以考虑下面一个问题：我们从某个地方（可能是一个文本文件，也可能是网络上的一则新闻）获得了一个字符串，希望在字符串中找出手机号和座机号。当然我们可以设定手机号是11位的数字（注意并不是随机的11位数字，因为你没有见过“25012345678”这样的手机号吧）而座机号跟上一段中描述的模式相同，如果不使用正则表达式要完成这个任务就会很麻烦。</p><p>关于正则表达式的相关知识，大家可以阅读一篇非常有名的博客叫<a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">《正则表达式30分钟入门教程》</a>，读完这篇文章后你就可以看懂下面的表格，这是我们对正则表达式中的一些基本符号进行的扼要总结。</p><table><thead><tr><th>符号</th><th>解释</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配任意字符</td><td>b.t</td><td>可以匹配bat / but / b#t / b1t等</td></tr><tr><td>\w</td><td>匹配字母/数字/下划线</td><td>b\wt</td><td>可以匹配bat / b1t / b_t等<br>但不能匹配b#t</td></tr><tr><td>\s</td><td>匹配空白字符（包括\r、\n、\t等）</td><td>love\syou</td><td>可以匹配love you</td></tr><tr><td>\d</td><td>匹配数字</td><td>\d\d</td><td>可以匹配01 / 23 / 99等</td></tr><tr><td>\b</td><td>匹配单词的边界</td><td>\bThe\b</td><td></td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>^The</td><td>可以匹配The开头的字符串</td></tr><tr><td>$</td><td>匹配字符串的结束</td><td>.exe$</td><td>可以匹配.exe结尾的字符串</td></tr><tr><td>\W</td><td>匹配非字母/数字/下划线</td><td>b\Wt</td><td>可以匹配b#t / b@t等<br>但不能匹配but / b1t / b_t等</td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>love\Syou</td><td>可以匹配love#you等<br>但不能匹配love you</td></tr><tr><td>\D</td><td>匹配非数字</td><td>\d\D</td><td>可以匹配9a / 3# / 0F等</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>\Bio\B</td><td></td></tr><tr><td>[]</td><td>匹配来自字符集的任意单一字符</td><td>[aeiou]</td><td>可以匹配任一元音字母字符</td></tr><tr><td>[^]</td><td>匹配不在字符集中的任意单一字符</td><td>[^aeiou]</td><td>可以匹配任一非元音字母字符</td></tr><tr><td>*</td><td>匹配0次或多次</td><td>\w*</td><td></td></tr><tr><td>+</td><td>匹配1次或多次</td><td>\w+</td><td></td></tr><tr><td>?</td><td>匹配0次或1次</td><td>\w?</td><td></td></tr><tr><td>{N}</td><td>匹配N次</td><td>\w{3}</td><td></td></tr><tr><td>{M,}</td><td>匹配至少M次</td><td>\w{3,}</td><td></td></tr><tr><td>{M,N}</td><td>匹配至少M次至多N次</td><td>\w{3,6}</td><td></td></tr><tr><td>|</td><td>分支</td><td>foo|bar</td><td>可以匹配foo或者bar</td></tr><tr><td>(?#)</td><td>注释</td><td></td><td></td></tr><tr><td>(exp)</td><td>匹配exp并捕获到自动命名的组中</td><td></td><td></td></tr><tr><td>(?&nbsp;&lt;name&gt;exp)</td><td>匹配exp并捕获到名为name的组中</td><td></td><td></td></tr><tr><td>(?:exp)</td><td>匹配exp但是不捕获匹配的文本</td><td></td><td></td></tr><tr><td>(?=exp)</td><td>匹配exp前面的位置</td><td>\b\w+(?=ing)</td><td>可以匹配I’m dancing中的danc</td></tr><tr><td>(?&lt;=exp)</td><td>匹配exp后面的位置</td><td>(?&lt;=\bdanc)\w+\b</td><td>可以匹配I love dancing and reading中的第一个ing</td></tr><tr><td>(?!exp)</td><td>匹配后面不是exp的位置</td><td></td><td></td></tr><tr><td>(?&lt;!exp)</td><td>匹配前面不是exp的位置</td><td></td><td></td></tr><tr><td>*?</td><td>重复任意次，但尽可能少重复</td><td>a.*b<br>a.*?b</td><td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td></tr><tr><td>+?</td><td>重复1次或多次，但尽可能少重复</td><td></td><td></td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,N}?</td><td>重复M到N次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,}?</td><td>重复M次以上，但尽可能少重复</td><td></td><td></td></tr></tbody></table><blockquote><p><strong>说明：</strong> 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\进行转义处理，例如想匹配小数点可以写成\.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成\(和\)，否则圆括号被视为正则表达式中的分组。</p></blockquote><h3 id="二：-Python对正则表达式的支持"><a href="#二：-Python对正则表达式的支持" class="headerlink" title="二： Python对正则表达式的支持"></a>二： Python对正则表达式的支持</h3><p>Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>compile(pattern, flags=0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern, string, flags=0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags=0)</td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit=0, flags=0)</td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count=0, flags=0)</td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags=0)</td><td>match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I / re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M / re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 上面提到的re模块中的这些函数，实际开发中也可以用正则表达式对象的方法替代对这些函数的使用，如果一个正则表达式需要重复的使用，那么先通过compile函数编译正则表达式并创建出正则表达式对象无疑是更为明智的选择。</p></blockquote><p>下面我们通过一系列的例子来告诉大家在Python中如何使用正则表达式。</p><h4 id="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"><a href="#例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。" class="headerlink" title="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"></a>例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。</h4><div class="hljs"><pre><code class="hljs Python"><span class="hljs-string">"""验证输入用户名和QQ号是否有效并给出对应的提示信息要求：用户名必须由字母、数字或下划线构成且长度在6~20个字符之间，QQ号是5~12的数字且首位不能为0"""</span><span class="hljs-keyword">import</span> re<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    username = input(<span class="hljs-string">'请输入用户名: '</span>)    qq = input(<span class="hljs-string">'请输入QQ号: '</span>)    <span class="hljs-comment"># match函数的第一个参数是正则表达式字符串或正则表达式对象</span>    <span class="hljs-comment"># 第二个参数是要跟正则表达式做匹配的字符串对象</span>    m1 = re.match(<span class="hljs-string">r'^[0-9a-zA-Z_]&#123;6,20&#125;$'</span>, username)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> m1:        print(<span class="hljs-string">'请输入有效的用户名.'</span>)    m2 = re.match(<span class="hljs-string">r'^[1-9]\d&#123;4,11&#125;$'</span>, qq)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> m2:        print(<span class="hljs-string">'请输入有效的QQ号.'</span>)    <span class="hljs-keyword">if</span> m1 <span class="hljs-keyword">and</span> m2:        print(<span class="hljs-string">'你输入的信息是有效的!'</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div><blockquote><p><strong>提示：</strong> 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，说得更直接一点就是字符串中没有所谓的转义字符啦。因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\\，例如表示数字的\d得书写成\\d，这样不仅写起来不方便，阅读的时候也会很吃力。</p></blockquote><h4 id="例子2：从一段文字中提取出国内手机号码。"><a href="#例子2：从一段文字中提取出国内手机号码。" class="headerlink" title="例子2：从一段文字中提取出国内手机号码。"></a>例子2：从一段文字中提取出国内手机号码。</h4><p>下面这张图是截止到2017年底，国内三家运营商推出的手机号段。</p><p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/tel-start-number.png" srcset="/img/loading.gif" alt="tel-start-number.png"></p><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字</span>    pattern = re.compile(<span class="hljs-string">r'(?&lt;=\D)1[34578]\d&#123;9&#125;(?=\D)'</span>)    sentence = <span class="hljs-string">'''    重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，    不是15600998765，也是110或119，王大锤的手机号才是15600998765。    '''</span>    <span class="hljs-comment"># 查找所有匹配并保存到一个列表中</span>    mylist = re.findall(pattern, sentence)    print(mylist)    print(<span class="hljs-string">'--------华丽的分隔线--------'</span>)    <span class="hljs-comment"># 通过迭代器取出匹配对象并获得匹配的内容</span>    <span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> pattern.finditer(sentence):        print(temp.group())    print(<span class="hljs-string">'--------华丽的分隔线--------'</span>)    <span class="hljs-comment"># 通过search函数指定搜索位置找出所有匹配</span>    m = pattern.search(sentence)    <span class="hljs-keyword">while</span> m:        print(m.group())        m = pattern.search(sentence, m.end())<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div><blockquote><p><strong>说明：</strong> 上面匹配国内手机号的正则表达式并不够好，因为像14开头的号码只有145或147，而上面的正则表达式并没有考虑这种情况，要匹配国内手机号，更好的正则表达式的写法是：<code>(?&lt;=\D)(1[38]\d{9}|14[57]\d{8}|15[0-35-9]\d{8}|17[678]\d{8})(?=\D)</code>，国内最近好像有19和16开头的手机号了，但是这个暂时不在我们考虑之列。</p></blockquote><h4 id="例子3：替换字符串中的不良内容"><a href="#例子3：替换字符串中的不良内容" class="headerlink" title="例子3：替换字符串中的不良内容"></a>例子3：替换字符串中的不良内容</h4><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    sentence = <span class="hljs-string">'你丫是傻叉吗? 我操你大爷的. Fuck you.'</span>    purified = re.sub(<span class="hljs-string">'[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔'</span>,                      <span class="hljs-string">'*'</span>, sentence, flags=re.IGNORECASE)    print(purified)  <span class="hljs-comment"># 你丫是*吗? 我*你大爷的. * you.</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div><blockquote><p><strong>说明：</strong> re模块的正则表达式相关函数中都有一个flags参数，它代表了正则表达式的匹配标记，可以通过该标记来指定匹配时是否忽略大小写、是否进行多行匹配、是否显示调试信息等。如果需要为flags参数指定多个值，可以使用<a href="http://www.runoob.com/python/python-operators.html#ysf5" target="_blank" rel="noopener">按位或运算符</a>进行叠加，如<code>flags=re.I | re.M</code>。</p></blockquote><h4 id="例子4：拆分长字符串"><a href="#例子4：拆分长字符串" class="headerlink" title="例子4：拆分长字符串"></a>例子4：拆分长字符串</h4><div class="hljs"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    poem = <span class="hljs-string">'窗前明月光，疑是地上霜。举头望明月，低头思故乡。'</span>    sentence_list = re.split(<span class="hljs-string">r'[，。, .]'</span>, poem)    <span class="hljs-keyword">while</span> <span class="hljs-string">''</span> <span class="hljs-keyword">in</span> sentence_list:        sentence_list.remove(<span class="hljs-string">''</span>)    print(sentence_list)  <span class="hljs-comment"># ['窗前明月光', '疑是地上霜', '举头望明月', '低头思故乡']</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    main()</code></pre></div><h3 id="三：-后话"><a href="#三：-后话" class="headerlink" title="三： 后话"></a>三： 后话</h3><p>如果要从事爬虫类应用的开发，那么正则表达式一定是一个非常好的助手，因为它可以帮助我们迅速的从网页代码中发现某种我们指定的模式并提取出我们需要的信息，当然对于初学者来收，要编写一个正确的适当的正则表达式可能并不是一件容易的事情（当然有些常用的正则表达式可以直接在网上找找），所以实际开发爬虫应用的时候，有很多人会选择<a href="https://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="noopener">Beautiful Soup</a>或<a href="http://lxml.de/" target="_blank" rel="noopener">Lxml</a>来进行匹配和信息的提取，前者简单方便但是性能较差，后者既好用性能也好，但是安装稍嫌麻烦。</p><h3 id="四：-文献及工具"><a href="#四：-文献及工具" class="headerlink" title="四： 文献及工具"></a>四： 文献及工具</h3><p><a href="https://regex101.com/" target="_blank" rel="noopener">在线正则表达式：https://regex101.com/</a><br><a href="https://regex101.com/settings" target="_blank" rel="noopener">设置里面可以切换语言</a></p><p><a href="https://gist.github.com/JavaCS3/e36e494e78a02049950bfa7c7ebeb929" target="_blank" rel="noopener">实用文档：https://gist.github.com/JavaCS3/e36e494e78a02049950bfa7c7ebeb929</a></p><p><a href="https://www.bilibili.com/video/BV1ef4y1U7V4" target="_blank" rel="noopener">视频教程：https://www.bilibili.com/video/BV1ef4y1U7V4</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;本文转载于GitHub项目&lt;a href=&quot;https://github.com/jackfrued/Python-100-Days&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python - 100天从新手到大
      
    
    </summary>
    
    
      <category term="python" scheme="https://closer_laps.gitee.io/categories/python/"/>
    
      <category term="正则表达式" scheme="https://closer_laps.gitee.io/categories/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="python" scheme="https://closer_laps.gitee.io/tags/python/"/>
    
      <category term="正则表达式" scheme="https://closer_laps.gitee.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>python处理excle实例之字符串减法</title>
    <link href="https://closer_laps.gitee.io/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E5%A4%84%E7%90%86excle%E5%AE%9E%E4%BE%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%8F%E6%B3%95/"/>
    <id>https://closer_laps.gitee.io/2020/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%E5%A4%84%E7%90%86excle%E5%AE%9E%E4%BE%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%8F%E6%B3%95/</id>
    <published>2020-02-22T16:09:19.000Z</published>
    <updated>2020-03-05T11:58:40.568Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%2Bexcel.jpg" srcset="/img/loading.gif" alt="python+excel"></p><a id="more"></a><div class="hljs"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> load_workbook<span class="hljs-comment"># 求字符串A-B</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_A_cut_B</span><span class="hljs-params">(a, b)</span>:</span>    <span class="hljs-keyword">if</span> b:        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a:            <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> b:                a = a.replace(x, <span class="hljs-string">""</span>)    <span class="hljs-keyword">return</span> a<span class="hljs-comment"># 写入模式打开output.txt</span><span class="hljs-comment"># f = open("output.txt", "w")</span><span class="hljs-comment"># 打开excel名为test</span>wb = load_workbook(filename=<span class="hljs-string">'test.xlsx'</span>)<span class="hljs-comment"># 打开工作表Sheet1</span>sheet = wb[<span class="hljs-string">'Sheet1'</span>]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>, <span class="hljs-number">36</span>):    temp = <span class="hljs-string">'C'</span> + str(i)    <span class="hljs-comment"># 将temp单元格的内容存入str1</span>    str1 = sheet[temp].value    str0 = <span class="hljs-string">"张 朱 颜 赵 杨 施 胡 何 秦 刘 夏 鹏 李 唐 许 王 邓 顾"</span>    z = str_A_cut_B(str0, str1)    <span class="hljs-comment"># 若单元格为空，换行输出</span>    <span class="hljs-keyword">if</span> str1:        <span class="hljs-comment"># 输出格式</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(z)):            print(z[j], end=<span class="hljs-string">' '</span>)  <span class="hljs-comment"># 不换行输出</span>            <span class="hljs-comment"># print(z[j], end=' ', file=f)</span>        print(<span class="hljs-string">'\n'</span>, end=<span class="hljs-string">''</span>)        <span class="hljs-comment"># print('\n', end='', file=f)</span>    <span class="hljs-keyword">else</span>:        print(<span class="hljs-string">'\n'</span>, end=<span class="hljs-string">''</span>)        <span class="hljs-comment"># print('\n', end='', file=f)</span><span class="hljs-comment"># f.close()</span></code></pre></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://closer_laps.coding.net/p/picture/d/picture/git/raw/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Python/python%2Bexcel.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt=&quot;python+excel&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://closer_laps.gitee.io/categories/python/"/>
    
      <category term="excel" scheme="https://closer_laps.gitee.io/categories/python/excel/"/>
    
    
      <category term="python" scheme="https://closer_laps.gitee.io/tags/python/"/>
    
      <category term="excel" scheme="https://closer_laps.gitee.io/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>如何在GitHub搜索开源项目</title>
    <link href="https://closer_laps.gitee.io/2020/02/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Github/%E5%A6%82%E4%BD%95%E5%9C%A8GitHub%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <id>https://closer_laps.gitee.io/2020/02/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Github/%E5%A6%82%E4%BD%95%E5%9C%A8GitHub%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-02-20T07:30:07.000Z</published>
    <updated>2020-02-20T08:24:03.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一：-如何使用搜索栏"><a href="#一：-如何使用搜索栏" class="headerlink" title="一： 如何使用搜索栏"></a>一： 如何使用搜索栏</h2><p>所有搜索需求用空格隔开。</p><p>搜索栏输入：</p><ol><li><p>搜索项目名里面包含python、项目readme里面包含python、描述里面包含python<br><code>in:name python</code>、<code>in:readme python</code>、<code>in:description 爬虫</code>/<code>in:des 爬虫</code><br>PS：description描述里面包含比较准确</p></li><li><p>stars数大于1000、forks数大于xxx<br><code>stars:&gt;1000</code>、<code>forks:&gt;xxx</code></p></li><li><p>指定编程语言<br><code>language:python</code></p></li><li><p>最后更新时间限定<br><code>pushed:&gt;2020-01-01</code></p></li><li><p>限定国内开发者<br><code>location:China</code></p></li></ol><h2 id="二：-chrome插件推荐"><a href="#二：-chrome插件推荐" class="headerlink" title="二： chrome插件推荐"></a>二： chrome插件推荐</h2><ul><li>Octotree</li><li>GitZip for github<br>双击你想下载的文件后面空白的地方，文件前方会出现√，右下角出现<code>Download checked items</code>即可下载。</li><li>英文不好的小伙伴推荐沙拉查词</li></ul><h2 id="三：-git-clone速度慢的解决方案"><a href="#三：-git-clone速度慢的解决方案" class="headerlink" title="三： git clone速度慢的解决方案"></a>三： git clone速度慢的解决方案</h2><p>登录<a href="https://gitee.com/" target="_blank" rel="noopener">Gitee</a> -&gt; 新建仓库 -&gt; 拉到最下的创建上面，点击导入已有仓库 -&gt; 填入你想git clone的GitHub仓库地址 -&gt; 本地，git clone。</p><h2 id="四：-参考视频"><a href="#四：-参考视频" class="headerlink" title="四： 参考视频"></a>四： 参考视频</h2><p><a href="https://www.bilibili.com/video/av75587104" target="_blank" rel="noopener">https://www.bilibili.com/video/av75587104</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一：-如何使用搜索栏&quot;&gt;&lt;a href=&quot;#一：-如何使用搜索栏&quot; class=&quot;headerlink&quot; title=&quot;一： 如何使用搜索栏&quot;&gt;&lt;/a&gt;一： 如何使用搜索栏&lt;/h2&gt;&lt;p&gt;所有搜索需求用空格隔开。&lt;/p&gt;&lt;p&gt;搜索栏输入：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="github" scheme="https://closer_laps.gitee.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装完以后的基础配置</title>
    <link href="https://closer_laps.gitee.io/2020/02/17/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/ubuntu%E5%AE%89%E8%A3%85%E5%AE%8C%E4%BB%A5%E5%90%8E%E7%9A%84%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <id>https://closer_laps.gitee.io/2020/02/17/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/ubuntu%E5%AE%89%E8%A3%85%E5%AE%8C%E4%BB%A5%E5%90%8E%E7%9A%84%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</id>
    <published>2020-02-17T03:00:33.000Z</published>
    <updated>2020-03-12T10:55:01.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>先试用ubuntu，打开软件目录 -&gt; 磁盘，右上角菜单。然后格式化磁盘;擦除 -&gt; 不要覆盖…(快速);分区 -&gt; 硬盘2T以下MBR/DOS、2T以上GPT</li><li>不要连接网络 -&gt; 正常安装 -&gt; 其他选项</li></ol><h2 id="一：-安装类型"><a href="#一：-安装类型" class="headerlink" title="一： 安装类型"></a>一： 安装类型</h2><ol><li>/boot分区（引导）-&gt;512MB-&gt;主分区-&gt;空间起始位置-&gt;Ext4日志文件系统-&gt;/boot。</li><li>/ 根分区（相当于windows的c盘）-&gt;102400MB-&gt;主分区-&gt;空间起始位置-&gt;XFS日志文件系统-&gt;/。</li><li>swap分区（桌面系统不分，服务器必分）-&gt;2048MB-&gt;逻辑分区-&gt;空间起始位置-&gt;交换空间。</li><li>/home分区（存储空间，剩余都给它）-&gt;max MB-&gt;主分区-&gt;空间起始位置-&gt;XFS日志文件系统-&gt;/home。</li><li>现在安装。</li></ol><h2 id="二：-基础配置"><a href="#二：-基础配置" class="headerlink" title="二： 基础配置"></a>二： 基础配置</h2><h3 id="2-1-设置root用户密码"><a href="#2-1-设置root用户密码" class="headerlink" title="2.1 设置root用户密码"></a>2.1 设置root用户密码</h3><p><code>sudo passwd root</code><br><code>su</code></p><a id="more"></a><h3 id="2-2-修改镜像源"><a href="#2-2-修改镜像源" class="headerlink" title="2.2 修改镜像源"></a>2.2 修改镜像源</h3><ol><li><code>sudo nano /etc/apt/sources.list</code></li><li>将原文件所有内容注释掉；</li><li>复制<a href="https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.2f191b11mRGGjV" target="_blank" rel="noopener">阿里巴巴镜像源</a></li><li>黏贴到终端，<code>ctrl</code>+<code>o</code>保存，回车确定,<code>ctrl</code>+<code>x</code>。</li></ol><h3 id="2-3-更新源和系统"><a href="#2-3-更新源和系统" class="headerlink" title="2.3 更新源和系统"></a>2.3 更新源和系统</h3><p><code>sudo apt update</code><br><code>sudo apt upgrade</code><br><code>sudo apt dist-upgrade</code><br><code>sudo apt autoremove</code> # 清理不需要的旧组件<br><code>reboot</code> # 重启</p><h3 id="2-4-安装输入法"><a href="#2-4-安装输入法" class="headerlink" title="2.4 安装输入法"></a>2.4 安装输入法</h3><ol><li>卸载自带ibus<br><code>sudo apt remove ibus</code></li><li>安装fcitx<br><code>sudo apt install fcitx-bin fcitx-table</code></li><li>安装Google拼音<br><code>sudo apt install fcitx-googlepinyin</code></li><li><code>sudo im-config</code>-&gt;确定-&gt;yes-&gt;选择fcitx,确定-&gt;reboot重启。</li></ol><h3 id="2-5-安装Google浏览器"><a href="#2-5-安装Google浏览器" class="headerlink" title="2.5 安装Google浏览器"></a>2.5 安装Google浏览器</h3><ol><li>打开 <a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">https://www.google.cn/intl/zh-CN/chrome/</a></li><li>下载-&gt;64位.deb-&gt;接受并安装。</li><li>在下载文件夹内打开终端。</li><li><code>sudo dpkg -i google-chrome-stable_current_amd64.deb</code></li></ol><h3 id="2-6-设置语言"><a href="#2-6-设置语言" class="headerlink" title="2.6 设置语言"></a>2.6 设置语言</h3><p>设置-&gt;区域和语言-&gt;管理已安装的语言-&gt;安装。</p><h3 id="2-7-安装vlc"><a href="#2-7-安装vlc" class="headerlink" title="2.7 安装vlc"></a>2.7 安装vlc</h3><p><code>sudo apt install vlc</code></p><h3 id="2-8-关闭ubuntu内部错误"><a href="#2-8-关闭ubuntu内部错误" class="headerlink" title="2.8 关闭ubuntu内部错误"></a>2.8 关闭ubuntu内部错误</h3><ol><li><code>sudo nano /etc/default/apport</code></li><li>enable=1改为0</li><li><code>ctrl</code>+<code>o</code>保存，回车确定,<code>ctrl</code>+<code>x</code>。</li></ol><h3 id="2-9-安装新立得软件包"><a href="#2-9-安装新立得软件包" class="headerlink" title="2.9 安装新立得软件包"></a>2.9 安装新立得软件包</h3><p><code>sudo apt install synaptic</code></p><h3 id="2-10-安装aria2和ariang及配置"><a href="#2-10-安装aria2和ariang及配置" class="headerlink" title="2.10 安装aria2和ariang及配置"></a>2.10 安装aria2和ariang及配置</h3><h4 id="2-10-1-安装aria2及其配置"><a href="#2-10-1-安装aria2及其配置" class="headerlink" title="2.10.1 安装aria2及其配置"></a>2.10.1 安装aria2及其配置</h4><p><code>sudo apt install aria2 -y</code></p><div class="hljs"><pre><code class="hljs shell">mkdir /home/ubuntu/.aria2cd /home/ubuntu/.aria2touch aria2.conf aria2.session #创建配置文件与session文件vi /home/ubuntu/.aria2/aria2.conf</code></pre></div><p>aria2.conf配置文件如下</p><div class="hljs"><pre><code class="hljs sh">dir=~/下载/<span class="hljs-built_in">disable</span>-ipv6=<span class="hljs-literal">true</span><span class="hljs-comment">#打开rpc的目的是为了给web管理端用</span><span class="hljs-built_in">enable</span>-rpc=<span class="hljs-literal">true</span>rpc-allow-origin-all=<span class="hljs-literal">true</span>rpc-listen-all=<span class="hljs-literal">true</span><span class="hljs-comment">#rpc-listen-port=6800</span><span class="hljs-comment">#断点续传</span><span class="hljs-built_in">continue</span>=<span class="hljs-literal">true</span>input-file=/home/ubuntu/.aria2/aria2.sessionsave-session=/home/ubuntu/.aria2/aria2.session<span class="hljs-comment">#最大同时下载任务数</span>max-concurrent-downloads=20save-session-interval=120<span class="hljs-comment"># Http/FTP 相关</span>connect-timeout=120<span class="hljs-comment">#lowest-speed-limit=10K</span><span class="hljs-comment">#同服务器连接数</span>max-connection-per-server=10<span class="hljs-comment">#max-file-not-found=2</span><span class="hljs-comment">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span>min-split-size=10M<span class="hljs-comment">#单文件最大线程数, 路由建议值: 5</span>split=10check-certificate=<span class="hljs-literal">false</span><span class="hljs-comment">#http-no-cache=true</span></code></pre></div><p>后台运行aria2</p><p><code>aria2c --conf-path=/home/ubuntu/.aria2/aria2.conf -D</code></p><p>设置aria2开机自动启动</p><p><code>sudo vi /etc/rc.local</code></p><p>在最下面加入：</p><p><code>aria2c --conf-path=/home/ubuntu/.aria2/aria2.conf -D &amp;</code></p><h4 id="2-10-2-安装ariang及配置"><a href="#2-10-2-安装ariang及配置" class="headerlink" title="2.10.2 安装ariang及配置"></a>2.10.2 安装ariang及配置</h4><p><a href="http://ariang.mayswind.net/zh_Hans/" target="_blank" rel="noopener">参考官方文档</a></p><div class="hljs"><pre><code class="hljs sh">sudo apt install nodejssudo apt install npmsudo apt install gulp</code></pre></div><p>然后<a href="https://github.com/mayswind/AriaNg/releases" target="_blank" rel="noopener">下载源码解压并cd进入解压的文件夹</a></p><p>然后安装单文件版</p><p><code>npm install</code><br><code>gulp clean build-bundle</code></p><h2 id="三：-常用软件安装"><a href="#三：-常用软件安装" class="headerlink" title="三： 常用软件安装"></a>三： 常用软件安装</h2><p>PS：deb文件如何安装？</p><ul><li><code>sudo dpkg -i 软件名</code> # 安装</li><li><code>sudo apt install -f</code> # 修复依赖</li><li><code>sudo dpkg -r 软件名</code> # 进行卸载</li></ul><p>安装git<br><code>sudo apt install git</code></p><p>生成公匙<br><code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code><br><code>cat ~/.ssh/id_rsa.pub</code><br>添加到github，gitee，coding</p><p>下载安装wps<br><code>sudo dpkg -i wps-office_11.1.0.9080_amd64.deb</code></p><p>下载安装lantern<br><code>sudo dpkg -i lantern-installer-preview-64-bit.deb</code></p><p>下载安装zoom<br><code>sudo dpkg -i zoom_amd64.deb</code></p><p>下载安装python3<br><code>tar zxvf Python-3.8.2.tgz</code><br><code>cd Python-3.8.2\</code><br><code>sudo apt install gcc</code><br><code>sudo apt install make</code><br><code>./configure</code><br><code>make</code><br><code>sudo make install</code><br><code>sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100</code> # 设置python2为默认<br><code>sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150</code> # 设置python3为默认<br><code>sudo update-alternatives --config python</code> # 选择默认的python版本<br><code>sudo apt install python3-pip</code> # 安装pip3<br><code>pip3 install -U pip -i https://pypi.tuna.tsinghua.edu.cn/simple</code> # 升级pip<br>如果这个升级命令出现问题 ，可以使用以下命令：<code>sudo easy_install --upgrade pip</code><br><code>pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code> # pip3设置清华源</p><p>下载安装vscode<br><code>sudo dpkg -i code_1.42.1-1581432938_amd64.deb</code><br><code>ctrl+shift+p，然后输入lang -&gt; 选择configure Display language，然后安装简体中文，然后重启vscode</code></p><p>下载安装百度网盘<br><code>sudo dpkg -i baidunetdisk_linux_3.0.1.2.deb</code></p><p>下载安装hexo<br><code>sudo apt install nodejs</code><br><code>sudo apt install npm</code><br><code>sudo npm install hexo-cli -g</code><br><code>sudo npm install</code></p><p>下载安装qBittorrent</p><ul><li>qBittorrent Stable # 稳定版<br><code>sudo add-apt-repository ppa:qbittorrent-team/qbittorrent-stable</code></li><li>qBittorrent Unstable # 不稳定版<br><code>sudo add-apt-repository ppa:qbittorrent-team/qbittorrent-unstable</code></li></ul><p><code>sudo apt-get update &amp;&amp; sudo apt-get install qbittorrent</code></p><h2 id="四：-参考视频"><a href="#四：-参考视频" class="headerlink" title="四： 参考视频"></a>四： 参考视频</h2><p><strong><a href="https://www.bilibili.com/video/av48233413" target="_blank" rel="noopener">https://www.bilibili.com/video/av48233413</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;先试用ubuntu，打开软件目录 -&amp;gt; 磁盘，右上角菜单。然后格式化磁盘;擦除 -&amp;gt; 不要覆盖…(快速);分区 -&amp;gt; 硬盘2T以下MBR/DOS、2T以上GPT&lt;/li&gt;&lt;li&gt;不要连接网络 -&amp;gt; 正常安装 -&amp;gt; 其他选项&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;一：-安装类型&quot;&gt;&lt;a href=&quot;#一：-安装类型&quot; class=&quot;headerlink&quot; title=&quot;一： 安装类型&quot;&gt;&lt;/a&gt;一： 安装类型&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;/boot分区（引导）-&amp;gt;512MB-&amp;gt;主分区-&amp;gt;空间起始位置-&amp;gt;Ext4日志文件系统-&amp;gt;/boot。&lt;/li&gt;&lt;li&gt;/ 根分区（相当于windows的c盘）-&amp;gt;102400MB-&amp;gt;主分区-&amp;gt;空间起始位置-&amp;gt;XFS日志文件系统-&amp;gt;/。&lt;/li&gt;&lt;li&gt;swap分区（桌面系统不分，服务器必分）-&amp;gt;2048MB-&amp;gt;逻辑分区-&amp;gt;空间起始位置-&amp;gt;交换空间。&lt;/li&gt;&lt;li&gt;/home分区（存储空间，剩余都给它）-&amp;gt;max MB-&amp;gt;主分区-&amp;gt;空间起始位置-&amp;gt;XFS日志文件系统-&amp;gt;/home。&lt;/li&gt;&lt;li&gt;现在安装。&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;二：-基础配置&quot;&gt;&lt;a href=&quot;#二：-基础配置&quot; class=&quot;headerlink&quot; title=&quot;二： 基础配置&quot;&gt;&lt;/a&gt;二： 基础配置&lt;/h2&gt;&lt;h3 id=&quot;2-1-设置root用户密码&quot;&gt;&lt;a href=&quot;#2-1-设置root用户密码&quot; class=&quot;headerlink&quot; title=&quot;2.1 设置root用户密码&quot;&gt;&lt;/a&gt;2.1 设置root用户密码&lt;/h3&gt;&lt;p&gt;&lt;code&gt;sudo passwd root&lt;/code&gt;&lt;br&gt;&lt;code&gt;su&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://closer_laps.gitee.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux" scheme="https://closer_laps.gitee.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/"/>
    
    
      <category term="Linux" scheme="https://closer_laps.gitee.io/tags/Linux/"/>
    
      <category term="读书笔记" scheme="https://closer_laps.gitee.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
